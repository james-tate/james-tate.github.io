{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a hash entry with an explicit weight\n@param h is the 32-bit hash\n@param tcnt is the (optional) term-frequency count  (set to 1 if not using)\n@param weight is the weight associated with the hash","static":false,"name":"<init>","comment":"Create a hash entry with an explicit weight","params":[{"type_long":"int","name":"h","comment":"is the 32-bit hash","type_short":"int"},{"type_long":"int","name":"tcnt","comment":"is the (optional) term-frequency count  (set to 1 if not using)","type_short":"int"},{"type_long":"double","name":"weight","comment":"is the weight associated with the hash","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a hash entry with a weight calculated from its term frequency and idf frequency\n@param h is the 32-bit hash\n@param tcnt is the term frequency count\n@param dcnt is the (normalized) idf frequency   (should be generated by an IDFLookup)\n@param w is the factory used to generate the final weight","static":false,"name":"<init>","comment":"Create a hash entry with a weight calculated from its term frequency and idf frequency","params":[{"type_long":"int","name":"h","comment":"is the 32-bit hash","type_short":"int"},{"type_long":"int","name":"tcnt","comment":"is the term frequency count","type_short":"int"},{"type_long":"int","name":"dcnt","comment":"is the (normalized) idf frequency   (should be generated by an IDFLookup)","type_short":"int"},{"type_long":"generic.lsh.vector.WeightFactory","name":"w","comment":"is the factory used to generate the final weight","type_short":"WeightFactory"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Eclipse-generated hash function.\n@return ","static":false,"name":"hashCode","comment":"Eclipse-generated hash function.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Eclipse-generated equals function.\n@param obj\n@return ","static":false,"name":"equals","comment":"Eclipse-generated equals function.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getHash","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getTF","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getIDF","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getCoeff","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"","static":false,"name":"saveXml","comment":"","params":[{"type_long":"java.io.Writer","name":"fwrite","comment":"","type_short":"Writer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveSQL","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreXml","comment":"","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"},{"type_long":"generic.lsh.vector.WeightFactory","name":"w","comment":"","type_short":"WeightFactory"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restore entry but recalculate the idf\n@param parser \/\/ xml state\n@param w \/\/ weight factory to calculate coefficient with\n@param lookup \/\/ lookup object to recalculate idf","static":false,"name":"restoreXml","comment":"Restore entry but recalculate the idf","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"\/\/ xml state","type_short":"XmlPullParser"},{"type_long":"generic.lsh.vector.WeightFactory","name":"w","comment":"\/\/ weight factory to calculate coefficient with","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"lookup","comment":"\/\/ lookup object to recalculate idf","type_short":"IDFLookup"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"parseHash","comment":"","params":[{"type_long":"java.lang.String","name":"sql","comment":"","type_short":"String"},{"type_long":"int","name":"start","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"restoreSQL","comment":"","params":[{"type_long":"java.lang.String","name":"sql","comment":"","type_short":"String"},{"type_long":"int","name":"start","comment":"","type_short":"int"},{"type_long":"generic.lsh.vector.WeightFactory","name":"w","comment":"","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"lookup","comment":"","type_short":"IDFLookup"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"restoreBase64","comment":"","params":[{"type_long":"char[]","name":"buffer","comment":"","type_short":"char[]"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"int[]","name":"decoder","comment":"","type_short":"int[]"},{"type_long":"generic.lsh.vector.WeightFactory","name":"w","comment":"","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"lookup","comment":"","type_short":"IDFLookup"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"saveBase64","comment":"","params":[{"type_long":"char[]","name":"buffer","comment":"","type_short":"char[]"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"char[]","name":"encoder","comment":"","type_short":"char[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"HashEntry","comment":"","fields":[{"type_long":"int","javadoc":"","static":false,"name":"hash","comment":"","type_short":"int","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"tf","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"idf","comment":"","type_short":"short","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"coeff","comment":"","type_short":"double","constant_value":null}]}
