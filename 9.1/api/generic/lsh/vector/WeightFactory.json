{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateNorms","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return number of weights in the IDF portion of the table","static":false,"name":"getIDFSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"number of weights in the IDF portion of the table","type_short":"int"}},{"javadoc":"@return number of weights in the TF portion of the table","static":false,"name":"getTFSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"number of weights in the TF portion of the table","type_short":"int"}},{"javadoc":"@return number of floating-point entries needed to serialize the factory","static":false,"name":"getSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"number of floating-point entries needed to serialize the factory","type_short":"int"}},{"javadoc":"@param val\n@return the IDF weight at the given position","static":false,"name":"getIDFWeight","comment":"","params":[{"type_long":"short","name":"val","comment":"","type_short":"short"}],"throws":[],"return":{"type_long":"double","comment":"the IDF weight at the given position","type_short":"double"}},{"javadoc":"@param val is the term count (-1)\n@return the TF weight for the given count","static":false,"name":"getTFWeight","comment":"","params":[{"type_long":"short","name":"val","comment":"is the term count (-1)","type_short":"short"}],"throws":[],"return":{"type_long":"double","comment":"the TF weight for the given count","type_short":"double"}},{"javadoc":"Given an IDF position and a TF count, build the feature coefficient\n@param i is the IDF position\n@param t is the TF count\n@return the feature coefficient","static":false,"name":"getCoeff","comment":"Given an IDF position and a TF count, build the feature coefficient","params":[{"type_long":"short","name":"i","comment":"is the IDF position","type_short":"short"},{"type_long":"short","name":"t","comment":"is the TF count","type_short":"short"}],"throws":[],"return":{"type_long":"double","comment":"the feature coefficient","type_short":"double"}},{"javadoc":"@return the weight normalization factor","static":false,"name":"getWeightNorm","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the weight normalization factor","type_short":"double"}},{"javadoc":"@return the first feature flip penalty parameter","static":false,"name":"getFlipNorm0","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the first feature flip penalty parameter","type_short":"double"}},{"javadoc":"@return the first feature drop penalty parameter","static":false,"name":"getDiffNorm0","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the first feature drop penalty parameter","type_short":"double"}},{"javadoc":"@return the second feature flip penalty parameter","static":false,"name":"getFlipNorm1","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the second feature flip penalty parameter","type_short":"double"}},{"javadoc":"@return the second feature drop penalty parameter","static":false,"name":"getDiffNorm1","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the second feature drop penalty parameter","type_short":"double"}},{"javadoc":"@return the final score scaling factor","static":false,"name":"getScale","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the final score scaling factor","type_short":"double"}},{"javadoc":"@return the final score addend","static":false,"name":"getAddend","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"the final score addend","type_short":"double"}},{"javadoc":"","static":false,"name":"setLogarithmicTFWeights","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Serialize this object as XML to a Writer\n@param fwrite is the Writer\n@throws IOException","static":false,"name":"saveXml","comment":"Serialize this object as XML to a Writer","params":[{"type_long":"java.io.Writer","name":"fwrite","comment":"is the Writer","type_short":"Writer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Condense weight table down to array of doubles\n@return array of doubles","static":false,"name":"toArray","comment":"Condense weight table down to array of doubles","params":[],"throws":[],"return":{"type_long":"double[]","comment":"array of doubles","type_short":"double[]"}},{"javadoc":"Initialize the WeightTable from an array of doubles\n@param weightArray","static":false,"name":"set","comment":"Initialize the WeightTable from an array of doubles","params":[{"type_long":"double[]","name":"weightArray","comment":"","type_short":"double[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Build (deserialize) this object from an XML stream\n@param parser is the XML parser","static":false,"name":"restoreXml","comment":"Build (deserialize) this object from an XML stream","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"is the XML parser","type_short":"XmlPullParser"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"WeightFactory","comment":"","fields":[{"type_long":"double[]","javadoc":"","static":false,"name":"idfweight","comment":"","type_short":"double[]","constant_value":null},{"type_long":"double[]","javadoc":"","static":false,"name":"tfweight","comment":"","type_short":"double[]","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"weightnorm","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probflip0","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probflip1","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probdiff0","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probdiff1","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"scale","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"addend","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probflip0_norm","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probflip1_norm","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probdiff0_norm","comment":"","type_short":"double","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"probdiff1_norm","comment":"","type_short":"double","constant_value":null}]}
