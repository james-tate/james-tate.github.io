{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"Returns a string that identifies the algorithm, independent of\n implementation details.\n@return the name of the algorithm","static":false,"name":"getAlgorithm","comment":"Returns a string that identifies the algorithm, independent of\n implementation details.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the algorithm","type_short":"String"}},{"javadoc":"Returns the length of the digest in bytes.\n@return the digest length in bytes","static":false,"name":"getDigestLength","comment":"Returns the length of the digest in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"the digest length in bytes","type_short":"int"}},{"javadoc":"Updates the digest using the specified byte.\n@param input the byte with which to update the digest","static":false,"name":"update","comment":"Updates the digest using the specified byte.","params":[{"type_long":"byte","name":"input","comment":"the byte with which to update the digest","type_short":"byte"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified short.\n@param input the short with which to update the digest (big endian)","static":false,"name":"update","comment":"Updates the digest using the specified short.","params":[{"type_long":"short","name":"input","comment":"the short with which to update the digest (big endian)","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified int.\n@param input the int with which to update the digest (big endian)","static":false,"name":"update","comment":"Updates the digest using the specified int.","params":[{"type_long":"int","name":"input","comment":"the int with which to update the digest (big endian)","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified long.\n@param input the long with which to update the digest (big endian)","static":false,"name":"update","comment":"Updates the digest using the specified long.","params":[{"type_long":"long","name":"input","comment":"the long with which to update the digest (big endian)","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified array of bytes. Do not use a monitor\n@param input the array of bytes","static":false,"name":"update","comment":"Updates the digest using the specified array of bytes. Do not use a monitor","params":[{"type_long":"byte[]","name":"input","comment":"the array of bytes","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length). Do not use a monitor.\n@param input the array of bytes\n@param offset the offset to start from in the array of bytes\n@param len the number of bytes to use, starting at offset","static":false,"name":"update","comment":"Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length). Do not use a monitor.","params":[{"type_long":"byte[]","name":"input","comment":"the array of bytes","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"the offset to start from in the array of bytes","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to use, starting at offset","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified array of bytes.\n@param input the array of bytes\n@param monitor the monitor to check during loops\n@throws CancelledException","static":false,"name":"update","comment":"Updates the digest using the specified array of bytes.","params":[{"type_long":"byte[]","name":"input","comment":"the array of bytes","type_short":"byte[]"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor to check during loops","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length).\n@param input the array of bytes\n@param offset the offset to start from in the array of bytes\n@param len the number of bytes to use, starting at offset\n@param monitor the monitor to check during loops\n@throws CancelledException","static":false,"name":"update","comment":"Updates the digest using the specified array of bytes, starting at the\n specified offset (and for the specified length).","params":[{"type_long":"byte[]","name":"input","comment":"the array of bytes","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"the offset to start from in the array of bytes","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to use, starting at offset","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor to check during loops","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.\n@return the array of bytes for the resulting hash value","static":false,"name":"digest","comment":"Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"the array of bytes for the resulting hash value","type_short":"byte[]"}},{"javadoc":"Completes the hash computation by performing final operations such as\n padding, and returns (up to) the first 8 bytes as a big-endian long\n value.  The digest is reset after this call is made.\n@return the digest value as a long value","static":false,"name":"digestLong","comment":"Completes the hash computation by performing final operations such as\n padding, and returns (up to) the first 8 bytes as a big-endian long\n value.  The digest is reset after this call is made.","params":[],"throws":[],"return":{"type_long":"long","comment":"the digest value as a long value","type_short":"long"}},{"javadoc":"Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.\n@param buf output buffer for the computed digest\n@param offset offset into the output buffer to begin storing the digest\n@param len number of bytes within buf allocated for the digest\n@return the number of bytes placed into buf","static":false,"name":"digest","comment":"Completes the hash computation by performing final operations such as\n padding.  The digest is reset after this call is made.","params":[{"type_long":"byte[]","name":"buf","comment":"output buffer for the computed digest","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"offset into the output buffer to begin storing the digest","type_short":"int"},{"type_long":"int","name":"len","comment":"number of bytes within buf allocated for the digest","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the number of bytes placed into buf","type_short":"int"}},{"javadoc":"Resets the digest for further use.","static":false,"name":"reset","comment":"Resets the digest for further use.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MessageDigest","comment":"","fields":[]}
