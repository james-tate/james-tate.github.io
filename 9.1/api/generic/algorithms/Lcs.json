{"implements":[],"javadoc":"Abstract class for finding the Longest Common Subsequence (LCS) between two \n sequences of Matchable objects, <code>x<\/code> and <code>y<\/code>.\n \n <p>The performance of this algorithm is O(n^2).  Thus, large inputs can cause much processor\n and memory usage.   This class has an upper limit (see {@link #getSizeLimit()}) to prevent\n accidental system failure.\n@param <T> the type of the objects being compared","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the length of the x sequence\n@return the length of the x sequence","static":false,"name":"lengthOfX","comment":"Returns the length of the x sequence","params":[],"throws":[],"return":{"type_long":"int","comment":"the length of the x sequence","type_short":"int"}},{"javadoc":"Returns the length of the y sequence\n@return the length of the y sequence","static":false,"name":"lengthOfY","comment":"Returns the length of the y sequence","params":[],"throws":[],"return":{"type_long":"int","comment":"the length of the y sequence","type_short":"int"}},{"javadoc":"Gets the value of the x sequence at the given index, where index is 1-based\n@param index the 1-based position of interest in the x sequence\n@return the value in the x sequence at <code>index<\/code>","static":false,"name":"valueOfX","comment":"Gets the value of the x sequence at the given index, where index is 1-based","params":[{"type_long":"int","name":"index","comment":"the 1-based position of interest in the x sequence","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"the value in the x sequence at index","type_short":"T"}},{"javadoc":"Gets the value of the y sequence at the given index, where index is 1-based\n@param index the 1-based position of interest in the Y sequence\n@return the value in the y sequence at <code>index<\/code>","static":false,"name":"valueOfY","comment":"Gets the value of the y sequence at the given index, where index is 1-based","params":[{"type_long":"int","name":"index","comment":"the 1-based position of interest in the Y sequence","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"the value in the y sequence at index","type_short":"T"}},{"javadoc":"Returns true if the value of x and y match\n@param x the x-sequence element of interest\n@param y the y-sequence element of interest\n@return true if <code>x<\/code> matches <code>y<\/code>; false otherwise","static":false,"name":"matches","comment":"Returns true if the value of x and y match","params":[{"type_long":"T","name":"x","comment":"the x-sequence element of interest","type_short":"T"},{"type_long":"T","name":"y","comment":"the y-sequence element of interest","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"true if x matches y; false otherwise","type_short":"boolean"}},{"javadoc":"Compute the LCS\n@param monitor the task monitor","static":false,"name":"calculateLCS","comment":"Compute the LCS","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines an limit in the overall size of the inputs that above which no processing will\n take place.  Any value over the limit will produce an empty LCS.\n@return true if too big","static":false,"name":"tooBig","comment":"Defines an limit in the overall size of the inputs that above which no processing will\n take place.  Any value over the limit will produce an empty LCS.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if too big","type_short":"boolean"}},{"javadoc":"Changes the size limit of this LCS, past which no calculations will be performed\n@param newLimit the new limit","static":false,"name":"setSizeLimit","comment":"Changes the size limit of this LCS, past which no calculations will be performed","params":[{"type_long":"int","name":"newLimit","comment":"the new limit","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current size limit, past which no calculations will be performed\n@return the size limit\n@see #setSizeLimit(int)","static":false,"name":"getSizeLimit","comment":"Returns the current size limit, past which no calculations will be performed","params":[],"throws":[],"return":{"type_long":"int","comment":"the size limit","type_short":"int"}},{"javadoc":"Returns a list of the longest common subsequence.  This result will be empty if the \n {@link #getSizeLimit()} has been reached.\n@return the list","static":false,"name":"getLcs","comment":"Returns a list of the longest common subsequence.  This result will be empty if the \n #getSizeLimit() has been reached.","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"the list","type_short":"List"}},{"javadoc":"Returns a list of the longest common subsequence. This result will be empty if the \n {@link #getSizeLimit()} has been reached.\n@param monitor the task monitor\n@return the LCS list\n@throws CancelledException if the monitor is cancelled","static":false,"name":"getLcs","comment":"Returns a list of the longest common subsequence. This result will be empty if the \n #getSizeLimit() has been reached.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor is cancelled","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<T>","comment":"the LCS list","type_short":"List"}},{"javadoc":"Get the actual LCS based upon the already created matrix\n@param monitor the task monitor\n@return the LCS list\n@throws CancelledException if the monitor is cancelled","static":false,"name":"doGetLcs","comment":"Get the actual LCS based upon the already created matrix","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor is cancelled","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<T>","comment":"the LCS list","type_short":"List"}}],"name":"Lcs","comment":"Abstract class for finding the Longest Common Subsequence (LCS) between two \n sequences of Matchable objects, x and y.\n \n The performance of this algorithm is O(n^2).  Thus, large inputs can cause much processor\n and memory usage.   This class has an upper limit (see #getSizeLimit()) to prevent\n accidental system failure.","fields":[{"type_long":"int","javadoc":"Somewhat arbitrary upper-bound restriction.  1M is 1000 * 1000","static":true,"name":"DEFAULT_SIZE_LIMIT","comment":"Somewhat arbitrary upper-bound restriction.  1M is 1000 * 1000","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"sizeLimit","comment":"","type_short":"int","constant_value":null},{"type_long":"int[][]","javadoc":"","static":false,"name":"c","comment":"","type_short":"int[][]","constant_value":null}]}
