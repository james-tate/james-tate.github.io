{"implements":["java.lang.Iterable"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createComparator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Comparator","comment":"","type_short":"Comparator"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"initialCapacity","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"initialCapacity","comment":"","type_short":"int"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"generic.stl.VectorSTL<T>","name":"other","comment":"","type_short":"VectorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"reserve","comment":"","params":[{"type_long":"int","name":"capacity","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"begin","comment":"","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"","type_short":"IteratorSTL"}},{"javadoc":"","static":false,"name":"end","comment":"","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"","type_short":"IteratorSTL"}},{"javadoc":"","static":false,"name":"rBegin","comment":"","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"","type_short":"IteratorSTL"}},{"javadoc":"","static":false,"name":"rEnd","comment":"","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"","type_short":"IteratorSTL"}},{"javadoc":"","static":false,"name":"clear","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"size","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"empty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"front","comment":"","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"back","comment":"","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"setBack","comment":"","params":[{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"push_back","comment":"","params":[{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"pop_back","comment":"","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"insert","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"appendAll","comment":"","params":[{"type_long":"generic.stl.VectorSTL<T>","name":"vector","comment":"","type_short":"VectorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"insertAll","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"pos","comment":"","type_short":"IteratorSTL"},{"type_long":"generic.stl.VectorSTL<T>","name":"vector","comment":"","type_short":"VectorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"insert","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"iterator","comment":"","type_short":"IteratorSTL"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"set","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"set","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"iter","comment":"","type_short":"IteratorSTL"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"erase","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"erase","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"it","comment":"","type_short":"IteratorSTL"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"","type_short":"IteratorSTL"}},{"javadoc":"","static":false,"name":"erase","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"start","comment":"","type_short":"IteratorSTL"},{"type_long":"generic.stl.IteratorSTL<T>","name":"end","comment":"","type_short":"IteratorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sorts the vector. To use this method T must be comparable.\n@throws UnsupportedOperationException if T is not comparable;","static":false,"name":"sort","comment":"Sorts the vector. To use this method T must be comparable.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"sort","comment":"","params":[{"type_long":"java.util.Comparator<T>","name":"comparator","comment":"","type_short":"Comparator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"generic.stl.VectorSTL<T>","comment":"","type_short":"VectorSTL"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<T>","comment":"","type_short":"Iterator"}},{"javadoc":"Returns an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.  This method assumes the vector is sorted in ascending order.\n@param key the key for which to find the lower bound\n@return an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.\n@throws UnsupportedOperationException if T is not comparable","static":false,"name":"lower_bound","comment":"Returns an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.  This method assumes the vector is sorted in ascending order.","params":[{"type_long":"T","name":"key","comment":"the key for which to find the lower bound","type_short":"T"},{"type_long":"java.util.Comparator<T>","name":"comparator","comment":"","type_short":"Comparator"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.","type_short":"IteratorSTL"}},{"javadoc":"Returns an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.  This method assumes the vector is sorted in ascending order.\n@param key the key for which to find the lower bound\n@return an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.","static":false,"name":"lower_bound","comment":"Returns an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.  This method assumes the vector is sorted in ascending order.","params":[{"type_long":"T","name":"key","comment":"the key for which to find the lower bound","type_short":"T"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"an iterator postioned at the item in the vector that is the smallest key less or equal than\n the given key.","type_short":"IteratorSTL"}},{"javadoc":"Returns an iterator postioned at the item in the vector that is the smallest key less than\n the given key.  This method assumes the vector is sorted in ascending order.\n@param key the key for which to find the upper bound\n@return an iterator postioned at the item in the vector that is the smallest key less than\n the given key.\n@throws UnsupportedOperationException if T is not comparable","static":false,"name":"upper_bound","comment":"Returns an iterator postioned at the item in the vector that is the smallest key less than\n the given key.  This method assumes the vector is sorted in ascending order.","params":[{"type_long":"T","name":"key","comment":"the key for which to find the upper bound","type_short":"T"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"an iterator postioned at the item in the vector that is the smallest key less than\n the given key.","type_short":"IteratorSTL"}},{"javadoc":"Returns an iterator postioned at the item in the vector that is the smallest key less than\n the given key.  This method assumes the vector is sorted in ascending order.\n@param key the key for which to find the upper bound\n@return an iterator postioned at the item in the vector that is the smallest key less than\n the given key.\n@throws UnsupportedOperationException if T is not comparable","static":false,"name":"upper_bound","comment":"Returns an iterator postioned at the item in the vector that is the smallest key less than\n the given key.  This method assumes the vector is sorted in ascending order.","params":[{"type_long":"T","name":"key","comment":"the key for which to find the upper bound","type_short":"T"},{"type_long":"java.util.Comparator<T>","name":"comparator","comment":"","type_short":"Comparator"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"an iterator postioned at the item in the vector that is the smallest key less than\n the given key.","type_short":"IteratorSTL"}},{"javadoc":"","static":true,"name":"merge","comment":"","params":[{"type_long":"generic.stl.VectorSTL<K>","name":"v1","comment":"","type_short":"VectorSTL"},{"type_long":"generic.stl.VectorSTL<K>","name":"v2","comment":"","type_short":"VectorSTL"},{"type_long":"generic.stl.VectorSTL<K>","name":"destination","comment":"","type_short":"VectorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"merge","comment":"","params":[{"type_long":"generic.stl.VectorSTL<K>","name":"v1","comment":"","type_short":"VectorSTL"},{"type_long":"generic.stl.VectorSTL<K>","name":"v2","comment":"","type_short":"VectorSTL"},{"type_long":"generic.stl.VectorSTL<K>","name":"destination","comment":"","type_short":"VectorSTL"},{"type_long":"java.util.Comparator<K>","name":"comparator","comment":"","type_short":"Comparator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"resize","comment":"","params":[{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"T","name":"value","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"insert","comment":"","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"pos","comment":"","type_short":"IteratorSTL"},{"type_long":"T[]","name":"list","comment":"","type_short":"T[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"assign","comment":"","params":[{"type_long":"generic.stl.VectorSTL<T>","name":"otherVector","comment":"","type_short":"VectorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"VectorSTL","comment":"","fields":[{"type_long":"java.util.Comparator","javadoc":"","static":true,"name":"comparableComparator","comment":"","type_short":"Comparator","constant_value":null},{"type_long":"java.util.ArrayList<T>","javadoc":"","static":false,"name":"data","comment":"","type_short":"ArrayList","constant_value":null}]}
