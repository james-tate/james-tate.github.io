{"implements":["generic.cache.Factory"],"javadoc":"An object that will cache values returned from the given factory.  This class lets you combine\n the work of building items as needed with cache maintenance operations, such as get and put \n (and move, in the case of a sized cache).\n   \n <P>\n The caching of this class\n is bound by the size parameter of the constructor.   Further, the caching strategy is an \n Most Recently Used strategy, meaning that the least accessed cache items will fall off of the\n cache.\n@param <K> the key used to get a value\n@param <V> the value returned for the given key","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"generic.cache.Factory<K,V>","name":"factory","comment":"","type_short":"Factory"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}}],"name":"FixedSizeMRUCachingFactory","comment":"An object that will cache values returned from the given factory.  This class lets you combine\n the work of building items as needed with cache maintenance operations, such as get and put \n (and move, in the case of a sized cache).\n   \n \n The caching of this class\n is bound by the size parameter of the constructor.   Further, the caching strategy is an \n Most Recently Used strategy, meaning that the least accessed cache items will fall off of the\n cache.","fields":[{"type_long":"ghidra.util.datastruct.LRUMap<K,V>","javadoc":"","static":false,"name":"cache","comment":"","type_short":"LRUMap","constant_value":null},{"type_long":"generic.cache.Factory<K,V>","javadoc":"","static":false,"name":"delegate","comment":"","type_short":"Factory","constant_value":null}]}
