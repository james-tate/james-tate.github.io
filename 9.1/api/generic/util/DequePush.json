{"implements":["java.lang.AutoCloseable"],"javadoc":"A context utility allowing stack management via a try-with-resources block\n@param <E> the type of element pushed to the stack","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.util.Deque<E>","name":"stack","comment":"","type_short":"Deque"},{"type_long":"E","name":"elem","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Push an element to the given stack\n@param stack the stack\n@param elem the element\n@return a context used to pop the element\n \n This is an idiomatic convenience, as in a try-with-resources block:\n <pre>\n {@code\n Deque<String> stack = new LinkedList<>();\n try(DequePush<?> p = DequePush.push(stack, \"Hello, World!\\n\")) {\n     System.out.println(stack.peek());\n }\n }\n <\/pre>\n \n This idiom can be very useful if there is complex logic between the push and pop. It's easy\n to forget to pop; however, this convenience comes at the cost of a heap allocation.","static":true,"name":"push","comment":"Push an element to the given stack","params":[{"type_long":"java.util.Deque<E>","name":"stack","comment":"the stack","type_short":"Deque"},{"type_long":"E","name":"elem","comment":"the element","type_short":"E"}],"throws":[],"return":{"type_long":"generic.util.DequePush<E>","comment":"a context used to pop the element\n \n This is an idiomatic convenience, as in a try-with-resources block:\n \n \n \n \n This idiom can be very useful if there is complex logic between the push and pop. It's easy\n to forget to pop; however, this convenience comes at the cost of a heap allocation.","type_short":"DequePush"}}],"name":"DequePush","comment":"A context utility allowing stack management via a try-with-resources block","fields":[{"type_long":"java.util.Deque<E>","javadoc":"","static":false,"name":"stack","comment":"","type_short":"Deque","constant_value":null}]}
