{"implements":[],"javadoc":"A collection of window related utility methods","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the title for the given window\n@param w the window\n@return the title","static":true,"name":"getTitle","comment":"Returns the title for the given window","params":[{"type_long":"java.awt.Window","name":"w","comment":"the window","type_short":"Window"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the title","type_short":"String"}},{"javadoc":"Returns the window parent of c.  If c is a window, then c is returned.\n\n <P>Warning: this differs from {@link SwingUtilities#windowForComponent(Component)} in\n that the latter method will not return the given component if it is a window.\n@param c the component\n@return the window","static":true,"name":"windowForComponent","comment":"Returns the window parent of c.  If c is a window, then c is returned.\n\n Warning: this differs from SwingUtilities#windowForComponent(Component) in\n that the latter method will not return the given component if it is a window.","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Window","comment":"the window","type_short":"Window"}},{"javadoc":"Returns the a rectangle representing the screen bounds for the entire screen space for \n all screens in use.  The result will include virtual space that may not be rendered on \n any physical hardware.   Said differently, the rectangle returned from this method will \n contain all visible display coordinates, as well as potentially coordinates that are \n virtual and not displayed on any physical screen.  The OS's window manager is responsible \n for controlling how the virtual space is created.\n@return the virtual screen bounds","static":true,"name":"getVirtualScreenBounds","comment":"Returns the a rectangle representing the screen bounds for the entire screen space for \n all screens in use.  The result will include virtual space that may not be rendered on \n any physical hardware.   Said differently, the rectangle returned from this method will \n contain all visible display coordinates, as well as potentially coordinates that are \n virtual and not displayed on any physical screen.  The OS's window manager is responsible \n for controlling how the virtual space is created.","params":[],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"the virtual screen bounds","type_short":"Rectangle"}},{"javadoc":"Returns a shape that represents the visible portion of the virtual screen bounds\n returned from {@link #getVirtualScreenBounds()}\n@return the visible shape of all screen devices","static":true,"name":"getVisibleScreenBounds","comment":"Returns a shape that represents the visible portion of the virtual screen bounds\n returned from #getVirtualScreenBounds()","params":[],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"the visible shape of all screen devices","type_short":"Shape"}},{"javadoc":"Gets the <b>usable<\/b> screen bounds for the screen in which the given component is \n showing.  Returns null if the given component is not showing.   Usable bounds are the \n screen bounds after subtracting insets (for things like menu bars and task bars).\n@param c the component\n@return the screen bounds; null if the component is not showing","static":true,"name":"getScreenBounds","comment":"Gets the usable screen bounds for the screen in which the given component is \n showing.  Returns null if the given component is not showing.   Usable bounds are the \n screen bounds after subtracting insets (for things like menu bars and task bars).","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"the screen bounds; null if the component is not showing","type_short":"Rectangle"}},{"javadoc":"","static":true,"name":"getScreenLocation","comment":"","params":[{"type_long":"java.awt.Component","name":"c","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"","type_short":"Point"}},{"javadoc":"Computes the point such that a rectangle with the given size would be centered on the\n screen.   The chosen screen in this case is the screen defined by\n <pre>  \n\tGraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n <\/pre>\n \n <p>If the given size is too big to fit on the screen in either dimension, \n then it will be placed at the 0 position for that dimension.\n@param d the size of the rectangle to center\n@return the upper-left point of the given centered dimension\n@see #centerOnScreen(Component, Dimension)","static":true,"name":"centerOnScreen","comment":"Computes the point such that a rectangle with the given size would be centered on the\n screen.   The chosen screen in this case is the screen defined by\n   \n\tGraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n \n \n If the given size is too big to fit on the screen in either dimension, \n then it will be placed at the 0 position for that dimension.","params":[{"type_long":"java.awt.Dimension","name":"d","comment":"the size of the rectangle to center","type_short":"Dimension"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the upper-left point of the given centered dimension","type_short":"Point"}},{"javadoc":"Computes the point such that a rectangle with the given size would be centered on the\n screen.   The chosen screen in this case is the screen defined by using the given \n component.  If the given size is too big to fit on the screen in either dimension, \n then it will be placed at the 0 position for that dimension.\n@param c the component that should be used to find the current screen\n@param d the size of the rectangle to center\n@return the upper-left point of the given centered dimension\n@see #centerOnScreen(Dimension)","static":true,"name":"centerOnScreen","comment":"Computes the point such that a rectangle with the given size would be centered on the\n screen.   The chosen screen in this case is the screen defined by using the given \n component.  If the given size is too big to fit on the screen in either dimension, \n then it will be placed at the 0 position for that dimension.","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component that should be used to find the current screen","type_short":"Component"},{"type_long":"java.awt.Dimension","name":"d","comment":"the size of the rectangle to center","type_short":"Dimension"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the upper-left point of the given centered dimension","type_short":"Point"}},{"javadoc":"","static":true,"name":"center","comment":"","params":[{"type_long":"java.awt.Rectangle","name":"area","comment":"","type_short":"Rectangle"},{"type_long":"java.awt.Dimension","name":"d","comment":"","type_short":"Dimension"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"","type_short":"Point"}},{"javadoc":"Creates a point that is centered over the given <tt>parent<\/tt> component, based upon\n the size of the given <tt>child<\/tt>.\n@param parent The component over which to center the child.\n@param child The component which will be centered over the parent\n@return a point that is centered over the given <tt>parent<\/tt> component, based upon\n the size of the given <tt>child<\/tt>.","static":true,"name":"centerOnComponent","comment":"Creates a point that is centered over the given parent component, based upon\n the size of the given child.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"The component over which to center the child.","type_short":"Component"},{"type_long":"java.awt.Component","name":"child","comment":"The component which will be centered over the parent","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"a point that is centered over the given parent component, based upon\n the size of the given child.","type_short":"Point"}},{"javadoc":"Update the component to be within visible bounds of the screen\n \n <P>This method differs from {@link #ensureOnScreen(Component, Rectangle)} in that \n the other method does not adjust the component's bounds like this method does.\n@param c the component to move on screen as necessary\n@throws IllegalArgumentException if the given component is not yet realized (see \n         {@link Component#isShowing()}","static":true,"name":"ensureOnScreen","comment":"Update the component to be within visible bounds of the screen\n \n This method differs from #ensureOnScreen(Component, Rectangle) in that \n the other method does not adjust the component's bounds like this method does.","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component to move on screen as necessary","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the bounds to be within visible bounds of the screen.  The given component is \n used to determine which screen to use for updating the bounds.\n \n <P>Note: the given comonent's bounds will not be adjusted by this method\n@param c the on screen component, used to determine which screen to check against the given \n        bounds\n@param bounds the bounds to adjust\n@throws IllegalArgumentException if the given component is not yet realized (see \n         {@link Component#isShowing()}","static":true,"name":"ensureOnScreen","comment":"Update the bounds to be within visible bounds of the screen.  The given component is \n used to determine which screen to use for updating the bounds.\n \n Note: the given comonent's bounds will not be adjusted by this method","params":[{"type_long":"java.awt.Component","name":"c","comment":"the on screen component, used to determine which screen to check against the given \n        bounds","type_short":"Component"},{"type_long":"java.awt.Rectangle","name":"bounds","comment":"the bounds to adjust","type_short":"Rectangle"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"doGetScreenBounds","comment":"","params":[{"type_long":"java.awt.Point","name":"p","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"generic.util.WindowUtilities.ScreenBounds","comment":"","type_short":"ScreenBounds"}},{"javadoc":"","static":true,"name":"getGraphicsConfigurationForPoint","comment":"","params":[{"type_long":"java.awt.Point","name":"p","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"java.awt.GraphicsConfiguration","comment":"","type_short":"GraphicsConfiguration"}},{"javadoc":"Returns true if there are one or more modal dialogs displayed in the current JVM.\n@return true if there are one or more modal dialogs displayed in the current JVM.","static":true,"name":"areModalDialogsVisible","comment":"Returns true if there are one or more modal dialogs displayed in the current JVM.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there are one or more modal dialogs displayed in the current JVM.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"findModalestDialog","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"","static":true,"name":"checkForActiveModalDialog","comment":"","params":[{"type_long":"java.awt.Dialog","name":"theModalest","comment":"","type_short":"Dialog"}],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"","static":true,"name":"getOpenModalDialogChildren","comment":"","params":[{"type_long":"java.awt.Frame","name":"frame","comment":"","type_short":"Frame"},{"type_long":"java.util.List<java.awt.Dialog>","name":"openModalDialogs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getOpenModalDialogChidrenForWindow","comment":"","params":[{"type_long":"java.awt.Window","name":"window","comment":"","type_short":"Window"},{"type_long":"java.util.List<java.awt.Dialog>","name":"openModalDialogs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all <code>parent<\/code>'s descendant modal dialogs.\n@param parent the parent for which to find modal dialogs\n@return a list of all <code>parent<\/code>'s descendant modal dialogs.","static":true,"name":"getOpenModalDialogsFor","comment":"Returns a list of all parent's descendant modal dialogs.","params":[{"type_long":"java.awt.Frame","name":"parent","comment":"the parent for which to find modal dialogs","type_short":"Frame"}],"throws":[],"return":{"type_long":"java.util.List<java.awt.Dialog>","comment":"a list of all parent's descendant modal dialogs.","type_short":"List"}},{"javadoc":"","static":true,"name":"getOpenModalDialogs","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.awt.Dialog>","comment":"","type_short":"List"}},{"javadoc":"","static":true,"name":"findParentModalDialog","comment":"","params":[{"type_long":"java.awt.Component","name":"permanentFocusOwner","comment":"","type_short":"Component"},{"type_long":"java.util.List<java.awt.Dialog>","name":"openModalDialogs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"","static":true,"name":"findYoungestChildDialogOfParentDialog","comment":"","params":[{"type_long":"java.awt.Dialog","name":"parentDialog","comment":"","type_short":"Dialog"},{"type_long":"java.util.List<java.awt.Dialog>","name":"openModalDialogs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"","static":true,"name":"pickAModalDialog","comment":"","params":[{"type_long":"java.util.List<java.awt.Dialog>","name":"openModalDialogs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"Attempts to locate the topmost modal dialog and then bring that dialog to the front of\n the window hierarchy\n@param activeWindow the system's active window","static":true,"name":"bringModalestDialogToFront","comment":"Attempts to locate the topmost modal dialog and then bring that dialog to the front of\n the window hierarchy","params":[{"type_long":"java.awt.Window","name":"activeWindow","comment":"the system's active window","type_short":"Window"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"doBringModalestDialogToFront","comment":"","params":[{"type_long":"java.awt.Window","name":"activeWindow","comment":"","type_short":"Window"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"WindowUtilities","comment":"A collection of window related utility methods","fields":[]}
