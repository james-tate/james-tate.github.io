{"implements":[],"javadoc":"Interface that defines the callback to work on the items given to the \n {@link ConcurrentQ#add(I)} methods.  Each item that is processed will be handed to the\n {@link #process(I, TaskMonitor)} method of the implementing class.\n@param <I> The type of the items to be processed.\n@param <R> The type of objects resulting from processing an item; if you don't care about the\n            return value, then make this value whatever you want, like <tt>Object<\/tt> or the \n            same value as {@link I} and return null from {@link #process(Object, TaskMonitor)}.","static":false,"methods":[{"javadoc":"Processes the given item in background thread provided by a GThreadPool.\n@param item the item to process.\n@param monitor a monitor that can be used to check for cancellation and to report progress and\n transient messages.\n@return The return value resulting from processing the item.","static":false,"name":"process","comment":"Processes the given item in background thread provided by a GThreadPool.","params":[{"type_long":"I","name":"item","comment":"the item to process.","type_short":"I"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a monitor that can be used to check for cancellation and to report progress and\n transient messages.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"R","comment":"The return value resulting from processing the item.","type_short":"R"}}],"name":"QCallback","comment":"Interface that defines the callback to work on the items given to the \n ConcurrentQ#add(I) methods.  Each item that is processed will be handed to the\n #process(I, TaskMonitor) method of the implementing class.","fields":[]}
