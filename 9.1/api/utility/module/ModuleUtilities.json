{"implements":[],"javadoc":"Utility methods for module related things.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks if the given directory is a module.\n@param dir the directory to check.\n@return true if the given directory is a module","static":true,"name":"isModuleDirectory","comment":"Checks if the given directory is a module.","params":[{"type_long":"generic.jar.ResourceFile","name":"dir","comment":"the directory to check.","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given directory is a module","type_short":"boolean"}},{"javadoc":"Returns true if the given path is a module root directory.\n@param path the path to check\n@return true if the given path is a module root directory.","static":true,"name":"isModuleDirectory","comment":"Returns true if the given path is a module root directory.","params":[{"type_long":"java.nio.file.Path","name":"path","comment":"the path to check","type_short":"Path"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given path is a module root directory.","type_short":"boolean"}},{"javadoc":"Searches the given root directory for module root directories.  Adds any discovered module\n root directories to the given collection.\n@param rootDir The directory to start looking for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.","static":true,"name":"findModuleRootDirectories","comment":"Searches the given root directory for module root directories.  Adds any discovered module\n root directories to the given collection.","params":[{"type_long":"generic.jar.ResourceFile","name":"rootDir","comment":"The directory to start looking for module root directories in.","type_short":"ResourceFile"},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"moduleRootDirs","comment":"A collection to add discovered module root directories to.","type_short":"Collection"}],"throws":[],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"The given collection with any discovered modules added.","type_short":"Collection"}},{"javadoc":"","static":true,"name":"findModuleRootDirectoriesHelper","comment":"","params":[{"type_long":"generic.jar.ResourceFile","name":"rootDir","comment":"","type_short":"ResourceFile"},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"moduleRootDirs","comment":"","type_short":"Collection"},{"type_long":"int","name":"remainingDepth","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"","type_short":"Collection"}},{"javadoc":"Searches the given root directories for module root directories.  Adds any discovered module\n root directories to the given collection.\n@param rootDirs The directories to look for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.","static":true,"name":"findModuleRootDirectories","comment":"Searches the given root directories for module root directories.  Adds any discovered module\n root directories to the given collection.","params":[{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"rootDirs","comment":"The directories to look for module root directories in.","type_short":"Collection"},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"moduleRootDirs","comment":"A collection to add discovered module root directories to.","type_short":"Collection"}],"throws":[],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"The given collection with any discovered modules added.","type_short":"Collection"}},{"javadoc":"Searches the given jar root directory for module root directories.  Uses a \"module list\"\n file to locate the module root directories. Adds any discovered module root directories\n to the given collection.\n@param rootDir The jar directory to start looking for module root directories in.\n@param moduleRootDirs A collection to add discovered module root directories to.\n@return The given collection with any discovered modules added.\n@throws IOException if there was a problem reading the module list file.","static":true,"name":"findJarModuleRootDirectories","comment":"Searches the given jar root directory for module root directories.  Uses a \"module list\"\n file to locate the module root directories. Adds any discovered module root directories\n to the given collection.","params":[{"type_long":"generic.jar.ResourceFile","name":"rootDir","comment":"The jar directory to start looking for module root directories in.","type_short":"ResourceFile"},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"moduleRootDirs","comment":"A collection to add discovered module root directories to.","type_short":"Collection"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem reading the module list file.","type_short":"IOException"}],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"The given collection with any discovered modules added.","type_short":"Collection"}},{"javadoc":"Searches for modules in a given collection of module root directories.\n@param appRootDirs The collection of application root directories associated with the the given\n   list of module root directories.\n@param moduleRootDirs A collection of module root directories to search for modules in.\n@return The discovered modules as a map (mapping module name to module for convenience).","static":true,"name":"findModules","comment":"Searches for modules in a given collection of module root directories.","params":[{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"appRootDirs","comment":"The collection of application root directories associated with the the given\n   list of module root directories.","type_short":"Collection"},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","name":"moduleRootDirs","comment":"A collection of module root directories to search for modules in.","type_short":"Collection"}],"throws":[],"return":{"type_long":"java.util.Map<java.lang.String,ghidra.framework.GModule>","comment":"The discovered modules as a map (mapping module name to module for convenience).","type_short":"Map"}},{"javadoc":"Gets the \"lib\" directories from the given modules.\n@param modules The modules to get the lib directories of.\n@return A collection of lib directories from the given modules.","static":true,"name":"getModuleLibDirectories","comment":"Gets the \"lib\" directories from the given modules.","params":[{"type_long":"java.util.Map<java.lang.String,ghidra.framework.GModule>","name":"modules","comment":"The modules to get the lib directories of.","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"A collection of lib directories from the given modules.","type_short":"Collection"}},{"javadoc":"Gets the directory locations of the .class files and resources from the given modules.\n@param modules The modules to get the compiled .class and resources directories of.\n@return A collection of directories containing classes and resources from the given modules.","static":true,"name":"getModuleBinDirectories","comment":"Gets the directory locations of the .class files and resources from the given modules.","params":[{"type_long":"java.util.Map<java.lang.String,ghidra.framework.GModule>","name":"modules","comment":"The modules to get the compiled .class and resources directories of.","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<generic.jar.ResourceFile>","comment":"A collection of directories containing classes and resources from the given modules.","type_short":"Collection"}},{"javadoc":"Returns true if the given path is parented by a module root directory.\n <p>\n For example, given a module path of <tt>\/some\/dir\/features\/cool_module\/<\/tt>, then this\n method will return true for these paths:\n <br>\n <br>\n <tt>\/some\/dir\/features\/cool_module<\/tt><br>\n <tt>\/some\/dir\/features\/cool_module\/some\/child\/dir<\/tt>\n <br>\n <br>and false for these paths:\n <br>\n <br> \n <tt>\/some\/random\/path<\/tt><br>\n <tt>\/some\/dir\/features\/<\/tt>\n@param pathName the path name to check\n@return true if the given path is parented by a module root directory.\n@see #isModuleDirectory(Path)","static":true,"name":"isInModule","comment":"Returns true if the given path is parented by a module root directory.\n \n For example, given a module path of \/some\/dir\/features\/cool_module\/, then this\n method will return true for these paths:\n \n \n \/some\/dir\/features\/cool_module\n \/some\/dir\/features\/cool_module\/some\/child\/dir\n \n and false for these paths:\n \n  \n \/some\/random\/path\n \/some\/dir\/features\/","params":[{"type_long":"java.lang.String","name":"pathName","comment":"the path name to check","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given path is parented by a module root directory.","type_short":"boolean"}},{"javadoc":"Returns the path of the module containing the given path string, if it is parented by a \n module root directory.\n <p>\n For example, given a module path of <tt>\/some\/dir\/features\/cool_module\/<\/tt>, then this\n method will return that module path, given these paths:\n <br>\n <br>\n <tt>\/some\/dir\/features\/cool_module<\/tt><br>\n <tt>\/some\/dir\/features\/cool_module\/some\/child\/dir<\/tt>\n <br>\n <br>and null for these paths:\n <br>\n <br> \n <tt>\/some\/random\/path<\/tt><br>\n <tt>\/some\/dir\/features\/<\/tt>\n@param pathName the path name to check\n@return the module root directory; null if the path is not in a module\n@see #isModuleDirectory(Path)","static":true,"name":"getModule","comment":"Returns the path of the module containing the given path string, if it is parented by a \n module root directory.\n \n For example, given a module path of \/some\/dir\/features\/cool_module\/, then this\n method will return that module path, given these paths:\n \n \n \/some\/dir\/features\/cool_module\n \/some\/dir\/features\/cool_module\/some\/child\/dir\n \n and null for these paths:\n \n  \n \/some\/random\/path\n \/some\/dir\/features\/","params":[{"type_long":"java.lang.String","name":"pathName","comment":"the path name to check","type_short":"String"}],"throws":[],"return":{"type_long":"java.nio.file.Path","comment":"the module root directory; null if the path is not in a module","type_short":"Path"}},{"javadoc":"","static":true,"name":"toPath","comment":"","params":[{"type_long":"java.lang.String","name":"pathname","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.nio.file.Path","comment":"","type_short":"Path"}},{"javadoc":"Returns a file that is the root folder of the repository containing the given file.  'Root'\n here means a folder that contains a repository folder.  As an example, given a repo \n structure of:\n \n <p><tt>\/userdir\/repoRoot\/repoDir\/.git<\/tt><br>\n \n <p>then this method, given will produce the following results (input -&gt; output):<br>\n \n <p><tt>\/userdir\/repoRoot\/repoDir\/.git -&gt; \/userdir\/repoRoot<\/tt>\n <br><tt>\/userdir\/repoRoot\/repoDir -&gt; \/userdir\/repoRoot<\/tt>\n <br><tt>\/userdir\/repoRoot -&gt; \/userdir\/repoRoot<\/tt>\n@param f the child file of the desired repo\n@return a file that is the root folder of the repository containing the given file; null\n         if the given file is not under a repo directory or itself a repo root","static":true,"name":"findRepoRoot","comment":"Returns a file that is the root folder of the repository containing the given file.  'Root'\n here means a folder that contains a repository folder.  As an example, given a repo \n structure of:\n \n \/userdir\/repoRoot\/repoDir\/.git\n \n then this method, given will produce the following results (input - output):\n \n \/userdir\/repoRoot\/repoDir\/.git - \/userdir\/repoRoot\n \/userdir\/repoRoot\/repoDir - \/userdir\/repoRoot\n \/userdir\/repoRoot - \/userdir\/repoRoot","params":[{"type_long":"java.io.File","name":"f","comment":"the child file of the desired repo","type_short":"File"}],"throws":[],"return":{"type_long":"java.io.File","comment":"a file that is the root folder of the repository containing the given file; null\n         if the given file is not under a repo directory or itself a repo root","type_short":"File"}},{"javadoc":"Returns a file that is the repository folder containing the given file.  As an example, \n given a repo structure of:\n \n <p><tt>\/userdir\/repoRoot\/repoDir\/.git<\/tt><br>\n \n <p>then this method, given will produce the following results (input -&gt; output):<br>\n \n <p><tt>\/userdir\/repoRoot\/repoDir\/.git -&gt; \/userdir\/repoRoot\/repoDir<\/tt>\n <br><tt>\/userdir\/repoRoot\/repoDir -&gt; \/userdir\/repoRoot\/repoDir<\/tt>\n@param f the child file of the desired repo\n@return a file that is the repo folder of the repository containing the given file; null\n         if the given file is not under a repo directory","static":true,"name":"findRepo","comment":"Returns a file that is the repository folder containing the given file.  As an example, \n given a repo structure of:\n \n \/userdir\/repoRoot\/repoDir\/.git\n \n then this method, given will produce the following results (input - output):\n \n \/userdir\/repoRoot\/repoDir\/.git - \/userdir\/repoRoot\/repoDir\n \/userdir\/repoRoot\/repoDir - \/userdir\/repoRoot\/repoDir","params":[{"type_long":"java.io.File","name":"f","comment":"the child file of the desired repo","type_short":"File"}],"throws":[],"return":{"type_long":"java.io.File","comment":"a file that is the repo folder of the repository containing the given file; null\n         if the given file is not under a repo directory","type_short":"File"}}],"name":"ModuleUtilities","comment":"Utility methods for module related things.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BINARY_PATH","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MANIFEST_FILE_NAME","comment":"","type_short":"String","constant_value":"\"Module.manifest\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MANIFEST_FILE_NAME_UNINSTALLED","comment":"","type_short":"String","constant_value":"\"Module.manifest.uninstalled\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MODULE_LIST","comment":"","type_short":"String","constant_value":"\"MODULE_LIST\""},{"type_long":"int","javadoc":"How many directories deep to look for module directories, starting from an application root \n directory. For example, 3 would pick up modules as deep as: root\/category\/category\/module","static":true,"name":"MAX_MODULE_DEPTH","comment":"How many directories deep to look for module directories, starting from an application root \n directory. For example, 3 would pick up modules as deep as: root\/category\/category\/module","type_short":"int","constant_value":"3"}]}
