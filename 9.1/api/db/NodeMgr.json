{"implements":[],"javadoc":"The <code>NodeMgr<\/code> manages all database nodes associated with \n a table.  Each table should use a seperate instance of a NodeMgr.\n The NodeMgr is resposible for interacting with the BufferMgr performing \n buffer allocations, retrievals and releases as required.   The NodeMgr\n also performs hard caching of all buffers until the releaseNodes\n method is invoked.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a node manager for a specific table.\n@param bufferMgr buffer manager.\n@param schema table schema (required for Table use)","static":false,"name":"<init>","comment":"Construct a node manager for a specific table.","params":[{"type_long":"db.buffers.BufferMgr","name":"bufferMgr","comment":"buffer manager.","type_short":"BufferMgr"},{"type_long":"db.Schema","name":"schema","comment":"table schema (required for Table use)","type_short":"Schema"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the buffer manager used by this node manager.\n@return BufferMgr","static":false,"name":"getBufferMgr","comment":"Get the buffer manager used by this node manager.","params":[],"throws":[],"return":{"type_long":"db.buffers.BufferMgr","comment":"BufferMgr","type_short":"BufferMgr"}},{"javadoc":"Release all nodes held by this node manager.\n This method must be invoked before a database transaction can be committed.\n@return the change in record count (+\/-)","static":false,"name":"releaseNodes","comment":"Release all nodes held by this node manager.\n This method must be invoked before a database transaction can be committed.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"the change in record count (+\/-)","type_short":"int"}},{"javadoc":"Release a specific read-only buffer node.\n WARNING! This method may only be used to release read-only buffers,\n if a release buffer has been modified an IOException will be thrown.\n@param bufferId\n@throws IOException","static":false,"name":"releaseReadOnlyNode","comment":"Release a specific read-only buffer node.\n WARNING! This method may only be used to release read-only buffers,\n if a release buffer has been modified an IOException will be thrown.","params":[{"type_long":"int","name":"bufferId","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a newly created node to the node list.\n This method must be invoked when new nodes are instantiated.\n@param node a new node.","static":false,"name":"addNode","comment":"Add a newly created node to the node list.\n This method must be invoked when new nodes are instantiated.","params":[{"type_long":"db.BTreeNode","name":"node","comment":"a new node.","type_short":"BTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete a node.\n@param node node to be deleted.\n@throws IOException thrown if an IO error occurs","static":false,"name":"deleteNode","comment":"Delete a node.","params":[{"type_long":"db.BTreeNode","name":"node","comment":"node to be deleted.","type_short":"BTreeNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a LongKeyNode object for a specified buffer\n@param bufferId buffer ID\n@return LongKeyNode instance\n@throws ClassCastException if node type is incorrect.","static":false,"name":"getLongKeyNode","comment":"Get a LongKeyNode object for a specified buffer","params":[{"type_long":"int","name":"bufferId","comment":"buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"LongKeyNode instance","type_short":"LongKeyNode"}},{"javadoc":"Get a VarKeyNode object for a specified buffer\n@param bufferId buffer ID\n@return VarKeyNode instance\n@throws ClassCastException if node type is incorrect.","static":false,"name":"getVarKeyNode","comment":"Get a VarKeyNode object for a specified buffer","params":[{"type_long":"int","name":"bufferId","comment":"buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"VarKeyNode instance","type_short":"VarKeyNode"}},{"javadoc":"Get the node type associated with the specified data buffer.\n@param buffer data buffer.\n@return node type","static":true,"name":"getNodeType","comment":"Get the node type associated with the specified data buffer.","params":[{"type_long":"db.buffers.DataBuffer","name":"buffer","comment":"data buffer.","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"byte","comment":"node type","type_short":"byte"}},{"javadoc":"Set the node type associated with the specified data buffer.\n@param buffer data buffer\n@param nodeType node type value.","static":true,"name":"setNodeType","comment":"Set the node type associated with the specified data buffer.","params":[{"type_long":"db.buffers.DataBuffer","name":"buffer","comment":"data buffer","type_short":"DataBuffer"},{"type_long":"byte","name":"nodeType","comment":"node type value.","type_short":"byte"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"NodeMgr","comment":"The NodeMgr manages all database nodes associated with \n a table.  Each table should use a seperate instance of a NodeMgr.\n The NodeMgr is resposible for interacting with the BufferMgr performing \n buffer allocations, retrievals and releases as required.   The NodeMgr\n also performs hard caching of all buffers until the releaseNodes\n method is invoked.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"NODE_TYPE_SIZE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"NODE_TYPE_OFFSET","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"NODE_HEADER_SIZE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"byte","javadoc":"Node type for long-key interior tree nodes\n@see db.LongKeyInteriorNode","static":true,"name":"LONGKEY_INTERIOR_NODE","comment":"Node type for long-key interior tree nodes","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"Node type for long key variable-length record leaf nodes\n@see db.VarRecNode","static":true,"name":"LONGKEY_VAR_REC_NODE","comment":"Node type for long key variable-length record leaf nodes","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"Node type for long key fixed-length record leaf nodes\n@see db.FixedRecNode","static":true,"name":"LONGKEY_FIXED_REC_NODE","comment":"Node type for long key fixed-length record leaf nodes","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"Node type for Field key interior tree nodes\n@see db.VarKeyInteriorNode","static":true,"name":"VARKEY_INTERIOR_NODE","comment":"Node type for Field key interior tree nodes","type_short":"byte","constant_value":"3"},{"type_long":"byte","javadoc":"Node type for Field key variable-length record tree nodes\n@see db.VarKeyRecordNode","static":true,"name":"VARKEY_REC_NODE","comment":"Node type for Field key variable-length record tree nodes","type_short":"byte","constant_value":"4"},{"type_long":"byte","javadoc":"Node type for chained buffer index nodes\n@see db.DBBuffer","static":true,"name":"CHAINED_BUFFER_INDEX_NODE","comment":"Node type for chained buffer index nodes","type_short":"byte","constant_value":"8"},{"type_long":"byte","javadoc":"Node type for chained buffer data nodes\n@see db.DBBuffer","static":true,"name":"CHAINED_BUFFER_DATA_NODE","comment":"Node type for chained buffer data nodes","type_short":"byte","constant_value":"9"},{"type_long":"db.buffers.BufferMgr","javadoc":"","static":false,"name":"bufferMgr","comment":"","type_short":"BufferMgr","constant_value":null},{"type_long":"db.Schema","javadoc":"","static":false,"name":"schema","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"leafRecordCnt","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.util.datastruct.IntObjectHashtable<db.BTreeNode>","javadoc":"","static":false,"name":"nodeTable","comment":"","type_short":"IntObjectHashtable","constant_value":null}]}
