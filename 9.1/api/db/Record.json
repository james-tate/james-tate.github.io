{"implements":["java.lang.Comparable"],"javadoc":"<code>Record<\/code> provides a portable container for data\n associated with a fixed schema defined by a list of Fields.  \n A record instance contains both a primary key and zero or more data fields \n which define the schema.  Either a Field object or a long value \n may be used as the primary key.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new record.\n The schema is derived from the field values supplied.\n@param key primary key value\n@param schema","static":false,"name":"<init>","comment":"Construct a new record.\n The schema is derived from the field values supplied.","params":[{"type_long":"db.Field","name":"key","comment":"primary key value","type_short":"Field"},{"type_long":"db.Field[]","name":"fieldValues","comment":"","type_short":"db.Field[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the primary key associated with this record.\n@param key primary key","static":false,"name":"setKey","comment":"Set the primary key associated with this record.","params":[{"type_long":"long","name":"key","comment":"primary key","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the primary key associated with this record.\n@param key primary key","static":false,"name":"setKey","comment":"Set the primary key associated with this record.","params":[{"type_long":"db.Field","name":"key","comment":"primary key","type_short":"Field"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the record primary key.\n@return primary key as long value.","static":false,"name":"getKey","comment":"Get the record primary key.","params":[],"throws":[],"return":{"type_long":"long","comment":"primary key as long value.","type_short":"long"}},{"javadoc":"Get the record primary key as a Field object.\n@return primary key as a field object.","static":false,"name":"getKeyField","comment":"Get the record primary key as a Field object.","params":[],"throws":[],"return":{"type_long":"db.Field","comment":"primary key as a field object.","type_short":"Field"}},{"javadoc":"Determine if this record's schema is the same as another record's\n schema.  This check factors column count and column field types only.\n@param otherRec\n@return true if records schemas are the same","static":false,"name":"hasSameSchema","comment":"Determine if this record's schema is the same as another record's\n schema.  This check factors column count and column field types only.","params":[{"type_long":"db.Record","name":"otherRec","comment":"","type_short":"Record"}],"throws":[],"return":{"type_long":"boolean","comment":"true if records schemas are the same","type_short":"boolean"}},{"javadoc":"Determine if this record's schema is compatible with the specified schema.  \n This check factors column count and column field types only.\n@param schema\n@return true if records schemas are the same","static":false,"name":"hasSameSchema","comment":"Determine if this record's schema is compatible with the specified schema.  \n This check factors column count and column field types only.","params":[{"type_long":"db.Schema","name":"schema","comment":"","type_short":"Schema"}],"throws":[],"return":{"type_long":"boolean","comment":"true if records schemas are the same","type_short":"boolean"}},{"javadoc":"Get the number of columns contained within this record.\n@return number of field columns.","static":false,"name":"getColumnCount","comment":"Get the number of columns contained within this record.","params":[],"throws":[],"return":{"type_long":"int","comment":"number of field columns.","type_short":"int"}},{"javadoc":"Get a copy of the specified field value.\n@param columnIndex\n@return Field","static":false,"name":"getFieldValue","comment":"Get a copy of the specified field value.","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"db.Field","comment":"Field","type_short":"Field"}},{"javadoc":"Set the field value for the specified field.\n@param colIndex field index\n@param value field value","static":false,"name":"setField","comment":"Set the field value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"db.Field","name":"value","comment":"field value","type_short":"Field"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the specified field.  The object returned must not be\n modified.\n@param columnIndex\n@return Field","static":false,"name":"getField","comment":"Get the specified field.  The object returned must not be\n modified.","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"db.Field","comment":"Field","type_short":"Field"}},{"javadoc":"Get all fields. The objects returned must not be\n modified.\n@return array of field values.","static":false,"name":"getFields","comment":"Get all fields. The objects returned must not be\n modified.","params":[],"throws":[],"return":{"type_long":"db.Field[]","comment":"array of field values.","type_short":"db.Field[]"}},{"javadoc":"Determine if the specified field equals the field associated with the\n specified columnIndex.\n@param columnIndex\n@param field\n@return true if the fields are equal, else false.","static":false,"name":"fieldEquals","comment":"Determine if the specified field equals the field associated with the\n specified columnIndex.","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"},{"type_long":"db.Field","name":"field","comment":"","type_short":"Field"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the fields are equal, else false.","type_short":"boolean"}},{"javadoc":"Compare two field values.\n@param columnIndex the field index within this record\n@param value another field value to compared\n@return 0 if equals, a negative number if this record's field is less\n than the specified value, or a positive number if this record's field is\n greater than the specified value.","static":false,"name":"compareFieldTo","comment":"Compare two field values.","params":[{"type_long":"int","name":"columnIndex","comment":"the field index within this record","type_short":"int"},{"type_long":"db.Field","name":"value","comment":"another field value to compared","type_short":"Field"}],"throws":[],"return":{"type_long":"int","comment":"0 if equals, a negative number if this record's field is less\n than the specified value, or a positive number if this record's field is\n greater than the specified value.","type_short":"int"}},{"javadoc":"Obtain a copy of this record object.\n@return Record","static":false,"name":"copy","comment":"Obtain a copy of this record object.","params":[],"throws":[],"return":{"type_long":"db.Record","comment":"Record","type_short":"Record"}},{"javadoc":"Get the stored record length.\n This method is used to determine the space required to store the data \n fields within this record when written to a standard Buffer.\n@return int stored record length","static":false,"name":"length","comment":"Get the stored record length.\n This method is used to determine the space required to store the data \n fields within this record when written to a standard Buffer.","params":[],"throws":[],"return":{"type_long":"int","comment":"int stored record length","type_short":"int"}},{"javadoc":"Get the long value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support long data access","static":false,"name":"getLongValue","comment":"Get the long value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"field value","type_short":"long"}},{"javadoc":"Set the long value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support long data access","static":false,"name":"setLongValue","comment":"Set the long value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"long","name":"value","comment":"field value","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the integer value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support integer data access","static":false,"name":"getIntValue","comment":"Get the integer value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"field value","type_short":"int"}},{"javadoc":"Set the integer value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support integer data access","static":false,"name":"setIntValue","comment":"Set the integer value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"int","name":"value","comment":"field value","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the short value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support short data access","static":false,"name":"getShortValue","comment":"Get the short value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"short","comment":"field value","type_short":"short"}},{"javadoc":"Set the short value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support short data access","static":false,"name":"setShortValue","comment":"Set the short value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"short","name":"value","comment":"field value","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the byte value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support byte data access","static":false,"name":"getByteValue","comment":"Get the byte value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"byte","comment":"field value","type_short":"byte"}},{"javadoc":"Set the byte value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support byte data access","static":false,"name":"setByteValue","comment":"Set the byte value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"byte","name":"value","comment":"field value","type_short":"byte"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the boolean value for the specified field.\n@param colIndex field index\n@return field value\n@throws IllegalFieldAccessException if field does support boolean data access","static":false,"name":"getBooleanValue","comment":"Get the boolean value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"field value","type_short":"boolean"}},{"javadoc":"Set the boolean value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support boolean data access","static":false,"name":"setBooleanValue","comment":"Set the boolean value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"boolean","name":"value","comment":"field value","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the binary data array for the specified field.\n@param colIndex field index\n@return field data\n@throws IllegalFieldAccessException if field does support binary data access","static":false,"name":"getBinaryData","comment":"Get the binary data array for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"byte[]","comment":"field data","type_short":"byte[]"}},{"javadoc":"Set the binary data array for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support binary data access","static":false,"name":"setBinaryData","comment":"Set the binary data array for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"byte[]","name":"bytes","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the string value for the specified field.\n@param colIndex field index\n@return field data\n@throws IllegalFieldAccessException if field does support string data access","static":false,"name":"getString","comment":"Get the string value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"field data","type_short":"String"}},{"javadoc":"Set the string value for the specified field.\n@param colIndex field index\n@param value field value\n@throws IllegalFieldAccessException if field does support string data access","static":false,"name":"setString","comment":"Set the string value for the specified field.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"},{"type_long":"java.lang.String","name":"str","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Write the record fields to the specified buffer and offset.\n@param buf data buffer\n@param offset buffer offset\n@throws IOException thrown if IO error occurs","static":false,"name":"write","comment":"Write the record fields to the specified buffer and offset.","params":[{"type_long":"db.Buffer","name":"buf","comment":"data buffer","type_short":"Buffer"},{"type_long":"int","name":"offset","comment":"buffer offset","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read the record field data from the specified buffer and offset\n@param buf data buffer\n@param offset buffer offset\n@throws IOException thrown if IO error occurs","static":false,"name":"read","comment":"Read the record field data from the specified buffer and offset","params":[{"type_long":"db.Buffer","name":"buf","comment":"data buffer","type_short":"Buffer"},{"type_long":"int","name":"offset","comment":"buffer offset","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if data fields have been modified since the last write\n occurred.\n@return true if the field data has not been saved, else false.","static":false,"name":"isDirty","comment":"Determine if data fields have been modified since the last write\n occurred.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the field data has not been saved, else false.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Compare the content of two Records for equality.\n@see java.lang.Object#equals(java.lang.Object)","static":false,"name":"equals","comment":"Compare the content of two Records for equality.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compares the key associated with this record with the \n key of another record (obj).\n@see java.lang.Comparable#compareTo(java.lang.Object)","static":false,"name":"compareTo","comment":"Compares the key associated with this record with the \n key of another record (obj).","params":[{"type_long":"db.Record","name":"otherRec","comment":"","type_short":"Record"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"Record","comment":"Record provides a portable container for data\n associated with a fixed schema defined by a list of Fields.  \n A record instance contains both a primary key and zero or more data fields \n which define the schema.  Either a Field object or a long value \n may be used as the primary key.","fields":[{"type_long":"db.Field","javadoc":"","static":false,"name":"key","comment":"","type_short":"Field","constant_value":null},{"type_long":"db.Field[]","javadoc":"","static":false,"name":"fieldValues","comment":"","type_short":"db.Field[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"dirty","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"length","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isVariableLength","comment":"","type_short":"boolean","constant_value":null}]}
