{"implements":[],"javadoc":"","static":false,"extends":"db.IndexTable","methods":[{"javadoc":"Construct a new secondary index which is based upon a specific field within the\n primary table specified by name.\n@param db database handle\n@param primaryTable primary table.\n@param colIndex identifies the indexed column within the primary table.\n@throws IOException","static":false,"name":"<init>","comment":"Construct a new secondary index which is based upon a specific field within the\n primary table specified by name.","params":[{"type_long":"db.Table","name":"primaryTable","comment":"primary table.","type_short":"Table"},{"type_long":"int","name":"colIndex","comment":"identifies the indexed column within the primary table.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new or existing secondary index. An existing index must have\n its' root ID specified within the tableRecord.\n@param db database handle\n@param bufferMgr database buffer manager\n@param indexTableRecord specifies the index parameters.","static":false,"name":"<init>","comment":"Construct a new or existing secondary index. An existing index must have\n its' root ID specified within the tableRecord.","params":[{"type_long":"db.Table","name":"primaryTable","comment":"","type_short":"Table"},{"type_long":"db.TableRecord","name":"indexTableRecord","comment":"specifies the index parameters.","type_short":"TableRecord"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getIndexTableSchema","comment":"","params":[{"type_long":"db.Table","name":"primaryTable","comment":"","type_short":"Table"},{"type_long":"int","name":"colIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"db.Schema","comment":"","type_short":"Schema"}},{"javadoc":"","static":false,"name":"findPrimaryKeys","comment":"","params":[{"type_long":"db.Field","name":"indexValue","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"","static":false,"name":"getKeyCount","comment":"","params":[{"type_long":"db.Field","name":"indexValue","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"addEntry","comment":"","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deleteEntry","comment":"","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"indexIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"","type_short":"DBFieldIterator"}},{"javadoc":"","static":false,"name":"indexIterator","comment":"","params":[{"type_long":"db.Field","name":"minField","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"","type_short":"DBFieldIterator"}},{"javadoc":"","static":false,"name":"indexIterator","comment":"","params":[{"type_long":"db.Field","name":"minField","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"startField","comment":"","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"","type_short":"DBFieldIterator"}},{"javadoc":"","static":false,"name":"hasRecord","comment":"","params":[{"type_long":"db.Field","name":"field","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.\n@param startField index key value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of startField through endField, inclusive.\n If atStart is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified startField value. \n If atStart is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified endField value.\n@param startField minimum index key value\n@param endField maximum index key value\n@param atStart if true, position iterator before start value. \n Otherwise, position iterator after end value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of startField through endField, inclusive.\n If atStart is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified startField value. \n If atStart is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified endField value.","params":[{"type_long":"db.Field","name":"startField","comment":"minimum index key value","type_short":"Field"},{"type_long":"db.Field","name":"endField","comment":"maximum index key value","type_short":"Field"},{"type_long":"boolean","name":"atStart","comment":"if true, position iterator before start value. \n Otherwise, position iterator after end value.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"@see db.IndexTable#keyIterator(db.Field, db.Field, db.Field, boolean)","static":false,"name":"keyIterator","comment":"","params":[{"type_long":"db.Field","name":"minField","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"startField","comment":"","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"","type_short":"DBLongIterator"}}],"name":"FieldIndexTable","comment":"","fields":[{"type_long":"java.lang.Class<?>[]","javadoc":"","static":true,"name":"fieldClasses","comment":"","type_short":"java.lang.Class<?>[]","constant_value":null},{"type_long":"java.lang.String[]","javadoc":"","static":true,"name":"fieldNames","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"db.Schema","javadoc":"","static":false,"name":"indexSchema","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"indexColumn","comment":"","type_short":"int","constant_value":null}]}
