{"implements":[],"javadoc":"<code>LongKeyRecordNode<\/code> is an abstract implementation of a BTree leaf node\n which utilizes long key values and stores records.","static":false,"extends":"db.LongKeyNode","methods":[{"javadoc":"Construct an existing long-key record leaf node.\n@param nodeMgr table node manager instance\n@param buf node buffer","static":false,"name":"<init>","comment":"Construct an existing long-key record leaf node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"node buffer","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new long-key record leaf node.\n@param nodeMgr table node manager instance\n@param nodeType node type\n@param prevLeafId node buffer id for previous leaf - left sibling ( &lt; 0: no leaf)\n@param nextLeafId node buffer id for next leaf - right sibling ( &lt; 0 : no leaf)\n@throws IOException thrown if an IO error occurs","static":false,"name":"<init>","comment":"Construct a new long-key record leaf node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"byte","name":"nodeType","comment":"node type","type_short":"byte"},{"type_long":"int","name":"prevLeafId","comment":"node buffer id for previous leaf - left sibling (  0: no leaf)","type_short":"int"},{"type_long":"int","name":"nextLeafId","comment":"node buffer id for next leaf - right sibling (  0 : no leaf)","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logConsistencyError","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isConsistent","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getLeafNode","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"","type_short":"LongKeyRecordNode"}},{"javadoc":"Get this leaf node's right sibling\n@return this leaf node's right sibling or null if right sibling does not exist.\n@throws IOException thrown if an IO error occurs","static":false,"name":"getNextLeaf","comment":"Get this leaf node's right sibling","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"this leaf node's right sibling or null if right sibling does not exist.","type_short":"LongKeyRecordNode"}},{"javadoc":"Get this leaf node's left sibling\n@return this leaf node's left sibling or null if left sibling does not exist.\n@throws IOException thrown if an IO error occurs","static":false,"name":"getPreviousLeaf","comment":"Get this leaf node's left sibling","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"this leaf node's left sibling or null if left sibling does not exist.","type_short":"LongKeyRecordNode"}},{"javadoc":"Perform a binary search to locate the specified key.\n@param key key value\n@return int key index if found, else -(key index + 1) indicates insertion\n point.","static":false,"name":"getKeyIndex","comment":"Perform a binary search to locate the specified key.","params":[{"type_long":"long","name":"key","comment":"key value","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"int key index if found, else -(key index + 1) indicates insertion\n point.","type_short":"int"}},{"javadoc":"Split this leaf node in half and update tree.\n When a split is performed, the next operation must be performed\n from the root node since the tree may have been restructured.\n@return root node which may have changed.\n@throws IOException thrown if an IO error occurs","static":false,"name":"split","comment":"Split this leaf node in half and update tree.\n When a split is performed, the next operation must be performed\n from the root node since the tree may have been restructured.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Append a leaf which contains one or more keys and update tree.  Leaf is inserted\n as the new right sibling of this leaf.\n@param newLeaf new right sibling leaf (must be same node type as this leaf)\n@return root node which may have changed.\n@throws IOException thrown if an IO error occurs","static":false,"name":"appendLeaf","comment":"Append a leaf which contains one or more keys and update tree.  Leaf is inserted\n as the new right sibling of this leaf.","params":[{"type_long":"db.LongKeyRecordNode","name":"leaf","comment":"","type_short":"LongKeyRecordNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Remove this leaf from the tree.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs","static":false,"name":"removeLeaf","comment":"Remove this leaf from the tree.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Split the contents of this leaf node; placing the right half of the records into the\n empty leaf node provided.\n@param newRightLeaf empty right sibling leaf","static":false,"name":"splitData","comment":"Split the contents of this leaf node; placing the right half of the records into the\n empty leaf node provided.","params":[{"type_long":"db.LongKeyRecordNode","name":"newRightLeaf","comment":"empty right sibling leaf","type_short":"LongKeyRecordNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new leaf and add to the node manager.\n The new leaf's parent is unknown.\n@param prevLeafId node buffer id for previous leaf - left sibling ( &lt; 0: no leaf)\n@param nextLeafId node buffer id for next leaf - right sibling ( &lt; 0 : no leaf)\n@return new leaf node.\n@throws IOException thrown if IO error occurs","static":false,"name":"createNewLeaf","comment":"Create a new leaf and add to the node manager.\n The new leaf's parent is unknown.","params":[{"type_long":"int","name":"prevNodeId","comment":"","type_short":"int"},{"type_long":"int","name":"nextNodeId","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"new leaf node.","type_short":"LongKeyRecordNode"}},{"javadoc":"Insert or Update a record.\n@param record data record with long key\n@param table table which will be notified when record is inserted or updated.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs","static":false,"name":"putRecord","comment":"Insert or Update a record.","params":[{"type_long":"db.Record","name":"record","comment":"data record with long key","type_short":"Record"},{"type_long":"db.Table","name":"table","comment":"table which will be notified when record is inserted or updated.","type_short":"Table"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Append a new leaf and insert the specified record.\n@param record data record with long key\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs","static":false,"name":"appendNewLeaf","comment":"Append a new leaf and insert the specified record.","params":[{"type_long":"db.Record","name":"record","comment":"data record with long key","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Delete the record identified by the specified key.\n@param key record key\n@param table table which will be notified when record is deleted.\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs","static":false,"name":"deleteRecord","comment":"Delete the record identified by the specified key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Table","name":"table","comment":"table which will be notified when record is deleted.","type_short":"Table"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Remove the record identified by index.\n This will never be the last record within the node.\n@param index record index\n@throws IOException thrown if IO error occurs","static":false,"name":"remove","comment":"Remove the record identified by index.\n This will never be the last record within the node.","params":[{"type_long":"int","name":"index","comment":"record index","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts the record at the given index if there is sufficient space in\n the buffer.\n@param index insertion index\n@param record record to be inserted\n@return true if the record was successfully inserted.\n@throws IOException thrown if IO error occurs","static":false,"name":"insertRecord","comment":"Inserts the record at the given index if there is sufficient space in\n the buffer.","params":[{"type_long":"int","name":"index","comment":"insertion index","type_short":"int"},{"type_long":"db.Record","name":"record","comment":"record to be inserted","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record was successfully inserted.","type_short":"boolean"}},{"javadoc":"Updates the record at the given index.\n@param index record index\n@param record new record\n@return root node which may have changed.\n@throws IOException thrown if IO error occurs","static":false,"name":"updateRecord","comment":"Updates the record at the given index.","params":[{"type_long":"int","name":"index","comment":"record index","type_short":"int"},{"type_long":"db.Record","name":"record","comment":"new record","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node which may have changed.","type_short":"LongKeyNode"}},{"javadoc":"Get the record identified by the specified key.\n@param key record key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecord","comment":"Get the record identified by the specified key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record requested or null if record not found.","type_short":"Record"}},{"javadoc":"Get the record located at the specified index.\n@param schema record data schema\n@param keyIndex key index\n@return Record\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecord","comment":"Get the record located at the specified index.","params":[{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record","type_short":"Record"}},{"javadoc":"Get the first record whoose key is less than the specified key.\n@param key record key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecordBefore","comment":"Get the first record whoose key is less than the specified key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record requested or null if record not found.","type_short":"Record"}},{"javadoc":"Get the first record whoose key is greater than the specified key.\n@param key record key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecordAfter","comment":"Get the first record whoose key is greater than the specified key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record requested or null if record not found.","type_short":"Record"}},{"javadoc":"Get the first record whoose key is less than or equal to the specified\n key.\n@param key record key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecordAtOrBefore","comment":"Get the first record whoose key is less than or equal to the specified\n key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record requested or null if record not found.","type_short":"Record"}},{"javadoc":"Get the first record whoose key is greater than or equal to the specified\n key.\n@param key record key\n@param schema record data schema\n@return Record requested or null if record not found.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRecordAtOrAfter","comment":"Get the first record whoose key is greater than or equal to the specified\n key.","params":[{"type_long":"long","name":"key","comment":"record key","type_short":"long"},{"type_long":"db.Schema","name":"schema","comment":"record data schema","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record requested or null if record not found.","type_short":"Record"}},{"javadoc":"Create a new record node with no siblings attached.\n@param nodeMgr table node manager instance\n@param fixedRecordLength length of fixed-length record, 0 = variable length\n@return new record leaf node\n@throws IOException thrown if IO error occurs","static":true,"name":"createRecordNode","comment":"Create a new record node with no siblings attached.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"db.Schema","name":"schema","comment":"","type_short":"Schema"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"new record leaf node","type_short":"LongKeyRecordNode"}}],"name":"LongKeyRecordNode","comment":"LongKeyRecordNode is an abstract implementation of a BTree leaf node\n which utilizes long key values and stores records.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"PREV_LEAF_ID_OFFSET","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"NEXT_LEAF_ID_OFFSET","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"RECORD_LEAF_HEADER_SIZE","comment":"","type_short":"int","constant_value":"13"}]}
