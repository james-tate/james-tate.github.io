{"implements":[],"javadoc":"<code>DBParms<\/code> manages 4-byte integer parameters associated with a database \n and stored as the first buffer (ID 0) in the buffer file.  The maximum number of \n parameters is determined by the .","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new or existing parameter buffer.\n@param bufferMgr buffer manager\n@param create if true storage buffers will be allocated with the bufferMgr.\n This must be the first buffer allocation - if buffer 0 is not available\n a runtime exception will be thrown.\n@throws IOException","static":false,"name":"<init>","comment":"Construct a new or existing parameter buffer.","params":[{"type_long":"db.buffers.BufferMgr","name":"bufferMgr","comment":"buffer manager","type_short":"BufferMgr"},{"type_long":"boolean","name":"create","comment":"if true storage buffers will be allocated with the bufferMgr.\n This must be the first buffer allocation - if buffer 0 is not available\n a runtime exception will be thrown.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the buffer offset for a specified parameter\n@param parm parameter number\n@return parameter offset","static":true,"name":"getOffset","comment":"Get the buffer offset for a specified parameter","params":[{"type_long":"int","name":"parm","comment":"parameter number","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"parameter offset","type_short":"int"}},{"javadoc":"Poke a modified DBParam into a database buffer file.\n WARNING! Use with extreme caution since this immediately modifies\n the original file in-place and could destroy data if used\n improperly.\n@param file\n@param parm\n@param value\n@throws IOException","static":true,"name":"poke","comment":"Poke a modified DBParam into a database buffer file.\n WARNING! Use with extreme caution since this immediately modifies\n the original file in-place and could destroy data if used\n improperly.","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"},{"type_long":"int","name":"parm","comment":"","type_short":"int"},{"type_long":"int","name":"value","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"storeParm","comment":"","params":[{"type_long":"int","name":"parm","comment":"","type_short":"int"},{"type_long":"int","name":"value","comment":"","type_short":"int"},{"type_long":"db.buffers.DataBuffer","name":"buffer","comment":"","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set a parameter value.  If parameter space is expanded to accommodate this \n parameter, all allocated parameters will be initialized to -1\n@param parm parameter number\n@param value parameter value\n@throws IOException thrown if an IO error occurs","static":false,"name":"set","comment":"Set a parameter value.  If parameter space is expanded to accommodate this \n parameter, all allocated parameters will be initialized to -1","params":[{"type_long":"int","name":"parm","comment":"parameter number","type_short":"int"},{"type_long":"int","name":"value","comment":"parameter value","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a parameter value\n@param parm parameter number\n@return parameter value\n@throws IOException thrown if an IO error occurs\n@throws ArrayIndexOutOfBoundsException if index outside of allocated\n parameter space.","static":false,"name":"get","comment":"Get a parameter value","params":[{"type_long":"int","name":"parm","comment":"parameter number","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"},{"type_long":"java.lang.ArrayIndexOutOfBoundsException","comment":"if index outside of allocated\n parameter space.","type_short":"ArrayIndexOutOfBoundsException"}],"return":{"type_long":"int","comment":"parameter value","type_short":"int"}},{"javadoc":"Refresh parameters from an existing parameter buffer.\n@throws IOException thrown if an IO error occurs.","static":false,"name":"refresh","comment":"Refresh parameters from an existing parameter buffer.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DBParms","comment":"DBParms manages 4-byte integer parameters associated with a database \n and stored as the first buffer (ID 0) in the buffer file.  The maximum number of \n parameters is determined by the .","fields":[{"type_long":"int","javadoc":"Parameter number for the Master Table Root Buffer ID","static":true,"name":"MASTER_TABLE_ROOT_BUFFER_ID_PARM","comment":"Parameter number for the Master Table Root Buffer ID","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DATABASE_ID_HIGH_PARM","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DATABASE_ID_LOW_PARM","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"NODE_TYPE_SIZE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"DATA_LENGTH_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"VERSION_SIZE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"NODE_TYPE_OFFSET","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"DATA_LENGTH_OFFSET","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"VERSION_OFFSET","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"PARM_BASE_OFFSET","comment":"","type_short":"int","constant_value":"6"},{"type_long":"byte","javadoc":"","static":true,"name":"VERSION","comment":"","type_short":"byte","constant_value":"1"},{"type_long":"db.buffers.BufferMgr","javadoc":"","static":false,"name":"bufferMgr","comment":"","type_short":"BufferMgr","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.util.datastruct.IntIntHashtable","javadoc":"","static":false,"name":"cache","comment":"","type_short":"IntIntHashtable","constant_value":null}]}
