{"implements":[],"javadoc":"<code>BufferNode<\/code> is a DataBuffer wrapper which facilitates\n linking node into various lists and status tracking.  \n Linked lists supported, include:\n <ul>\n <li>Buffer cache<\/li>\n <li>Buffer versions<\/li>\n <li>Checkpoint list<\/li>\n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a buffer node.","static":false,"name":"<init>","comment":"Construct a buffer node.","params":[{"type_long":"int","name":"id","comment":"","type_short":"int"},{"type_long":"int","name":"checkpoint","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear snapshotTaken flags so that node will be properly retained by the next recovery snapshot\n if necessary.","static":false,"name":"clearSnapshotTaken","comment":"Clear snapshotTaken flags so that node will be properly retained by the next recovery snapshot\n if necessary.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Unlink this node from the Cache list","static":false,"name":"removeFromCache","comment":"Unlink this node from the Cache list","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Link this node to the top of the Cache list.\n@param cacheHead","static":false,"name":"addToCache","comment":"Link this node to the top of the Cache list.","params":[{"type_long":"db.buffers.BufferNode","name":"cacheHead","comment":"","type_short":"BufferNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Unlink this node from the Checkpoint list","static":false,"name":"removeFromCheckpoint","comment":"Unlink this node from the Checkpoint list","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Link this node to the top of the Checkpoint list.\n@param checkpointHead","static":false,"name":"addToCheckpoint","comment":"Link this node to the top of the Checkpoint list.","params":[{"type_long":"db.buffers.BufferNode","name":"checkpointHead","comment":"","type_short":"BufferNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Unlink this node from the version list.","static":false,"name":"removeFromVersion","comment":"Unlink this node from the version list.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Link this node to the top of the version list.\n@param versionHead","static":false,"name":"addToVersion","comment":"Link this node to the top of the version list.","params":[{"type_long":"db.buffers.BufferNode","name":"versionHead","comment":"","type_short":"BufferNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BufferNode","comment":"BufferNode is a DataBuffer wrapper which facilitates\n linking node into various lists and status tracking.  \n Linked lists supported, include:\n \n Buffer cache\n Buffer versions\n Checkpoint list\n ","fields":[{"type_long":"db.buffers.BufferNode","javadoc":"Chain of buffers currently in memory cache","static":false,"name":"nextCached","comment":"Chain of buffers currently in memory cache","type_short":"BufferNode","constant_value":null},{"type_long":"db.buffers.BufferNode","javadoc":"","static":false,"name":"prevCached","comment":"","type_short":"BufferNode","constant_value":null},{"type_long":"db.buffers.BufferNode","javadoc":"Chain of buffers having the same buffer ID which \n have been modified.  Each version corresponds to a\n different checkpoint.","static":false,"name":"nextVersion","comment":"Chain of buffers having the same buffer ID which \n have been modified.  Each version corresponds to a\n different checkpoint.","type_short":"BufferNode","constant_value":null},{"type_long":"db.buffers.BufferNode","javadoc":"","static":false,"name":"prevVersion","comment":"","type_short":"BufferNode","constant_value":null},{"type_long":"db.buffers.BufferNode","javadoc":"Chain of buffers corresponding to a single checkpoint.","static":false,"name":"nextInCheckpoint","comment":"Chain of buffers corresponding to a single checkpoint.","type_short":"BufferNode","constant_value":null},{"type_long":"db.buffers.BufferNode","javadoc":"","static":false,"name":"prevInCheckpoint","comment":"","type_short":"BufferNode","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"id","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"checkpoint","comment":"","type_short":"int","constant_value":null},{"type_long":"db.buffers.DataBuffer","javadoc":"DataBuffer object reference.  Holds memory reference to buffer object.","static":false,"name":"buffer","comment":"DataBuffer object reference.  Holds memory reference to buffer object.","type_short":"DataBuffer","constant_value":null},{"type_long":"int","javadoc":"DataBuffer index within disk cache.\n A value of -1 indicates that buffer has not yet been written to disk cache.","static":false,"name":"diskCacheIndex","comment":"DataBuffer index within disk cache.\n A value of -1 indicates that buffer has not yet been written to disk cache.","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"The <code>locked<\/code> flag is set true when the associated buffer has been\n given out for update.  When the buffer is released, <code>locked<\/code> is set\n false.","static":false,"name":"locked","comment":"The locked flag is set true when the associated buffer has been\n given out for update.  When the buffer is released, locked is set\n false.","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"The <code>empty<\/code> flag is set true when a buffer has been deleted and is\n available for re-use.  If false, the buffer has been allocated.","static":false,"name":"empty","comment":"The empty flag is set true when a buffer has been deleted and is\n available for re-use.  If false, the buffer has been allocated.","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"The <code>modified<\/code> flag is set true the first time it is modified\n relative to the source file.  Once a save occurs to a buffer file, this can\n be set false.  This flag remains false for original source buffers which\n are not modified.","static":false,"name":"modified","comment":"The modified flag is set true the first time it is modified\n relative to the source file.  Once a save occurs to a buffer file, this can\n be set false.  This flag remains false for original source buffers which\n are not modified.","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"The <code>isDirty<\/code> flag indicates that the associated buffer has been\n modified since the last time it was written to the disk cache storage.\n Once re-written to the disk cache, this flag is set to false.","static":false,"name":"isDirty","comment":"The isDirty flag indicates that the associated buffer has been\n modified since the last time it was written to the disk cache storage.\n Once re-written to the disk cache, this flag is set to false.","type_short":"boolean","constant_value":null},{"type_long":"boolean[]","javadoc":"The <code>snapshotTaken<\/code> flags are used by the RecoveryMgr to track if a \n modified node has been written to the recovery file.","static":false,"name":"snapshotTaken","comment":"The snapshotTaken flags are used by the RecoveryMgr to track if a \n modified node has been written to the recovery file.","type_short":"boolean[]","constant_value":null}]}
