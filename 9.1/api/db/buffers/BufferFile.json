{"implements":[],"javadoc":"<code>BufferFile<\/code> facilitates read\/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.","static":false,"methods":[{"javadoc":"Returns true if this file may not be modified \n via the buffer put method.  \n A read-only file may be considered \"updateable\" if the canSave\n method returns true.  The term \"updateable\" means that a Save file\n can be obtained via the getSaveFile method.\n@throws IOException if an I\/O error occurs","static":false,"name":"isReadOnly","comment":"Returns true if this file may not be modified \n via the buffer put method.  \n A read-only file may be considered \"updateable\" if the canSave\n method returns true.  The term \"updateable\" means that a Save file\n can be obtained via the getSaveFile method.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"If file is open read-write, the modified contents are flushed\n and the file re-opened as read-only.  This is also used to commit\n a new version if the file had been modified for update.\n@returns true if successfully transitioned from read-write to read-only\n@throws IOException if an I\/O error occurs","static":false,"name":"setReadOnly","comment":"If file is open read-write, the modified contents are flushed\n and the file re-opened as read-only.  This is also used to commit\n a new version if the file had been modified for update.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get a the stored value for a named parameter.\n@param name parameter name\n@return integer value\n@throws NoSuchElementException thrown if parameter not found\n@throws IOException","static":false,"name":"getParameter","comment":"Get a the stored value for a named parameter.","params":[{"type_long":"java.lang.String","name":"name","comment":"parameter name","type_short":"String"}],"throws":[{"type_long":"java.util.NoSuchElementException","comment":"thrown if parameter not found","type_short":"NoSuchElementException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"integer value","type_short":"int"}},{"javadoc":"Set the integer value for a named parameter.\n@param name parameter name\n@param value parameter value\n@throws IOException","static":false,"name":"setParameter","comment":"Set the integer value for a named parameter.","params":[{"type_long":"java.lang.String","name":"name","comment":"parameter name","type_short":"String"},{"type_long":"int","name":"value","comment":"parameter value","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes all parameters\n@throws IOException","static":false,"name":"clearParameters","comment":"Deletes all parameters","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all parameter names.\n@throws IOException","static":false,"name":"getParameterNames","comment":"Returns a list of all parameter names.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Return the actual size of a user data buffer.  This value should be \n used when constructing DataBuffer objects.\n@return DataBuffer data size as a number of bytes\n@throws IOException if an I\/O error occurs","static":false,"name":"getBufferSize","comment":"Return the actual size of a user data buffer.  This value should be \n used when constructing DataBuffer objects.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"int","comment":"DataBuffer data size as a number of bytes","type_short":"int"}},{"javadoc":"Returns the number of allocated buffer indexes.\n When a new buffer is allocated, and the file size\n grows, the buffer will remain allocated although it\n may be added to the list of free-indexes.  A file will\n never shrink in size due to this permanent allocation.\n@throws IOException","static":false,"name":"getIndexCount","comment":"Returns the number of allocated buffer indexes.\n When a new buffer is allocated, and the file size\n grows, the buffer will remain allocated although it\n may be added to the list of free-indexes.  A file will\n never shrink in size due to this permanent allocation.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the list of free indexes sorted by value.\n The management of the free-index-list is implementation\n specific.\n@throws IOException","static":false,"name":"getFreeIndexes","comment":"Returns the list of free indexes sorted by value.\n The management of the free-index-list is implementation\n specific.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"Sets the list of free buffer indexes.\n The management of the free-index-list is implementation\n specific.\n@param indexes\n@throws IOException","static":false,"name":"setFreeIndexes","comment":"Sets the list of free buffer indexes.\n The management of the free-index-list is implementation\n specific.","params":[{"type_long":"int[]","name":"indexes","comment":"","type_short":"int[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Close the buffer file.  If the file was open for write access,\n all buffers are flushed and the file header updated.  Once closed,\n this object is immediately disposed and may no longer be used.\n@throws IOException if an I\/O error occurs","static":false,"name":"close","comment":"Close the buffer file.  If the file was open for write access,\n all buffers are flushed and the file header updated.  Once closed,\n this object is immediately disposed and may no longer be used.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete this buffer file if writable.  Once deleted,\n this object is immediately disposed and may no longer be used.\n@returns true if deleted, false if the file is read-only\n@throws IOException if an I\/O error occurs.","static":false,"name":"delete","comment":"Delete this buffer file if writable.  Once deleted,\n this object is immediately disposed and may no longer be used.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Dispose of this buffer file object.  If file is not readOnly\n and has not been closed, an attempt will be made to delete the\n associated file(s).  Once disposed, it may no longer be used.","static":false,"name":"dispose","comment":"Dispose of this buffer file object.  If file is not readOnly\n and has not been closed, an attempt will be made to delete the\n associated file(s).  Once disposed, it may no longer be used.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the specified buffer.\n DataBuffer data and flags are read from the file at index and \n stored within the supplied DataBuffer object.  If the read buffer\n is empty, the DataBuffer's data field will remain unchanged (which could be null).\n@param buf a buffer whose data array will be filled-in or replaced.\n@param index index of buffer to be read.  First user buffer\n is at index 0.\n@throws EOFException if the requested buffer index is greater \n than the number of available buffers of the end-of-file was\n encountered while reading the buffer.\n@throws IOException if an I\/O error occurs","static":false,"name":"get","comment":"Get the specified buffer.\n DataBuffer data and flags are read from the file at index and \n stored within the supplied DataBuffer object.  If the read buffer\n is empty, the DataBuffer's data field will remain unchanged (which could be null).","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"a buffer whose data array will be filled-in or replaced.","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"index of buffer to be read.  First user buffer\n is at index 0.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"","type_short":"DataBuffer"}},{"javadoc":"Store a data buffer at the specified block index.\n@param buf data buffer\n@param index block index\n@throws IOException thrown if an IO error occurs","static":false,"name":"put","comment":"Store a data buffer at the specified block index.","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"data buffer","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"block index","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BufferFile","comment":"BufferFile facilitates read\/write access to buffer oriented file.\n Access to related resources, such as parameters and change data, is also facilitated.","fields":[]}
