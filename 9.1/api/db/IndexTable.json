{"implements":[],"javadoc":"<code>IndexTable<\/code> maintains a secondary index within a private Table instance.\n This index facilitates the indexing of non-unique secondary keys within a\n user Table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new or existing secondary index. An existing index must have\n its' root ID specified within the tableRecord.\n@param primaryTable primary table.\n@param indexTableRecord specifies the index parameters.\n@throws IOException thrown if IO error occurs","static":false,"name":"<init>","comment":"Construct a new or existing secondary index. An existing index must have\n its' root ID specified within the tableRecord.","params":[{"type_long":"db.Table","name":"primaryTable","comment":"primary table.","type_short":"Table"},{"type_long":"db.TableRecord","name":"indexTableRecord","comment":"specifies the index parameters.","type_short":"TableRecord"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the index table for a specified index TableRecord.\n@param db database handle\n@param indexTableRecord master table record for an index table\n@return IndexTable index table\n@throws IOException thrown if IO error occurs","static":true,"name":"getIndexTable","comment":"Get the index table for a specified index TableRecord.","params":[{"type_long":"db.DBHandle","name":"db","comment":"database handle","type_short":"DBHandle"},{"type_long":"db.TableRecord","name":"indexTableRecord","comment":"master table record for an index table","type_short":"TableRecord"}],"throws":[],"return":{"type_long":"db.IndexTable","comment":"IndexTable index table","type_short":"IndexTable"}},{"javadoc":"Create a new index table for an empty primary table.\n@param primaryTable primary table to be indexed\n@param indexColumn primary table column to be indexed\n@return IndexTable new index table\n@throws IOException thrown if IO error occurs","static":true,"name":"createIndexTable","comment":"Create a new index table for an empty primary table.","params":[{"type_long":"db.Table","name":"primaryTable","comment":"primary table to be indexed","type_short":"Table"},{"type_long":"int","name":"indexColumn","comment":"primary table column to be indexed","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.IndexTable","comment":"IndexTable new index table","type_short":"IndexTable"}},{"javadoc":"Check the consistency of this index table.\n@return true if consistency check passed, else false\n@throws IOException\n@throws CancelledException","static":false,"name":"isConsistent","comment":"Check the consistency of this index table.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if consistency check passed, else false","type_short":"boolean"}},{"javadoc":"Get the table number associated with the underlying index table.\n@return table number","static":false,"name":"getTableNum","comment":"Get the table number associated with the underlying index table.","params":[],"throws":[],"return":{"type_long":"long","comment":"table number","type_short":"long"}},{"javadoc":"Get the indexed column within the primary table schema.\n@return indexed column number","static":false,"name":"getColumnIndex","comment":"Get the indexed column within the primary table schema.","params":[],"throws":[],"return":{"type_long":"int","comment":"indexed column number","type_short":"int"}},{"javadoc":"Get index table statistics\n@return statistics data\n@throws IOException thrown if IO error occurs","static":false,"name":"getStatistics","comment":"Get index table statistics","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.TableStatistics","comment":"statistics data","type_short":"TableStatistics"}},{"javadoc":"Determine if there is an occurance of the specified index key value.\n@param field index key value\n@return true if an index key value equal to field exists.","static":false,"name":"hasRecord","comment":"Determine if there is an occurance of the specified index key value.","params":[{"type_long":"db.Field","name":"field","comment":"index key value","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if an index key value equal to field exists.","type_short":"boolean"}},{"javadoc":"Find all primary keys which correspond to the specified indexed field\n value.\n@param field the field value to search for.\n@return list of primary keys","static":false,"name":"findPrimaryKeys","comment":"Find all primary keys which correspond to the specified indexed field\n value.","params":[{"type_long":"db.Field","name":"indexValue","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"list of primary keys","type_short":"long[]"}},{"javadoc":"Get the number of primary keys which correspond to the specified indexed field\n value.\n@param field the field value to search for.\n@return key count","static":false,"name":"getKeyCount","comment":"Get the number of primary keys which correspond to the specified indexed field\n value.","params":[{"type_long":"db.Field","name":"indexValue","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"key count","type_short":"int"}},{"javadoc":"Add an entry to this index. Caller is responsible for ensuring that this\n is not a duplicate entry.\n@param record new record\n@throws IOException","static":false,"name":"addEntry","comment":"Add an entry to this index. Caller is responsible for ensuring that this\n is not a duplicate entry.","params":[{"type_long":"db.Record","name":"record","comment":"new record","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete an entry from this index.\n@param record deleted record\n@throws IOException","static":false,"name":"deleteEntry","comment":"Delete an entry from this index.","params":[{"type_long":"db.Record","name":"record","comment":"deleted record","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete all records within this index table.","static":false,"name":"deleteAll","comment":"Delete all records within this index table.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Iterate over all index keys.  Index keys are sorted in ascending order.\n@return index key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexIterator","comment":"Iterate over all index keys.  Index keys are sorted in ascending order.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index key iterator","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order.\n@param minField minimum index column value, if null absolute minimum is used\n@param maxField maximum index column value, if null absolute maximum is used\n@param before if true initial position is before minField, else position\n is after endField\n@return index field iterator.\n@throws IOException","static":false,"name":"indexIterator","comment":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index column value, if null absolute minimum is used","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index column value, if null absolute maximum is used","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"if true initial position is before minField, else position\n is after endField","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index field iterator.","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order with the \n initial iterator position corresponding to the startField.\n@param minField minimum index column value, if null absolute minimum is used\n@param maxField maximum index column value, if null absolute maximum is used\n@param startField index column value corresponding to initial position of iterator\n@param before if true initial position is before startField value, else position\n is after startField value\n@return index field iterator.\n@throws IOException","static":false,"name":"indexIterator","comment":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order with the \n initial iterator position corresponding to the startField.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index column value, if null absolute minimum is used","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index column value, if null absolute maximum is used","type_short":"Field"},{"type_long":"db.Field","name":"startField","comment":"index column value corresponding to initial position of iterator","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"if true initial position is before startField value, else position\n is after startField value","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index field iterator.","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.\n@param startField index key value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param startField index key value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"db.Field","name":"startField","comment":"index key value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n If before is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified minField value. \n If before is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified maxField value.\n@param minField minimum index key value\n@param maxField maximum index key value\n@param before if true, position iterator before minField value, \n Otherwise, position iterator after maxField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n If before is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified minField value. \n If before is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified maxField value.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index key value","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index key value","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"if true, position iterator before minField value, \n Otherwise, position iterator after maxField value.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n The iterator is initially positioned before or after the specified startField index value.\n@param minField minimum index key value\n@param maxField maximum index key value\n@param startField starting indexed value position\n@param before if true positioned before startField value, else positioned after maxField value\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"keyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n The iterator is initially positioned before or after the specified startField index value.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index key value","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index key value","type_short":"Field"},{"type_long":"db.Field","name":"startField","comment":"starting indexed value position","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"if true positioned before startField value, else positioned after maxField value","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}}],"name":"IndexTable","comment":"IndexTable maintains a secondary index within a private Table instance.\n This index facilitates the indexing of non-unique secondary keys within a\n user Table.","fields":[{"type_long":"long[]","javadoc":"","static":true,"name":"emptyKeyArray","comment":"","type_short":"long[]","constant_value":null},{"type_long":"db.DBHandle","javadoc":"Database Handle","static":false,"name":"db","comment":"Database Handle","type_short":"DBHandle","constant_value":null},{"type_long":"db.TableRecord","javadoc":"Master table record for this index table.","static":false,"name":"indexTableRecord","comment":"Master table record for this index table.","type_short":"TableRecord","constant_value":null},{"type_long":"db.Table","javadoc":"Primary table","static":false,"name":"primaryTable","comment":"Primary table","type_short":"Table","constant_value":null},{"type_long":"db.Table","javadoc":"Underlying table which contains secondary index data.","static":false,"name":"indexTable","comment":"Underlying table which contains secondary index data.","type_short":"Table","constant_value":null},{"type_long":"db.Field","javadoc":"Field type associated with indexed column.","static":false,"name":"fieldType","comment":"Field type associated with indexed column.","type_short":"Field","constant_value":null},{"type_long":"int","javadoc":"Indexed column within primary table schema.","static":false,"name":"colIndex","comment":"Indexed column within primary table schema.","type_short":"int","constant_value":null}]}
