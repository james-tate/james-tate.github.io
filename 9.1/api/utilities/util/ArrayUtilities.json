{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a new copy of the specified byte {@code array} with the elements in reversed order.\n@param array byte array to reverse\n@return new array instance with elements in reverse order","static":true,"name":"reverse","comment":"Returns a new copy of the specified byte  with the elements in reversed order.","params":[{"type_long":"byte[]","name":"array","comment":"byte array to reverse","type_short":"byte[]"}],"throws":[],"return":{"type_long":"byte[]","comment":"new array instance with elements in reverse order","type_short":"byte[]"}},{"javadoc":"Compares two primitive arrays for equality\n@param o1 the first array\n@param o2 the second array\n@return true if each element of the array is equal\n@throws IllegalArgumentException if either argument is not an array","static":true,"name":"isArrayPrimativeEqual","comment":"Compares two primitive arrays for equality","params":[{"type_long":"java.lang.Object","name":"o1","comment":"the first array","type_short":"Object"},{"type_long":"java.lang.Object","name":"o2","comment":"the second array","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"true if each element of the array is equal","type_short":"boolean"}},{"javadoc":"Returns true if a portion of byte array b1 equals an equally sized portion of byte array\n b2.\n <p>\n If the sizes of b1 or b2 do not allow for a full comparison of {@code len} bytes, this\n function will return false.\n <p>\n@param b1 first byte array\n@param start_b1 offset to start comparison in b1\n@param b2 second byte array\n@param start_b2 offset to start comparison in b2\n@param len number of bytes to compare\n@return true or false if the portion is equal","static":true,"name":"arrayRangesEquals","comment":"Returns true if a portion of byte array b1 equals an equally sized portion of byte array\n b2.\n \n If the sizes of b1 or b2 do not allow for a full comparison of  bytes, this\n function will return false.\n ","params":[{"type_long":"byte[]","name":"b1","comment":"first byte array","type_short":"byte[]"},{"type_long":"int","name":"start_b1","comment":"offset to start comparison in b1","type_short":"int"},{"type_long":"byte[]","name":"b2","comment":"second byte array","type_short":"byte[]"},{"type_long":"int","name":"start_b2","comment":"offset to start comparison in b2","type_short":"int"},{"type_long":"int","name":"len","comment":"number of bytes to compare","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true or false if the portion is equal","type_short":"boolean"}},{"javadoc":"Returns a copy of the given array with the provided element appended.  The length of\n the returned array will be one element greater than the given array.\n@param array The array to copy.\n@param element The element to append to the copy.\n@return A copy of the given array with the provided element appended.","static":true,"name":"copyAndAppend","comment":"Returns a copy of the given array with the provided element appended.  The length of\n the returned array will be one element greater than the given array.","params":[{"type_long":"T[]","name":"array","comment":"The array to copy.","type_short":"T[]"},{"type_long":"T","name":"element","comment":"The element to append to the copy.","type_short":"T"}],"throws":[],"return":{"type_long":"T[]","comment":"A copy of the given array with the provided element appended.","type_short":"T[]"}},{"javadoc":"Compare two byte arrays by their corresponding entries\n \n If the two arrays have differing lengths, the shorter precedes the longer. Otherwise, they\n are compared as in C's {@code memcmp}, except that Java {@code byte}s are signed.\n@param a the first array\n@param b the second array\n@return a comparison result as in {@link Comparable#compareTo(Object)}","static":true,"name":"compare","comment":"Compare two byte arrays by their corresponding entries\n \n If the two arrays have differing lengths, the shorter precedes the longer. Otherwise, they\n are compared as in C's , except that Java s are signed.","params":[{"type_long":"byte[]","name":"a","comment":"the first array","type_short":"byte[]"},{"type_long":"byte[]","name":"b","comment":"the second array","type_short":"byte[]"}],"throws":[],"return":{"type_long":"int","comment":"a comparison result as in Comparable#compareTo(Object)","type_short":"int"}}],"name":"ArrayUtilities","comment":"","fields":[]}
