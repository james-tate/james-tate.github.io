{"implements":[],"javadoc":"An object meant to track items with the ability to go back and forth within the list of\n items.\n \n <p>By default, duplicate entries are not allowed.  This allows for a simplified history of\n unique items.  If the client prefers to have an accurate history, then call\n {@link #setAllowDuplicates(boolean)} in order to keep all history entries.\n \n <p>By default, null values are not allowed.  If the client allows null\/empty values, then\n they should call {@link #setAllowNulls(boolean)} with a value of true.  This allows the\n backward navigation to work correctly when the client's active item is cleared.  When that \n item is cleared, then client is expected to call {@link #add(Object)} with value of \n null.  (This is safe to do, regardless of whether null are allowed).  When nulls are allowed\n and a null value is received, then current item is placed onto the history stack as the \n previous item.  This way, when the user presses the back button, the last visible item \n will be activated.  \n \n <p>Note: when nulls are allowed, only a single null value will be stored.  Further, \n if new, non-null items are added, then the null value is dropped.\n@param <T> the type of items in the list","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"The sized passed here limits the size of the list, with the oldest items being dropped\n as the list grows.  The given callback will be called when {@link #goBack()} or \n {@link #goForward()} are called.\n@param size the max number of items to keep in the list\n@param itemSelectedCallback the function to call when the client selects an item by \n        going back or forward","static":false,"name":"<init>","comment":"The sized passed here limits the size of the list, with the oldest items being dropped\n as the list grows.  The given callback will be called when #goBack() or \n #goForward() are called.","params":[{"type_long":"int","name":"size","comment":"the max number of items to keep in the list","type_short":"int"},{"type_long":"java.util.function.Consumer<T>","name":"itemSelectedCallback","comment":"the function to call when the client selects an item by \n        going back or forward","type_short":"Consumer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"True signals that this list will allow duplicate entries.  False signals to not only not\n allow duplicates, but to also move the position of an item if it is re-added to the \n list.\n \n <p>The default is false\n@param allowDuplicates true to allow duplicates","static":false,"name":"setAllowDuplicates","comment":"True signals that this list will allow duplicate entries.  False signals to not only not\n allow duplicates, but to also move the position of an item if it is re-added to the \n list.\n \n The default is false","params":[{"type_long":"boolean","name":"allowDuplicates","comment":"true to allow duplicates","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"True signals that the client allows null items to be used.  When this is true, a null\n value will be stored in this list <b>only as the last item<\/b>.  See the javadoc for \n more info.\n@param allowNulls true to allow nulls; the default is false","static":false,"name":"setAllowNulls","comment":"True signals that the client allows null items to be used.  When this is true, a null\n value will be stored in this list only as the last item.  See the javadoc for \n more info.","params":[{"type_long":"boolean","name":"allowNulls","comment":"true to allow nulls; the default is false","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds an item to this history list.  <tt>null<\/tt> values are ignored.\n \n <p>Calls to this method during selection notification will have no effect.  If you need\n to update the history during a notification, then you must do so at a later time, perhaps\n by using  {@link SystemUtilities#runSwingLater(Runnable)}.\n@param t the item to add.","static":false,"name":"add","comment":"Adds an item to this history list.  null values are ignored.\n \n Calls to this method during selection notification will have no effect.  If you need\n to update the history during a notification, then you must do so at a later time, perhaps\n by using  SystemUtilities#runSwingLater(Runnable).","params":[{"type_long":"T","name":"t","comment":"the item to add.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this history list's current item pointer is not at the end of the list.\n@return true if this history list's current item pointer is not at the end of the list.","static":false,"name":"hasNext","comment":"Returns true if this history list's current item pointer is not at the end of the list.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this history list's current item pointer is not at the end of the list.","type_short":"boolean"}},{"javadoc":"Returns true if this history list's current item pointer is not at the beginning of the list.\n@return true if this history list's current item pointer is not at the beginning of the list.","static":false,"name":"hasPrevious","comment":"Returns true if this history list's current item pointer is not at the beginning of the list.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this history list's current item pointer is not at the beginning of the list.","type_short":"boolean"}},{"javadoc":"Moves this history list's current item pointer back one and then calls the user-provided\n callback to signal the newly selected item.\n \n <p>No action is taken if the current pointer is already at the beginning of the list.","static":false,"name":"goBack","comment":"Moves this history list's current item pointer back one and then calls the user-provided\n callback to signal the newly selected item.\n \n No action is taken if the current pointer is already at the beginning of the list.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Moves this history list's current item pointer forward one and then calls the user-provided\n callback to signal the newly selected item.\n \n <p>No action is taken if the current pointer is already at the end of the list.","static":false,"name":"goForward","comment":"Moves this history list's current item pointer forward one and then calls the user-provided\n callback to signal the newly selected item.\n \n No action is taken if the current pointer is already at the end of the list.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the item currently pointed to within the list of items.  When an item is \n added, this will be that item.  Otherwise, it will be the last item navigated.\n@return the item currently pointed to within the list of items.","static":false,"name":"getCurrentHistoryItem","comment":"Returns the item currently pointed to within the list of items.  When an item is \n added, this will be that item.  Otherwise, it will be the last item navigated.","params":[],"throws":[],"return":{"type_long":"T","comment":"the item currently pointed to within the list of items.","type_short":"T"}},{"javadoc":"Get all items in the history that come before the current history item.  They are \n returned in navigation order, as traversed if {@link #goBack()} is called.\n@return the items","static":false,"name":"getPreviousHistoryItems","comment":"Get all items in the history that come before the current history item.  They are \n returned in navigation order, as traversed if #goBack() is called.","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"the items","type_short":"List"}},{"javadoc":"Get all items in the history that come after the current history item.  They are \n returned in navigation order, as traversed if {@link #goForward() is called.}\n@return the items","static":false,"name":"getNextHistoryItems","comment":"Get all items in the history that come after the current history item.  They are \n returned in navigation order, as traversed if #goForward()","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"the items","type_short":"List"}},{"javadoc":"Clears all history entries and resets the current item pointer.","static":false,"name":"clear","comment":"Clears all history entries and resets the current item pointer.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of items in this history list\n@return the number of items in this history list","static":false,"name":"size","comment":"Returns the number of items in this history list","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of items in this history list","type_short":"int"}},{"javadoc":"","static":false,"name":"ignoreItem","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"ignoreNull","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"dropNull","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isAtEnd","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getHistoryStack","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.util.datastruct.FixedSizeStack<T>","comment":"","type_short":"FixedSizeStack"}},{"javadoc":"","static":false,"name":"handleDuplicate","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"broadcast","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"trimHistoryToCurrentIndex","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"HistoryList","comment":"An object meant to track items with the ability to go back and forth within the list of\n items.\n \n By default, duplicate entries are not allowed.  This allows for a simplified history of\n unique items.  If the client prefers to have an accurate history, then call\n #setAllowDuplicates(boolean) in order to keep all history entries.\n \n By default, null values are not allowed.  If the client allows null\/empty values, then\n they should call #setAllowNulls(boolean) with a value of true.  This allows the\n backward navigation to work correctly when the client's active item is cleared.  When that \n item is cleared, then client is expected to call #add(Object) with value of \n null.  (This is safe to do, regardless of whether null are allowed).  When nulls are allowed\n and a null value is received, then current item is placed onto the history stack as the \n previous item.  This way, when the user presses the back button, the last visible item \n will be activated.  \n \n Note: when nulls are allowed, only a single null value will be stored.  Further, \n if new, non-null items are added, then the null value is dropped.","fields":[{"type_long":"ghidra.util.datastruct.FixedSizeStack<T>","javadoc":"","static":false,"name":"historyStack","comment":"","type_short":"FixedSizeStack","constant_value":null},{"type_long":"java.util.function.Consumer<T>","javadoc":"","static":false,"name":"itemSelectedCallback","comment":"","type_short":"Consumer","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"historyIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isBroadcasting","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowDuplicates","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowsNulls","comment":"","type_short":"boolean","constant_value":null}]}
