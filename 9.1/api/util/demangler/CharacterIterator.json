{"implements":[],"javadoc":"A class for bidirectional iteration over a string.\n \n Iterators maintain a current character index, whose valid range is from\n 0 to string.length()-1.\n \n The current index can be retrieved by calling getIndex() and set directly\n by calling setIndex().\n \n The methods previous() and next() are used for iteration. They return DONE if\n they would move outside the range from 0 to string.length()-1.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new character iterator using str.\n@param str the string to iterate","static":false,"name":"<init>","comment":"Constructs a new character iterator using str.","params":[{"type_long":"java.lang.String","name":"str","comment":"the string to iterate","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the underlying string.\n@return the underlying string","static":false,"name":"getString","comment":"Returns the underlying string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the underlying string","type_short":"String"}},{"javadoc":"Returns the current index.\n@return the current index.","static":false,"name":"getIndex","comment":"Returns the current index.","params":[],"throws":[],"return":{"type_long":"int","comment":"the current index.","type_short":"int"}},{"javadoc":"Returns the length of the iterator.\n@return the length of the iterator","static":false,"name":"getLength","comment":"Returns the length of the iterator.","params":[],"throws":[],"return":{"type_long":"int","comment":"the length of the iterator","type_short":"int"}},{"javadoc":"Sets the position to the specified position in the text.\n@param index the position within the text.\n@return the character at the specified position\n@throws IllegalArgumentException if index is not in range from 0 to string.length()-1","static":false,"name":"setIndex","comment":"Sets the position to the specified position in the text.","params":[{"type_long":"int","name":"index","comment":"the position within the text.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"the character at the specified position","type_short":"void"}},{"javadoc":"Returns true if there are more characters to read\n@return true if there are more characters to read","static":false,"name":"hasNext","comment":"Returns true if there are more characters to read","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there are more characters to read","type_short":"boolean"}},{"javadoc":"Returns the next character without incrementing the current index.\n@return the next character without incrementing the current index","static":false,"name":"peek","comment":"Returns the next character without incrementing the current index.","params":[],"throws":[],"return":{"type_long":"char","comment":"the next character without incrementing the current index","type_short":"char"}},{"javadoc":"Peeks at the character current index + lookAhead.\n Returns DONE if the computed position is out of range.\n@param lookAhead number of characters to look ahead\n@return the character at index+lookAhead","static":false,"name":"peek","comment":"Peeks at the character current index + lookAhead.\n Returns DONE if the computed position is out of range.","params":[{"type_long":"int","name":"lookAhead","comment":"number of characters to look ahead","type_short":"int"}],"throws":[],"return":{"type_long":"char","comment":"the character at index+lookAhead","type_short":"char"}},{"javadoc":"Increments the current index by one and returns the character\n at the new index.  If the resulting index is greater or equal\n to the end index, the current index is reset to the end index and\n a value of DONE is returned.\n@return the character at the new position or DONE","static":false,"name":"next","comment":"Increments the current index by one and returns the character\n at the new index.  If the resulting index is greater or equal\n to the end index, the current index is reset to the end index and\n a value of DONE is returned.","params":[],"throws":[],"return":{"type_long":"char","comment":"the character at the new position or DONE","type_short":"char"}},{"javadoc":"Returns the character at the current index and then increments the index by one.  \n If the resulting index is greater or equal\n to the end index, the current index is reset to the end index and\n a value of DONE is returned.\n@return the character at the new position or DONE","static":false,"name":"getAndIncrement","comment":"Returns the character at the current index and then increments the index by one.  \n If the resulting index is greater or equal\n to the end index, the current index is reset to the end index and\n a value of DONE is returned.","params":[],"throws":[],"return":{"type_long":"char","comment":"the character at the new position or DONE","type_short":"char"}},{"javadoc":"Decrements the current index by one and returns the character\n at the new index. If the current index is 0, the index\n remains at 0 and a value of DONE is returned.\n@return the character at the new position or DONE","static":false,"name":"previous","comment":"Decrements the current index by one and returns the character\n at the new index. If the current index is 0, the index\n remains at 0 and a value of DONE is returned.","params":[],"throws":[],"return":{"type_long":"char","comment":"the character at the new position or DONE","type_short":"char"}},{"javadoc":"Returns the next ascii string of the specified length starting\n at the current index.\n@param len the length of the string to read\n@return the next ascii string","static":false,"name":"nextString","comment":"Returns the next ascii string of the specified length starting\n at the current index.","params":[{"type_long":"int","name":"len","comment":"the length of the string to read","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the next ascii string","type_short":"String"}},{"javadoc":"Returns the next integer. The radix must be 10 (decimal).\n For example, given \"...12fred..\". If current index is pointing\n to the '1', then this value will return 12.\n@return the next base-10 integer.","static":false,"name":"nextInteger","comment":"Returns the next integer. The radix must be 10 (decimal).\n For example, given \"...12fred..\". If current index is pointing\n to the '1', then this value will return 12.","params":[],"throws":[],"return":{"type_long":"int","comment":"the next base-10 integer.","type_short":"int"}},{"javadoc":"Looks for the next occurrence of 'c' starting\n at the current index. Returns the character\n position in the underlying string or -1 if 'c'\n is not found.","static":false,"name":"find","comment":"Looks for the next occurrence of 'c' starting\n at the current index. Returns the character\n position in the underlying string or -1 if 'c'\n is not found.","params":[{"type_long":"char","name":"c","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getContext","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"CharacterIterator","comment":"A class for bidirectional iteration over a string.\n \n Iterators maintain a current character index, whose valid range is from\n 0 to string.length()-1.\n \n The current index can be retrieved by calling getIndex() and set directly\n by calling setIndex().\n \n The methods previous() and next() are used for iteration. They return DONE if\n they would move outside the range from 0 to string.length()-1.","fields":[{"type_long":"char","javadoc":"Constant that is returned when the iterator has reached either the end\n or the beginning of the text. The value is '\\\\uFFFF', the \"not a\n character\" value which should not occur in any valid Unicode string.","static":true,"name":"DONE","comment":"Constant that is returned when the iterator has reached either the end\n or the beginning of the text. The value is '\\\\uFFFF', the \"not a\n character\" value which should not occur in any valid Unicode string.","type_short":"char","constant_value":"ï¿¿"},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"string","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"index","comment":"","type_short":"int","constant_value":null}]}
