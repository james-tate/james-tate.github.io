{"implements":[],"javadoc":"The ProjectData interface provides access to all the data files and folders\n in a project.","static":false,"methods":[{"javadoc":"@return local storage implementation class","static":false,"name":"getLocalStorageClass","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Class<? extends ghidra.framework.store.local.LocalFileSystem>","comment":"local storage implementation class","type_short":"Class"}},{"javadoc":"Returns the root folder of the project.","static":false,"name":"getRootFolder","comment":"Returns the root folder of the project.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"","type_short":"DomainFolder"}},{"javadoc":"Get domain folder specified by an absolute data path.\n@param path the absolute path of domain folder relative to the data folder.\n@return domain folder or null if folder not found","static":false,"name":"getFolder","comment":"Get domain folder specified by an absolute data path.","params":[{"type_long":"java.lang.String","name":"path","comment":"the absolute path of domain folder relative to the data folder.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"domain folder or null if folder not found","type_short":"DomainFolder"}},{"javadoc":"Get the approximate number of files contained within the project.  The number \n may be reduced if not connected to the shared repository.  Only the newer \n indexed file-system supports this capability, a value of -1 will be\n returned for older projects utilizing the mangled file-system or if an\n IO Error occurs.\n An approximate number is provided since the two underlying file systems\n are consulted separately and the local private file-system does not\n distinguish between checked-out files and private files.  This number \n is currently intended as a rough sizing number to disable certain features\n when very large projects are in use.  Generally the larger of the two\n file counts will be returned.\n@return number of project files or -1 if unknown.","static":false,"name":"getFileCount","comment":"Get the approximate number of files contained within the project.  The number \n may be reduced if not connected to the shared repository.  Only the newer \n indexed file-system supports this capability, a value of -1 will be\n returned for older projects utilizing the mangled file-system or if an\n IO Error occurs.\n An approximate number is provided since the two underlying file systems\n are consulted separately and the local private file-system does not\n distinguish between checked-out files and private files.  This number \n is currently intended as a rough sizing number to disable certain features\n when very large projects are in use.  Generally the larger of the two\n file counts will be returned.","params":[],"throws":[],"return":{"type_long":"int","comment":"number of project files or -1 if unknown.","type_short":"int"}},{"javadoc":"Get domain file specified by an absolute data path.\n@param path the absolute path of domain file relative to the root folder.\n@return domain file or null if file not found","static":false,"name":"getFile","comment":"Get domain file specified by an absolute data path.","params":[{"type_long":"java.lang.String","name":"path","comment":"the absolute path of domain file relative to the root folder.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"domain file or null if file not found","type_short":"DomainFile"}},{"javadoc":"Finds all open domain files and appends\n them to the specified list.\n@param list the list to receive the open domain files","static":false,"name":"findOpenFiles","comment":"Finds all open domain files and appends\n them to the specified list.","params":[{"type_long":"java.util.List<ghidra.framework.model.DomainFile>","name":"list","comment":"the list to receive the open domain files","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get domain file specified by its unique fileID.\n@param fileID domain file ID\n@return domain file or null if file not found","static":false,"name":"getFileByID","comment":"Get domain file specified by its unique fileID.","params":[{"type_long":"java.lang.String","name":"fileID","comment":"domain file ID","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"domain file or null if file not found","type_short":"DomainFile"}},{"javadoc":"Get a GhidraURL for a shared domain file which is available \n within a remote repository.\n@param path the absolute path of domain file relative to the root folder.\n@return URL object for accessing shared file from outside of a project, or\n null if file does not exist or is not shared.\n@see ghidra.framework.data.URLGhidraRepository","static":false,"name":"getSharedFileURL","comment":"Get a GhidraURL for a shared domain file which is available \n within a remote repository.","params":[{"type_long":"java.lang.String","name":"path","comment":"the absolute path of domain file relative to the root folder.","type_short":"String"}],"throws":[],"return":{"type_long":"java.net.URL","comment":"URL object for accessing shared file from outside of a project, or\n null if file does not exist or is not shared.","type_short":"URL"}},{"javadoc":"Transform the specified name into an acceptable folder or file item name.  Only an individual folder\n or file name should be specified, since any separators will be stripped-out.\n NOTE: Uniqueness of name within the intended target folder is not considered.\n@param name\n@return valid name or \"unknown\" if no valid characters exist within name provided","static":false,"name":"makeValidName","comment":"Transform the specified name into an acceptable folder or file item name.  Only an individual folder\n or file name should be specified, since any separators will be stripped-out.\n NOTE: Uniqueness of name within the intended target folder is not considered.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"valid name or \"unknown\" if no valid characters exist within name provided","type_short":"String"}},{"javadoc":"Returns the projectLocator for the this ProjectData.","static":false,"name":"getProjectLocator","comment":"Returns the projectLocator for the this ProjectData.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.ProjectLocator","comment":"","type_short":"ProjectLocator"}},{"javadoc":"Adds a listener that will be notified when any folder or file\n changes in the project.\n@param listener the listener to be notified of folder and file changes.","static":false,"name":"addDomainFolderChangeListener","comment":"Adds a listener that will be notified when any folder or file\n changes in the project.","params":[{"type_long":"ghidra.framework.model.DomainFolderChangeListener","name":"listener","comment":"the listener to be notified of folder and file changes.","type_short":"DomainFolderChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the listener to be notified of folder and file changes.\n@param listener the listener to be removed.","static":false,"name":"removeDomainFolderChangeListener","comment":"Removes the listener to be notified of folder and file changes.","params":[{"type_long":"ghidra.framework.model.DomainFolderChangeListener","name":"listener","comment":"the listener to be removed.","type_short":"DomainFolderChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sync the Domain folder\/file structure with the underlying file structure.\n@param force if true all folders will be be visited and refreshed, if false\n only those folders previously visited will be refreshed.","static":false,"name":"refresh","comment":"Sync the Domain folder\/file structure with the underlying file structure.","params":[{"type_long":"boolean","name":"force","comment":"if true all folders will be be visited and refreshed, if false\n only those folders previously visited will be refreshed.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns User object associated with remote repository or null if a remote repository\n is not used.","static":false,"name":"getUser","comment":"Returns User object associated with remote repository or null if a remote repository\n is not used.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.remote.User","comment":"","type_short":"User"}},{"javadoc":"Return the repository for this project data.\n@return null if the project is not associated with a repository","static":false,"name":"getRepository","comment":"Return the repository for this project data.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.client.RepositoryAdapter","comment":"null if the project is not associated with a repository","type_short":"RepositoryAdapter"}},{"javadoc":"Convert a local project to a shared project. NOTE: The project should be closed and\n then reopened after this method is called.\n@param repository the repository that the project will be associated with.\n@param monitor task monitor\n@throws IOException thrown if files under version control are still checked out, or\n if there was a problem accessing the filesystem\n@throws CancelledException if the conversion was cancelled while versioned files were being\n converted to private files.","static":false,"name":"convertProjectToShared","comment":"Convert a local project to a shared project. NOTE: The project should be closed and\n then reopened after this method is called.","params":[{"type_long":"ghidra.framework.client.RepositoryAdapter","name":"repository","comment":"the repository that the project will be associated with.","type_short":"RepositoryAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if files under version control are still checked out, or\n if there was a problem accessing the filesystem","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the conversion was cancelled while versioned files were being\n converted to private files.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the repository for this project; the server may have changed or a different \n repository is being used.  NOTE: The project should be closed and then reopened after this\n method is called.\n@param repository new repository to use\n@param monitor task monitor\n@throws IOException thrown if files are still checked out, or if there was a problem accessing\n the filesystem\n@throws CancelledException if the user canceled the update","static":false,"name":"updateRepositoryInfo","comment":"Update the repository for this project; the server may have changed or a different \n repository is being used.  NOTE: The project should be closed and then reopened after this\n method is called.","params":[{"type_long":"ghidra.framework.client.RepositoryAdapter","name":"repository","comment":"new repository to use","type_short":"RepositoryAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if files are still checked out, or if there was a problem accessing\n the filesystem","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the update","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Close the project storage associated with this project data object.\n NOTE: This should not be invoked if this object is utilized by a Project instance.","static":false,"name":"close","comment":"Close the project storage associated with this project data object.\n NOTE: This should not be invoked if this object is utilized by a Project instance.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@returns the maximum name length permitted for folders or items.","static":false,"name":"getMaxNameLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Validate a folder\/item name or path.\n@param name folder or item name\n@param isPath if true name represents full path\n@throws InvalidNameException if name is invalid","static":false,"name":"testValidName","comment":"Validate a folder\/item name or path.","params":[{"type_long":"java.lang.String","name":"name","comment":"folder or item name","type_short":"String"},{"type_long":"boolean","name":"isPath","comment":"if true name represents full path","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if name is invalid","type_short":"InvalidNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ProjectData","comment":"The ProjectData interface provides access to all the data files and folders\n in a project.","fields":[]}
