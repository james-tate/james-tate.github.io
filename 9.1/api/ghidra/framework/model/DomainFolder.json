{"implements":["java.lang.Comparable"],"javadoc":"<code>DomainFolder<\/code> provides a storage interface for project\n folders.  A <code>DomainFolder<\/code> is an immutable reference to \n a folder contained within a project.  The state of a <code>DomainFolder<\/code>\n object does not track name\/parent changes made to the referenced project folder.","static":false,"methods":[{"javadoc":"Return this folder's name.","static":false,"name":"getName","comment":"Return this folder's name.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Set the name on this domain folder.\n@param newName domain folder name\n@return renamed domain file (the original DomainFolder object becomes invalid since it is immutable)\n@throws InvalidNameException if newName contains illegal characters\n@throws DuplicateFileException if a folder named newName \n already exists in this files domain folder.\n@throws FileInUseException if any file within this folder or its \n decendents is in-use \/ checked-out.\n@throws IOException thrown if an IO or access error occurs.","static":false,"name":"setName","comment":"Set the name on this domain folder.","params":[{"type_long":"java.lang.String","name":"newName","comment":"domain folder name","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if newName contains illegal characters","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"thrown if an IO or access error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"renamed domain file (the original DomainFolder object becomes invalid since it is immutable)","type_short":"DomainFolder"}},{"javadoc":"Returns the local storage location for the project that this DomainFolder belongs to.","static":false,"name":"getProjectLocator","comment":"Returns the local storage location for the project that this DomainFolder belongs to.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.ProjectLocator","comment":"","type_short":"ProjectLocator"}},{"javadoc":"","static":false,"name":"getProjectData","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.ProjectData","comment":"","type_short":"ProjectData"}},{"javadoc":"Returns the path name to the domain object.","static":false,"name":"getPathname","comment":"Returns the path name to the domain object.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns true if this file is in a writable project.","static":false,"name":"isInWritableProject","comment":"Returns true if this file is in a writable project.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return parent folder or null if this DomainFolder is the root folder.","static":false,"name":"getParent","comment":"Return parent folder or null if this DomainFolder is the root folder.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"","type_short":"DomainFolder"}},{"javadoc":"Get DomainFolders in this folder.\n This returns cached information and does not force a full refresh.\n@return list of sub-folders","static":false,"name":"getFolders","comment":"Get DomainFolders in this folder.\n This returns cached information and does not force a full refresh.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder[]","comment":"list of sub-folders","type_short":"ghidra.framework.model.DomainFolder[]"}},{"javadoc":"Return the folder for the given name.\n@param name of folder to retrieve\n@return folder or null if there is no folder by the given name.","static":false,"name":"getFolder","comment":"Return the folder for the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"of folder to retrieve","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"folder or null if there is no folder by the given name.","type_short":"DomainFolder"}},{"javadoc":"Get the domain file in this folder with the given name.\n@param name name of file in this folder to retrieve\n@return domain file or null if there is no domain file in this folder with the given name.","static":false,"name":"getFile","comment":"Get the domain file in this folder with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of file in this folder to retrieve","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"domain file or null if there is no domain file in this folder with the given name.","type_short":"DomainFile"}},{"javadoc":"Determine if this folder contains any sub-folders or domain files.\n@return true if this folder is empty.","static":false,"name":"isEmpty","comment":"Determine if this folder contains any sub-folders or domain files.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this folder is empty.","type_short":"boolean"}},{"javadoc":"Get all domain files in this folder.\n This returns cached information and does not force a full refresh.\n@return list of domain files","static":false,"name":"getFiles","comment":"Get all domain files in this folder.\n This returns cached information and does not force a full refresh.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile[]","comment":"list of domain files","type_short":"ghidra.framework.model.DomainFile[]"}},{"javadoc":"Add a domain object to this folder.\n@param name domain file name\n@param obj domain object to be stored\n@param monitor progress monitor\n@return domain file created as a result of adding\n the domain object to this folder\n@throws DuplicateFileException thrown if the file name already exists\n@throws InvalidNameException if name is an empty string\n or if it contains characters other than alphanumerics.\n@throws IOException if IO or access error occurs\n@throws CancelledException if the user cancels the create.","static":false,"name":"createFile","comment":"Add a domain object to this folder.","params":[{"type_long":"java.lang.String","name":"name","comment":"domain file name","type_short":"String"},{"type_long":"ghidra.framework.model.DomainObject","name":"obj","comment":"domain object to be stored","type_short":"DomainObject"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if name is an empty string\n or if it contains characters other than alphanumerics.","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if IO or access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the create.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"domain file created as a result of adding\n the domain object to this folder","type_short":"DomainFile"}},{"javadoc":"Add a new domain file to this folder.\n@param name domain file name\n@param packFile packed file containing domain file data\n@param monitor progress monitor\n@return domain file created as a result of adding\n the domain object to this folder\n@throws DuplicateFileException thrown if the file name already exists\n@throws InvalidNameException if name is an empty string\n or if it contains characters other than alphanumerics.\n@throws IOException if IO or access error occurs\n@throws CancelledException if the user cancels the create.","static":false,"name":"createFile","comment":"Add a new domain file to this folder.","params":[{"type_long":"java.lang.String","name":"name","comment":"domain file name","type_short":"String"},{"type_long":"java.io.File","name":"packFile","comment":"packed file containing domain file data","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if name is an empty string\n or if it contains characters other than alphanumerics.","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if IO or access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the create.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"domain file created as a result of adding\n the domain object to this folder","type_short":"DomainFile"}},{"javadoc":"Create a subfolder of this folder.\n@param folderName sub-folder name\n@throws DuplicateFileException if a folder by\n this name already exists\n@throws InvalidNameException if name is an empty string\n of if it contains characters other than alphanumerics.\n@throws IOException if IO or access error occurs","static":false,"name":"createFolder","comment":"Create a subfolder of this folder.","params":[{"type_long":"java.lang.String","name":"folderName","comment":"sub-folder name","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if name is an empty string\n of if it contains characters other than alphanumerics.","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if IO or access error occurs","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"","type_short":"DomainFolder"}},{"javadoc":"Deletes this folder and all of its contents\n@throws IOException if IO or access error occurs\n@throws FolderNotEmptyException Thrown if the subfolder is not empty.","static":false,"name":"delete","comment":"Deletes this folder and all of its contents","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if IO or access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move this folder into the newParent folder.  If connected to an archive\n this affects both private and repository folders and files.  If not\n connected, only private folders and files are affected.\n@param newParent new parent folder within the same project\n@return the newly relocated folder (the original DomainFolder object becomes invalid since it is immutable)\n@throws DuplicateFileException if a folder with the same name \n already exists in newParent folder.\n@throws FileInUseException if this folder or one of its decendents \n contains a file which is in-use \/ checked-out.\n@throws IOException thrown if an IO or access error occurs.","static":false,"name":"moveTo","comment":"Move this folder into the newParent folder.  If connected to an archive\n this affects both private and repository folders and files.  If not\n connected, only private folders and files are affected.","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"newParent","comment":"new parent folder within the same project","type_short":"DomainFolder"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO or access error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"the newly relocated folder (the original DomainFolder object becomes invalid since it is immutable)","type_short":"DomainFolder"}},{"javadoc":"Copy this folder into the newParent folder.\n@param newParent new parent folder\n@param new folder\n@throws DuplicateFileException if a folder or file by\n this name already exists in the newParent folder\n@throws IOException thrown if an IO or access error occurs.\n@throws CancelledException if task monitor cancelled operation.","static":false,"name":"copyTo","comment":"Copy this folder into the newParent folder.","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"newParent","comment":"new parent folder","type_short":"DomainFolder"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO or access error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if task monitor cancelled operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"","type_short":"DomainFolder"}},{"javadoc":"Allows the framework to react to a request to make this folder the\n \"active\" one.","static":false,"name":"setActive","comment":"Allows the framework to react to a request to make this folder the\n \"active\" one.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DomainFolder","comment":"DomainFolder provides a storage interface for project\n folders.  A DomainFolder is an immutable reference to \n a folder contained within a project.  The state of a DomainFolder\n object does not track name\/parent changes made to the referenced project folder.","fields":[{"type_long":"java.lang.String","javadoc":"Character used to separate folder and item names within a path string.","static":true,"name":"SEPARATOR","comment":"Character used to separate folder and item names within a path string.","type_short":"String","constant_value":"\"\/\""},{"type_long":"java.lang.String","javadoc":"Name extension to add when attempting to avoid a duplicate name.","static":true,"name":"COPY_SUFFIX","comment":"Name extension to add when attempting to avoid a duplicate name.","type_short":"String","constant_value":"\".copy\""}]}
