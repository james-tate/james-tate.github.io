{"implements":["ghidra.framework.model.DomainObject","ghidra.framework.model.Undoable"],"javadoc":"<code>UndoableDomainObject<\/code> extends a domain object to provide transaction\n support and the ability to undo and redo changes made within a stack of \n recent transactions.  Each transactions may contain many sub-transactions which\n reflect concurrent changes to the domain object.  If any sub-transaction fails to commit,\n all concurrent sub-transaction changes will be rolled-back. \n <P>\n NOTE: A <i>transaction<\/i> must be started in order\n to make any change to this domain object - failure to do so will result in a \n IOException.\n@see #startTransaction(String)\n@see #endTransaction(int, boolean)","static":false,"methods":[{"javadoc":"Start a new transaction in order to make changes to this domain object.\n All changes must be made in the context of a transaction. \n If a transaction is already in progress, a sub-transaction \n of the current transaction will be returned.\n@param description brief description of transaction\n@return transaction ID\n@throws DomainObjectLockedException the domain object is currently locked\n@throws TerminatedTransactionException an existing transaction which has not yet ended was terminated early.\n Sub-transactions are not permitted until the terminated transaction ends.","static":false,"name":"startTransaction","comment":"Start a new transaction in order to make changes to this domain object.\n All changes must be made in the context of a transaction. \n If a transaction is already in progress, a sub-transaction \n of the current transaction will be returned.","params":[{"type_long":"java.lang.String","name":"description","comment":"brief description of transaction","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"transaction ID","type_short":"int"}},{"javadoc":"Start a new transaction in order to make changes to this domain object.\n All changes must be made in the context of a transaction. \n If a transaction is already in progress, a sub-transaction \n of the current transaction will be returned.\n@param description brief description of transaction\n@param listener listener to be notified if the transaction is aborted.\n@return transaction ID\n@throws DomainObjectLockedException the domain object is currently locked\n@throws TerminatedTransactionException an existing transaction which has not yet ended was terminated early.\n Sub-transactions are not permitted until the terminated transaction ends.","static":false,"name":"startTransaction","comment":"Start a new transaction in order to make changes to this domain object.\n All changes must be made in the context of a transaction. \n If a transaction is already in progress, a sub-transaction \n of the current transaction will be returned.","params":[{"type_long":"java.lang.String","name":"description","comment":"brief description of transaction","type_short":"String"},{"type_long":"ghidra.framework.model.AbortedTransactionListener","name":"listener","comment":"listener to be notified if the transaction is aborted.","type_short":"AbortedTransactionListener"}],"throws":[],"return":{"type_long":"int","comment":"transaction ID","type_short":"int"}},{"javadoc":"Terminate the specified transaction for this domain object.\n@param transactionID transaction ID obtained from startTransaction method\n@param commit if true the changes made in this transaction will be marked for commit,\n if false this and any concurrent transaction will be rolled-back.","static":false,"name":"endTransaction","comment":"Terminate the specified transaction for this domain object.","params":[{"type_long":"int","name":"transactionID","comment":"transaction ID obtained from startTransaction method","type_short":"int"},{"type_long":"boolean","name":"commit","comment":"if true the changes made in this transaction will be marked for commit,\n if false this and any concurrent transaction will be rolled-back.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current transaction\n@return the current transaction","static":false,"name":"getCurrentTransaction","comment":"Returns the current transaction","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.Transaction","comment":"the current transaction","type_short":"Transaction"}},{"javadoc":"Returns true if the last transaction was terminated externally from the action that\n started it.","static":false,"name":"hasTerminatedTransaction","comment":"Returns true if the last transaction was terminated externally from the action that\n started it.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return array of all domain objects synchronized with a \n shared transaction manager.\n@return returns array of synchronized domain objects or\n null if this domain object is not synchronized with others.","static":false,"name":"getSynchronizedDomainObjects","comment":"Return array of all domain objects synchronized with a \n shared transaction manager.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainObject[]","comment":"returns array of synchronized domain objects or\n null if this domain object is not synchronized with others.","type_short":"ghidra.framework.model.DomainObject[]"}},{"javadoc":"Synchronize the specified domain object with this domain object\n using a shared transaction manager.  If either or both is already shared, \n a transition to a single shared transaction manager will be \n performed.\n@param domainObj\n@throws LockException if lock or open transaction is active on either\n this or the specified domain object","static":false,"name":"addSynchronizedDomainObject","comment":"Synchronize the specified domain object with this domain object\n using a shared transaction manager.  If either or both is already shared, \n a transition to a single shared transaction manager will be \n performed.","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"domainObj","comment":"","type_short":"DomainObject"}],"throws":[{"type_long":"ghidra.framework.store.LockException","comment":"if lock or open transaction is active on either\n this or the specified domain object","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove this domain object from a shared transaction manager.  If\n this object has not been synchronized with others via a shared\n transaction manager, this method will have no affect.\n@throws LockException if lock or open transaction is active","static":false,"name":"releaseSynchronizedDomainObject","comment":"Remove this domain object from a shared transaction manager.  If\n this object has not been synchronized with others via a shared\n transaction manager, this method will have no affect.","params":[],"throws":[{"type_long":"ghidra.framework.store.LockException","comment":"if lock or open transaction is active","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"UndoableDomainObject","comment":"UndoableDomainObject extends a domain object to provide transaction\n support and the ability to undo and redo changes made within a stack of \n recent transactions.  Each transactions may contain many sub-transactions which\n reflect concurrent changes to the domain object.  If any sub-transaction fails to commit,\n all concurrent sub-transaction changes will be rolled-back. \n \n NOTE: A transaction must be started in order\n to make any change to this domain object - failure to do so will result in a \n IOException.","fields":[]}
