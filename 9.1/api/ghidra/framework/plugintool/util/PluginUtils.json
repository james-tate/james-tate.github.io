{"implements":[],"javadoc":"Utility class for plugin-related methods.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Finds all {@link PluginDescription} objects that match a given set of plugin classes. This\n effectively tells the caller which of the given plugins have been loaded by the class loader.\n <p>\n eg: If the list of plugin classes contains the class \"FooPlugin.class\", this method\n will search the {@link PluginConfigurationModel} for any plugin with the name \"FooPlugin\" and\n return its {@link PluginDescription}.\n <p>\n Note that this method does not take path\/package information into account when finding\n plugins; in the example above, if there is more than one plugin with the name \"FooPlugin\",\n only one will be found (the one found is not guaranteed to be the first).\n@param tool the current tool\n@param plugins the list of plugin classes to search for\n@return list of plugin descriptions","static":true,"name":"getPluginDescriptions","comment":"Finds all PluginDescription objects that match a given set of plugin classes. This\n effectively tells the caller which of the given plugins have been loaded by the class loader.\n \n eg: If the list of plugin classes contains the class \"FooPlugin.class\", this method\n will search the PluginConfigurationModel for any plugin with the name \"FooPlugin\" and\n return its PluginDescription.\n \n Note that this method does not take path\/package information into account when finding\n plugins; in the example above, if there is more than one plugin with the name \"FooPlugin\",\n only one will be found (the one found is not guaranteed to be the first).","params":[{"type_long":"ghidra.framework.plugintool.PluginTool","name":"tool","comment":"the current tool","type_short":"PluginTool"},{"type_long":"java.util.List<java.lang.Class<?>>","name":"plugins","comment":"the list of plugin classes to search for","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.framework.plugintool.util.PluginDescription>","comment":"list of plugin descriptions","type_short":"List"}},{"javadoc":"Finds all plugin classes loaded from a given set of extensions.\n@param extensions set of extensions to search\n@return list of loaded plugin classes, or empty list if none found","static":true,"name":"findLoadedPlugins","comment":"Finds all plugin classes loaded from a given set of extensions.","params":[{"type_long":"java.util.Set<ghidra.framework.plugintool.dialog.ExtensionDetails>","name":"extensions","comment":"set of extensions to search","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.Class<?>>","comment":"list of loaded plugin classes, or empty list if none found","type_short":"List"}},{"javadoc":"Finds all plugin classes loaded from a particular folder\/file.\n <p>\n This uses the {@link ClassSearcher} to find all <code>Plugin.class<\/code> objects on the\n classpath. For each class, the original resource file is compared against the\n given folder and if it's contained therein (or if it matches a given jar), it's\n added to the return list.\n@param dir the directory to search, or a jar file\n@return list of {@link Plugin} classes, or empty list if none found","static":true,"name":"findLoadedPlugins","comment":"Finds all plugin classes loaded from a particular folder\/file.\n \n This uses the ClassSearcher to find all Plugin.class objects on the\n classpath. For each class, the original resource file is compared against the\n given folder and if it's contained therein (or if it matches a given jar), it's\n added to the return list.","params":[{"type_long":"java.io.File","name":"dir","comment":"the directory to search, or a jar file","type_short":"File"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.Class<?>>","comment":"list of Plugin classes, or empty list if none found","type_short":"List"}},{"javadoc":"Populates the given list with all discovered jar files found in the given directory and\n its subdirectories.\n@param dir the directory to search\n@param jarFiles list of found jar files","static":true,"name":"findJarFiles","comment":"Populates the given list with all discovered jar files found in the given directory and\n its subdirectories.","params":[{"type_long":"java.io.File","name":"dir","comment":"the directory to search","type_short":"File"},{"type_long":"java.util.List<java.io.File>","name":"jarFiles","comment":"list of found jar files","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a new instance of a {@link Plugin}.\n@param pluginClass Specific Plugin Class\n@param tool The {@link PluginTool} that is the parent of the new Plugin\n@return a new Plugin instance, never NULL.\n@throws PluginException if problem constructing the Plugin instance.","static":true,"name":"instantiatePlugin","comment":"Returns a new instance of a Plugin.","params":[{"type_long":"java.lang.Class<T>","name":"pluginClass","comment":"Specific Plugin Class","type_short":"Class"},{"type_long":"ghidra.framework.plugintool.PluginTool","name":"tool","comment":"The PluginTool that is the parent of the new Plugin","type_short":"PluginTool"}],"throws":[{"type_long":"ghidra.framework.plugintool.util.PluginException","comment":"if problem constructing the Plugin instance.","type_short":"PluginException"}],"return":{"type_long":"T","comment":"a new Plugin instance, never NULL.","type_short":"T"}},{"javadoc":"Returns the Class for a Plugin, by class name.\n@param pluginClassName String class name\n@return Class that is a Plugin, never null.\n@throws PluginException if specified class does not exist or is not a Plugin.","static":true,"name":"forName","comment":"Returns the Class for a Plugin, by class name.","params":[{"type_long":"java.lang.String","name":"pluginClassName","comment":"String class name","type_short":"String"}],"throws":[{"type_long":"ghidra.framework.plugintool.util.PluginException","comment":"if specified class does not exist or is not a Plugin.","type_short":"PluginException"}],"return":{"type_long":"java.lang.Class<? extends ghidra.framework.plugintool.Plugin>","comment":"Class that is a Plugin, never null.","type_short":"Class"}},{"javadoc":"","static":true,"name":"getStaticStringFieldValue","comment":"","params":[{"type_long":"java.lang.Class<?>","name":"clazz","comment":"","type_short":"Class"},{"type_long":"java.lang.String","name":"fieldName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the Plugin Class that is specified as being the defaultProvider for a\n Service, or null if no default provider is specified.\n <p>\n@param serviceClass Service interface class\n@return Plugin class that provides the specified service","static":true,"name":"getDefaultProviderForServiceClass","comment":"Returns the Plugin Class that is specified as being the defaultProvider for a\n Service, or null if no default provider is specified.\n ","params":[{"type_long":"java.lang.Class<?>","name":"serviceClass","comment":"Service interface class","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.Class<? extends ghidra.framework.plugintool.Plugin>","comment":"Plugin class that provides the specified service","type_short":"Class"}},{"javadoc":"Returns the name of a Plugin based on its class.\n@param pluginClass Class to get name from\n@return String name, based on Class's getSimpleName()","static":true,"name":"getPluginNameFromClass","comment":"Returns the name of a Plugin based on its class.","params":[{"type_long":"java.lang.Class<? extends ghidra.framework.plugintool.Plugin>","name":"pluginClass","comment":"Class to get name from","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String name, based on Class's getSimpleName()","type_short":"String"}},{"javadoc":"Ensures the specified Plugin has a unique name among all Plugin classes\n found in the current ClassSearcher's reach.\n@param pluginClass Class\n@throws PluginException throws exception if Plugin class is not uniquely named","static":true,"name":"assertUniquePluginName","comment":"Ensures the specified Plugin has a unique name among all Plugin classes\n found in the current ClassSearcher's reach.","params":[{"type_long":"java.lang.Class<? extends ghidra.framework.plugintool.Plugin>","name":"pluginClass","comment":"Class","type_short":"Class"}],"throws":[{"type_long":"ghidra.framework.plugintool.util.PluginException","comment":"throws exception if Plugin class is not uniquely named","type_short":"PluginException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the specified Plugin class is well-formed and meets requirements for\n Ghidra Plugins:\n <ul>\n \t<li>Has a constructor with a signature of <code>ThePlugin(PluginTool tool)<\/code>\n \t<li>Has a {@link PluginInfo @PluginInfo} annotation.\n <\/ul>\n <p>\n See {@link Plugin}.\n <p>\n@param pluginClass Class to examine.\n@return boolean true if well formed.","static":true,"name":"isValidPluginClass","comment":"Returns true if the specified Plugin class is well-formed and meets requirements for\n Ghidra Plugins:\n \n \tHas a constructor with a signature of ThePlugin(PluginTool tool)\n \tHas a PluginInfo annotation.\n \n \n See Plugin.\n ","params":[{"type_long":"java.lang.Class<? extends ghidra.framework.plugintool.Plugin>","name":"pluginClass","comment":"Class to examine.","type_short":"Class"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if well formed.","type_short":"boolean"}}],"name":"PluginUtils","comment":"Utility class for plugin-related methods.","fields":[]}
