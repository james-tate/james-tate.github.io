{"implements":[],"javadoc":"Class for managing plugin services. A plugin may provide a service, or\n it may depend on a service. The ServiceManager maintains a list of\n service names and plugins that provide those services. A plugin may\n dynamically add and remove services from the service registry. As services\n are added and removed, all the plugins (ServiceListener) \n in the tool are notified.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new Service Registry.","static":false,"name":"<init>","comment":"Construct a new Service Registry.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add listener that is notified when services are added or removed.\n@param listener listener to notify","static":false,"name":"addServiceListener","comment":"Add listener that is notified when services are added or removed.","params":[{"type_long":"ghidra.framework.plugintool.util.ServiceListener","name":"listener","comment":"listener to notify","type_short":"ServiceListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the given listener from list of listeners notified when\n services are added or removed.\n@param listener listener to remove","static":false,"name":"removeServiceListener","comment":"Remove the given listener from list of listeners notified when\n services are added or removed.","params":[{"type_long":"ghidra.framework.plugintool.util.ServiceListener","name":"listener","comment":"listener to remove","type_short":"ServiceListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the indicator for whether service listeners should be notified.\n While plugins are being restored from a tool state, this indicator\n is false, as a plugin may not be in the proper state to handle the\n notification.\n@param b true means to notify listeners of the services added to\n the tool","static":false,"name":"setServiceAddedNotificationsOn","comment":"Set the indicator for whether service listeners should be notified.\n While plugins are being restored from a tool state, this indicator\n is false, as a plugin may not be in the proper state to handle the\n notification.","params":[{"type_long":"boolean","name":"b","comment":"true means to notify listeners of the services added to\n the tool","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyServiceAdded","comment":"","params":[{"type_long":"java.lang.Class<?>","name":"interfaceClass","comment":"","type_short":"Class"},{"type_long":"java.lang.Object","name":"service","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add the service to the tool. Notify the service listeners if the\n notification indicator is true; otherwise, add the service to a list\n that will be used to notify listeners when notifications are \n turned on again.\n@param interfaceClass class of the service interface being added\n@param service implementation of the service; it may be a plugin or\n may be some object created by the plugin\n@see #setServiceAddedNotificationsOn(boolean)","static":false,"name":"addService","comment":"Add the service to the tool. Notify the service listeners if the\n notification indicator is true; otherwise, add the service to a list\n that will be used to notify listeners when notifications are \n turned on again.","params":[{"type_long":"java.lang.Class<? extends T>","name":"interfaceClass","comment":"class of the service interface being added","type_short":"Class"},{"type_long":"T","name":"service","comment":"implementation of the service; it may be a plugin or\n may be some object created by the plugin","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the service from the tool.","static":false,"name":"removeService","comment":"Remove the service from the tool.","params":[{"type_long":"java.lang.Class<?>","name":"interfaceClass","comment":"","type_short":"Class"},{"type_long":"java.lang.Object","name":"service","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the first implementation found for the given service class.\n@param interfaceClass interface class for the service\n@return null if the interfaceClass was not registered","static":false,"name":"getService","comment":"Return the first implementation found for the given service class.","params":[{"type_long":"java.lang.Class<T>","name":"interfaceClass","comment":"interface class for the service","type_short":"Class"}],"throws":[],"return":{"type_long":"T","comment":"null if the interfaceClass was not registered","type_short":"T"}},{"javadoc":"Get an array of objects that implement the given interfaceClass.\n@param interfaceClass interface class for the service\n@return zero length array if the interfaceClass was not registered","static":false,"name":"getServices","comment":"Get an array of objects that implement the given interfaceClass.","params":[{"type_long":"java.lang.Class<T>","name":"interfaceClass","comment":"interface class for the service","type_short":"Class"}],"throws":[],"return":{"type_long":"T[]","comment":"zero length array if the interfaceClass was not registered","type_short":"T[]"}},{"javadoc":"Returns true if the specified <code>serviceInterface<\/code>\n is a valid service that exists in this service manager.\n@param serviceInterface the service interface\n@return true if the specified <code>serviceInterface<\/code>","static":false,"name":"isService","comment":"Returns true if the specified serviceInterface\n is a valid service that exists in this service manager.","params":[{"type_long":"java.lang.Class<?>","name":"serviceInterface","comment":"the service interface","type_short":"Class"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the specified serviceInterface","type_short":"boolean"}},{"javadoc":"Returns a array of all service implementors.\n@return a array of all service implementors","static":false,"name":"getAllServices","comment":"Returns a array of all service implementors.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.framework.plugintool.ServiceInterfaceImplementationPair>","comment":"a array of all service implementors","type_short":"List"}}],"name":"ServiceManager","comment":"Class for managing plugin services. A plugin may provide a service, or\n it may depend on a service. The ServiceManager maintains a list of\n service names and plugins that provide those services. A plugin may\n dynamically add and remove services from the service registry. As services\n are added and removed, all the plugins (ServiceListener) \n in the tool are notified.","fields":[{"type_long":"java.util.Map<java.lang.Class<?>,java.util.List<java.lang.Object>>","javadoc":"","static":false,"name":"servicesByInterface","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.framework.plugintool.util.ServiceListener>","javadoc":"","static":false,"name":"serviceListeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"notifyAdd","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.List<java.lang.Object[]>","javadoc":"","static":false,"name":"notifications","comment":"","type_short":"List","constant_value":null}]}
