{"implements":[],"javadoc":"<code>HistoryManager<\/code> manages version data for a versioned LocalFolderItem.\n History data is maintained within the file 'historyt.dat' located within the\n items data directory.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor.\n@param item folder item\n@param create if true an empty history data file is written,\n else the initial data is read from the file.\n@throws IOException","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"ghidra.framework.store.local.LocalFolderItem","name":"item","comment":"folder item","type_short":"LocalFolderItem"},{"type_long":"boolean","name":"create","comment":"if true an empty history data file is written,\n else the initial data is read from the file.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the file which contains version history data.  Content of this\n file is managed by the HistoryManager.","static":false,"name":"getHistoryFile","comment":"Returns the file which contains version history data.  Content of this\n file is managed by the HistoryManager.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"Add and\/or remove history entries to agree with specified minimum and current versions.\n@param minVersion minimum version\n@param curVersion current version\n@return true if a version correction was performed","static":false,"name":"fixHistory","comment":"Add and\/or remove history entries to agree with specified minimum and current versions.","params":[{"type_long":"int","name":"minVersion","comment":"minimum version","type_short":"int"},{"type_long":"int","name":"curVersion","comment":"current version","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if a version correction was performed","type_short":"boolean"}},{"javadoc":"Record the creation of a new item version.\n@param version version number\n@param user user who created version","static":false,"name":"versionAdded","comment":"Record the creation of a new item version.","params":[{"type_long":"int","name":"version","comment":"version number","type_short":"int"},{"type_long":"long","name":"time","comment":"","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"user","comment":"user who created version","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the specified version from the history data.\n This method only modifies the data if the minimum or\n latest version is specified.\n@param version minimum or latest version","static":false,"name":"versionDeleted","comment":"Remove the specified version from the history data.\n This method only modifies the data if the minimum or\n latest version is specified.","params":[{"type_long":"int","name":"version","comment":"minimum or latest version","type_short":"int"},{"type_long":"java.lang.String","name":"user","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return all versions contained within the history.  Versions are\n ordered oldest to newest (i.e., minumum to latest).\n@throws IOException if an IO error occurs.","static":false,"name":"getVersions","comment":"Return all versions contained within the history.  Versions are\n ordered oldest to newest (i.e., minumum to latest).","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.store.Version[]","comment":"","type_short":"ghidra.framework.store.Version[]"}},{"javadoc":"Return specific version.\n@param version item version\n@return version object or null if not found\n@throws IOException if an IO error occurs.","static":false,"name":"getVersion","comment":"Return specific version.","params":[{"type_long":"int","name":"version","comment":"item version","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.store.Version","comment":"version object or null if not found","type_short":"Version"}},{"javadoc":"If validationRequired is true and the history data file has been \n updated, the history data will be re-initialized from the file.\n This is undesirable and is only required when mulitple instances \n of a LocalFolderItem are used for a specific item path (e.g., unit testing).","static":false,"name":"validate","comment":"If validationRequired is true and the history data file has been \n updated, the history data will be re-initialized from the file.\n This is undesirable and is only required when mulitple instances \n of a LocalFolderItem are used for a specific item path (e.g., unit testing).","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read data from history file.\n@throws IOException","static":false,"name":"readHistoryFile","comment":"Read data from history file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Write all history data to file.","static":false,"name":"writeHistoryFile","comment":"Write all history data to file.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Write new version data to file.\n@param ver new version data (must be latest version)","static":false,"name":"appendHistoryFile","comment":"Write new version data to file.","params":[{"type_long":"ghidra.framework.store.Version","name":"ver","comment":"new version data (must be latest version)","type_short":"Version"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Encode item version data for file output.\n@param ver version data\n@return ","static":false,"name":"encodeVersion","comment":"Encode item version data for file output.","params":[{"type_long":"ghidra.framework.store.Version","name":"ver","comment":"version data","type_short":"Version"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Decode item version data from file.\n@param line file input line\n@return parsed version data\n@throws NumberFormatException\n@throws NoSuchElementException","static":false,"name":"decodeVersion","comment":"Decode item version data from file.","params":[{"type_long":"java.lang.String","name":"line","comment":"file input line","type_short":"String"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"","type_short":"NumberFormatException"},{"type_long":"java.util.NoSuchElementException","comment":"","type_short":"NoSuchElementException"}],"return":{"type_long":"ghidra.framework.store.Version","comment":"parsed version data","type_short":"Version"}},{"javadoc":"Escape special characters within a string and output to string buffer.\n@param text text string to be escaped\n@param buf output buffer","static":false,"name":"encodeString","comment":"Escape special characters within a string and output to string buffer.","params":[{"type_long":"java.lang.String","name":"text","comment":"text string to be escaped","type_short":"String"},{"type_long":"java.lang.StringBuffer","name":"buf","comment":"output buffer","type_short":"StringBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Decode an escaped string.\n@param text string containing escaped characters.\n@return decoded string","static":false,"name":"decodeString","comment":"Decode an escaped string.","params":[{"type_long":"java.lang.String","name":"text","comment":"string containing escaped characters.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"decoded string","type_short":"String"}}],"name":"HistoryManager","comment":"HistoryManager manages version data for a versioned LocalFolderItem.\n History data is maintained within the file 'historyt.dat' located within the\n items data directory.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"HISTORY_FILE","comment":"","type_short":"String","constant_value":"\"history.dat\""},{"type_long":"ghidra.framework.store.local.LocalFolderItem","javadoc":"","static":false,"name":"item","comment":"","type_short":"LocalFolderItem","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"minVersion","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"curVersion","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.framework.store.Version[]","javadoc":"","static":false,"name":"versions","comment":"","type_short":"ghidra.framework.store.Version[]","constant_value":null}]}
