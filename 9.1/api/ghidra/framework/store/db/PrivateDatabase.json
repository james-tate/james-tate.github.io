{"implements":[],"javadoc":"<code>PrivateDatabase<\/code> corresponds to a non-versioned database.","static":false,"extends":"db.Database","methods":[{"javadoc":"Constructor used to create an empty \"Non-Versioned\" database.\n@param dbDir database directory\n@param dbFileListener database listener which will be notified when\n initial version is created.\n@throws IOException","static":false,"name":"<init>","comment":"Constructor used to create an empty \"Non-Versioned\" database.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"database directory","type_short":"File"},{"type_long":"db.DBFileListener","name":"dbFileListener","comment":"database listener which will be notified when\n initial version is created.","type_short":"DBFileListener"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for an existing \"Non-Versioned\" Database.\n@param dbDir database directory\n@throws IOException","static":false,"name":"<init>","comment":"Constructor for an existing \"Non-Versioned\" Database.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"database directory","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new Database from an existing srcFile.\n@param dbDir\n@param srcFile\n@param resetDatabaseId if true database ID will be reset for new Database\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"<init>","comment":"Construct a new Database from an existing srcFile.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"db.buffers.BufferFile","name":"srcFile","comment":"","type_short":"BufferFile"},{"type_long":"boolean","name":"resetDatabaseId","comment":"if true database ID will be reset for new Database","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new Database from an existing packed database file.\n@param dbDir private database directory\n@param packedFile packed database storage file\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"<init>","comment":"Constructs a new Database from an existing packed database file.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"private database directory","type_short":"File"},{"type_long":"java.io.File","name":"packedFile","comment":"packed database storage file","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new database and provide the initial buffer file for writing.\n@param dbDir\n@param bufferSize\n@return initial buffer file\n@throws IOException","static":true,"name":"createDatabase","comment":"Create a new database and provide the initial buffer file for writing.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"db.DBFileListener","name":"dbFileListener","comment":"","type_short":"DBFileListener"},{"type_long":"int","name":"bufferSize","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"initial buffer file","type_short":"LocalManagedBufferFile"}},{"javadoc":"If this is a checked-out copy and a cumulative change file\n should be maintained, this method must be invoked following\n construction.","static":false,"name":"setIsCheckoutCopy","comment":"If this is a checked-out copy and a cumulative change file\n should be maintained, this method must be invoked following\n construction.","params":[{"type_long":"boolean","name":"state","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open the current version of this database for non-update use.\n@return buffer file for non-update use\n@throws IOException","static":false,"name":"openBufferFile","comment":"Open the current version of this database for non-update use.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"buffer file for non-update use","type_short":"LocalManagedBufferFile"}},{"javadoc":"Open the current version of this database for update use.\n@param recover if true an attempt will be made to recover unsaved changes\n from a previous crash.\n@param monitor task monitor\n@return updateable buffer file\n@throws IOException","static":false,"name":"openBufferFileForUpdate","comment":"Open the current version of this database for update use.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"updateable buffer file","type_short":"LocalManagedBufferFile"}},{"javadoc":"Returns true if recovery data exists which may enable recovery of unsaved changes\n resulting from a previous crash.","static":false,"name":"canRecover","comment":"Returns true if recovery data exists which may enable recovery of unsaved changes\n resulting from a previous crash.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.\n@param dirir new database directory","static":false,"name":"dbMoved","comment":"Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If this is a checked-out copy, replace the buffer file content with that\n provided by the specified srcFile.  This Database must be a checkout copy.\n If a cumulative change files exists, it will be deleted following the update.\n@param srcFile open source data buffer file or null if current version\n is already up-to-date.\n@param oldVersion older version of srcFile from which this database originated.\n@throws IOException\n@throws CancelledException","static":false,"name":"updateCheckoutCopy","comment":"If this is a checked-out copy, replace the buffer file content with that\n provided by the specified srcFile.  This Database must be a checkout copy.\n If a cumulative change files exists, it will be deleted following the update.","params":[{"type_long":"db.buffers.ManagedBufferFile","name":"srcFile","comment":"open source data buffer file or null if current version\n is already up-to-date.","type_short":"ManagedBufferFile"},{"type_long":"int","name":"oldVersion","comment":"older version of srcFile from which this database originated.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If a cumulative change files exists, it will be deleted.\n@throws IOException","static":false,"name":"updateCheckoutCopy","comment":"If a cumulative change files exists, it will be deleted.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move the content of the otherDb into this database.\n The otherDb will no longer exist if this method is successful.\n If already open for update, a save should not be done or the database\n may become corrupted.  All existing handles should be closed and reopened\n when this method is complete.\n@param privateDb\n@throws IOException if an IO error occurs.  An attempt will be made to restore\n this database to its original state, however the otherDb will not be repaired\n and may become unusable.","static":false,"name":"updateCheckoutFrom","comment":"Move the content of the otherDb into this database.\n The otherDb will no longer exist if this method is successful.\n If already open for update, a save should not be done or the database\n may become corrupted.  All existing handles should be closed and reopened\n when this method is complete.","params":[{"type_long":"ghidra.framework.store.db.PrivateDatabase","name":"otherDb","comment":"","type_short":"PrivateDatabase"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.  An attempt will be made to restore\n this database to its original state, however the otherDb will not be repaired\n and may become unusable.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Output the current version of this database to a packed storage file.\n@param outputFile packed storage file to be written\n@param name database name\n@param filetype application file type\n@param contentType user content type\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"output","comment":"Output the current version of this database to a packed storage file.","params":[{"type_long":"java.io.File","name":"outputFile","comment":"packed storage file to be written","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"database name","type_short":"String"},{"type_long":"int","name":"filetype","comment":"application file type","type_short":"int"},{"type_long":"java.lang.String","name":"contentType","comment":"user content type","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"PrivateDatabase","comment":"PrivateDatabase corresponds to a non-versioned database.","fields":[]}
