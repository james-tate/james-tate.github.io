{"implements":[],"javadoc":"<code>VersionedDatabase<\/code> corresponds to a versioned database.","static":false,"extends":"db.Database","methods":[{"javadoc":"General \"Versioned\" Database Constructor.\n@param dbDir\n@param verDBListener\n@param create if true an empty database will be created.\n@throws IOException","static":false,"name":"<init>","comment":"General \"Versioned\" Database Constructor.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","name":"verDBListener","comment":"","type_short":"VersionedDBListener"},{"type_long":"boolean","name":"create","comment":"if true an empty database will be created.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for an existing \"Versioned\" Database.\n@param dbDir database directory\n@param verDBListener\n@throws IOException","static":false,"name":"<init>","comment":"Constructor for an existing \"Versioned\" Database.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"database directory","type_short":"File"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","name":"verDBListener","comment":"","type_short":"VersionedDBListener"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new \"Versioned\" Database from an existing srcFile.\n@param dbDir\n@param srcFile\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"<init>","comment":"Construct a new \"Versioned\" Database from an existing srcFile.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"db.buffers.BufferFile","name":"srcFile","comment":"","type_short":"BufferFile"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","name":"verDBListener","comment":"","type_short":"VersionedDBListener"},{"type_long":"long","name":"checkoutId","comment":"","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new \"Versioned\" Database from a packed database file\n@param dbDir\n@param packedFile\n@param verDBListener\n@param checkoutId\n@param comment\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"<init>","comment":"Construct a new \"Versioned\" Database from a packed database file","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"java.io.File","name":"packedFile","comment":"","type_short":"File"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","name":"verDBListener","comment":"","type_short":"VersionedDBListener"},{"type_long":"long","name":"checkoutId","comment":"","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new database and provide the initial buffer file for writing.\n@param dbDir\n@param bufferSize\n@return initial buffer file\n@throws IOException","static":true,"name":"createVersionedDatabase","comment":"Create a new database and provide the initial buffer file for writing.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"","type_short":"File"},{"type_long":"int","name":"bufferSize","comment":"","type_short":"int"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","name":"verDBListener","comment":"","type_short":"VersionedDBListener"},{"type_long":"long","name":"checkoutId","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"initial buffer file","type_short":"LocalManagedBufferFile"}},{"javadoc":"Returns the version number associated with the oldest buffer file version.","static":false,"name":"getMinimumVersion","comment":"Returns the version number associated with the oldest buffer file version.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the version number associated with the latest buffer file version.","static":false,"name":"getCurrentVersion","comment":"Returns the version number associated with the latest buffer file version.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Delete oldest version.\n@throws IOException if an error occurs or this is the only version.","static":false,"name":"deleteMinimumVersion","comment":"Delete oldest version.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an error occurs or this is the only version.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete latest version.\n@throws IOException if an error occurs or this is the only version.","static":false,"name":"deleteCurrentVersion","comment":"Delete latest version.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an error occurs or this is the only version.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open a specific version of this database for non-update use.\n@param version database version or LATEST_VERSION for current version\n@param minChangeDataVer the minimum database version whoose change data\n should be associated with the returned buffer file.  A value of -1 indicates that \n change data is not required.\n@return buffer file for non-update use.\n@throws IOException","static":false,"name":"openBufferFile","comment":"Open a specific version of this database for non-update use.","params":[{"type_long":"int","name":"version","comment":"database version or LATEST_VERSION for current version","type_short":"int"},{"type_long":"int","name":"minChangeDataVer","comment":"the minimum database version whoose change data\n should be associated with the returned buffer file.  A value of -1 indicates that \n change data is not required.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"buffer file for non-update use.","type_short":"LocalManagedBufferFile"}},{"javadoc":"Open a specific version of the stored database for non-update use.\n The returned handle does not support the Save operation.\n@param version database version\n@param monitor task monitor (may be null)\n@return database handle\n@throws FileInUseException thrown if unable to obtain the required database lock(s).\n@throws IOException thrown if IO error occurs.","static":false,"name":"open","comment":"Open a specific version of the stored database for non-update use.\n The returned handle does not support the Save operation.","params":[{"type_long":"int","name":"version","comment":"database version","type_short":"int"},{"type_long":"int","name":"minChangeDataVer","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor (may be null)","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBHandle","comment":"database handle","type_short":"DBHandle"}},{"javadoc":"","static":false,"name":"openForUpdate","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBHandle","comment":"","type_short":"DBHandle"}},{"javadoc":"Open the current version of this database for update use.\n@param checkoutId checkout ID\n@return updateable buffer file\n@throws IOException if update not permitted or other error occurs","static":false,"name":"openBufferFileForUpdate","comment":"Open the current version of this database for update use.","params":[{"type_long":"long","name":"checkoutId","comment":"checkout ID","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if update not permitted or other error occurs","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"updateable buffer file","type_short":"LocalManagedBufferFile"}},{"javadoc":"Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.\n@param dbDir new database directory","static":false,"name":"dbMoved","comment":"Following a move of the database directory,\n this method should be invoked if this instance will\n continue to be used.","params":[{"type_long":"java.io.File","name":"dbDir","comment":"new database directory","type_short":"File"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Scan files and update state.\n@param repair if true files are repaired if needed.","static":false,"name":"scanFiles","comment":"Scan files and update state.","params":[{"type_long":"boolean","name":"repair","comment":"if true files are repaired if needed.","type_short":"boolean"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Output the current version of this database to a packed storage file.\n@param outputFile packed storage file to be written\n@param name database name\n@param filetype application file type\n@param contentType user content type\n@param monitor\n@throws IOException\n@throws CancelledException","static":false,"name":"output","comment":"Output the current version of this database to a packed storage file.","params":[{"type_long":"int","name":"version","comment":"","type_short":"int"},{"type_long":"java.io.File","name":"outputFile","comment":"packed storage file to be written","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"database name","type_short":"String"},{"type_long":"int","name":"filetype","comment":"application file type","type_short":"int"},{"type_long":"java.lang.String","name":"contentType","comment":"user content type","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"VersionedDatabase","comment":"VersionedDatabase corresponds to a versioned database.","fields":[{"type_long":"org.apache.logging.log4j.Logger","javadoc":"","static":true,"name":"log","comment":"","type_short":"Logger","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"LATEST_VERSION","comment":"","type_short":"int","constant_value":"-1"},{"type_long":"long","javadoc":"","static":true,"name":"DEFAULT_CHECKOUT_ID","comment":"","type_short":"long","constant_value":"-1"},{"type_long":"ghidra.framework.store.db.VersionedDBListener","javadoc":"Change listener","static":false,"name":"verDBListener","comment":"Change listener","type_short":"VersionedDBListener","constant_value":null}]}
