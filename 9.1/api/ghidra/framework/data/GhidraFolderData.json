{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"General constructor reserved for root folder use only\n@param fileManager\n@param listener","static":false,"name":"<init>","comment":"General constructor reserved for root folder use only","params":[{"type_long":"ghidra.framework.data.ProjectFileManager","name":"fileManager","comment":"","type_short":"ProjectFileManager"},{"type_long":"ghidra.framework.model.DomainFolderChangeListener","name":"listener","comment":"","type_short":"DomainFolderChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.framework.data.GhidraFolderData","name":"parent","comment":"","type_short":"GhidraFolderData"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if folder has complete list of children","static":false,"name":"visited","comment":"Returns true if folder has complete list of children","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getLocalFileSystem","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.store.local.LocalFileSystem","comment":"","type_short":"LocalFileSystem"}},{"javadoc":"","static":false,"name":"getVersionedFileSystem","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.store.FileSystem","comment":"","type_short":"FileSystem"}},{"javadoc":"","static":false,"name":"getUserFileSystem","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.store.local.LocalFileSystem","comment":"","type_short":"LocalFileSystem"}},{"javadoc":"","static":false,"name":"getChangeListener","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolderChangeListener","comment":"","type_short":"DomainFolderChangeListener"}},{"javadoc":"","static":false,"name":"getProjectFileManager","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.ProjectFileManager","comment":"","type_short":"ProjectFileManager"}},{"javadoc":"","static":false,"name":"getProjectLocator","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.ProjectLocator","comment":"","type_short":"ProjectLocator"}},{"javadoc":"","static":false,"name":"getParentData","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolderData","comment":"","type_short":"GhidraFolderData"}},{"javadoc":"Get folder data for specified absolute or relative folderPath\n@param folderPath\n@param lazy if true folder will not be searched for if not already discovered - in\n this case null will be returned\n@return folder data or null if not found or lazy=true and not yet discovered","static":false,"name":"getFolderPathData","comment":"Get folder data for specified absolute or relative folderPath","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"},{"type_long":"boolean","name":"lazy","comment":"if true folder will not be searched for if not already discovered - in\n this case null will be returned","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolderData","comment":"folder data or null if not found or lazy=true and not yet discovered","type_short":"GhidraFolderData"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setName","comment":"","params":[{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.data.GhidraFolder","comment":"","type_short":"GhidraFolder"}},{"javadoc":"","static":false,"name":"checkInUse","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.FileInUseException","comment":"","type_short":"FileInUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPathname","comment":"","params":[{"type_long":"java.lang.String","name":"childName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getPathname","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getFileNames","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getFolderNames","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}},{"javadoc":"Update file list\/cache based upon rename of file.\n If this folder has been visited listener will be notified with rename\n@param oldName","static":false,"name":"fileRenamed","comment":"Update file list\/cache based upon rename of file.\n If this folder has been visited listener will be notified with rename","params":[{"type_long":"java.lang.String","name":"oldFileName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newFileName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fileMoved","comment":"","params":[{"type_long":"ghidra.framework.data.GhidraFolderData","name":"newParent","comment":"","type_short":"GhidraFolderData"},{"type_long":"java.lang.String","name":"oldFileName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newFileName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the specified file has changed due to an add or remove of the\n underlying local or versioned file.  If this folder has been visited an appropriate\n add\/remove\/change notification will be provided to the listener.\n NOTE: Move and Rename situations are not handled\n@param fileName","static":false,"name":"fileChanged","comment":"Notification that the specified file has changed due to an add or remove of the\n underlying local or versioned file.  If this folder has been visited an appropriate\n add\/remove\/change notification will be provided to the listener.\n NOTE: Move and Rename situations are not handled","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the specified subfolder has changed due to and add or remove of the\n underlying local or version folder.  If the subfolder previously existed, still exists,\n and had been visited a refresh on the subfolder will be forced, otherwise, if this folder has been \n visited an appropriate add\/remove\/change notification will be provided to the listener.  \n NOTE: Care should be taken using this method as all sub-folder cache data may be disposed!\n NOTE: Move and Rename situations are not handled\n@param folderName","static":false,"name":"folderChanged","comment":"Notification that the specified subfolder has changed due to and add or remove of the\n underlying local or version folder.  If the subfolder previously existed, still exists,\n and had been visited a refresh on the subfolder will be forced, otherwise, if this folder has been \n visited an appropriate add\/remove\/change notification will be provided to the listener.  \n NOTE: Care should be taken using this method as all sub-folder cache data may be disposed!\n NOTE: Move and Rename situations are not handled","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove and dispose specified subfolder data and notify listener of removal\n if this folder has been visited\n@param folderName","static":false,"name":"folderRemoved","comment":"Remove and dispose specified subfolder data and notify listener of removal\n if this folder has been visited","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the values for whether this pathname exists in the private and\n shared file systems.","static":false,"name":"updateExistenceState","comment":"Update the values for whether this pathname exists in the private and\n shared file systems.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Refresh set of sub-folder names and identify added\/removed folders.\n@param recursive recurse into visited subfolders if true\n@param monitor recursion task monitor - break from recursion if cancelled\n@throws IOException","static":false,"name":"refreshFolders","comment":"Refresh set of sub-folder names and identify added\/removed folders.","params":[{"type_long":"boolean","name":"recursive","comment":"recurse into visited subfolders if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"recursion task monitor - break from recursion if cancelled","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refreshFiles","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fileRemoved","comment":"","params":[{"type_long":"java.lang.String","name":"filename","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Full refresh of names of children is performed.  This method\n should only be invoked when a full list of folders or\n children is requested - which may be in response to \n a \"folder changed\" notification.\n@param recursive if true a recursive refresh will be done (force must also be true).\n Sub-folders will only be refreshed if they have been visited.\n@param force if true will refresh will be forced regardless\n of visited state, if false refresh is lazy and will not be \n performed if a previous refresh set the visited state.\n@param monitor recursion task monitor - break from recursion if cancelled\n@throws IOException","static":false,"name":"refresh","comment":"Full refresh of names of children is performed.  This method\n should only be invoked when a full list of folders or\n children is requested - which may be in response to \n a \"folder changed\" notification.","params":[{"type_long":"boolean","name":"recursive","comment":"if true a recursive refresh will be done (force must also be true).\n Sub-folders will only be refreshed if they have been visited.","type_short":"boolean"},{"type_long":"boolean","name":"force","comment":"if true will refresh will be forced regardless\n of visited state, if false refresh is lazy and will not be \n performed if a previous refresh set the visited state.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"recursion task monitor - break from recursion if cancelled","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check for existence of subfolder.  If this folder visited, rely on folderList\n@param fileName\n@param doRealCheck if true do not rely on fileList\n@return \n@throws IOException","static":false,"name":"containsFolder","comment":"Check for existence of subfolder.  If this folder visited, rely on folderList","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create and add new subfolder data object to cache.  Data will not be created\n if folder does not exist or an IOException occurs.\n@param folderName\n@return folder data or null","static":false,"name":"addFolderData","comment":"Create and add new subfolder data object to cache.  Data will not be created\n if folder does not exist or an IOException occurs.","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolderData","comment":"folder data or null","type_short":"GhidraFolderData"}},{"javadoc":"Get folder data for child folder specified by folderName\n@param folderName\n@param lazy if true folder will not be searched for if not already discovered - in\n this case null will be returned\n@return folder data or null if not found or lazy=true and not yet discovered","static":false,"name":"getFolderData","comment":"Get folder data for child folder specified by folderName","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"},{"type_long":"boolean","name":"lazy","comment":"if true folder will not be searched for if not already discovered - in\n this case null will be returned","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolderData","comment":"folder data or null if not found or lazy=true and not yet discovered","type_short":"GhidraFolderData"}},{"javadoc":"Check for existence of file.  If folder visited, rely on fileDataCache\n@param fileName\n@param doRealCheck if true do not rely on fileList\n@return \n@throws IOException","static":false,"name":"containsFile","comment":"Check for existence of file.  If folder visited, rely on fileDataCache","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create and add new file data object to cache.  Data will not be created\n if file does not exist or an IOException occurs.\n@param fileName\n@return file data or null\n@throws IOException","static":false,"name":"addFileData","comment":"Create and add new file data object to cache.  Data will not be created\n if file does not exist or an IOException occurs.","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.data.GhidraFileData","comment":"file data or null","type_short":"GhidraFileData"}},{"javadoc":"Get file data for child specified by fileName\n@param fileName\n@param lazy if true file will not be searched for if not already discovered - in\n this case null will be returned\n@return file data or null if not found or lazy=true and not yet discovered","static":false,"name":"getFileData","comment":"Get file data for child specified by fileName","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"},{"type_long":"boolean","name":"lazy","comment":"if true file will not be searched for if not already discovered - in\n this case null will be returned","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.data.GhidraFileData","comment":"file data or null if not found or lazy=true and not yet discovered","type_short":"GhidraFileData"}},{"javadoc":"","static":false,"name":"getDomainFile","comment":"","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFile","comment":"","type_short":"GhidraFile"}},{"javadoc":"","static":false,"name":"getDomainFolder","comment":"","params":[{"type_long":"java.lang.String","name":"subfolderName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolder","comment":"","type_short":"GhidraFolder"}},{"javadoc":"","static":false,"name":"getDomainFolder","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.GhidraFolder","comment":"","type_short":"GhidraFolder"}},{"javadoc":"","static":false,"name":"createFile","comment":"","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"},{"type_long":"ghidra.framework.model.DomainObject","name":"obj","comment":"","type_short":"DomainObject"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.data.GhidraFile","comment":"","type_short":"GhidraFile"}},{"javadoc":"","static":false,"name":"createFile","comment":"","params":[{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"},{"type_long":"java.io.File","name":"packFile","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.data.GhidraFile","comment":"","type_short":"GhidraFile"}},{"javadoc":"","static":false,"name":"createFolder","comment":"","params":[{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.data.GhidraFolderData","comment":"","type_short":"GhidraFolderData"}},{"javadoc":"","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deleteLocalFolderIfEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveTo","comment":"","params":[{"type_long":"ghidra.framework.data.GhidraFolderData","name":"newParent","comment":"","type_short":"GhidraFolderData"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.data.GhidraFolder","comment":"","type_short":"GhidraFolder"}},{"javadoc":"","static":false,"name":"isAncestor","comment":"","params":[{"type_long":"ghidra.framework.data.GhidraFolderData","name":"folderData","comment":"","type_short":"GhidraFolderData"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"copyTo","comment":"","params":[{"type_long":"ghidra.framework.data.GhidraFolderData","name":"newParentData","comment":"","type_short":"GhidraFolderData"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.data.GhidraFolder","comment":"","type_short":"GhidraFolder"}},{"javadoc":"used for testing","static":false,"name":"privateExists","comment":"used for testing","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"used for testing","static":false,"name":"sharedExists","comment":"used for testing","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GhidraFolderData","comment":"","fields":[{"type_long":"ghidra.framework.data.ProjectFileManager","javadoc":"","static":false,"name":"fileManager","comment":"","type_short":"ProjectFileManager","constant_value":null},{"type_long":"ghidra.framework.model.DomainFolderChangeListener","javadoc":"Folder change listener - change events only sent if folder is visited\n which is set when list of files or folders is requested.\n@see #getFileNames()\n@see #getFolderNames()","static":false,"name":"listener","comment":"Folder change listener - change events only sent if folder is visited\n which is set when list of files or folders is requested.","type_short":"DomainFolderChangeListener","constant_value":null},{"type_long":"ghidra.framework.store.local.LocalFileSystem","javadoc":"","static":false,"name":"fileSystem","comment":"","type_short":"LocalFileSystem","constant_value":null},{"type_long":"ghidra.framework.store.FileSystem","javadoc":"","static":false,"name":"versionedFileSystem","comment":"","type_short":"FileSystem","constant_value":null},{"type_long":"ghidra.framework.data.GhidraFolderData","javadoc":"","static":false,"name":"parent","comment":"","type_short":"GhidraFolderData","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.Set<java.lang.String>","javadoc":"","static":false,"name":"folderList","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Set<java.lang.String>","javadoc":"","static":false,"name":"fileList","comment":"","type_short":"Set","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"visited","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.framework.data.GhidraFileData>","javadoc":"","static":false,"name":"fileDataCache","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.framework.data.GhidraFolderData>","javadoc":"","static":false,"name":"folderDataCache","comment":"","type_short":"Map","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"folderExists","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"versionedFolderExists","comment":"","type_short":"boolean","constant_value":null}]}
