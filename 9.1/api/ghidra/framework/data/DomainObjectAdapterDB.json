{"implements":["ghidra.framework.model.UndoableDomainObject","db.util.ErrorHandler","db.DBConstants"],"javadoc":"Database version of the DomainObjectAdapter; this version adds the\n concept of starting a transaction before a change is made to the\n domain object and ending the transaction. The transaction allows for\n undo\/redo changes.\n  \n The implementation class must also satisfy the following requirements:\n <pre>\n \n 1. The following constructor signature must be implemented:\n \n \t\t **\n\t\t * Constructs new Domain Object\n\t\t * @param dbh a handle to an open domain object database.\n\t\t * @param openMode one of:\n\t\t * \t\tREAD_ONLY: the original database will not be modified\n\t\t * \t\tUPDATE: the database can be written to.\n\t\t * \t\tUPGRADE: the database is upgraded to the latest schema as it is opened.\n\t\t * @param monitor TaskMonitor that allows the open to be cancelled.\n\t     * @param consumer the object that keeping the program open.\n\t\t *     \n\t\t * @throws IOException if an error accessing the database occurs.\n\t\t * @throws VersionException if database version does not match implementation. UPGRADE may be possible.\n\t\t **\n\t\t public DomainObjectAdapterDB(DBHandle dbh, int openMode, TaskMonitor monitor, Object consumer) throws IOException, VersionException \n\n 2. The following static field must be provided:\n \n \t\t public static final String CONTENT_TYPE\n \n <\/pre>","static":false,"extends":"ghidra.framework.data.DomainObjectAdapter","methods":[{"javadoc":"Construct a new DomainObjectAdapterDB object.\n If construction of this object fails, be sure to release with consumer\n@param dbh database handle\n@param name name of the domain object\n@param timeInterval the time (in milliseconds) to wait before the\n event queue is flushed.  If a new event comes in before the time expires,\n the timer is reset.\n@param bufSize initial size of event buffer\n@param consumer the object that created this domain object","static":false,"name":"<init>","comment":"Construct a new DomainObjectAdapterDB object.\n If construction of this object fails, be sure to release with consumer","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"database handle","type_short":"DBHandle"},{"type_long":"java.lang.String","name":"name","comment":"name of the domain object","type_short":"String"},{"type_long":"int","name":"timeInterval","comment":"the time (in milliseconds) to wait before the\n event queue is flushed.  If a new event comes in before the time expires,\n the timer is reset.","type_short":"int"},{"type_long":"int","name":"bufSize","comment":"initial size of event buffer","type_short":"int"},{"type_long":"java.lang.Object","name":"consumer","comment":"the object that created this domain object","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setTransactionManager","comment":"","params":[{"type_long":"ghidra.framework.data.AbstractTransactionManager","name":"transactionMgr","comment":"","type_short":"AbstractTransactionManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTransactionManager","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.AbstractTransactionManager","comment":"","type_short":"AbstractTransactionManager"}},{"javadoc":"Flush any pending database changes.\n This method will be invoked by the transaction manager \n prior to closing a transaction.","static":false,"name":"flushWriteCache","comment":"Flush any pending database changes.\n This method will be invoked by the transaction manager \n prior to closing a transaction.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invalidate (i.e., clear) any pending database changes not yet written.\n This method will be invoked by the transaction manager \n prior to aborting a transaction.","static":false,"name":"invalidateWriteCache","comment":"Invalidate (i.e., clear) any pending database changes not yet written.\n This method will be invoked by the transaction manager \n prior to aborting a transaction.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return array of all domain objects synchronized with a \n shared transaction manager.\n@return returns array of synchronized domain objects or\n null if this domain object is not synchronized with others.","static":false,"name":"getSynchronizedDomainObjects","comment":"Return array of all domain objects synchronized with a \n shared transaction manager.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainObject[]","comment":"returns array of synchronized domain objects or\n null if this domain object is not synchronized with others.","type_short":"ghidra.framework.model.DomainObject[]"}},{"javadoc":"Synchronize the specified domain object with this domain object\n using a shared transaction manager.  If either or both is already shared, \n a transition to a single shared transaction manager will be \n performed.\n@param domainObj\n@throws LockException if lock or open transaction is active on either\n this or the specified domain object","static":false,"name":"addSynchronizedDomainObject","comment":"Synchronize the specified domain object with this domain object\n using a shared transaction manager.  If either or both is already shared, \n a transition to a single shared transaction manager will be \n performed.","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"domainObj","comment":"","type_short":"DomainObject"}],"throws":[{"type_long":"ghidra.framework.store.LockException","comment":"if lock or open transaction is active on either\n this or the specified domain object","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Release this domain object from a shared transaction manager.  If\n this object has not been synchronized with others via a shared\n transaction manager, this method will have no affect.\n@throws LockException if lock or open transaction is active","static":false,"name":"releaseSynchronizedDomainObject","comment":"Release this domain object from a shared transaction manager.  If\n this object has not been synchronized with others via a shared\n transaction manager, this method will have no affect.","params":[],"throws":[{"type_long":"ghidra.framework.store.LockException","comment":"if lock or open transaction is active","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the open handle to the underlying database.","static":false,"name":"getDBHandle","comment":"Returns the open handle to the underlying database.","params":[],"throws":[],"return":{"type_long":"db.DBHandle","comment":"","type_short":"DBHandle"}},{"javadoc":"Returns the user data object or null if not supported by this domain object.","static":false,"name":"getUserData","comment":"Returns the user data object or null if not supported by this domain object.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.DomainObjectAdapterDB","comment":"","type_short":"DomainObjectAdapterDB"}},{"javadoc":"Returns the change set corresponding to all unsaved changes in this domain object.\n@return the change set corresponding to all unsaved changes in this domain object","static":false,"name":"getChangeSet","comment":"Returns the change set corresponding to all unsaved changes in this domain object.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.data.DomainObjectDBChangeSet","comment":"the change set corresponding to all unsaved changes in this domain object","type_short":"DomainObjectDBChangeSet"}},{"javadoc":"@see db.util.ErrorHandler#dbError(java.io.IOException)","static":false,"name":"dbError","comment":"","params":[{"type_long":"java.io.IOException","name":"e","comment":"","type_short":"IOException"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns all properties lists contained by this domain object.\n@return all property lists contained by this domain object.","static":false,"name":"getOptionsNames","comment":"Returns all properties lists contained by this domain object.","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"all property lists contained by this domain object.","type_short":"List"}},{"javadoc":"@see ghidra.framework.model.DomainObject#getOptions(java.lang.String)","static":false,"name":"getOptions","comment":"","params":[{"type_long":"java.lang.String","name":"propertyListName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.options.Options","comment":"","type_short":"Options"}},{"javadoc":"This method can be used to perform property list alterations resulting from renamed or obsolete \n property paths.  This should only be invoked during an upgrade.\n WARNING! Should only be called during construction of domain object\n@see OptionsDB#performAlterations(Map)","static":false,"name":"performPropertyListAlterations","comment":"This method can be used to perform property list alterations resulting from renamed or obsolete \n property paths.  This should only be invoked during an upgrade.\n WARNING! Should only be called during construction of domain object","params":[{"type_long":"java.util.Map<java.lang.String,java.lang.String>","name":"propertyAlterations","comment":"","type_short":"Map"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#canLock()","static":false,"name":"canLock","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.DomainObject#isLocked()","static":false,"name":"isLocked","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.DomainObject#lock(String)","static":false,"name":"lock","comment":"","params":[{"type_long":"java.lang.String","name":"reason","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"prepareToSave","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempt to obtain a modification lock on the domain object when generating a\n background snapshot.\n@param hasProgress true if monitor has progress indicator\n@param title title to be used for monitor\n@return monitor object if lock obtained successfully, else null which indicates that a\n modification is in process.","static":false,"name":"lockForSnapshot","comment":"Attempt to obtain a modification lock on the domain object when generating a\n background snapshot.","params":[{"type_long":"boolean","name":"hasProgress","comment":"true if monitor has progress indicator","type_short":"boolean"},{"type_long":"java.lang.String","name":"title","comment":"title to be used for monitor","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.data.LockingTaskMonitor","comment":"monitor object if lock obtained successfully, else null which indicates that a\n modification is in process.","type_short":"LockingTaskMonitor"}},{"javadoc":"@see ghidra.framework.model.DomainObject#forceLock(boolean, String)","static":false,"name":"forceLock","comment":"","params":[{"type_long":"boolean","name":"rollback","comment":"","type_short":"boolean"},{"type_long":"java.lang.String","name":"reason","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#unlock()","static":false,"name":"unlock","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Release the modification lock which is associated with the specified LockingTaskHandler.","static":false,"name":"unlock","comment":"Release the modification lock which is associated with the specified LockingTaskHandler.","params":[{"type_long":"ghidra.framework.data.LockingTaskMonitor","name":"handler","comment":"","type_short":"LockingTaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"startTransaction","comment":"","params":[{"type_long":"java.lang.String","name":"description","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.framework.model.UndoableDomainObject#startTransaction(java.lang.String)","static":false,"name":"startTransaction","comment":"","params":[{"type_long":"java.lang.String","name":"description","comment":"","type_short":"String"},{"type_long":"ghidra.framework.model.AbortedTransactionListener","name":"listener","comment":"","type_short":"AbortedTransactionListener"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.framework.model.UndoableDomainObject#endTransaction(int, boolean)","static":false,"name":"endTransaction","comment":"","params":[{"type_long":"int","name":"transactionID","comment":"","type_short":"int"},{"type_long":"boolean","name":"commit","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given transaction listener to this domain object\n@param listener the new transaction listener to add","static":false,"name":"addTransactionListener","comment":"Adds the given transaction listener to this domain object","params":[{"type_long":"ghidra.framework.model.TransactionListener","name":"listener","comment":"the new transaction listener to add","type_short":"TransactionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given transaction listener from this domain object.\n@param listener the transaction listener to remove","static":false,"name":"removeTransactionListener","comment":"Removes the given transaction listener from this domain object.","params":[{"type_long":"ghidra.framework.model.TransactionListener","name":"listener","comment":"the transaction listener to remove","type_short":"TransactionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the undo stack depth.\n (The number of items on the undo stack)\n This method is for JUnits.\n@return the undo stack depth","static":false,"name":"getUndoStackDepth","comment":"Returns the undo stack depth.\n (The number of items on the undo stack)\n This method is for JUnits.","params":[],"throws":[],"return":{"type_long":"int","comment":"the undo stack depth","type_short":"int"}},{"javadoc":"@see ghidra.framework.model.Undoable#canRedo()","static":false,"name":"canRedo","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.Undoable#canUndo()","static":false,"name":"canUndo","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.Undoable#getRedoName()","static":false,"name":"getRedoName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.framework.model.Undoable#getUndoName()","static":false,"name":"getUndoName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.framework.model.UndoableDomainObject#getCurrentTransaction()","static":false,"name":"getCurrentTransaction","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.Transaction","comment":"","type_short":"Transaction"}},{"javadoc":"@see ghidra.framework.model.Undoable#redo()","static":false,"name":"redo","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.Undoable#undo()","static":false,"name":"undo","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#isChanged()","static":false,"name":"isChanged","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setChanged","comment":"","params":[{"type_long":"boolean","name":"b","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification of property change\n@param propertyName\n@param oldValue\n@param newValue\n@return true if change is OK, false value should be reverted","static":false,"name":"propertyChanged","comment":"Notification of property change","params":[{"type_long":"java.lang.String","name":"propertyName","comment":"","type_short":"String"},{"type_long":"java.lang.Object","name":"oldValue","comment":"","type_short":"Object"},{"type_long":"java.lang.Object","name":"newValue","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"true if change is OK, false value should be reverted","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.Undoable#clearUndo()","static":false,"name":"clearUndo","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearUndo","comment":"","params":[{"type_long":"boolean","name":"notifyListeners","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearCache","comment":"","params":[{"type_long":"boolean","name":"all","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#canSave()","static":false,"name":"canSave","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.DomainObject#save(java.lang.String, ghidra.util.task.TaskMonitor)","static":false,"name":"save","comment":"","params":[{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#saveToPackedFile(java.io.File, ghidra.util.task.TaskMonitor)","static":false,"name":"saveToPackedFile","comment":"","params":[{"type_long":"java.io.File","name":"outputFile","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method is called before a save, saveAs, or saveToPackedFile \n to update common meta data\n@throws IOException","static":false,"name":"updateMetadata","comment":"This method is called before a save, saveAs, or saveToPackedFile \n to update common meta data","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.model.DomainObject#isClosed()","static":false,"name":"isClosed","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.model.UndoableDomainObject#hasTerminatedTransaction()","static":false,"name":"hasTerminatedTransaction","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"loadMetadata","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveMetadata","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DomainObjectAdapterDB","comment":"Database version of the DomainObjectAdapter; this version adds the\n concept of starting a transaction before a change is made to the\n domain object and ending the transaction. The transaction allows for\n undo\/redo changes.\n  \n The implementation class must also satisfy the following requirements:\n \n \n 1. The following constructor signature must be implemented:\n \n \t\t **\n\t\t * Constructs new Domain Object\n\t\t * @param dbh a handle to an open domain object database.\n\t\t * @param openMode one of:\n\t\t * \t\tREAD_ONLY: the original database will not be modified\n\t\t * \t\tUPDATE: the database can be written to.\n\t\t * \t\tUPGRADE: the database is upgraded to the latest schema as it is opened.\n\t\t * @param monitor TaskMonitor that allows the open to be cancelled.\n\t     * @param consumer the object that keeping the program open.\n\t\t *     \n\t\t * @throws IOException if an error accessing the database occurs.\n\t\t * @throws VersionException if database version does not match implementation. UPGRADE may be possible.\n\t\t **\n\t\t public DomainObjectAdapterDB(DBHandle dbh, int openMode, TaskMonitor monitor, Object consumer) throws IOException, VersionException \n\n 2. The following static field must be provided:\n \n \t\t public static final String CONTENT_TYPE\n \n ","fields":[{"type_long":"int","javadoc":"","static":true,"name":"NUM_UNDOS","comment":"","type_short":"int","constant_value":"50"},{"type_long":"db.DBHandle","javadoc":"","static":false,"name":"dbh","comment":"","type_short":"DBHandle","constant_value":null},{"type_long":"ghidra.framework.data.DomainObjectDBChangeSet","javadoc":"","static":false,"name":"changeSet","comment":"","type_short":"DomainObjectDBChangeSet","constant_value":null},{"type_long":"ghidra.framework.data.OptionsDB","javadoc":"","static":false,"name":"options","comment":"","type_short":"OptionsDB","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"closed","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"fatalErrorOccurred","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.framework.data.AbstractTransactionManager","javadoc":"","static":false,"name":"transactionMgr","comment":"","type_short":"AbstractTransactionManager","constant_value":null}]}
