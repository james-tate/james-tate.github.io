{"implements":[],"javadoc":"<code>RepositoryServerAdapter<\/code> provides a persistent wrapper for a \n <code>RepositoryServerHandle<\/code> which may become invalid if the \n remote connection were to fail.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a repository server interface adapter.\n@param server provides server connection data","static":false,"name":"<init>","comment":"Construct a repository server interface adapter.","params":[{"type_long":"ghidra.framework.model.ServerInfo","name":"server","comment":"provides server connection data","type_short":"ServerInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a repository server interface adapter.\n@param serverHandle associated server handle (reconnect not supported)","static":false,"name":"<init>","comment":"Construct a repository server interface adapter.","params":[{"type_long":"ghidra.framework.remote.RepositoryServerHandle","name":"serverHandle","comment":"associated server handle (reconnect not supported)","type_short":"RepositoryServerHandle"},{"type_long":"java.lang.String","name":"serverInfoString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Add a listener to this remote adapter\n@param listener","static":false,"name":"addListener","comment":"Add a listener to this remote adapter","params":[{"type_long":"ghidra.framework.client.RemoteAdapterListener","name":"listener","comment":"","type_short":"RemoteAdapterListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a listener from this remote adapter\n@param listener","static":false,"name":"removeListener","comment":"Remove a listener from this remote adapter","params":[{"type_long":"ghidra.framework.client.RemoteAdapterListener","name":"listener","comment":"","type_short":"RemoteAdapterListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the connection was cancelled by the user.\n@return try if cancelled by user","static":false,"name":"isCancelled","comment":"Returns true if the connection was cancelled by the user.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"try if cancelled by user","type_short":"boolean"}},{"javadoc":"Notify listeners of a connection state change.","static":false,"name":"fireStateChanged","comment":"Notify listeners of a connection state change.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if connected.","static":false,"name":"isConnected","comment":"Returns true if connected.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Attempt to connect or re-connect to the server.\n@return true if connect successful, false if cancelled by user\n@throws NotConnectedException if connect failed (error will be displayed to user)","static":false,"name":"connect","comment":"Attempt to connect or re-connect to the server.","params":[],"throws":[{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if connect failed (error will be displayed to user)","type_short":"NotConnectedException"}],"return":{"type_long":"boolean","comment":"true if connect successful, false if cancelled by user","type_short":"boolean"}},{"javadoc":"","static":false,"name":"checkPasswordExpiration","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the server handle is already connected\n and functioning properly.  A simple remote call is made \n to the handle's connected() method to verify the connection.","static":false,"name":"verifyConnection","comment":"Returns true if the server handle is already connected\n and functioning properly.  A simple remote call is made \n to the handle's connected() method to verify the connection.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"recoverConnection","comment":"","params":[{"type_long":"java.io.IOException","name":"e","comment":"","type_short":"IOException"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create a new repository on the server.\n@param name repository name.\n@return handle to new repository.\n@throws DuplicateNameException\n@throws UserAccessException\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#createRepository(java.lang.String, long)","static":false,"name":"createRepository","comment":"Create a new repository on the server.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.UserAccessException","comment":"","type_short":"UserAccessException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"ghidra.framework.client.RepositoryAdapter","comment":"handle to new repository.","type_short":"RepositoryAdapter"}},{"javadoc":"Get a handle to an existing repository.  The repository adapter is\n initially disconnected - the connect() method or another repository \n action method must be invoked to establish a repository connection.\n@param name repository name.\n@return repository handle or null if repository not found.","static":false,"name":"getRepository","comment":"Get a handle to an existing repository.  The repository adapter is\n initially disconnected - the connect() method or another repository \n action method must be invoked to establish a repository connection.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.client.RepositoryAdapter","comment":"repository handle or null if repository not found.","type_short":"RepositoryAdapter"}},{"javadoc":"Get a handle to an existing repository.\n@param name repository name.\n@return repository handle or null if repository not found.\n@throws UserAccessException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getRepository(java.lang.String)","static":false,"name":"getRepositoryHandle","comment":"Get a handle to an existing repository.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"ghidra.framework.remote.RepositoryHandle","comment":"repository handle or null if repository not found.","type_short":"RepositoryHandle"}},{"javadoc":"Delete a repository.\n@param name repository name.\n@throws UserAccessException\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#deleteRepository(java.lang.String)","static":false,"name":"deleteRepository","comment":"Delete a repository.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.UserAccessException","comment":"","type_short":"UserAccessException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all repository names defined to the server.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getRepositoryNames()","static":false,"name":"getRepositoryNames","comment":"Returns a list of all repository names defined to the server.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"@returns true if server allows anonymous access.\n Individual repositories must grant anonymous access separately.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#anonymousAccessAllowed()","static":false,"name":"anonymousAccessAllowed","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@returns true if user has restricted read-only access to server (e.g., anonymous user)\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#isReadOnly()","static":false,"name":"isReadOnly","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns user's server login identity","static":false,"name":"getUser","comment":"Returns user's server login identity","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns a list of all known users.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#getAllUsers()","static":false,"name":"getAllUsers","comment":"Returns a list of all known users.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Set the simple password for the user.\n@param saltedSHA256PasswordHash hex character representation of salted SHA256 hash of the password\n@return true if password changed\n@throws IOException if user data can't be written to file\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#setPassword(char[])\n@see HashUtilities#getSaltedHash(\"SHA-256\", char[])","static":false,"name":"setPassword","comment":"Set the simple password for the user.","params":[{"type_long":"char[]","name":"saltedSHA256PasswordHash","comment":"hex character representation of salted SHA256 hash of the password","type_short":"char[]"}],"throws":[{"type_long":"java.io.IOException","comment":"if user data can't be written to file","type_short":"IOException"},{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if server connection is down (user already informed)","type_short":"NotConnectedException"}],"return":{"type_long":"boolean","comment":"true if password changed","type_short":"boolean"}},{"javadoc":"Returns true if this server allows the user to change their password.\n@throws IOException\n@throws NotConnectedException if server connection is down (user already informed)\n@see ghidra.framework.remote.RemoteRepositoryServerHandle#canSetPassword()","static":false,"name":"canSetPassword","comment":"Returns true if this server allows the user to change their password.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns server information.  May be null if using fixed RepositoryServerHandle.","static":false,"name":"getServerInfo","comment":"Returns server information.  May be null if using fixed RepositoryServerHandle.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.ServerInfo","comment":"","type_short":"ServerInfo"}},{"javadoc":"","static":false,"name":"checkServerHandle","comment":"","params":[],"throws":[{"type_long":"ghidra.framework.client.NotConnectedException","comment":"","type_short":"NotConnectedException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hadUnexpectedDisconnect","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Force disconnect with server","static":false,"name":"disconnect","comment":"Force disconnect with server","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"disconnect","comment":"","params":[{"type_long":"boolean","name":"unexpected","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RepositoryServerAdapter","comment":"RepositoryServerAdapter provides a persistent wrapper for a \n RepositoryServerHandle which may become invalid if the \n remote connection were to fail.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"HOUR","comment":"","type_short":"int","constant_value":"3600000"},{"type_long":"ghidra.framework.model.ServerInfo","javadoc":"","static":false,"name":"server","comment":"","type_short":"ServerInfo","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"serverInfoStr","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"currentUser","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.framework.remote.RepositoryServerHandle","javadoc":"","static":false,"name":"serverHandle","comment":"","type_short":"RepositoryServerHandle","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"unexpectedDisconnect","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"connectCancelled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.framework.client.RemoteAdapterListener>","javadoc":"","static":false,"name":"listenerList","comment":"","type_short":"WeakSet","constant_value":null}]}
