{"implements":[],"javadoc":"<code>GhidraProtocolConnector<\/code> provides an abtract implementation to access Ghidra \n repositories using various underlying communication protocols.  The common requirement \n for all implementations is the ability to derive a repository URL from any folder or file\n URL.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Abstract <code>GhidraProtocolConnector<\/code> constructor.\n@param url a repository resource URL appropriate for the specific protocol implementation\n@throws MalformedURLException if URL is invalid","static":false,"name":"<init>","comment":"Abstract GhidraProtocolConnector constructor.","params":[{"type_long":"java.net.URL","name":"url","comment":"a repository resource URL appropriate for the specific protocol implementation","type_short":"URL"}],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL is invalid","type_short":"MalformedURLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the URL associated with the repository\/project root folder.\n This will be used as a key to its corresponding transient project data.\n@return root folder URL","static":false,"name":"getRepositoryRootGhidraURL","comment":"Get the URL associated with the repository\/project root folder.\n This will be used as a key to its corresponding transient project data.","params":[],"throws":[],"return":{"type_long":"java.net.URL","comment":"root folder URL","type_short":"URL"}},{"javadoc":"Perform URL verification checks to ensure that it satisfies this \n connector implementation requirements\n@throws MalformedURLException if URL is invalid","static":false,"name":"checkProtocol","comment":"Perform URL verification checks to ensure that it satisfies this \n connector implementation requirements","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL is invalid","type_short":"MalformedURLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If connector supports user information within URL it will be verified\n@throws MalformedURLException if URL contains user information \n and it is either invalid or unsupported","static":false,"name":"checkUserInfo","comment":"If connector supports user information within URL it will be verified","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL contains user information \n and it is either invalid or unsupported","type_short":"MalformedURLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Presence of a host specification within URL will be verified\n@throws MalformedURLException if URL is missing proper host specification","static":false,"name":"checkHostInfo","comment":"Presence of a host specification within URL will be verified","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL is missing proper host specification","type_short":"MalformedURLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parse repository name from URL\n@return repository name or null if not specified\n@throws MalformedURLException if URL is invalid","static":false,"name":"parseRepositoryName","comment":"Parse repository name from URL","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL is invalid","type_short":"MalformedURLException"}],"return":{"type_long":"java.lang.String","comment":"repository name or null if not specified","type_short":"String"}},{"javadoc":"Parse item path name from URL and establish initial values for folderPath and\n folderItemName.\n@return original item path from URL or null if not specified\n@throws MalformedURLException if URL is invalid","static":false,"name":"parseItemPath","comment":"Parse item path name from URL and establish initial values for folderPath and\n folderItemName.","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if URL is invalid","type_short":"MalformedURLException"}],"return":{"type_long":"java.lang.String","comment":"original item path from URL or null if not specified","type_short":"String"}},{"javadoc":"Gets the status code from a Ghidra URL connect response.\n@return the Ghidra Status-Code, or -1 if not yet connected\n@see #connect(boolean)","static":false,"name":"getResponseCode","comment":"Gets the status code from a Ghidra URL connect response.","params":[],"throws":[],"return":{"type_long":"int","comment":"the Ghidra Status-Code, or -1 if not yet connected","type_short":"int"}},{"javadoc":"Gets the repository name associated with the URL.\n@return the repository name or null if URL does not identify a specific repository","static":false,"name":"getRepositoryName","comment":"Gets the repository name associated with the URL.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the repository name or null if URL does not identify a specific repository","type_short":"String"}},{"javadoc":"Get the RepositoryAdapter associated with a URL which specifies a repository.\n@return repository adapter or null if a project locator is supplied instead","static":false,"name":"getRepositoryAdapter","comment":"Get the RepositoryAdapter associated with a URL which specifies a repository.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.client.RepositoryAdapter","comment":"repository adapter or null if a project locator is supplied instead","type_short":"RepositoryAdapter"}},{"javadoc":"Get the RepositoryServerAdapter associated with a URL which specifies a repository or\n repository server.\n@return repository server adapter or null if a project locator is supplied instead","static":false,"name":"getRepositoryServerAdapter","comment":"Get the RepositoryServerAdapter associated with a URL which specifies a repository or\n repository server.","params":[],"throws":[],"return":{"type_long":"ghidra.framework.client.RepositoryServerAdapter","comment":"repository server adapter or null if a project locator is supplied instead","type_short":"RepositoryServerAdapter"}},{"javadoc":"Gets the repository folder path associated with the URL.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return repository folder path or null","static":false,"name":"getFolderPath","comment":"Gets the repository folder path associated with the URL.\n If an ambiguous path has been specified, the folder path may change\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"repository folder path or null","type_short":"String"}},{"javadoc":"Gets the repository folder item name associated with the URL.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).\n@return folder item name or null","static":false,"name":"getFolderItemName","comment":"Gets the repository folder item name associated with the URL.\n If an ambiguous path has been specified, the folder item name may become null\n after a connection is established (e.g., folder item name will be appended \n to folder path and item name will become null if item turns out to\n be a folder).","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"folder item name or null","type_short":"String"}},{"javadoc":"","static":false,"name":"appendSubfolderName","comment":"","params":[{"type_long":"java.lang.String","name":"folder","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"subfolderName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Fully resolve folder\/item reference once connected to the associated\n repository due to possible ambiguity\n@throws IOException","static":false,"name":"resolveItemPath","comment":"Fully resolve folder\/item reference once connected to the associated\n repository due to possible ambiguity","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Utilized a cached connection via the specified repository adapter.\n This method may only be invoked if not yet connected and the associated\n URL corresponds to a repository (getRepositoryName() != null).  The connection \n response code should be established based upon the availability of the \n URL referenced repository resource (i.e., folder or file).\n@param repository existing connected repository adapter\n@throws IOException","static":false,"name":"connect","comment":"Utilized a cached connection via the specified repository adapter.\n This method may only be invoked if not yet connected and the associated\n URL corresponds to a repository (getRepositoryName() != null).  The connection \n response code should be established based upon the availability of the \n URL referenced repository resource (i.e., folder or file).","params":[{"type_long":"ghidra.framework.client.RepositoryAdapter","name":"repository","comment":"existing connected repository adapter","type_short":"RepositoryAdapter"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Connect to the resource specified by the associated URL.  This method should only be invoked\n once, a second attempt may result in an IOException.\n@param readOnly if resource should be requested for write access.\n@return connection response code @see {@link GhidraURLConnection}\n@throws IOException if a connection error occurs","static":false,"name":"connect","comment":"Connect to the resource specified by the associated URL.  This method should only be invoked\n once, a second attempt may result in an IOException.","params":[{"type_long":"boolean","name":"readOnly","comment":"if resource should be requested for write access.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a connection error occurs","type_short":"IOException"}],"return":{"type_long":"int","comment":"connection response code @see GhidraURLConnection","type_short":"int"}},{"javadoc":"Determines the read-only nature of a connected resource\n@return true if read-only, false if write access allowed\n@throws NotConnectedException if connect has not yet been performed","static":false,"name":"isReadOnly","comment":"Determines the read-only nature of a connected resource","params":[],"throws":[{"type_long":"ghidra.framework.client.NotConnectedException","comment":"if connect has not yet been performed","type_short":"NotConnectedException"}],"return":{"type_long":"boolean","comment":"true if read-only, false if write access allowed","type_short":"boolean"}}],"name":"GhidraProtocolConnector","comment":"GhidraProtocolConnector provides an abtract implementation to access Ghidra \n repositories using various underlying communication protocols.  The common requirement \n for all implementations is the ability to derive a repository URL from any folder or file\n URL.","fields":[{"type_long":"java.net.URL","javadoc":"","static":false,"name":"url","comment":"","type_short":"URL","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"repositoryName","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"itemPath","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"folderPath","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"folderItemName","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"responseCode","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.framework.client.RepositoryAdapter","javadoc":"","static":false,"name":"repositoryAdapter","comment":"","type_short":"RepositoryAdapter","constant_value":null},{"type_long":"ghidra.framework.client.RepositoryServerAdapter","javadoc":"","static":false,"name":"repositoryServerAdapter","comment":"","type_short":"RepositoryServerAdapter","constant_value":null}]}
