{"implements":["java.lang.Iterable"],"javadoc":"Stores all chunks read-in by the {@link ChunkReader}. The model is responsible for handling all\n interaction with the list of chunks.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given chunk to the model.\n@param chunk","static":false,"name":"add","comment":"Adds the given chunk to the model.","params":[{"type_long":"ghidra.framework.main.logviewer.model.Chunk","name":"chunk","comment":"","type_short":"Chunk"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a chunk at the given index to the model.\n@param index\n@param chunk","static":false,"name":"add","comment":"Adds a chunk at the given index to the model.","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"ghidra.framework.main.logviewer.model.Chunk","name":"chunk","comment":"","type_short":"Chunk"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the chunk at the given index from the model.\n@param index","static":false,"name":"remove","comment":"Removes the chunk at the given index from the model.","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.framework.main.logviewer.model.Chunk","comment":"","type_short":"Chunk"}},{"javadoc":"Clears all chunks from the model.","static":false,"name":"clear","comment":"Clears all chunks from the model.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of chunks in the model.\n@return ","static":false,"name":"getSize","comment":"Returns the number of chunks in the model.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the chunk at the given index.\n@param index\n@return ","static":false,"name":"get","comment":"Returns the chunk at the given index.","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.framework.main.logviewer.model.Chunk","comment":"","type_short":"Chunk"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.framework.main.logviewer.model.Chunk>","comment":"","type_short":"Iterator"}},{"javadoc":"@return ","static":false,"name":"getNumChunks","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the start\/end byte positions within the input file for the given row.\n \n To do this we have to loop over all chunks in the {@link ChunkModel} and count the number \n of lines in each chunk until we get to the line (row) we're looking for. We then grab the \n correct value from the byteMap for that chunk line, which is the starting byte for it.\n@param row\n@return the byte position in the file this row corresponds to","static":false,"name":"getFilePositionForRow","comment":"Returns the start\/end byte positions within the input file for the given row.\n \n To do this we have to loop over all chunks in the ChunkModel and count the number \n of lines in each chunk until we get to the line (row) we're looking for. We then grab the \n correct value from the byteMap for that chunk line, which is the starting byte for it.","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.framework.main.logviewer.model.Pair","comment":"the byte position in the file this row corresponds to","type_short":"Pair"}},{"javadoc":"Searches the visible chunks to see if any of them contain the given byte. If so, returns\n the row in the table where it resides. Returns -1 otherwise.\n@param selectedByte\n@return ","static":false,"name":"getRowForBytePos","comment":"Searches the visible chunks to see if any of them contain the given byte. If so, returns\n the row in the table where it resides. Returns -1 otherwise.","params":[{"type_long":"long","name":"selectedByte","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"ChunkModel","comment":"Stores all chunks read-in by the ChunkReader. The model is responsible for handling all\n interaction with the list of chunks.","fields":[{"type_long":"java.util.List<ghidra.framework.main.logviewer.model.Chunk>","javadoc":"","static":false,"name":"chunks","comment":"","type_short":"List","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"selectedByteStart","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"selectedByteEnd","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"NUM_LINES","comment":"","type_short":"int","constant_value":"250"},{"type_long":"int","javadoc":"","static":false,"name":"MAX_VISIBLE_CHUNKS","comment":"","type_short":"int","constant_value":"3"}]}
