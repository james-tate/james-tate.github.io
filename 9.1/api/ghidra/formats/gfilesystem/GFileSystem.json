{"implements":["java.io.Closeable","ghidra.util.classfinder.ExtensionPoint"],"javadoc":"Interface that represents a filesystem that contains files.\n <p>\n Operations take a {@link TaskMonitor} if they need to be cancel-able.\n <p>\n Use {@link FileSystemService} to discover and open instances of filesystems in files or\n to open a known {@link FSRL} path.\n <p>\n NOTE:<p>\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\". If not, the ClassSearcher\n will not find them.\n <p>\n Also note that this interface came after the original abstract class GFileSystem and its many\n implementations, and usage is being migrated to this interface where possible and as\n time permits.","static":false,"methods":[{"javadoc":"File system volume name.\n <p>\n Typically the name of the container file, or a internally stored 'volume' name.\n@return string filesystem volume name.","static":false,"name":"getName","comment":"File system volume name.\n \n Typically the name of the container file, or a internally stored 'volume' name.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"string filesystem volume name.","type_short":"String"}},{"javadoc":"Returns the type of this file system.\n <p>\n This default implementation returns the type value in {@link FileSystemInfo}\n annotation.\n@return type string","static":false,"name":"getType","comment":"Returns the type of this file system.\n \n This default implementation returns the type value in FileSystemInfo\n annotation.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"type string","type_short":"String"}},{"javadoc":"Returns a description of this file system.\n <p>\n This default implementation returns the description value in {@link FileSystemInfo}\n annotation.\n@return description string","static":false,"name":"getDescription","comment":"Returns a description of this file system.\n \n This default implementation returns the description value in FileSystemInfo\n annotation.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"description string","type_short":"String"}},{"javadoc":"File system's FSRL\n@return {@link FSRLRoot} of this filesystem.","static":false,"name":"getFSRL","comment":"File system's FSRL","params":[],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","comment":"FSRLRoot of this filesystem.","type_short":"FSRLRoot"}},{"javadoc":"Returns true if the filesystem has been {@link #close() closed}\n@return boolean true if the filesystem has been closed.","static":false,"name":"isClosed","comment":"Returns true if the filesystem has been #close()","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the filesystem has been closed.","type_short":"boolean"}},{"javadoc":"Indicates if this filesystem is a static snapshot or changes.\n@return boolean true if the filesystem is static or false if dynamic content.","static":false,"name":"isStatic","comment":"Indicates if this filesystem is a static snapshot or changes.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the filesystem is static or false if dynamic content.","type_short":"boolean"}},{"javadoc":"Returns the {@link FileSystemRefManager ref manager} that is responsible for\n creating and releasing {@link FileSystemRef refs} to this filesystem.\n <p>\n@return {@link FileSystemRefManager} that manages references to this filesystem.","static":false,"name":"getRefManager","comment":"Returns the FileSystemRefManager that is responsible for\n creating and releasing FileSystemRef to this filesystem.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.FileSystemRefManager","comment":"FileSystemRefManager that manages references to this filesystem.","type_short":"FileSystemRefManager"}},{"javadoc":"Returns the number of files in the filesystem, if known, otherwise -1 if not known.\n@return number of files in this filesystem, -1 if not known.","static":false,"name":"getFileCount","comment":"Returns the number of files in the filesystem, if known, otherwise -1 if not known.","params":[],"throws":[],"return":{"type_long":"int","comment":"number of files in this filesystem, -1 if not known.","type_short":"int"}},{"javadoc":"Retrieves a {@link GFile} from this filesystem based on its full path and filename.\n <p>\n@param path string path and filename of a file located in this filesystem.  Use \n {@code null} or \"\/\" to retrieve the root directory\n@return {@link GFile} instance of requested file, null if not found.\n@throws IOException if IO error when looking up file.","static":false,"name":"lookup","comment":"Retrieves a GFile from this filesystem based on its full path and filename.\n ","params":[{"type_long":"java.lang.String","name":"path","comment":"string path and filename of a file located in this filesystem.  Use \n  or \"\/\" to retrieve the root directory","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error when looking up file.","type_short":"IOException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFile","comment":"GFile instance of requested file, null if not found.","type_short":"GFile"}},{"javadoc":"Returns an {@link InputStream} that contains the contents of the specified {@link GFile}.\n <p>\n The caller is responsible for closing the stream.\n <p>\n@param file {@link GFile} to get an InputStream for\n@param monitor {@link TaskMonitor} to watch and update progress\n@return new {@link InputStream} contains the contents of the file or NULL if the\n file doesn't have data.\n@throws IOException if IO problem\n@throws CancelledException if user cancels.","static":false,"name":"getInputStream","comment":"Returns an InputStream that contains the contents of the specified GFile.\n \n The caller is responsible for closing the stream.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.GFile","name":"file","comment":"GFile to get an InputStream for","type_short":"GFile"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to watch and update progress","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO problem","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels.","type_short":"CancelledException"}],"return":{"type_long":"java.io.InputStream","comment":"new InputStream contains the contents of the file or NULL if the\n file doesn't have data.","type_short":"InputStream"}},{"javadoc":"Returns a list of {@link GFile files} that reside in the specified directory on\n this filesystem.\n <p>\n@param directory NULL means root of filesystem.\n@return {@link List} of {@link GFile} instances of file in the requested directory.\n@throws IOException if IO problem.","static":false,"name":"getListing","comment":"Returns a list of GFile that reside in the specified directory on\n this filesystem.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.GFile","name":"directory","comment":"NULL means root of filesystem.","type_short":"GFile"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO problem.","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.GFile>","comment":"List of GFile instances of file in the requested directory.","type_short":"List"}},{"javadoc":"Returns a multi-line string with information about the specified {@link GFile file}.\n <p>\n TODO: this method needs to be refactored to return a Map<String,String> instead of\n a pre-formatted multi-line string.\n <p>\n@param file {@link GFile} to get info message for.\n@param monitor {@link TaskMonitor} to watch and update progress.\n@return multi-line formatted string with info about the file, or null.","static":false,"name":"getInfo","comment":"Returns a multi-line string with information about the specified GFile.\n \n TODO: this method needs to be refactored to return a MapString,String instead of\n a pre-formatted multi-line string.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.GFile","name":"file","comment":"GFile to get info message for.","type_short":"GFile"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to watch and update progress.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"multi-line formatted string with info about the file, or null.","type_short":"String"}}],"name":"GFileSystem","comment":"Interface that represents a filesystem that contains files.\n \n Operations take a TaskMonitor if they need to be cancel-able.\n \n Use FileSystemService to discover and open instances of filesystems in files or\n to open a known FSRL path.\n \n NOTE:\n ALL GFileSystem sub-CLASSES MUST END IN \"FileSystem\". If not, the ClassSearcher\n will not find them.\n \n Also note that this interface came after the original abstract class GFileSystem and its many\n implementations, and usage is being migrated to this interface where possible and as\n time permits.","fields":[]}
