{"implements":[],"javadoc":"Statically scoped mugger that handles the dirty work of probing for and creating\n {@link GFileSystem} instances.\n <p>\n Auto-discovers all {@link GFileSystem} instances in the classpath that have a\n {@link FileSystemInfo} annotation.\n <p>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"<p>\n@return The single global {@link FileSystemFactoryMgr} instance.","static":true,"name":"getInstance","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.factory.FileSystemFactoryMgr","comment":"The single global FileSystemFactoryMgr instance.","type_short":"FileSystemFactoryMgr"}},{"javadoc":"Private constructor.  Use {@link FileSystemFactoryMgr#getInstance()} to retrieve\n the singleton.","static":false,"name":"<init>","comment":"Private constructor.  Use FileSystemFactoryMgr#getInstance() to retrieve\n the singleton.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addFactory","comment":"","params":[{"type_long":"java.lang.Class<? extends ghidra.formats.gfilesystem.GFileSystem>","name":"fsClass","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all registered filesystem implementation descriptions.\n@return list of strings","static":false,"name":"getAllFilesystemNames","comment":"Returns a list of all registered filesystem implementation descriptions.","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"list of strings","type_short":"List"}},{"javadoc":"Returns the file system type of the specified {@link GFileSystem} class.\n@param fsClass Class to inspect\n@return String file system type, from the {@link FileSystemInfo#type()} annotation.","static":false,"name":"getFileSystemType","comment":"Returns the file system type of the specified GFileSystem class.","params":[{"type_long":"java.lang.Class<? extends ghidra.formats.gfilesystem.GFileSystem>","name":"fsClass","comment":"Class to inspect","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String file system type, from the FileSystemInfo#type() annotation.","type_short":"String"}},{"javadoc":"Creates a new {@link GFileSystem} instance when the filesystem type is already\n known.\n <p>\n@param fsType filesystem type string, ie. \"file\", \"zip\".\n@param containerFSRL {@link FSRL} of the containing file.\n@param containerFile {@link File} the containing file.\n@param fsService reference to the {@link FileSystemService} instance.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance.\n@throws IOException if error when opening the filesystem or unknown fsType.\n@throws CancelledException if the user canceled the operation.","static":false,"name":"mountFileSystem","comment":"Creates a new GFileSystem instance when the filesystem type is already\n known.\n ","params":[{"type_long":"java.lang.String","name":"fsType","comment":"filesystem type string, ie. \"file\", \"zip\".","type_short":"String"},{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL of the containing file.","type_short":"FSRL"},{"type_long":"java.io.File","name":"containerFile","comment":"File the containing file.","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"reference to the FileSystemService instance.","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to use for canceling and updating progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error when opening the filesystem or unknown fsType.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFileSystem","comment":"new GFileSystem instance.","type_short":"GFileSystem"}},{"javadoc":"","static":false,"name":"mountUsingFactory","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.factory.FileSystemInfoRec","name":"fsir","comment":"","type_short":"FileSystemInfoRec"},{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"","type_short":"FSRL"},{"type_long":"java.io.File","name":"containerFile","comment":"","type_short":"File"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"byteProvider","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","name":"targetFSRL","comment":"","type_short":"FSRLRoot"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFileSystem","comment":"","type_short":"GFileSystem"}},{"javadoc":"Returns true if the specified file contains a supported {@link GFileSystem}.\n <p>\n@param containerFSRL {@link FSRL} of the containing file.\n@param containerFile {@link File} the containing file.\n@param fsService reference to the {@link FileSystemService} instance.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return {@code true} if the file seems to contain a filesystem, {@code false} if it does not.\n@throws IOException if error when accessing the containing file\n@throws CancelledException if the user canceled the operation","static":false,"name":"test","comment":"Returns true if the specified file contains a supported GFileSystem.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL of the containing file.","type_short":"FSRL"},{"type_long":"java.io.File","name":"containerFile","comment":"File the containing file.","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"reference to the FileSystemService instance.","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to use for canceling and updating progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error when accessing the containing file","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the operation","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":" if the file seems to contain a filesystem,  if it does not.","type_short":"boolean"}},{"javadoc":"Probes the specified file for a supported {@link GFileSystem} implementation, and\n if found, creates a new filesystem instance.\n <p>\n@param containerFSRL {@link FSRL} of the containing file.\n@param containerFile {@link File} the containing file.\n@param fsService reference to the {@link FileSystemService} instance.\n@param conflictResolver {@link FileSystemProbeConflictResolver conflict resolver} to\n use when more than one {@link GFileSystem} implementation can handle the specified\n file.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance or null not supported.\n@throws IOException if error accessing the containing file\n@throws CancelledException if the user cancels the operation","static":false,"name":"probe","comment":"Probes the specified file for a supported GFileSystem implementation, and\n if found, creates a new filesystem instance.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL of the containing file.","type_short":"FSRL"},{"type_long":"java.io.File","name":"containerFile","comment":"File the containing file.","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"reference to the FileSystemService instance.","type_short":"FileSystemService"},{"type_long":"ghidra.formats.gfilesystem.FileSystemProbeConflictResolver","name":"conflictResolver","comment":"FileSystemProbeConflictResolver to\n use when more than one GFileSystem implementation can handle the specified\n file.","type_short":"FileSystemProbeConflictResolver"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to use for canceling and updating progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error accessing the containing file","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the operation","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFileSystem","comment":"new GFileSystem instance or null not supported.","type_short":"GFileSystem"}},{"javadoc":"","static":false,"name":"makeBP","comment":"","params":[{"type_long":"java.io.File","name":"containerFile","comment":"","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"","type_short":"FSRL"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.ByteProvider","comment":"","type_short":"ByteProvider"}},{"javadoc":"Probes the specified file for a supported {@link GFileSystem} implementation, and\n if found, creates a new filesystem instance.\n <p>\n@param containerFSRL {@link FSRL} of the containing file.\n@param containerFile {@link File} the containing file.\n@param fsService reference to the {@link FileSystemService} instance.\n@param conflictResolver {@link FileSystemProbeConflictResolver conflict resolver} to\n use when more than one {@link GFileSystem} implementation can handle the specified\n file.\n@param priorityFilter limits the probe to filesystems that have a {@link FileSystemInfo#priority()}\n greater than or equal to this value.  Use {@link FileSystemInfo#PRIORITY_LOWEST} to\n include all filesystem implementations.\n@param monitor {@link TaskMonitor} to use for canceling and updating progress.\n@return new {@link GFileSystem} instance or null not supported.\n@throws IOException if error accessing the containing file\n@throws CancelledException if the user cancels the operation","static":false,"name":"probe","comment":"Probes the specified file for a supported GFileSystem implementation, and\n if found, creates a new filesystem instance.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL of the containing file.","type_short":"FSRL"},{"type_long":"java.io.File","name":"containerFile","comment":"File the containing file.","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"reference to the FileSystemService instance.","type_short":"FileSystemService"},{"type_long":"ghidra.formats.gfilesystem.FileSystemProbeConflictResolver","name":"conflictResolver","comment":"FileSystemProbeConflictResolver to\n use when more than one GFileSystem implementation can handle the specified\n file.","type_short":"FileSystemProbeConflictResolver"},{"type_long":"int","name":"priorityFilter","comment":"limits the probe to filesystems that have a FileSystemInfo#priority()\n greater than or equal to this value.  Use FileSystemInfo#PRIORITY_LOWEST to\n include all filesystem implementations.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to use for canceling and updating progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error accessing the containing file","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the operation","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFileSystem","comment":"new GFileSystem instance or null not supported.","type_short":"GFileSystem"}}],"name":"FileSystemFactoryMgr","comment":"Statically scoped mugger that handles the dirty work of probing for and creating\n GFileSystem instances.\n \n Auto-discovers all GFileSystem instances in the classpath that have a\n FileSystemInfo annotation.\n ","fields":[{"type_long":"int","javadoc":"","static":false,"name":"largestBytesRequired","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<ghidra.formats.gfilesystem.factory.FileSystemInfoRec>","javadoc":"","static":false,"name":"sortedFactories","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.formats.gfilesystem.factory.FileSystemInfoRec>","javadoc":"","static":false,"name":"fsByType","comment":"","type_short":"Map","constant_value":null}]}
