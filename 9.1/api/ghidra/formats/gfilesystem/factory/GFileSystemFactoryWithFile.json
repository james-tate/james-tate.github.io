{"implements":["ghidra.formats.gfilesystem.factory.GFileSystemFactory"],"javadoc":"A {@link GFileSystemFactory} interface for filesystem implementations that can\n be constructed using just a reference to the source {@link File}.\n <p>\n@param <FSTYPE>","static":false,"methods":[{"javadoc":"Constructs a new {@link GFileSystem} instance that handles the specified File.\n <p>\n@param containerFSRL the {@link FSRL} of the file being opened.\n@param targetFSRL the {@link FSRLRoot} of the filesystem being created.\n@param containerFile the {@link File} (probably in the filecache with non-useful filename)\n being opened.\n@param fsService a reference to the {@link FileSystemService} object\n@param monitor a {@link TaskMonitor} that should be polled to see if the user has\n requested to cancel the operation, and updated with progress information.\n@return a new {@link GFileSystem} derived instance.\n@throws IOException if there is an error reading files.\n@throws CancelledException if the user cancels","static":false,"name":"create","comment":"Constructs a new GFileSystem instance that handles the specified File.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"the FSRL of the file being opened.","type_short":"FSRL"},{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","name":"targetFSRL","comment":"the FSRLRoot of the filesystem being created.","type_short":"FSRLRoot"},{"type_long":"java.io.File","name":"containerFile","comment":"the File (probably in the filecache with non-useful filename)\n being opened.","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"a reference to the FileSystemService object","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a TaskMonitor that should be polled to see if the user has\n requested to cancel the operation, and updated with progress information.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an error reading files.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"FSTYPE","comment":"a new GFileSystem derived instance.","type_short":"FSTYPE"}}],"name":"GFileSystemFactoryWithFile","comment":"A GFileSystemFactory interface for filesystem implementations that can\n be constructed using just a reference to the source File.\n ","fields":[]}
