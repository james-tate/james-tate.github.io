{"implements":["ghidra.formats.gfilesystem.factory.GFileSystemFactoryFull","ghidra.formats.gfilesystem.factory.GFileSystemProbeFull"],"javadoc":"A {@link GFileSystemFactory} implementation that probes and creates instances of\n {@link GFileSystemBase} which use the legacy filesystem lifecycle pattern.\n <p>\n For each operation, this factory will mint a new instance of a GFileSystemBase-derived\n fs, using its 3 param constructor, and call its isValid() or open().\n <p>\n After an isValid() call, the newly minted filesystem instance is thrown away.\n <p>\n This class requires special support in the {@link FileSystemFactoryMgr} to push\n the fsClass into each factory instance after it is constructed.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setFileSystemClass","comment":"","params":[{"type_long":"java.lang.Class<? extends ghidra.formats.gfilesystem.GFileSystemBase>","name":"fsClass","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"probe","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"","type_short":"FSRL"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"byteProvider","comment":"","type_short":"ByteProvider"},{"type_long":"java.io.File","name":"containerFile","comment":"","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"create","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"","type_short":"FSRL"},{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","name":"targetFSRL","comment":"","type_short":"FSRLRoot"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"byteProvider","comment":"","type_short":"ByteProvider"},{"type_long":"java.io.File","name":"containerFile","comment":"","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FileSystemService","name":"fsService","comment":"","type_short":"FileSystemService"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.GFileSystemBase","comment":"","type_short":"GFileSystemBase"}}],"name":"GFileSystemBaseFactory","comment":"A GFileSystemFactory implementation that probes and creates instances of\n GFileSystemBase which use the legacy filesystem lifecycle pattern.\n \n For each operation, this factory will mint a new instance of a GFileSystemBase-derived\n fs, using its 3 param constructor, and call its isValid() or open().\n \n After an isValid() call, the newly minted filesystem instance is thrown away.\n \n This class requires special support in the FileSystemFactoryMgr to push\n the fsClass into each factory instance after it is constructed.","fields":[{"type_long":"java.lang.Class<? extends ghidra.formats.gfilesystem.GFileSystemBase>","javadoc":"","static":false,"name":"fsClass","comment":"","type_short":"Class","constant_value":null},{"type_long":"java.lang.Class<?>[]","javadoc":"","static":true,"name":"FS_CTOR_PARAM_TYPES","comment":"","type_short":"java.lang.Class<?>[]","constant_value":null}]}
