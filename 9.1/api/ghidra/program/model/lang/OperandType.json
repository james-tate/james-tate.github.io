{"implements":[],"javadoc":"Helper class for testing operand related flags in an integer.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"check the READ flag.\n@param operandType the bit field to examine.\n@return true if the READ flag is set.","static":true,"name":"doesRead","comment":"check the READ flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the READ flag is set.","type_short":"boolean"}},{"javadoc":"check the WRITE flag.\n@param operandType the bit field to examine.\n@return true if the WRITE flag is set.","static":true,"name":"doesWrite","comment":"check the WRITE flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the WRITE flag is set.","type_short":"boolean"}},{"javadoc":"check the INDIRECT flag.\n@param operandType the bit field to examine.\n@return true if the INDIRECT flag is set.","static":true,"name":"isIndirect","comment":"check the INDIRECT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the INDIRECT flag is set.","type_short":"boolean"}},{"javadoc":"check the IMMEDIATE flag.\n@param operandType the bit field to examine.\n@return true if the IMMEDIATE flag is set.","static":true,"name":"isImmediate","comment":"check the IMMEDIATE flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the IMMEDIATE flag is set.","type_short":"boolean"}},{"javadoc":"check the RELATIVE flag.\n@param operandType the bit field to examine.\n@return true if the RELATIVE flag is set.","static":true,"name":"isRelative","comment":"check the RELATIVE flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the RELATIVE flag is set.","type_short":"boolean"}},{"javadoc":"check the IMPLICIT flag.\n@param operandType the bit field to examine.\n@return true if the IMPLICIT flag is set.","static":true,"name":"isImplicit","comment":"check the IMPLICIT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the IMPLICIT flag is set.","type_short":"boolean"}},{"javadoc":"check the CODE flag.\n@param operandType the bit field to examine.\n@return true if the CODE flag is set.","static":true,"name":"isCodeReference","comment":"check the CODE flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the CODE flag is set.","type_short":"boolean"}},{"javadoc":"check the DATA flag.\n@param operandType the bit field to examine.\n@return true if the DATA flag is set.","static":true,"name":"isDataReference","comment":"check the DATA flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the DATA flag is set.","type_short":"boolean"}},{"javadoc":"check the PORT flag.\n@param operandType the bit field to examine.\n@return true if the PORT flag is set.","static":true,"name":"isPort","comment":"check the PORT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the PORT flag is set.","type_short":"boolean"}},{"javadoc":"check the REGISTER flag.\n@param operandType the bit field to examine.\n@return true if the REGISTER flag is set.","static":true,"name":"isRegister","comment":"check the REGISTER flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the REGISTER flag is set.","type_short":"boolean"}},{"javadoc":"check the LIST flag.\n@param operandType the bit field to examine.\n@return true if the LIST flag is set.","static":true,"name":"isList","comment":"check the LIST flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the LIST flag is set.","type_short":"boolean"}},{"javadoc":"check the CONDITION FLAG flag.\n@param operandType the bit field to examine.\n@return true if the CONDITION flag is set.","static":true,"name":"isFlag","comment":"check the CONDITION FLAG flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the CONDITION flag is set.","type_short":"boolean"}},{"javadoc":"check the TEXT flag.\n@param operandType the bit field to examine.\n@return true if the TEXT flag is set.","static":true,"name":"isText","comment":"check the TEXT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the TEXT flag is set.","type_short":"boolean"}},{"javadoc":"check ADDRESS flag.\n@param operandType the bit field to examine.\n@return true if the ADDRESS flag is set","static":true,"name":"isAddress","comment":"check ADDRESS flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the ADDRESS flag is set","type_short":"boolean"}},{"javadoc":"check SCALAR flag.\n@param operandType the bit field to examine.\n@return true if the SCALAR flag is set","static":true,"name":"isScalar","comment":"check SCALAR flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the SCALAR flag is set","type_short":"boolean"}},{"javadoc":"check the BIT flag.\n@param operandType the bit field to examine.\n@return true if the BIT flag is set.","static":true,"name":"isBit","comment":"check the BIT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the BIT flag is set.","type_short":"boolean"}},{"javadoc":"check the BYTE flag.\n@param operandType the bit field to examine.\n@return true if the BYTE flag is set.","static":true,"name":"isByte","comment":"check the BYTE flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the BYTE flag is set.","type_short":"boolean"}},{"javadoc":"check the WORD flag.\n@param operandType the bit field to examine.\n@return true if the WORD flag is set.","static":true,"name":"isWord","comment":"check the WORD flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the WORD flag is set.","type_short":"boolean"}},{"javadoc":"check the QUADWORD flag.\n@param operandType the bit field to examine.\n@return true if the QUADWORD flag is set.","static":true,"name":"isQuadWord","comment":"check the QUADWORD flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the QUADWORD flag is set.","type_short":"boolean"}},{"javadoc":"check the SIGNED flag.\n@param operandType the bit field to examine.\n@return true if the SIGNED flag is set.","static":true,"name":"isSigned","comment":"check the SIGNED flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the SIGNED flag is set.","type_short":"boolean"}},{"javadoc":"check the FLOAT flag.\n@param operandType the bit field to examine.\n@return true if the FLOAT flag is set.","static":true,"name":"isFloat","comment":"check the FLOAT flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the FLOAT flag is set.","type_short":"boolean"}},{"javadoc":"check the COPROCESSOR flag.\n@param operandType the bit field to examine.\n@return true if the COPROCESSOR flag is set.","static":true,"name":"isCoProcessor","comment":"check the COPROCESSOR flag.","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the COPROCESSOR flag is set.","type_short":"boolean"}},{"javadoc":"check if both a scalar and an address\n@param operandType the bit field to examine.\n@return true if it is both a scalar and an address","static":true,"name":"isScalarAsAddress","comment":"check if both a scalar and an address","params":[{"type_long":"int","name":"operandType","comment":"the bit field to examine.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if it is both a scalar and an address","type_short":"boolean"}},{"javadoc":"returns a string representation of the given operandType\n@param operandType the operandType bits\n@return the string rep","static":true,"name":"toString","comment":"returns a string representation of the given operandType","params":[{"type_long":"int","name":"operandType","comment":"the operandType bits","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the string rep","type_short":"String"}},{"javadoc":"","static":true,"name":"append","comment":"","params":[{"type_long":"java.lang.StringBuffer","name":"buf","comment":"","type_short":"StringBuffer"},{"type_long":"java.lang.String","name":"str","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"OperandType","comment":"Helper class for testing operand related flags in an integer.","fields":[{"type_long":"int","javadoc":"Bit set if operand refers to an address being read","static":true,"name":"READ","comment":"Bit set if operand refers to an address being read","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"Bit set if operand refers to an address being written to","static":true,"name":"WRITE","comment":"Bit set if operand refers to an address being written to","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"Bit set if operand is an indirect reference.","static":true,"name":"INDIRECT","comment":"Bit set if operand is an indirect reference.","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"Bit set if operand is an immediate value.","static":true,"name":"IMMEDIATE","comment":"Bit set if operand is an immediate value.","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"Bit set if operand depends on the instruction's address.","static":true,"name":"RELATIVE","comment":"Bit set if operand depends on the instruction's address.","type_short":"int","constant_value":"16"},{"type_long":"int","javadoc":"Bit set if operand is implicit.","static":true,"name":"IMPLICIT","comment":"Bit set if operand is implicit.","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"Bit set it the address referred to contains code.","static":true,"name":"CODE","comment":"Bit set it the address referred to contains code.","type_short":"int","constant_value":"64"},{"type_long":"int","javadoc":"Bit set if the address referred to contains data.","static":true,"name":"DATA","comment":"Bit set if the address referred to contains data.","type_short":"int","constant_value":"128"},{"type_long":"int","javadoc":"Bit set if the operand is a register.","static":true,"name":"PORT","comment":"Bit set if the operand is a register.","type_short":"int","constant_value":"256"},{"type_long":"int","javadoc":"Bit set if the operand is a register.","static":true,"name":"REGISTER","comment":"Bit set if the operand is a register.","type_short":"int","constant_value":"512"},{"type_long":"int","javadoc":"Bit set if the operand is a register.","static":true,"name":"LIST","comment":"Bit set if the operand is a register.","type_short":"int","constant_value":"1024"},{"type_long":"int","javadoc":"Bit set if the operand is a flag.","static":true,"name":"FLAG","comment":"Bit set if the operand is a flag.","type_short":"int","constant_value":"2048"},{"type_long":"int","javadoc":"Bit set if the operand is text.","static":true,"name":"TEXT","comment":"Bit set if the operand is text.","type_short":"int","constant_value":"4096"},{"type_long":"int","javadoc":"Bit set if the operand is used as an address.\n  If this is not set, assume it is a scalar value.","static":true,"name":"ADDRESS","comment":"Bit set if the operand is used as an address.\n  If this is not set, assume it is a scalar value.","type_short":"int","constant_value":"8192"},{"type_long":"int","javadoc":"Bit set if the operand is a scalar value","static":true,"name":"SCALAR","comment":"Bit set if the operand is a scalar value","type_short":"int","constant_value":"16384"},{"type_long":"int","javadoc":"Bit set if the operand is a bit value","static":true,"name":"BIT","comment":"Bit set if the operand is a bit value","type_short":"int","constant_value":"32768"},{"type_long":"int","javadoc":"Bit set if the operand is a byte value","static":true,"name":"BYTE","comment":"Bit set if the operand is a byte value","type_short":"int","constant_value":"65536"},{"type_long":"int","javadoc":"Bit set if the operand is a 2 byte value","static":true,"name":"WORD","comment":"Bit set if the operand is a 2 byte value","type_short":"int","constant_value":"131072"},{"type_long":"int","javadoc":"Bit set if the operand is a 8 byte value","static":true,"name":"QUADWORD","comment":"Bit set if the operand is a 8 byte value","type_short":"int","constant_value":"262144"},{"type_long":"int","javadoc":"Bit set if the operand is a signed value","static":true,"name":"SIGNED","comment":"Bit set if the operand is a signed value","type_short":"int","constant_value":"524288"},{"type_long":"int","javadoc":"Bit set if the operand is a float value","static":true,"name":"FLOAT","comment":"Bit set if the operand is a float value","type_short":"int","constant_value":"1048576"},{"type_long":"int","javadoc":"Bit set if the operand is a co-processor value","static":true,"name":"COP","comment":"Bit set if the operand is a co-processor value","type_short":"int","constant_value":"2097152"},{"type_long":"int","javadoc":"Bit set if the operand is dynamically defined given some processorContext.\n If bit is set then the SCALAR or ADDRESS bit must be set.","static":true,"name":"DYNAMIC","comment":"Bit set if the operand is dynamically defined given some processorContext.\n If bit is set then the SCALAR or ADDRESS bit must be set.","type_short":"int","constant_value":"4194304"}]}
