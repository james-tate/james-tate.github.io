{"implements":[],"javadoc":"Interface for classes that hold compiler option information","static":false,"methods":[{"javadoc":"Get the Language this compiler spec is based on.  Note that\n compiler specs may be reused across multiple languages in the\n cspec files on disk, but once loaded in memory are actually\n separate objects.  (M:N on disk, 1:N in memory)\n@return the language this compiler spec is based on","static":false,"name":"getLanguage","comment":"Get the Language this compiler spec is based on.  Note that\n compiler specs may be reused across multiple languages in the\n cspec files on disk, but once loaded in memory are actually\n separate objects.  (M:N on disk, 1:N in memory)","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"the language this compiler spec is based on","type_short":"Language"}},{"javadoc":"Returns a brief description of the compiler spec","static":false,"name":"getCompilerSpecDescription","comment":"Returns a brief description of the compiler spec","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.CompilerSpecDescription","comment":"","type_short":"CompilerSpecDescription"}},{"javadoc":"Returns the id string associated with this compiler spec;\n@return the id string associated with this compiler spec;","static":false,"name":"getCompilerSpecID","comment":"Returns the id string associated with this compiler spec;","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.CompilerSpecID","comment":"the id string associated with this compiler spec;","type_short":"CompilerSpecID"}},{"javadoc":"Get the default Stack Pointer register for this language if there is one.\n@return default stack pointer register.","static":false,"name":"getStackPointer","comment":"Get the default Stack Pointer register for this language if there is one.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"default stack pointer register.","type_short":"Register"}},{"javadoc":"Indicates whether variables are right-justified within the \n stack alignment.\n@return true if right stack justification applies.","static":false,"name":"isStackRightJustified","comment":"Indicates whether variables are right-justified within the \n stack alignment.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if right stack justification applies.","type_short":"boolean"}},{"javadoc":"Get an address space by name.  This can be value added over the normal AddressFactory.getAddressSpace\n routine because the compiler spec can refer to special internal spaces like the stack space\n@param spaceName\n@return the corresponding AddressSpace object","static":false,"name":"getAddressSpace","comment":"Get an address space by name.  This can be value added over the normal AddressFactory.getAddressSpace\n routine because the compiler spec can refer to special internal spaces like the stack space","params":[{"type_long":"java.lang.String","name":"spaceName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"the corresponding AddressSpace object","type_short":"AddressSpace"}},{"javadoc":"Get the stack address space defined by this specification\n@return stack address space","static":false,"name":"getStackSpace","comment":"Get the stack address space defined by this specification","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"stack address space","type_short":"AddressSpace"}},{"javadoc":"Get the physical space used for stack data storage\n@return address space which contains the stack","static":false,"name":"getStackBaseSpace","comment":"Get the physical space used for stack data storage","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"address space which contains the stack","type_short":"AddressSpace"}},{"javadoc":"Returns true if stack grows with negative offsets","static":false,"name":"stackGrowsNegative","comment":"Returns true if stack grows with negative offsets","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Apply context settings to the ProgramContext\n as specified by the configuration\n@param ctx is the ProgramContext","static":false,"name":"applyContextSettings","comment":"Apply context settings to the ProgramContext\n as specified by the configuration","params":[{"type_long":"ghidra.program.model.listing.DefaultProgramContext","name":"ctx","comment":"is the ProgramContext","type_short":"DefaultProgramContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array of the prototype models. Each prototype model specifies a calling convention.","static":false,"name":"getCallingConventions","comment":"Returns an array of the prototype models. Each prototype model specifies a calling convention.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel[]","comment":"","type_short":"ghidra.program.model.lang.PrototypeModel[]"}},{"javadoc":"Returns the Calling Convention Model with the given name.\n@param name the name of the calling convention to retrieve\n@return the calling convention with the given name or null if there is none with that name.","static":false,"name":"getCallingConvention","comment":"Returns the Calling Convention Model with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the calling convention to retrieve","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel","comment":"the calling convention with the given name or null if there is none with that name.","type_short":"PrototypeModel"}},{"javadoc":"Returns an array of the named prototype models. Each prototype model specifies a calling convention.","static":false,"name":"getNamedCallingConventions","comment":"Returns an array of the named prototype models. Each prototype model specifies a calling convention.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel[]","comment":"","type_short":"ghidra.program.model.lang.PrototypeModel[]"}},{"javadoc":"Returns the prototype model that is the default calling convention or else null.\n@return the default calling convention or null.","static":false,"name":"getDefaultCallingConvention","comment":"Returns the prototype model that is the default calling convention or else null.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel","comment":"the default calling convention or null.","type_short":"PrototypeModel"}},{"javadoc":"Returns true if specified address location has been designated global\n@param addr address location","static":false,"name":"isGlobal","comment":"Returns true if specified address location has been designated global","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address location","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDataOrganization","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataOrganization","comment":"","type_short":"DataOrganization"}},{"javadoc":"","static":false,"name":"getPcodeInjectLibrary","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PcodeInjectLibrary","comment":"","type_short":"PcodeInjectLibrary"}},{"javadoc":"Register program-specific compiler-spec options\n@param program","static":false,"name":"registerProgramOptions","comment":"Register program-specific compiler-spec options","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the program-specific prototype evaluation model.\n@param program\n@return prototype evaluation model","static":false,"name":"getPrototypeEvaluationModel","comment":"Get the program-specific prototype evaluation model.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"prototype evaluation model","type_short":"Object"}},{"javadoc":"Get the language that the decompiler produces\n@param program\n@return an enum specifying the language","static":false,"name":"getDecompilerOutputLanguage","comment":"Get the language that the decompiler produces","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.DecompilerLanguage","comment":"an enum specifying the language","type_short":"DecompilerLanguage"}},{"javadoc":"Get the PrototypeModel based on the genericCallingConvention\n@param genericCallingConvention\n@return the matching model or the defaultModel if nothing matches","static":false,"name":"matchConvention","comment":"Get the PrototypeModel based on the genericCallingConvention","params":[{"type_long":"ghidra.program.model.data.GenericCallingConvention","name":"genericCallingConvention","comment":"","type_short":"GenericCallingConvention"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel","comment":"the matching model or the defaultModel if nothing matches","type_short":"PrototypeModel"}},{"javadoc":"Find the best guess at a calling convention model from this compiler spec\n given an ordered list of (potential) parameters.\n@return prototype model corresponding to the specified function signature","static":false,"name":"findBestCallingConvention","comment":"Find the best guess at a calling convention model from this compiler spec\n given an ordered list of (potential) parameters.","params":[{"type_long":"ghidra.program.model.listing.Parameter[]","name":"params","comment":"","type_short":"ghidra.program.model.listing.Parameter[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel","comment":"prototype model corresponding to the specified function signature","type_short":"PrototypeModel"}},{"javadoc":"Returns whether this lanugage has a property defined.\n@param key the property key\n@return if the property is defined","static":false,"name":"hasProperty","comment":"Returns whether this lanugage has a property defined.","params":[{"type_long":"java.lang.String","name":"key","comment":"the property key","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"if the property is defined","type_short":"boolean"}},{"javadoc":"Return true if function prototypes respect the C-language datatype conversion conventions.\n This amounts to converting array datatypes to pointer-to-element datatypes.\n In C, arrays are passed by reference (structures are still passed by value)\n@return ","static":false,"name":"doesCDataTypeConversions","comment":"Return true if function prototypes respect the C-language datatype conversion conventions.\n This amounts to converting array datatypes to pointer-to-element datatypes.\n In C, arrays are passed by reference (structures are still passed by value)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the value of a property as an int, returning defaultInt if undefined.\n@param key the property key\n@param defaultInt the default value to return if property is undefined\n@return the property value as an int, or the default value if undefined","static":false,"name":"getPropertyAsInt","comment":"Gets the value of a property as an int, returning defaultInt if undefined.","params":[{"type_long":"java.lang.String","name":"key","comment":"the property key","type_short":"String"},{"type_long":"int","name":"defaultInt","comment":"the default value to return if property is undefined","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the property value as an int, or the default value if undefined","type_short":"int"}},{"javadoc":"Gets the value of a property as a boolean, returning defaultBoolean if undefined.\n@param key the property key\n@param defaultBoolean the default value to return if property is undefined\n@return the property value as a boolean, or the default value if undefined","static":false,"name":"getPropertyAsBoolean","comment":"Gets the value of a property as a boolean, returning defaultBoolean if undefined.","params":[{"type_long":"java.lang.String","name":"key","comment":"the property key","type_short":"String"},{"type_long":"boolean","name":"defaultBoolean","comment":"the default value to return if property is undefined","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"the property value as a boolean, or the default value if undefined","type_short":"boolean"}},{"javadoc":"Gets the value of a property as a String, returning defaultString if undefined.\n@param key the property key\n@param defaultString the default value to return if property is undefined\n@return the property value as a String, or the default value if undefined","static":false,"name":"getProperty","comment":"Gets the value of a property as a String, returning defaultString if undefined.","params":[{"type_long":"java.lang.String","name":"key","comment":"the property key","type_short":"String"},{"type_long":"java.lang.String","name":"defaultString","comment":"the default value to return if property is undefined","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the property value as a String, or the default value if undefined","type_short":"String"}},{"javadoc":"Gets a property defined for this language, or null if that property isn't defined.\n@param key the property key\n@return the property value, or null if not defined","static":false,"name":"getProperty","comment":"Gets a property defined for this language, or null if that property isn't defined.","params":[{"type_long":"java.lang.String","name":"key","comment":"the property key","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the property value, or null if not defined","type_short":"String"}},{"javadoc":"Returns a read-only set view of the property keys defined on this language.\n@return read-only set of property keys","static":false,"name":"getPropertyKeys","comment":"Returns a read-only set view of the property keys defined on this language.","params":[],"throws":[],"return":{"type_long":"java.util.Set<java.lang.String>","comment":"read-only set of property keys","type_short":"Set"}}],"name":"CompilerSpec","comment":"Interface for classes that hold compiler option information","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_cdecl","comment":"","type_short":"String","constant_value":"\"__cdecl\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_pascal","comment":"","type_short":"String","constant_value":"\"__pascal\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_thiscall","comment":"","type_short":"String","constant_value":"\"__thiscall\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_stdcall","comment":"","type_short":"String","constant_value":"\"__stdcall\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_fastcall","comment":"","type_short":"String","constant_value":"\"__fastcall\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CALLING_CONVENTION_vectorcall","comment":"","type_short":"String","constant_value":"\"__vectorcall\""}]}
