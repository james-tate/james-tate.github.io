{"implements":[],"javadoc":"A group of ParamEntry that form a complete set for passing parameters (in one direction)","static":false,"methods":[{"javadoc":"Given a list of datatypes, calculate the storage locations used for passing those datatypes\n@param prog is the active progra\n@param proto is the list of datatypes\n@param isinput is true if this parameter list is being processed for input arguments, false for output\n@param res is the vector for holding the VariableStorage corresponding to datatypes\n@param addAutoParams if true add\/process auto-parameters","static":false,"name":"assignMap","comment":"Given a list of datatypes, calculate the storage locations used for passing those datatypes","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"is the active progra","type_short":"Program"},{"type_long":"ghidra.program.model.data.DataType[]","name":"proto","comment":"is the list of datatypes","type_short":"ghidra.program.model.data.DataType[]"},{"type_long":"boolean","name":"isinput","comment":"is true if this parameter list is being processed for input arguments, false for output","type_short":"boolean"},{"type_long":"java.util.ArrayList<ghidra.program.model.listing.VariableStorage>","name":"res","comment":"is the vector for holding the VariableStorage corresponding to datatypes","type_short":"ArrayList"},{"type_long":"boolean","name":"addAutoParams","comment":"if true add\/process auto-parameters","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreXml","comment":"","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"},{"type_long":"ghidra.program.model.lang.CompilerSpec","name":"cspec","comment":"","type_short":"CompilerSpec"},{"type_long":"boolean","name":"normalstack","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.xml.XmlParseException","comment":"","type_short":"XmlParseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a list of all parameter storage locations consisting of a single register\n@return ","static":false,"name":"getPotentialRegisterStorage","comment":"Get a list of all parameter storage locations consisting of a single register","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.VariableStorage[]","comment":"","type_short":"ghidra.program.model.listing.VariableStorage[]"}},{"javadoc":"Return the amount of alignment used for parameters passed on the stack, or -1 if there are no stack params\n@return the alignment","static":false,"name":"getStackParameterAlignment","comment":"Return the amount of alignment used for parameters passed on the stack, or -1 if there are no stack params","params":[],"throws":[],"return":{"type_long":"int","comment":"the alignment","type_short":"int"}},{"javadoc":"Find the boundary offset that separates parameters on the stack from other local variables\n This is usually the address of the first stack parameter, but if the stack grows positive, this is\n the first address AFTER the parameters on the stack\n@return ","static":false,"name":"getStackParameterOffset","comment":"Find the boundary offset that separates parameters on the stack from other local variables\n This is usually the address of the first stack parameter, but if the stack grows positive, this is\n the first address AFTER the parameters on the stack","params":[],"throws":[],"return":{"type_long":"java.lang.Long","comment":"","type_short":"Long"}},{"javadoc":"Determine if a particular address range is a possible parameter, and if so what slot(s) it occupies\n@param loc is the starting address of the range\n@param size is the size of the range in bytes\n@param res holds the resulting slot and slotsize\n@return true if the range is a possible parameter","static":false,"name":"possibleParamWithSlot","comment":"Determine if a particular address range is a possible parameter, and if so what slot(s) it occupies","params":[{"type_long":"ghidra.program.model.address.Address","name":"loc","comment":"is the starting address of the range","type_short":"Address"},{"type_long":"int","name":"size","comment":"is the size of the range in bytes","type_short":"int"},{"type_long":"ghidra.program.model.lang.ParamList.WithSlotRec","name":"res","comment":"holds the resulting slot and slotsize","type_short":"WithSlotRec"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the range is a possible parameter","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isThisBeforeRetPointer","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"ParamList","comment":"A group of ParamEntry that form a complete set for passing parameters (in one direction)","fields":[]}
