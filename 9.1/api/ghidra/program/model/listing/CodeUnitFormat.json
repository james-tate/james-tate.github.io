{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Default constructor using default format options","static":false,"name":"<init>","comment":"Default constructor using default format options","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Format constructor.\n@param showBlockName whether or not to display block name;\n            {SHOW_BLOCKNAME_ALWAYS, SHOW_BLOCKNAME_NEVER,\n            SHOW_SEGMENT_NON_LOCAL}\n@param showNamespace if true display labels with their name-space path.","static":false,"name":"<init>","comment":"Format constructor.","params":[{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","name":"showBlockName","comment":"whether or not to display block name;\n            {SHOW_BLOCKNAME_ALWAYS, SHOW_BLOCKNAME_NEVER,\n            SHOW_SEGMENT_NON_LOCAL}","type_short":"ShowBlockName"},{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace","name":"showNamespace","comment":"if true display labels with their name-space path.","type_short":"ShowNamespace"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Format constructor with more options. Extended reference mark-up is\n enabled.\n@param options format options","static":false,"name":"<init>","comment":"Format constructor with more options. Extended reference mark-up is\n enabled.","params":[{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions","name":"options","comment":"format options","type_short":"CodeUnitFormatOptions"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a formatted string representation of the specified code unit,\n including mnemonic and operand(s) only.\n@param cu code unit\n@return formatted code unit representation","static":false,"name":"getRepresentationString","comment":"Returns a formatted string representation of the specified code unit,\n including mnemonic and operand(s) only.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"code unit","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"formatted code unit representation","type_short":"String"}},{"javadoc":"Returns a formatted string representation of the specified code unit\n mnemonic and operand(s).\n@param cu code unit\n@param includeEOLcomment if true EOL comment will be appended to code\n            unit representation\n@return formatted code unit representation","static":false,"name":"getRepresentationString","comment":"Returns a formatted string representation of the specified code unit\n mnemonic and operand(s).","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"code unit","type_short":"CodeUnit"},{"type_long":"boolean","name":"includeEOLcomment","comment":"if true EOL comment will be appended to code\n            unit representation","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"formatted code unit representation","type_short":"String"}},{"javadoc":"Returns a formatted code unit mnemonic\n@param cu code unit\n@return mnemonic representation","static":false,"name":"getMnemonicRepresentation","comment":"Returns a formatted code unit mnemonic","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"code unit","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"mnemonic representation","type_short":"String"}},{"javadoc":"Returns a formatted string representation of the specified code unit\n operand.\n@param cu code unit\n@param opIndex\n@return formatted code unit representation","static":false,"name":"getOperandRepresentationString","comment":"Returns a formatted string representation of the specified code unit\n operand.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"code unit","type_short":"CodeUnit"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"formatted code unit representation","type_short":"String"}},{"javadoc":"Returns a formatted list of operand objects for the specified code unit\n operand. In the case of Data opIndex=1, this will be a list containing a\n single String object (see getDataValueRepresentation(Data)). In the case\n of an Instruction, the list will contain a list of Objects, including any\n combination of Character, String, VariableOffset, Register, Address,\n Scalar, List, LabelString etc.. All objects returned must support the\n toString() method.\n@param cu code unit\n@param opIndex operand index\n@return list of representation objects or null for an unsupported\n         language.","static":false,"name":"getOperandRepresentationList","comment":"Returns a formatted list of operand objects for the specified code unit\n operand. In the case of Data opIndex=1, this will be a list containing a\n single String object (see getDataValueRepresentation(Data)). In the case\n of an Instruction, the list will contain a list of Objects, including any\n combination of Character, String, VariableOffset, Register, Address,\n Scalar, List, LabelString etc.. All objects returned must support the\n toString() method.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"code unit","type_short":"CodeUnit"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.OperandRepresentationList","comment":"list of representation objects or null for an unsupported\n         language.","type_short":"OperandRepresentationList"}},{"javadoc":"Perform register markup with explicit and implied register variable\n reference.\n@param inst instruction\n@param opIndex\n@param func function containing instruction\n@param primaryRef primary reference or null\n@param referencedVariable option variable referenced by primaryRef\n@param regIndexMap register index map\n@param representationList\n@return true if primaryRef was included in register mark-up","static":false,"name":"performRegisterMarkup","comment":"Perform register markup with explicit and implied register variable\n reference.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function containing instruction","type_short":"Function"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"primary reference or null","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"referencedVariable","comment":"option variable referenced by primaryRef","type_short":"Variable"},{"type_long":"java.util.HashMap<ghidra.program.model.lang.Register,java.lang.Integer>","name":"regIndexMap","comment":"register index map","type_short":"HashMap"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in register mark-up","type_short":"boolean"}},{"javadoc":"","static":false,"name":"registersOverlap","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg1","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.lang.Register","name":"reg2","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasRegisterWriteReference","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"If primaryRef is not already shown in other markup, add to end of operand\n representation.\n@param instr instruction\n@param primaryRef primary reference or null\n@param referencedVariable optional variable corresponding to primaryRef\n@param representationList\n@return true if primaryRef was included in extended mark-up","static":false,"name":"performExtendedMarkup","comment":"If primaryRef is not already shown in other markup, add to end of operand\n representation.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction","type_short":"Instruction"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"primary reference or null","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"referencedVariable","comment":"optional variable corresponding to primaryRef","type_short":"Variable"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in extended mark-up","type_short":"boolean"}},{"javadoc":"Attempt to markup any or all addresses contained within the\n representationList.\n@param instr instruction\n@param opIndex operand index\n@param func function containing instruction\n@param primaryRef primary reference\n@param referencedVariable optional variable associated with reference\n@param regIndexMap register index map\n@param representationList\n@return true if primaryRef was included in scalar mark-up","static":false,"name":"performAddressMarkup","comment":"Attempt to markup any or all addresses contained within the\n representationList.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function containing instruction","type_short":"Function"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"primary reference","type_short":"Reference"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in scalar mark-up","type_short":"boolean"}},{"javadoc":"Attempt to markup any or all Scalars contained within the\n representationList.\n@param inst instruction\n@param opIndex operand index\n@param function function containing instruction\n@param primaryRef primary reference\n@param referencedVariable optional variable associated with reference\n@param regIndexMap register index map\n@param representations\n@return true if primaryRef was included in scalar mark-up","static":false,"name":"performScalarMarkup","comment":"Attempt to markup any or all Scalars contained within the\n representationList.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"inst","comment":"instruction","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"function containing instruction","type_short":"Function"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"primary reference","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"referencedVariable","comment":"optional variable associated with reference","type_short":"Variable"},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,java.lang.Integer>","name":"regIndexMap","comment":"register index map","type_short":"Map"},{"type_long":"java.util.List<java.lang.Object>","name":"representations","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in scalar mark-up","type_short":"boolean"}},{"javadoc":"","static":false,"name":"markupAddressAsScalar","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"","type_short":"Reference"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"},{"type_long":"int","name":"addressIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Markup scalar with implied register variable reference if one can be\n determined.\n@param instr instruction\n@param func function containing instruction\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param associatedRegister register associated with scalarToReplace via an\n            INT_ADD operation\n@param representationList","static":false,"name":"markupScalarWithImpliedRegisterVariable","comment":"Markup scalar with implied register variable reference if one can be\n determined.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction","type_short":"Instruction"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function containing instruction","type_short":"Function"},{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalarToReplace","comment":"","type_short":"Scalar"},{"type_long":"int","name":"scalarIndex","comment":"index of scalarToReplace within representationList","type_short":"int"},{"type_long":"ghidra.program.model.lang.Register","name":"associatedRegister","comment":"register associated with scalarToReplace via an\n            INT_ADD operation","type_short":"Register"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeTypeDefs","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Markup scalar with equate if an appropriate one is contained within the\n specified equates list\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param equates equates for the current code unit operand\n@param representationList\n@return true if scalar was replaced by equate","static":false,"name":"markupScalarWithEquate","comment":"Markup scalar with equate if an appropriate one is contained within the\n specified equates list","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalarToReplace","comment":"","type_short":"Scalar"},{"type_long":"int","name":"scalarIndex","comment":"index of scalarToReplace within representationList","type_short":"int"},{"type_long":"java.util.List<ghidra.program.model.symbol.Equate>","name":"equates","comment":"equates for the current code unit operand","type_short":"List"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if scalar was replaced by equate","type_short":"boolean"}},{"javadoc":"@param instr\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryRef primary reference\n@param representationList\n@return true if primaryRef was included in scalar mark-up","static":false,"name":"markupScalarWithMemoryReference","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalarToReplace","comment":"","type_short":"Scalar"},{"type_long":"int","name":"scalarIndex","comment":"index of scalarToReplace within representationList","type_short":"int"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"primary reference","type_short":"Reference"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in scalar mark-up","type_short":"boolean"}},{"javadoc":"Markup scalar with stack variable\/reference\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryRef stack reference\n@param referencedVariable referenced variable or null\n@param representationList\n@return true if primaryRef was included in scalar mark-up","static":false,"name":"markupScalarWithStackReference","comment":"Markup scalar with stack variable\/reference","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalarToReplace","comment":"","type_short":"Scalar"},{"type_long":"int","name":"scalarIndex","comment":"index of scalarToReplace within representationList","type_short":"int"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryRef","comment":"stack reference","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"referencedVariable","comment":"referenced variable or null","type_short":"Variable"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in scalar mark-up","type_short":"boolean"}},{"javadoc":"Markup scalar with register variable\n@param scalarToReplace\n@param scalarIndex index of scalarToReplace within representationList\n@param primaryReference primary reference\n@param referencedVariable referenced register variable (required)\n@param representationList\n@return true if primaryRef was included in scalar mark-up","static":false,"name":"markupScalarWithReferencedRegisterVariable","comment":"Markup scalar with register variable","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalarToReplace","comment":"","type_short":"Scalar"},{"type_long":"int","name":"scalarIndex","comment":"index of scalarToReplace within representationList","type_short":"int"},{"type_long":"ghidra.program.model.symbol.Reference","name":"primaryReference","comment":"primary reference","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"referencedVariable","comment":"referenced register variable (required)","type_short":"Variable"},{"type_long":"java.util.List<java.lang.Object>","name":"representationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if primaryRef was included in scalar mark-up","type_short":"boolean"}},{"javadoc":"Determine if the referencedVariable corresponds to the specified\n register.\n@param variable\n@param register\n@return true if variable is a RegisterVariable corresponding to the\n         specified register.","static":false,"name":"isRegisterAssociatedWithReferencedVariable","comment":"Determine if the referencedVariable corresponds to the specified\n register.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"variable","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"true if variable is a RegisterVariable corresponding to the\n         specified register.","type_short":"boolean"}},{"javadoc":"Build register index map based upon a raw operand representation list\n where the index corresponds to the index within the list.\n@param rawRepresentationList\n@return register index map","static":false,"name":"getRegisterIndexMap","comment":"Build register index map based upon a raw operand representation list\n where the index corresponds to the index within the list.","params":[{"type_long":"java.util.List<java.lang.Object>","name":"rawRepresentationList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.HashMap<ghidra.program.model.lang.Register,java.lang.Integer>","comment":"register index map","type_short":"HashMap"}},{"javadoc":"Add scalar adjustment markup to the specified opObj. If the specified\n addr is a memory address and an adjustment is performed, the \"offset \"\n prefix will also be added to the modified opObj which is returned.\n@param opObj original sub-operand object\n@param addr reference address which corresponds to opObj\n@param originalScalar scalar which was replaced by opObj\n@param scalarOperand true if operand consists of single scalar only\n@return modified opObj with scalar adjustments reflected or null if\n         memory address requires excessive adjustment","static":false,"name":"addScalarAdjustment","comment":"Add scalar adjustment markup to the specified opObj. If the specified\n addr is a memory address and an adjustment is performed, the \"offset \"\n prefix will also be added to the modified opObj which is returned.","params":[{"type_long":"java.lang.Object","name":"opObj","comment":"original sub-operand object","type_short":"Object"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"reference address which corresponds to opObj","type_short":"Address"},{"type_long":"ghidra.program.model.scalar.Scalar","name":"originalScalar","comment":"scalar which was replaced by opObj","type_short":"Scalar"},{"type_long":"boolean","name":"scalarOperand","comment":"true if operand consists of single scalar only","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"modified opObj with scalar adjustments reflected or null if\n         memory address requires excessive adjustment","type_short":"Object"}},{"javadoc":"Determine if the specified register is read by the specified instruction.\n@param register\n@param instruction\n@return true if register is read","static":false,"name":"isRead","comment":"Determine if the specified register is read by the specified instruction.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"boolean","comment":"true if register is read","type_short":"boolean"}},{"javadoc":"Determine if the specified register is written by the specified\n instruction.\n@param register\n@param instruction\n@return true if register is written","static":false,"name":"isWritten","comment":"Determine if the specified register is written by the specified\n instruction.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"boolean","comment":"true if register is written","type_short":"boolean"}},{"javadoc":"Search for the register which has the specified address among register\n keys contained with in the regIndexMap.\n@param addr register address\n@param regIndexMap register index map\n@return register matching register or null if not found.","static":false,"name":"getRegister","comment":"Search for the register which has the specified address among register\n keys contained with in the regIndexMap.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"register address","type_short":"Address"},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,java.lang.Integer>","name":"regIndexMap","comment":"register index map","type_short":"Map"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"register matching register or null if not found.","type_short":"Register"}},{"javadoc":"Find a register varnode within a map keyed by acceptable register\n choices.\n@param v varnode\n@param regIndexMap register index map\n@return register which matches varnode, or null.","static":false,"name":"findRegister","comment":"Find a register varnode within a map keyed by acceptable register\n choices.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"v","comment":"varnode","type_short":"Varnode"},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,java.lang.Integer>","name":"regIndexMap","comment":"register index map","type_short":"Map"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"register which matches varnode, or null.","type_short":"Register"}},{"javadoc":"Check for value equality between a constant varnode and a scalar value.\n@param v constant varnode\n@param value scalar value\n@return true if values are equals","static":false,"name":"equals","comment":"Check for value equality between a constant varnode and a scalar value.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"v","comment":"constant varnode","type_short":"Varnode"},{"type_long":"ghidra.program.model.scalar.Scalar","name":"value","comment":"scalar value","type_short":"Scalar"}],"throws":[],"return":{"type_long":"boolean","comment":"true if values are equals","type_short":"boolean"}},{"javadoc":"Find a register which has a direct association with the specified scalar\n via an INT_ADD p-code operation. Eligible registers are must be contained\n within the regIndexMap.\n@param scalar\n@param regIndexMap registers appearing in operand representation\n@param pcode operand p-code\n@return associated register, or null if not found","static":false,"name":"findAssociatedOperandRegister","comment":"Find a register which has a direct association with the specified scalar\n via an INT_ADD p-code operation. Eligible registers are must be contained\n within the regIndexMap.","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalar","comment":"","type_short":"Scalar"},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,java.lang.Integer>","name":"regIndexMap","comment":"registers appearing in operand representation","type_short":"Map"},{"type_long":"ghidra.program.model.pcode.PcodeOp[]","name":"pcode","comment":"operand p-code","type_short":"ghidra.program.model.pcode.PcodeOp[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"associated register, or null if not found","type_short":"Register"}},{"javadoc":"Search list of equates for scalar value match.\n@param scalar\n@param equates list of equates\n@return equate which matches scalar value or null if not found.","static":false,"name":"findEquate","comment":"Search list of equates for scalar value match.","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"scalar","comment":"","type_short":"Scalar"},{"type_long":"java.util.List<ghidra.program.model.symbol.Equate>","name":"equates","comment":"list of equates","type_short":"List"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Equate","comment":"equate which matches scalar value or null if not found.","type_short":"Equate"}},{"javadoc":"Returns a formatted data value for the specified data unit. The return\n list will contain a single object which may be an instance of String,\n LabelString, Address, Scalar or Equate\n@param data data unit\n@return representation list containing a single object.","static":false,"name":"getDataValueRepresentation","comment":"Returns a formatted data value for the specified data unit. The return\n list will contain a single object which may be an instance of String,\n LabelString, Address, Scalar or Equate","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"data unit","type_short":"Data"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.OperandRepresentationList","comment":"representation list containing a single object.","type_short":"OperandRepresentationList"}},{"javadoc":"Returns a formatted data value for the specified data unit.\n@param data data unit\n@return data value string","static":false,"name":"getDataValueRepresentationString","comment":"Returns a formatted data value for the specified data unit.","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"data unit","type_short":"Data"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"data value string","type_short":"String"}},{"javadoc":"Build a suitable variable or stack reference representation with optional\n scalar replacement.\n@param ref variable reference\n@param var associated variable or null\n@param replacedScalar replaced scalar object or null\n@return representation object or null if var is null and ref is not a\n         stack reference.","static":false,"name":"getVariableReferenceRepresentation","comment":"Build a suitable variable or stack reference representation with optional\n scalar replacement.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"variable reference","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"associated variable or null","type_short":"Variable"},{"type_long":"ghidra.program.model.scalar.Scalar","name":"replacedScalar","comment":"replaced scalar object or null","type_short":"Scalar"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"representation object or null if var is null and ref is not a\n         stack reference.","type_short":"Object"}},{"javadoc":"Returns a marked-up representation of the reference destination.\n@param fromCodeUnit\n@param ref\n@return destination as a string or null if a suitable string could not be\n         produced.","static":false,"name":"getReferenceRepresentationString","comment":"Returns a marked-up representation of the reference destination.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"fromCodeUnit","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"destination as a string or null if a suitable string could not be\n         produced.","type_short":"String"}},{"javadoc":"Get a representation object corresponding to the specified reference.\n Format options are considered when generating label.\n@param cu\n@param ref\n@param var variable which corresponds to reference or null\n@param showIndirectValue if true, indirect memory references which refer\n            to a pointer will get an additional \"=value\" appended where\n            value corresponds to data pointed to by the referenced\n            pointer.\n@return reference representation object","static":false,"name":"getReferenceRepresentation","comment":"Get a representation object corresponding to the specified reference.\n Format options are considered when generating label.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"variable which corresponds to reference or null","type_short":"Variable"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"reference representation object","type_short":"Object"}},{"javadoc":"Get a LabelString object which corresponds to the specified memory\n reference from the specified code unit. Format options are considered\n when generating label.\n@param fromCodeUnit code unit\n@param ref memory reference\n@return LabelString representation object","static":false,"name":"getMemoryReferenceLabel","comment":"Get a LabelString object which corresponds to the specified memory\n reference from the specified code unit. Format options are considered\n when generating label.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"fromCodeUnit","comment":"code unit","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"memory reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"LabelString representation object","type_short":"Object"}},{"javadoc":"","static":false,"name":"getExtendedPointerReferenceMarkup","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.LabelString","comment":"","type_short":"LabelString"}},{"javadoc":"","static":false,"name":"addBlockName","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.mem.MemoryBlock","name":"refBlock","comment":"","type_short":"MemoryBlock"},{"type_long":"boolean","name":"withBlockName","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addNamespace","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"parentNamespace","comment":"","type_short":"Namespace"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"markupAddress","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Generate a string for the given symbol, accounting for offcut situations.","static":false,"name":"getSymbolLabelString","comment":"Generate a string for the given symbol, accounting for offcut situations.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"","type_short":"Symbol"},{"type_long":"ghidra.program.model.address.Address","name":"markupAddress","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isStringData","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getLabelStringForStringData","comment":"","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"","type_short":"Data"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"","type_short":"Symbol"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getOffcutLabelString","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"offcutAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isOffcut","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getOffcutDataString","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"offcutAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"","type_short":"Data"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getOffcutLabelStringForInstruction","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"offcutAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addOffcutInformation","comment":"","params":[{"type_long":"java.lang.String","name":"prefix","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"addressString","comment":"","type_short":"String"},{"type_long":"int","name":"diff","comment":"","type_short":"int"},{"type_long":"boolean","name":"decorate","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getPrefixForStringData","comment":"","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"","type_short":"Data"},{"type_long":"ghidra.program.model.address.Address","name":"dataAddress","comment":"","type_short":"Address"},{"type_long":"int","name":"diff","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDefaultOffcutString","comment":"","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"","type_short":"Symbol"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu","comment":"","type_short":"CodeUnit"},{"type_long":"long","name":"diff","comment":"","type_short":"long"},{"type_long":"boolean","name":"decorate","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns ShowBlockName setting","static":false,"name":"getShowBlockName","comment":"Returns ShowBlockName setting","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","comment":"","type_short":"ShowBlockName"}}],"name":"CodeUnitFormat","comment":"","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PLUS","comment":"","type_short":"String","constant_value":"\"+\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"UNDERSCORE","comment":"","type_short":"String","constant_value":"\"_\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EXTENDED_REFERENCE_DELIMITER","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EXTENDED_INDIRECT_REFERENCE_DELIMITER","comment":"","type_short":"String","constant_value":null},{"type_long":"int[]","javadoc":"Supported memory address shift cases (bits)","static":true,"name":"SHIFT_CASES","comment":"Supported memory address shift cases (bits)","type_short":"int[]","constant_value":null},{"type_long":"long[]","javadoc":"Supported memory address mask cases (mask value)","static":true,"name":"MASK_CASES","comment":"Supported memory address mask cases (mask value)","type_short":"long[]","constant_value":null},{"type_long":"ghidra.program.model.listing.CodeUnitFormat","javadoc":"Default code unit format","static":true,"name":"DEFAULT","comment":"Default code unit format","type_short":"CodeUnitFormat","constant_value":null},{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions","javadoc":"","static":false,"name":"options","comment":"","type_short":"CodeUnitFormatOptions","constant_value":null}]}
