{"implements":["ghidra.program.model.listing.Group"],"javadoc":"A <CODE>ProgramModule<\/CODE> is a group of <CODE>ProgramFragment<\/CODE>s \n and\/or other <CODE>ProgramModule<\/CODE>s together with some related \n information such as a name, comment, and alias. Users create modules to \n overlay the program with a hierarchical structure. A <I>child<\/I> of a module \n is a fragment or module which it directly contains. A <I>parent<\/I> of a module \n is a module which has this module as a child. A module may be contained in more \n than one module. A <CODE>Program<\/CODE> always has at least one module, the root module. \n The root module cannot be removed and is the ancestor for all other modules and\n fragments in the program.","static":false,"methods":[{"javadoc":"Returns whether this module directly contains the\n given fragment as a child.\n@param fragment the fragment to check.","static":false,"name":"contains","comment":"Returns whether this module directly contains the\n given fragment as a child.","params":[{"type_long":"ghidra.program.model.listing.ProgramFragment","name":"fragment","comment":"the fragment to check.","type_short":"ProgramFragment"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns whether this module directly contains the\n given module as a child.\n@param module the module to check.\n@return true if module is the same as this module, or if module\n is a child of this module.","static":false,"name":"contains","comment":"Returns whether this module directly contains the\n given module as a child.","params":[{"type_long":"ghidra.program.model.listing.ProgramModule","name":"module","comment":"the module to check.","type_short":"ProgramModule"}],"throws":[],"return":{"type_long":"boolean","comment":"true if module is the same as this module, or if module\n is a child of this module.","type_short":"boolean"}},{"javadoc":"Returns the number of children of this module.","static":false,"name":"getNumChildren","comment":"Returns the number of children of this module.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns an array containing this module's children.","static":false,"name":"getChildren","comment":"Returns an array containing this module's children.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Group[]","comment":"","type_short":"ghidra.program.model.listing.Group[]"}},{"javadoc":"Get the index of the child with the given name.\n@param name name of child\n@return int index or -1 if this Module does not have a child\n with the given name","static":false,"name":"getIndex","comment":"Get the index of the child with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of child","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"int index or -1 if this Module does not have a child\n with the given name","type_short":"int"}},{"javadoc":"Adds the given module as a child of this module.\n <P>\n@param module the module to be added.\n@throws CircularDependencyException thrown if the module being\n added is an ancestor of this module. The module structure of\n a program does not allow \"cycles\" of this sort to be created.\n@exception DuplicateGroupException thrown if the module being\n added is already a child of this module.","static":false,"name":"add","comment":"Adds the given module as a child of this module.\n ","params":[{"type_long":"ghidra.program.model.listing.ProgramModule","name":"module","comment":"the module to be added.","type_short":"ProgramModule"}],"throws":[{"type_long":"ghidra.program.model.listing.CircularDependencyException","comment":"thrown if the module being\n added is an ancestor of this module. The module structure of\n a program does not allow \"cycles\" of this sort to be created.","type_short":"CircularDependencyException"},{"type_long":"ghidra.program.model.listing.DuplicateGroupException","comment":"","type_short":"DuplicateGroupException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given fragment as a child of this module.\n <P>\n@exception DuplicateGroupException thrown if the fragment being\n added is already a child of this module.","static":false,"name":"add","comment":"Adds the given fragment as a child of this module.\n ","params":[{"type_long":"ghidra.program.model.listing.ProgramFragment","name":"fragment","comment":"","type_short":"ProgramFragment"}],"throws":[{"type_long":"ghidra.program.model.listing.DuplicateGroupException","comment":"","type_short":"DuplicateGroupException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new module and makes it a child of this\n module.<P>\n@param moduleName the name to use for the new module.\n@return the newly created module.\n@exception DuplicateNameException thrown if the given\n name is already used by an existing module or fragment.","static":false,"name":"createModule","comment":"Creates a new module and makes it a child of this\n module.","params":[{"type_long":"java.lang.String","name":"moduleName","comment":"the name to use for the new module.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.listing.ProgramModule","comment":"the newly created module.","type_short":"ProgramModule"}},{"javadoc":"Creates a new fragment and makes it a child of this module.<P>\n@param fragmentName the name to use for the new fragment.\n@return the newly created fragment.\n@exception DuplicateNameException thrown if the given\n name is already used by an existing module or fragment.","static":false,"name":"createFragment","comment":"Creates a new fragment and makes it a child of this module.","params":[{"type_long":"java.lang.String","name":"fragmentName","comment":"the name to use for the new fragment.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.listing.ProgramFragment","comment":"the newly created fragment.","type_short":"ProgramFragment"}},{"javadoc":"Reparents child with the given name to this Module; removes the\n child from oldParent.\n@param name name of child to reparent\n@param oldParent old parent\n@exception NotFoundException if name is not the name of a child\n in oldParent","static":false,"name":"reparent","comment":"Reparents child with the given name to this Module; removes the\n child from oldParent.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of child to reparent","type_short":"String"},{"type_long":"ghidra.program.model.listing.ProgramModule","name":"oldParent","comment":"old parent","type_short":"ProgramModule"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"","type_short":"NotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Changes the ordering of this module's children by moving\n the child with the given name to position given by index.<P>\n@param name the name of the child to move.\n@param index the index to move it to.\n@exception NotFoundException thrown if a child with the given\n name cannot be found in this module.","static":false,"name":"moveChild","comment":"Changes the ordering of this module's children by moving\n the child with the given name to position given by index.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the child to move.","type_short":"String"},{"type_long":"int","name":"index","comment":"the index to move it to.","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"","type_short":"NotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes a child module or fragment from this Module.\n@return true if successful, false if no child in this module has the given name.\n@exception NotEmptyException thrown if the module appears in no other\n modules and it is not empty.","static":false,"name":"removeChild","comment":"Removes a child module or fragment from this Module.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.NotEmptyException","comment":"","type_short":"NotEmptyException"}],"return":{"type_long":"boolean","comment":"true if successful, false if no child in this module has the given name.","type_short":"boolean"}},{"javadoc":"Returns whether the given module is a descendant of this\n module.<P>\n@param module the module to check.\n@return true if the module is a descendant, false otherwise.","static":false,"name":"isDescendant","comment":"Returns whether the given module is a descendant of this\n module.","params":[{"type_long":"ghidra.program.model.listing.ProgramModule","name":"module","comment":"the module to check.","type_short":"ProgramModule"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the module is a descendant, false otherwise.","type_short":"boolean"}},{"javadoc":"Returns whether the given fragment is a descendant of this\n module.<P>\n@param fragment the fragment to check.\n@return true if the fragment is a descendant, false otherwise.","static":false,"name":"isDescendant","comment":"Returns whether the given fragment is a descendant of this\n module.","params":[{"type_long":"ghidra.program.model.listing.ProgramFragment","name":"fragment","comment":"the fragment to check.","type_short":"ProgramFragment"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the fragment is a descendant, false otherwise.","type_short":"boolean"}},{"javadoc":"Returns the minimum address of this module which will be the minimum\n address from the set of all fragments which are descendants of this\n module.\n <P>\n@return the minimum address, this will be null if all of the module's\n descendant fragments are empty.","static":false,"name":"getMinAddress","comment":"Returns the minimum address of this module which will be the minimum\n address from the set of all fragments which are descendants of this\n module.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the minimum address, this will be null if all of the module's\n descendant fragments are empty.","type_short":"Address"}},{"javadoc":"Returns the maximum address of this module which will be the maximum\n address from the set of all fragments which are descendants of this\n module.\n <P>\n@return the maximum address, this will be null if all of the module's\n descendant fragments are empty.","static":false,"name":"getMaxAddress","comment":"Returns the maximum address of this module which will be the maximum\n address from the set of all fragments which are descendants of this\n module.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the maximum address, this will be null if all of the module's\n descendant fragments are empty.","type_short":"Address"}},{"javadoc":"Returns the first address of this module which will be the minimum\n address of the first descendant fragment which is non-empty. In other\n words this returns the first address for this module as defined by\n the user ordering of the module's children.\n <P>\n@return the first address, this will be null if all of the module's\n descendant fragments are empty.","static":false,"name":"getFirstAddress","comment":"Returns the first address of this module which will be the minimum\n address of the first descendant fragment which is non-empty. In other\n words this returns the first address for this module as defined by\n the user ordering of the module's children.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the first address, this will be null if all of the module's\n descendant fragments are empty.","type_short":"Address"}},{"javadoc":"Returns the last address of this module which will be the maximum address\n of the last descendant fragment which is non-empty. In other words this\n returns the last address for this module as defined by the user\n ordering of the module's children.\n <P>\n@return the last address, this will be null if all of the module's\n descendant fragments are empty.","static":false,"name":"getLastAddress","comment":"Returns the last address of this module which will be the maximum address\n of the last descendant fragment which is non-empty. In other words this\n returns the last address for this module as defined by the user\n ordering of the module's children.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the last address, this will be null if all of the module's\n descendant fragments are empty.","type_short":"Address"}},{"javadoc":"Returns the set of addresses for this module which will be the combined \n set of addresses from the set of all fragments which are descendants of this\n module.\n@return the complete address set for this module.","static":false,"name":"getAddressSet","comment":"Returns the set of addresses for this module which will be the combined \n set of addresses from the set of all fragments which are descendants of this\n module.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the complete address set for this module.","type_short":"AddressSetView"}},{"javadoc":"Returns an object that can be used to detect when the module tree has been affected\n by an undo or redo. After an undo\/redo, if this module was affected, then a new\n verionTag object is created.","static":false,"name":"getVersionTag","comment":"Returns an object that can be used to detect when the module tree has been affected\n by an undo or redo. After an undo\/redo, if this module was affected, then a new\n verionTag object is created.","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Get the current modification number of the module tree; the number \n is updated when ever a change is made to any module or fragment\n that is part of this module's root tree.","static":false,"name":"getModificationNumber","comment":"Get the current modification number of the module tree; the number \n is updated when ever a change is made to any module or fragment\n that is part of this module's root tree.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Get the ID for the tree that this module belongs to.\n@return ID for the tree","static":false,"name":"getTreeID","comment":"Get the ID for the tree that this module belongs to.","params":[],"throws":[],"return":{"type_long":"long","comment":"ID for the tree","type_short":"long"}}],"name":"ProgramModule","comment":"A ProgramModule is a group of ProgramFragments \n and\/or other ProgramModules together with some related \n information such as a name, comment, and alias. Users create modules to \n overlay the program with a hierarchical structure. A child of a module \n is a fragment or module which it directly contains. A parent of a module \n is a module which has this module as a child. A module may be contained in more \n than one module. A Program always has at least one module, the root module. \n The root module cannot be removed and is the ancestor for all other modules and\n fragments in the program.","fields":[]}
