{"implements":[],"javadoc":"Interface describing all the things about a function that are portable\n from one program to another.","static":false,"methods":[{"javadoc":"Return the name of this function","static":false,"name":"getName","comment":"Return the name of this function","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return a string representation of the function signature without the\n calling convention specified.","static":false,"name":"getPrototypeString","comment":"Return a string representation of the function signature without the\n calling convention specified.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return a string representation of the function signature\n@param includeCallingConvention if true prototype will include call convention\n declaration if known.","static":false,"name":"getPrototypeString","comment":"Return a string representation of the function signature","params":[{"type_long":"boolean","name":"includeCallingConvention","comment":"if true prototype will include call convention\n declaration if known.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return an array of parameters for the function","static":false,"name":"getArguments","comment":"Return an array of parameters for the function","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.ParameterDefinition[]","comment":"","type_short":"ghidra.program.model.data.ParameterDefinition[]"}},{"javadoc":"Return the return data type","static":false,"name":"getReturnType","comment":"Return the return data type","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Return the comment string","static":false,"name":"getComment","comment":"Return the comment string","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns true if this function signature has a variable argument list (VarArgs).","static":false,"name":"hasVarArgs","comment":"Returns true if this function signature has a variable argument list (VarArgs).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the generic calling convention associated with this function definition.\n The \"unknown\" convention should be returned instead of null.","static":false,"name":"getGenericCallingConvention","comment":"Returns the generic calling convention associated with this function definition.\n The \"unknown\" convention should be returned instead of null.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.GenericCallingConvention","comment":"","type_short":"GenericCallingConvention"}},{"javadoc":"Returns true if the given signature is equivalent to this signature.  The\n precise meaning of \"equivalent\" is dependent upon return\/parameter dataTypes.\n@param dt the dataType being tested for equivalence.\n@return true if the if the given signature is equivalent to this signature.","static":false,"name":"isEquivalentSignature","comment":"Returns true if the given signature is equivalent to this signature.  The\n precise meaning of \"equivalent\" is dependent upon return\/parameter dataTypes.","params":[{"type_long":"ghidra.program.model.listing.FunctionSignature","name":"signature","comment":"","type_short":"FunctionSignature"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the if the given signature is equivalent to this signature.","type_short":"boolean"}}],"name":"FunctionSignature","comment":"Interface describing all the things about a function that are portable\n from one program to another.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"VAR_ARGS_DISPLAY_STRING","comment":"","type_short":"String","constant_value":"\"...\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"VOID_PARAM_DISPLAY_STRING","comment":"","type_short":"String","constant_value":"\"void\""}]}
