{"implements":["ghidra.program.model.listing.Variable"],"javadoc":"Interface for function parameters","static":false,"methods":[{"javadoc":"Returns the ordinal (index) of this parameter within the function signature.","static":false,"name":"getOrdinal","comment":"Returns the ordinal (index) of this parameter within the function signature.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@return true if this parameter is automatically generated based upon the associated\n function calling convention and function signature.  An example of such a parameter \n include the \"__return_storage_ptr__\" parameter.","static":false,"name":"isAutoParameter","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this parameter is automatically generated based upon the associated\n function calling convention and function signature.  An example of such a parameter \n include the \"__return_storage_ptr__\" parameter.","type_short":"boolean"}},{"javadoc":"If this is an auto-parameter this method will indicate its type.\n@return auto-parameter type of null if not applicable.","static":false,"name":"getAutoParameterType","comment":"If this is an auto-parameter this method will indicate its type.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.AutoParameterType","comment":"auto-parameter type of null if not applicable.","type_short":"AutoParameterType"}},{"javadoc":"If this parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its original formal type.\n@return true if this parameter was forced to be passed as a pointer instead of its \n original formal type","static":false,"name":"isForcedIndirect","comment":"If this parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its original formal type.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this parameter was forced to be passed as a pointer instead of its \n original formal type","type_short":"boolean"}},{"javadoc":"Get the original formal signature data type before a possible forced indirect was\n possibly imposed by the functions calling convention.  The {@link #getDataType()} method \n will always return the effective data type which corresponds to the allocated \n variable storage.\n@return Formal data type.  This type will only differ from the {@link #getDataType()}\n value if this parameter isForcedIndirect.","static":false,"name":"getFormalDataType","comment":"Get the original formal signature data type before a possible forced indirect was\n possibly imposed by the functions calling convention.  The #getDataType() method \n will always return the effective data type which corresponds to the allocated \n variable storage.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"Formal data type.  This type will only differ from the #getDataType()\n value if this parameter isForcedIndirect.","type_short":"DataType"}}],"name":"Parameter","comment":"Interface for function parameters","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"RETURN_NAME","comment":"","type_short":"String","constant_value":"\"<RETURN>\""},{"type_long":"int","javadoc":"","static":true,"name":"RETURN_ORIDINAL","comment":"","type_short":"int","constant_value":"-1"},{"type_long":"int","javadoc":"","static":true,"name":"UNASSIGNED_ORDINAL","comment":"","type_short":"int","constant_value":"-2"}]}
