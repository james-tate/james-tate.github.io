{"implements":[],"javadoc":"Class to build an DependencyGraph base on a acyclic function call graph.  This is useful when\n you want to process functions \"bottom up\".","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a DependencyGraph of all functions in a program based on the call graph.\n@param program the program to create an acyclic call graph\n@param killThunks true if thunked functions should be eliminated from the graph","static":false,"name":"<init>","comment":"Creates a DependencyGraph of all functions in a program based on the call graph.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to create an acyclic call graph","type_short":"Program"},{"type_long":"boolean","name":"killThunks","comment":"true if thunked functions should be eliminated from the graph","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a DependencyGraph of all functions in the given addressSet based on the call graph.\n Calls to or from functions outside the given address set are ignored.\n@param program the program to create an acyclic call graph\n@param set the address to restrict the call graph.\n@param killThunks true if thunked functions should be eliminated from the graph","static":false,"name":"<init>","comment":"Creates a DependencyGraph of all functions in the given addressSet based on the call graph.\n Calls to or from functions outside the given address set are ignored.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to create an acyclic call graph","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address to restrict the call graph.","type_short":"AddressSetView"},{"type_long":"boolean","name":"killThunks","comment":"true if thunked functions should be eliminated from the graph","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a DependencyGraph of all functions in the given set of functions based on the call graph.\n Calls to or from functions not in the given set are ignored.\n@param program the program to create an acyclic call graph\n@param functions the set of functions to include in the call graph.\n@param killThunks true if thunked functions should be eliminated from the graph","static":false,"name":"<init>","comment":"Creates a DependencyGraph of all functions in the given set of functions based on the call graph.\n Calls to or from functions not in the given set are ignored.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to create an acyclic call graph","type_short":"Program"},{"type_long":"java.util.Collection<ghidra.program.model.listing.Function>","name":"functions","comment":"the set of functions to include in the call graph.","type_short":"Collection"},{"type_long":"boolean","name":"killThunks","comment":"true if thunked functions should be eliminated from the graph","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Builds the DependencyGraph for the acyclic call graph represented by this object.\n@param monitor the taskMonitor to use for reporting progress or cancelling.\n@return the DependencyGraph for the acyclic call graph represented by this object.\n@throws CancelledException if the monitor was cancelled.","static":false,"name":"getDependencyGraph","comment":"Builds the DependencyGraph for the acyclic call graph represented by this object.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the taskMonitor to use for reporting progress or cancelling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor was cancelled.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.util.graph.AbstractDependencyGraph<ghidra.program.model.address.Address>","comment":"the DependencyGraph for the acyclic call graph represented by this object.","type_short":"AbstractDependencyGraph"}},{"javadoc":"","static":false,"name":"getNextStartFunction","comment":"","params":[{"type_long":"java.util.Deque<ghidra.program.model.address.Address>","name":"startPoints","comment":"","type_short":"Deque"},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","name":"unProcessedSet","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"findStartPoints","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Deque<ghidra.program.model.address.Address>","comment":"","type_short":"Deque"}},{"javadoc":"","static":false,"name":"initializeNode","comment":"","params":[{"type_long":"ghidra.program.model.util.AcyclicCallGraphBuilder.StackNode","name":"node","comment":"","type_short":"StackNode"},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","name":"unprocessed","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processForward","comment":"","params":[{"type_long":"ghidra.util.graph.AbstractDependencyGraph<ghidra.program.model.address.Address>","name":"graph","comment":"","type_short":"AbstractDependencyGraph"},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","name":"unprocessed","comment":"","type_short":"Set"},{"type_long":"ghidra.program.model.address.Address","name":"startFunction","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isStartFunction","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"findFunctions","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"killThunks","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.address.Address>","comment":"","type_short":"Set"}}],"name":"AcyclicCallGraphBuilder","comment":"Class to build an DependencyGraph base on a acyclic function call graph.  This is useful when\n you want to process functions \"bottom up\".","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","javadoc":"","static":false,"name":"functionSet","comment":"","type_short":"Set","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"killThunks","comment":"","type_short":"boolean","constant_value":null}]}
