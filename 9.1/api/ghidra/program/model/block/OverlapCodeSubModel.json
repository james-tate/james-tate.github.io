{"implements":["ghidra.program.model.block.SubroutineBlockModel"],"javadoc":"<CODE>OverlapCodeSubModel<\/CODE> (O-model) defines subroutines with a\n unique entry point, which may share code with other subroutines. Each entry-\n point may either be a source or called entry-point and is identified using\n the MultEntSubModel.  This model defines the set of addresses contained\n within each subroutine based upon the possible flows from its' entry- point.\n Flows which encounter another entry-point are terminated.\n <P>\n NOTE: This differs from the original definition of an entry point, however,\n the intent of the O-Model is preserved.\n@see ghidra.program.model.block.CodeBlockModel\n@see ghidra.program.model.block.MultEntSubModel","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a <CODE>OverlapCodeSubModel<\/CODE> subroutine on a program.\n@param program program to create blocks from.","static":false,"name":"<init>","comment":"Construct a OverlapCodeSubModel subroutine on a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a <CODE>OverlapCodeSubModel<\/CODE> subroutine on a program.\n@param program program to create blocks from.\n@param includeExternals external blocks will be included if true","static":false,"name":"<init>","comment":"Construct a OverlapCodeSubModel subroutine on a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"external blocks will be included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the subroutine code block which starts at the specified address which \n  is an entry point of a Model-M subroutine.\n \n  Classes which extend this class should implement this method.\n@param mStartAddr = a Model-M subroutine entry point.\n@param monitor task monitor which allows user to cancel operation.\n@return a subroutine code block or null if not found.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getSubroutine","comment":"Get the subroutine code block which starts at the specified address which \n  is an entry point of a Model-M subroutine.\n \n  Classes which extend this class should implement this method.","params":[{"type_long":"ghidra.program.model.address.Address","name":"mStartAddr","comment":"= a Model-M subroutine entry point.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"a subroutine code block or null if not found.","type_short":"CodeBlock"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getCodeBlockAt(ghidra.program.model.address.Address, ghidra.util.task.TaskMonitor)","static":false,"name":"getCodeBlockAt","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"","type_short":"CodeBlock"}},{"javadoc":"Get all the Code Blocks containing the address.\n Model-O is the only of the MOP models that allows for there to be more than one\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A CodeBlock array with one entry containing the subroutine that\n              contains the address empty array otherwise.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlocksContaining","comment":"Get all the Code Blocks containing the address.\n Model-O is the only of the MOP models that allows for there to be more than one","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address to find a containing block.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock[]","comment":"A CodeBlock array with one entry containing the subroutine that\n              contains the address empty array otherwise.","type_short":"ghidra.program.model.block.CodeBlock[]"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getFirstCodeBlockContaining(ghidra.program.model.address.Address, ghidra.util.task.TaskMonitor)","static":false,"name":"getFirstCodeBlockContaining","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"","type_short":"CodeBlock"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getCodeBlocks(ghidra.util.task.TaskMonitor)","static":false,"name":"getCodeBlocks","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getCodeBlocksContaining(ghidra.program.model.address.AddressSetView, ghidra.util.task.TaskMonitor)","static":false,"name":"getCodeBlocksContaining","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"Returns the Multiple Entry Block Model used by this model.\n@return the Multiple Entry Block Model used by this model","static":false,"name":"getModelM","comment":"Returns the Multiple Entry Block Model used by this model.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.MultEntSubModel","comment":"the Multiple Entry Block Model used by this model","type_short":"MultEntSubModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getProgram()","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns the listing associated with this block model.\n@return the listing associated with this block model","static":false,"name":"getListing","comment":"Returns the listing associated with this block model.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Listing","comment":"the listing associated with this block model","type_short":"Listing"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName(ghidra.program.model.block.CodeBlock)","static":false,"name":"getName","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n <p>\n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.\n\n <p>\n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.\n@return flow type of this node","static":false,"name":"getFlowType","comment":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n \n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.\n\n \n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.FlowType","comment":"flow type of this node","type_short":"FlowType"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getSources(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getSources","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getNumSources(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getNumSources","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getDestinations(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getDestinations","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getNumDestinations(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getNumDestinations","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Create a new Subroutine which has specified address set and entry point.\n  Cache the model-O subroutine.\n@param addrSet contains the address set of the model-O subroutine\n@param entryPt the OSub entry point.\n@return subroutine block that was created","static":false,"name":"createSub","comment":"Create a new Subroutine which has specified address set and entry point.\n  Cache the model-O subroutine.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"contains the address set of the model-O subroutine","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"entryPt","comment":"the OSub entry point.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"subroutine block that was created","type_short":"CodeBlock"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getBasicBlockModel()","static":false,"name":"getBasicBlockModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"","type_short":"CodeBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName()","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.program.model.block.SubroutineBlockModel#getBaseSubroutineModel()","static":false,"name":"getBaseSubroutineModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.SubroutineBlockModel","comment":"","type_short":"SubroutineBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#allowsBlockOverlap()","static":false,"name":"allowsBlockOverlap","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"externalsIncluded","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"OverlapCodeSubModel","comment":"OverlapCodeSubModel (O-model) defines subroutines with a\n unique entry point, which may share code with other subroutines. Each entry-\n point may either be a source or called entry-point and is identified using\n the MultEntSubModel.  This model defines the set of addresses contained\n within each subroutine based upon the possible flows from its' entry- point.\n Flows which encounter another entry-point are terminated.\n \n NOTE: This differs from the original definition of an entry point, however,\n the intent of the O-Model is preserved.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"OVERLAP_MODEL_NAME","comment":"","type_short":"String","constant_value":"\"Overlapped Code\""},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Listing","javadoc":"","static":false,"name":"listing","comment":"","type_short":"Listing","constant_value":null},{"type_long":"ghidra.program.model.block.CodeBlockCache","javadoc":"","static":false,"name":"foundOSubs","comment":"","type_short":"CodeBlockCache","constant_value":null},{"type_long":"ghidra.program.model.block.MultEntSubModel","javadoc":"","static":false,"name":"modelM","comment":"","type_short":"MultEntSubModel","constant_value":null}]}
