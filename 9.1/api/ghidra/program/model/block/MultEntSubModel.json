{"implements":["ghidra.program.model.block.SubroutineBlockModel"],"javadoc":"<CODE>MultEntSubModel<\/CODE> (M-model) defines subroutines which do not share code with\n any other subroutine and may have one or more entry points. Each entry-\n points represent either a source or called entry-point.\n <P>\n MODEL-M subroutines should be used to determine which subroutine(s) contains\n a particular instruction.\n Since model-M subroutines yield the largest subroutines, they should be particular useful\n in the process of program slicing -- the process of splitting the program into modules\n or subroutine cliques -- in order to begin to understand the structure and functionality\n of the program.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a <CODE>MultEntSubModel<\/CODE> for a program.\n@param program program to create blocks from.","static":false,"name":"<init>","comment":"Construct a MultEntSubModel for a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a <CODE>MultEntSubModel<\/CODE> for a program.\n@param program program to create blocks from.\n@param includeExternals external blocks will be included if true","static":false,"name":"<init>","comment":"Construct a MultEntSubModel for a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"external blocks will be included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the code block that has an entry point at addr.\n@param addr one of the entry points for a Model-M subroutine\n@param monitor task monitor which allows user to cancel operation.\n@return null if there is no subroutine with an entry at addr.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlockAt","comment":"Get the code block that has an entry point at addr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"one of the entry points for a Model-M subroutine","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"null if there is no subroutine with an entry at addr.","type_short":"CodeBlock"}},{"javadoc":"Get the M-Model subroutine address set which contains the specified address.\n This method also identifies the entry points and caches the resulting CodeBlock.\n@param addr Address inside the subroutine that we are seeking\n@param monitor task monitor which allows user to cancel operation.\n@return The <CODE>CodeBlock<\/CODE> for a\n                  <CODE>MultEntSubModel<\/CODE> Subroutine.\n \t\t\t\t\tNull is returned if there is no instruction at addr.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getAddressSetContaining","comment":"Get the M-Model subroutine address set which contains the specified address.\n This method also identifies the entry points and caches the resulting CodeBlock.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address inside the subroutine that we are seeking","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"The CodeBlock for a\n                  MultEntSubModel Subroutine.\n \t\t\t\t\tNull is returned if there is no instruction at addr.","type_short":"CodeBlock"}},{"javadoc":"","static":false,"name":"addDestinations","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.util.LinkedList<ghidra.program.model.address.Address>","name":"todoList","comment":"","type_short":"LinkedList"},{"type_long":"ghidra.program.model.block.CodeBlock","name":"bblock","comment":"","type_short":"CodeBlock"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSources","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.util.List<ghidra.program.model.address.Address>","name":"entryPtList","comment":"","type_short":"List"},{"type_long":"java.util.LinkedList<ghidra.program.model.address.Address>","name":"todoList","comment":"","type_short":"LinkedList"},{"type_long":"ghidra.program.model.block.CodeBlock","name":"bblock","comment":"","type_short":"CodeBlock"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the MultEntSubModel Code Block that contains the address.\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A CodeBlock if any block contains the address.\n         null otherwise.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getFirstCodeBlockContaining","comment":"Get the MultEntSubModel Code Block that contains the address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address to find a containing block.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"A CodeBlock if any block contains the address.\n         null otherwise.","type_short":"CodeBlock"}},{"javadoc":"Returns the one code block contained by addr (only for\n  a model that has shared subroutines would this method\n  return more than one code block)\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A CodeBlock if any block contains the address.\n         empty array otherwise.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlocksContaining","comment":"Returns the one code block contained by addr (only for\n  a model that has shared subroutines would this method\n  return more than one code block)","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address to find a containing block.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock[]","comment":"A CodeBlock if any block contains the address.\n         empty array otherwise.","type_short":"ghidra.program.model.block.CodeBlock[]"}},{"javadoc":"Get an iterator over the code blocks in the entire program.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlocks","comment":"Get an iterator over the code blocks in the entire program.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"Get an iterator over CodeBlocks which overlap the specified address set.\n@param addrSet an address set within program\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlocksContaining","comment":"Get an iterator over CodeBlocks which overlap the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"an address set within program","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getProgram()","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns the listing associated with this block model.\n@return the listing associated with this block model.","static":false,"name":"getListing","comment":"Returns the listing associated with this block model.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Listing","comment":"the listing associated with this block model.","type_short":"Listing"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName(ghidra.program.model.block.CodeBlock)","static":false,"name":"getName","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n <p>\n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.\n\n <p>\n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.\n@return flow type of this node","static":false,"name":"getFlowType","comment":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n \n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.\n\n \n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.FlowType","comment":"flow type of this node","type_short":"FlowType"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getSources(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getSources","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getNumSources(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getNumSources","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getDestinations(ghidra.program.model.block.CodeBlock, ghidra.util.task.TaskMonitor)","static":false,"name":"getDestinations","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.\n@param block code block to get the number of destination references from.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getNumDestinations","comment":"Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of destination references from.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Compute an address set that represents all the addresses contained\n  in all instructions that are part of this block\n@param block code block to compute address set for.","static":false,"name":"getAddressSet","comment":"Compute an address set that represents all the addresses contained\n  in all instructions that are part of this block","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to compute address set for.","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Gets a subroutine from the cache containing addr.  If none there, returns null.\n  It is assumed that an address will only occur within a single MSub","static":false,"name":"getSubFromCache","comment":"Gets a subroutine from the cache containing addr.  If none there, returns null.\n  It is assumed that an address will only occur within a single MSub","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"","type_short":"CodeBlock"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getBasicBlockModel()","static":false,"name":"getBasicBlockModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"","type_short":"CodeBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName()","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.program.model.block.SubroutineBlockModel#getBaseSubroutineModel()","static":false,"name":"getBaseSubroutineModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.SubroutineBlockModel","comment":"","type_short":"SubroutineBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#allowsBlockOverlap()","static":false,"name":"allowsBlockOverlap","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#externalsIncluded()","static":false,"name":"externalsIncluded","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"MultEntSubModel","comment":"MultEntSubModel (M-model) defines subroutines which do not share code with\n any other subroutine and may have one or more entry points. Each entry-\n points represent either a source or called entry-point.\n \n MODEL-M subroutines should be used to determine which subroutine(s) contains\n a particular instruction.\n Since model-M subroutines yield the largest subroutines, they should be particular useful\n in the process of program slicing -- the process of splitting the program into modules\n or subroutine cliques -- in order to begin to understand the structure and functionality\n of the program.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"Multiple Entry\""},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Listing","javadoc":"","static":false,"name":"listing","comment":"","type_short":"Listing","constant_value":null},{"type_long":"ghidra.program.model.address.AddressObjectMap","javadoc":"","static":false,"name":"foundMSubs","comment":"","type_short":"AddressObjectMap","constant_value":null},{"type_long":"ghidra.program.model.block.CodeBlockModel","javadoc":"","static":false,"name":"bbModel","comment":"","type_short":"CodeBlockModel","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"includeExternals","comment":"","type_short":"boolean","constant_value":null}]}
