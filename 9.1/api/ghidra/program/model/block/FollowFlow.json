{"implements":[],"javadoc":"FollowFlow follows the program's code flow either forward or backward from an initial\n address set. It adds the flow addresses to the initial address set by flowing \"from\" the \n initial addresses in the forward direction or by flowing \"to\" the initial addresses when\n used in the backward direction.\n The flow can be limited by indicating the flow types (i.e. unconditional call, \n computed jump, etc.) that we do NOT want to follow.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param program the program whose flow we are following.\n@param addressSet the initial addresses that should be flowed from or flowed to.\n@param doNotFollow array of flow types that are not to be followed.\n null or empty array indicates follow all flows. The following are valid\n flow types for the doNotFollow array:\n <BR>FlowType.COMPUTED_CALL\n <BR>FlowType.CONDITIONAL_CALL\n <BR>FlowType.UNCONDITIONAL_CALL\n <BR>FlowType.COMPUTED_JUMP\n <BR>FlowType.CONDITIONAL_JUMP\n <BR>FlowType.UNCONDITIONAL_JUMP\n <BR>FlowType.INDIRECTION","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose flow we are following.","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSet","name":"addressSet","comment":"the initial addresses that should be flowed from or flowed to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.symbol.FlowType[]","name":"doNotFollow","comment":"array of flow types that are not to be followed.\n null or empty array indicates follow all flows. The following are valid\n flow types for the doNotFollow array:\n FlowType.COMPUTED_CALL\n FlowType.CONDITIONAL_CALL\n FlowType.UNCONDITIONAL_CALL\n FlowType.COMPUTED_JUMP\n FlowType.CONDITIONAL_JUMP\n FlowType.UNCONDITIONAL_JUMP\n FlowType.INDIRECTION","type_short":"ghidra.program.model.symbol.FlowType[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor\n@param program the program whose flow we are following.\n@param addressSet the initial addresses that should be flowed from or flowed to.\n@param doNotFollow array of flow types that are not to be followed.\n null or empty array indicates follow all flows. The following are valid\n flow types for the doNotFollow array:\n <BR>FlowType.COMPUTED_CALL\n <BR>FlowType.CONDITIONAL_CALL\n <BR>FlowType.UNCONDITIONAL_CALL\n <BR>FlowType.COMPUTED_JUMP\n <BR>FlowType.CONDITIONAL_JUMP\n <BR>FlowType.UNCONDITIONAL_JUMP\n <BR>FlowType.INDIRECTION\n@param followIntoFunctions true if flows into (or back from) defined functions\n should be followed.","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose flow we are following.","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSet","name":"addressSet","comment":"the initial addresses that should be flowed from or flowed to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.symbol.FlowType[]","name":"doNotFollow","comment":"array of flow types that are not to be followed.\n null or empty array indicates follow all flows. The following are valid\n flow types for the doNotFollow array:\n FlowType.COMPUTED_CALL\n FlowType.CONDITIONAL_CALL\n FlowType.UNCONDITIONAL_CALL\n FlowType.COMPUTED_JUMP\n FlowType.CONDITIONAL_JUMP\n FlowType.UNCONDITIONAL_JUMP\n FlowType.INDIRECTION","type_short":"ghidra.program.model.symbol.FlowType[]"},{"type_long":"boolean","name":"followIntoFunctions","comment":"true if flows into (or back from) defined functions\n should be followed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"updateFollowFlags\n@param doNotFollow array of flow types that are not to be followed.\n null or empty array indicates follow all flows.","static":false,"name":"updateFollowFlags","comment":"updateFollowFlags","params":[{"type_long":"ghidra.program.model.symbol.FlowType[]","name":"doNotFollow","comment":"array of flow types that are not to be followed.\n null or empty array indicates follow all flows.","type_short":"ghidra.program.model.symbol.FlowType[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"getAddressFlow follows the program's code flow and creates an address\n set for the flow from the addresses that are provided when flowing in the forward direction\n or creates an address set for the flows to the addresses in the address set if flowing\n in the backward direction.\n@param monitor a cancellable task monitor, may be null\n@param startAddresses the initial addresses that should be flowed from or flowed to.\n@param forward true to determine the flows \"from\" the startAddresses. false (backward) to \n determine flows \"to\" the startAddresses.","static":false,"name":"getAddressFlow","comment":"getAddressFlow follows the program's code flow and creates an address\n set for the flow from the addresses that are provided when flowing in the forward direction\n or creates an address set for the flows to the addresses in the address set if flowing\n in the backward direction.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor, may be null","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"startAddresses","comment":"the initial addresses that should be flowed from or flowed to.","type_short":"AddressSet"},{"type_long":"boolean","name":"forward","comment":"true to determine the flows \"from\" the startAddresses. false (backward) to \n determine flows \"to\" the startAddresses.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"Add into the flowAddressSet those addresses we flow to from the specified codeUnit when \n flowing forward or the addresses that flow to the code unit when determining flows in the \n backward direction.\n For data, ensure that those primitive data elements followed are contained within the \n startAddresses.\n@param monitor a cancellable task monitor\n@param startAddresses the addresses from which flow may start.\n@param flowAddressSet the collection of addresses encountered within the flow.\n@param codeUnit the instruction or data code unit to start from.\n@param forward true to determine the flows from the code unit. false to determine flows\n to the code unit.","static":false,"name":"getCodeUnitFlow","comment":"Add into the flowAddressSet those addresses we flow to from the specified codeUnit when \n flowing forward or the addresses that flow to the code unit when determining flows in the \n backward direction.\n For data, ensure that those primitive data elements followed are contained within the \n startAddresses.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"startAddresses","comment":"the addresses from which flow may start.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the collection of addresses encountered within the flow.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"the instruction or data code unit to start from.","type_short":"CodeUnit"},{"type_long":"boolean","name":"forward","comment":"true to determine the flows from the code unit. false to determine flows\n to the code unit.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getInstructionFlow","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getIndirectCodeFlow","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"startAddresses","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"","type_short":"Data"},{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"followCode follows the program's code unit (instruction or data) flow and\n adds addresses to the address set for the flow from the current location.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.\n@param monitor a cancellable task monitor\n@param flowAddressSet the address set to be added to\n@param currentCodeUnit the code unit to flow from.\n     Appropriate flows out of this code unit will be traversed.\n@param dataAddr null or the address to flow from within the currentCodeUnit for Data.","static":false,"name":"followCode","comment":"followCode follows the program's code unit (instruction or data) flow and\n adds addresses to the address set for the flow from the current location.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to be added to","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.address.Address","name":"dataAddr","comment":"null or the address to flow from within the currentCodeUnit for Data.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"followCodeBack follows the program's code unit (instruction or data) flow backwards and\n adds addresses to the address set for the flow to the indicated code unit.\n The plugin's properties indicate which flow types should be followed for\n code units.\n@param monitor a cancellable task monitor\n@param flowAddressSet the address set to be added to\n@param codeUnit the code unit to flow to ( or flow back from).\n        Appropriate flows into this code unit will be traversed.\n@param dataAddress the data address if we are trying to follow a flow to data, or\n        null if flowing to an instruction.","static":false,"name":"followCodeBack","comment":"followCodeBack follows the program's code unit (instruction or data) flow backwards and\n adds addresses to the address set for the flow to the indicated code unit.\n The plugin's properties indicate which flow types should be followed for\n code units.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to be added to","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"the code unit to flow to ( or flow back from).\n        Appropriate flows into this code unit will be traversed.","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.address.Address","name":"dataAddress","comment":"the data address if we are trying to follow a flow to data, or\n        null if flowing to an instruction.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the instruction to be processed, which has been adjusted to the first instruction when \n the one passed in is part of a delay slot. If this isn't part of a delay slot then the \n original instruction is returned.<BR>\n For a delay slot, all the instructions for the delay slot will be added to the flowAddressSet. \n Otherwise the original instruction is added to the flowAddressSet.\n@param currentInstr the instruction to possibly adjust\n@param flowAddressSet the address set to hold the entire flow.\n@return the original instruction or the first instruction that is part of a delay slot.","static":false,"name":"getAdjustedInstruction","comment":"Gets the instruction to be processed, which has been adjusted to the first instruction when \n the one passed in is part of a delay slot. If this isn't part of a delay slot then the \n original instruction is returned.\n For a delay slot, all the instructions for the delay slot will be added to the flowAddressSet. \n Otherwise the original instruction is added to the flowAddressSet.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"currentInstr","comment":"the instruction to possibly adjust","type_short":"Instruction"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to hold the entire flow.","type_short":"AddressSet"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Instruction","comment":"the original instruction or the first instruction that is part of a delay slot.","type_short":"Instruction"}},{"javadoc":"","static":false,"name":"getNextSymbolAddress","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"curAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"curNext","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"followInstruction follows the program's instruction flow and adds addresses\n to the address set for the flow from the current location.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.\n@param flowAddressSet the address set to add our addresses to.\n@param currentCodeUnit the Instruction object to flow from.\n     Appropriate flows out of this code unit will be traversed.","static":false,"name":"followInstruction","comment":"followInstruction follows the program's instruction flow and adds addresses\n to the address set for the flow from the current location.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.","params":[{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"instructionStack","comment":"","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to add our addresses to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Instruction","name":"currentInstr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"followInstructionBack follows the program's instruction flow and adds addresses\n to the address set for the flow to the current instruction.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.\n@param instructionStack the instruction stack of instructions to flow to.\n@param flowAddressSet the address set to add our addresses to.\n@param currentInstr the Instruction object to flow to.\n     Appropriate flows to this code unit will be traversed.","static":false,"name":"followInstructionBack","comment":"followInstructionBack follows the program's instruction flow and adds addresses\n to the address set for the flow to the current instruction.\n The plugin's properties indicate which flow types should be followed for\n instruction code units.","params":[{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"instructionStack","comment":"the instruction stack of instructions to flow to.","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to add our addresses to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Instruction","name":"currentInstr","comment":"the Instruction object to flow to.\n     Appropriate flows to this code unit will be traversed.","type_short":"Instruction"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFlowsToPreceedingDelaySlots","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"currentInstruction","comment":"","type_short":"Instruction"},{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"codeUnitStack","comment":"","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"","type_short":"AddressSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"handleFlowsIntoDelaySlot","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"codeUnitStack","comment":"","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"","type_short":"AddressSet"},{"type_long":"java.util.List<ghidra.program.model.listing.Instruction>","name":"delaySlotList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Listing","name":"listing","comment":"","type_short":"Listing"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines whether the indicated flow type is one that is currently \n supposed to be followed.\n@param currentFlowType the flow type to check\n@return boolean true if this flow type should be followed.","static":false,"name":"shouldFollowFlow","comment":"Determines whether the indicated flow type is one that is currently \n supposed to be followed.","params":[{"type_long":"ghidra.program.model.symbol.FlowType","name":"currentFlowType","comment":"the flow type to check","type_short":"FlowType"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if this flow type should be followed.","type_short":"boolean"}},{"javadoc":"Gets the addresses of where this instruction flows. Only flow types\n matching the ones that should be followed will have the address it flows\n to returned.\n@param the instruction being flowed from.\n@return array of the addresses being flowed to in the manner we are\n interested in.","static":false,"name":"getFlowsFromInstruction","comment":"Gets the addresses of where this instruction flows. Only flow types\n matching the ones that should be followed will have the address it flows\n to returned.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"array of the addresses being flowed to in the manner we are\n interested in.","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"Gets the addresses that flow to this instruction. Only flow types\n matching the ones that should be followed will have the address it flows\n from returned.\n@param the instruction being flowed to.\n@return array of the addresses that flow to the instruction in the manner we are\n interested in.","static":false,"name":"getFlowsAndPointersToInstruction","comment":"Gets the addresses that flow to this instruction. Only flow types\n matching the ones that should be followed will have the address it flows\n from returned.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"array of the addresses that flow to the instruction in the manner we are\n interested in.","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"followData follows the program's code flow and adds addresses to the address set for the \n flow from the current data item if it has a pointer at the specified address with a \n reference to an instruction. If the flow at the address isn't from a pointer to \n an instruction then just the address passed to this method is added to the flow set.\n@param flowAddressSet the address set to add our addresses to.\n@param currentCodeUnit the Data object to flow from.\n     Appropriate flows out of this code unit will be traversed.\n@param addr the flow reference address which is contained within data.","static":false,"name":"followData","comment":"followData follows the program's code flow and adds addresses to the address set for the \n flow from the current data item if it has a pointer at the specified address with a \n reference to an instruction. If the flow at the address isn't from a pointer to \n an instruction then just the address passed to this method is added to the flow set.","params":[{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"instructionStack","comment":"","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to add our addresses to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"","type_short":"Data"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the flow reference address which is contained within data.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"followDataBack follows the program's code flow backwards and adds addresses to the\n address set for the flow to the current data item.\n@param instructionStack the instruction stack of instructions that flow to addr.\n@param flowAddressSet the address set to add our addresses to.\n@param data the Data object to flow to.\n     Appropriate flows into this data code unit will be traversed.\n@param addr the flow to reference address which is contained within the data code unit.","static":false,"name":"followDataBack","comment":"followDataBack follows the program's code flow backwards and adds addresses to the\n address set for the flow to the current data item.","params":[{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"instructionStack","comment":"the instruction stack of instructions that flow to addr.","type_short":"Stack"},{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set to add our addresses to.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"the Data object to flow to.\n     Appropriate flows into this data code unit will be traversed.","type_short":"Data"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the flow to reference address which is contained within the data code unit.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If there is a pointer at the indicated address, this adds the addresses for the pointer\n into the address set of flows.\n@param flowAddressSet the address set containing the addresses that make up the flow so far.\n@param data a Data code unit containing the address to be processed.\n@param addr the address to be processed.","static":false,"name":"addPointerToFlow","comment":"If there is a pointer at the indicated address, this adds the addresses for the pointer\n into the address set of flows.","params":[{"type_long":"ghidra.program.model.address.AddressSet","name":"flowAddressSet","comment":"the address set containing the addresses that make up the flow so far.","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"a Data code unit containing the address to be processed.","type_short":"Data"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to be processed.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Push the instruction at the indicated address onto the flow stack. If the\n indicated address is not the min address of a code unit then do nothing.\n@param cuStack the code unit stack of flows to be followed\n@param addr the address of the code unit","static":false,"name":"pushInstruction","comment":"Push the instruction at the indicated address onto the flow stack. If the\n indicated address is not the min address of a code unit then do nothing.","params":[{"type_long":"java.util.Stack<ghidra.program.model.listing.CodeUnit>","name":"cuStack","comment":"the code unit stack of flows to be followed","type_short":"Stack"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address of the code unit","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determines the address set that flows from the addresses in this FollowFlow object's\n initialAddresses set. The address set is determined by what addresses were provided \n when the FollowFlow was constructed and the type of flow requested.\n This method follows flows in the forward direction.\n@param monitor a cancellable task monitor, may be null\n@return the resulting address set.","static":false,"name":"getFlowAddressSet","comment":"Determines the address set that flows from the addresses in this FollowFlow object's\n initialAddresses set. The address set is determined by what addresses were provided \n when the FollowFlow was constructed and the type of flow requested.\n This method follows flows in the forward direction.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor, may be null","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the resulting address set.","type_short":"AddressSet"}},{"javadoc":"Determines the address set that flows to the addresses in this FollowFlow object's\n initialAddresses set. The address set is determined by what addresses were provided \n when the FollowFlow was constructed and the type of flow requested. The constructor\n indicated the flow types not to be followed. All others will be traversed in the\n backwards direction to determine the addresses that are flowing to those in the initial\n set.\n@param monitor a cancellable task monitor, may be null\n@return the resulting address set.","static":false,"name":"getFlowToAddressSet","comment":"Determines the address set that flows to the addresses in this FollowFlow object's\n initialAddresses set. The address set is determined by what addresses were provided \n when the FollowFlow was constructed and the type of flow requested. The constructor\n indicated the flow types not to be followed. All others will be traversed in the\n backwards direction to determine the addresses that are flowing to those in the initial\n set.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor, may be null","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the resulting address set.","type_short":"AddressSet"}}],"name":"FollowFlow","comment":"FollowFlow follows the program's code flow either forward or backward from an initial\n address set. It adds the flow addresses to the initial address set by flowing \"from\" the \n initial addresses in the forward direction or by flowing \"to\" the initial addresses when\n used in the backward direction.\n The flow can be limited by indicating the flow types (i.e. unconditional call, \n computed jump, etc.) that we do NOT want to follow.","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"initialAddresses","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followAllFlow","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followComputedCall","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followConditionalCall","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followUnconditionalCall","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followComputedJump","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followConditionalJump","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followUnconditionalJump","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followPointers","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followIntoFunction","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"nextSymbolAddr","comment":"","type_short":"Address","constant_value":null}]}
