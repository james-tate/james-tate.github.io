{"implements":["java.lang.Comparable"],"javadoc":"The AddressRange interface is used by any object\n that represents a contiguous inclusive range of\n addresses from a minimum address to a maximum\n address.  The entire range must fall within a \n single address space.\n <P>\n@see AddressRangeImpl\n@since 2000-02-16","static":false,"methods":[{"javadoc":"Returns the number of addresses in the range.","static":false,"name":"getLength","comment":"Returns the number of addresses in the range.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the number of addresses as a BigInteger.\n@return the number of addresses as a BigInteger.","static":false,"name":"getBigLength","comment":"Returns the number of addresses as a BigInteger.","params":[],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"the number of addresses as a BigInteger.","type_short":"BigInteger"}},{"javadoc":"Returns true if the given address is contained in the range.","static":false,"name":"contains","comment":"Returns true if the given address is contained in the range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Computes the intersection of this range with another.\n@param range the range to intersect this range with\n@return AddressRange the intersection or null if the ranges\n do not intersect.","static":false,"name":"intersect","comment":"Computes the intersection of this range with another.","params":[{"type_long":"ghidra.program.model.address.AddressRange","name":"range","comment":"the range to intersect this range with","type_short":"AddressRange"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"AddressRange the intersection or null if the ranges\n do not intersect.","type_short":"AddressRange"}},{"javadoc":"Computes the intersection of this range with another.\n@param start of range\n@param end end of range\n@return AddressRange the intersection or null if the ranges\n do not intersect.","static":false,"name":"intersectRange","comment":"Computes the intersection of this range with another.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"of range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of range","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"AddressRange the intersection or null if the ranges\n do not intersect.","type_short":"AddressRange"}},{"javadoc":"Returns true if the given range intersects this range.\n@param range the range to test for intersection with.","static":false,"name":"intersects","comment":"Returns true if the given range intersects this range.","params":[{"type_long":"ghidra.program.model.address.AddressRange","name":"range","comment":"the range to test for intersection with.","type_short":"AddressRange"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the given range intersects this range.\n@param start the first address in the range to test for intersection.\n@param end the last address in the range to test for intersection.","static":false,"name":"intersects","comment":"Returns true if the given range intersects this range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range to test for intersection.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range to test for intersection.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compares the given address to this address range.\n@param addr the address to compare.\n@return a negative integer if the address is greater than the maximum range address,\n         zero if the address is in the range, and\n         a positive integer if the address is less than minimum range address.","static":false,"name":"compareTo","comment":"Compares the given address to this address range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to compare.","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"a negative integer if the address is greater than the maximum range address,\n         zero if the address is in the range, and\n         a positive integer if the address is less than minimum range address.","type_short":"int"}},{"javadoc":"@return the maximum address in the range.","static":false,"name":"getMaxAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the maximum address in the range.","type_short":"Address"}},{"javadoc":"@return the minimum address in the range.","static":false,"name":"getMinAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the minimum address in the range.","type_short":"Address"}},{"javadoc":"@return address space this range resides within","static":false,"name":"getAddressSpace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"address space this range resides within","type_short":"AddressSpace"}}],"name":"AddressRange","comment":"The AddressRange interface is used by any object\n that represents a contiguous inclusive range of\n addresses from a minimum address to a maximum\n address.  The entire range must fall within a \n single address space.\n ","fields":[]}
