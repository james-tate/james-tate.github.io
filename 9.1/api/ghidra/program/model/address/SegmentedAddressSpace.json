{"implements":[],"javadoc":"Address Space for dealing with (intel) segmented address spaces.\n It understands the mapping between the segmented encoding (seg:offset) and\n the flat address encoding necessary to produce an Address object that can be\n used by other analyses.  This mapping is inherent in protected methods:\n   - getDefaultOffsetFromFlat\n   - getDefaultSegmentFromFlat\n   - getFlatOffset\n   - getOffsetFromFlat\n   - getAddressInSegment\n \n These 5 methods can be overridden to get a different mapping. This base class is\n set up to map as for x86 16-bit real-mode.","static":false,"extends":"ghidra.program.model.address.GenericAddressSpace","methods":[{"javadoc":"Constructor for larger size address spaces (than the real-mode space)\n@param name is the name of the space\n@param size is the number of bits in a (flat) address\n@param unique is the unique id for the space","static":false,"name":"<init>","comment":"Constructor for larger size address spaces (than the real-mode space)","params":[{"type_long":"java.lang.String","name":"name","comment":"is the name of the space","type_short":"String"},{"type_long":"int","name":"size","comment":"is the number of bits in a (flat) address","type_short":"int"},{"type_long":"int","name":"unique","comment":"is the unique id for the space","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new Segmented AddressSpace for x86 real-mode, with 21-bit addresses.\n@param name is the name of the space\n@param unique is the unique id for the space.","static":false,"name":"<init>","comment":"Constructs a new Segmented AddressSpace for x86 real-mode, with 21-bit addresses.","params":[{"type_long":"java.lang.String","name":"name","comment":"is the name of the space","type_short":"String"},{"type_long":"int","name":"unique","comment":"is the unique id for the space.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Given a 16-bit segment and an offset, produce the flat address offset\n@param segment is the segment value\n@param offset is the 16-bit offset into the segment\n@return the encoded flat offset","static":false,"name":"getFlatOffset","comment":"Given a 16-bit segment and an offset, produce the flat address offset","params":[{"type_long":"int","name":"segment","comment":"is the segment value","type_short":"int"},{"type_long":"long","name":"offset","comment":"is the 16-bit offset into the segment","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"the encoded flat offset","type_short":"long"}},{"javadoc":"Given a flat address offset, extract the default 16-bit segment portion\n@param flat is the flat offset\n@return the segment value","static":false,"name":"getDefaultSegmentFromFlat","comment":"Given a flat address offset, extract the default 16-bit segment portion","params":[{"type_long":"long","name":"flat","comment":"is the flat offset","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"the segment value","type_short":"int"}},{"javadoc":"Given a flat address offset, extract the offset portion assuming the\n default segment.\n@param flat is the flat offset\n@return the offset value","static":false,"name":"getDefaultOffsetFromFlat","comment":"Given a flat address offset, extract the offset portion assuming the\n default segment.","params":[{"type_long":"long","name":"flat","comment":"is the flat offset","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"the offset value","type_short":"long"}},{"javadoc":"Given a flat address offset, extract a segment offset assuming a\n specific segment value.\n@param flat is the flat offset\n@param segment is the specific segment value\n@return the segment offset","static":false,"name":"getOffsetFromFlat","comment":"Given a flat address offset, extract a segment offset assuming a\n specific segment value.","params":[{"type_long":"long","name":"flat","comment":"is the flat offset","type_short":"long"},{"type_long":"int","name":"segment","comment":"is the specific segment value","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"the segment offset","type_short":"long"}},{"javadoc":"Given a flat address offset and a preferred segment, try\n to create an address that maps to the offset and is in the segment. For\n architectures like x86 real-mode, multiple address encodings can map to\n the same flat address offset.  This method tries to select between the different\n encodings.  If the flat offset cannot be encoded with the preferred segment,\n null is returned.\n@param flat is the flat offset\n@param preferredSegment is the 16-bit preferred segment value\n@return the segment encoded address or null","static":false,"name":"getAddressInSegment","comment":"Given a flat address offset and a preferred segment, try\n to create an address that maps to the offset and is in the segment. For\n architectures like x86 real-mode, multiple address encodings can map to\n the same flat address offset.  This method tries to select between the different\n encodings.  If the flat offset cannot be encoded with the preferred segment,\n null is returned.","params":[{"type_long":"long","name":"flat","comment":"is the flat offset","type_short":"long"},{"type_long":"int","name":"preferredSegment","comment":"is the 16-bit preferred segment value","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"the segment encoded address or null","type_short":"SegmentedAddress"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#getAddress(java.lang.String)","static":false,"name":"getAddress","comment":"","params":[{"type_long":"java.lang.String","name":"addrString","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getAddress","comment":"","params":[{"type_long":"java.lang.String","name":"addrString","comment":"","type_short":"String"},{"type_long":"boolean","name":"caseSensitive","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#subtract(ghidra.program.model.address.Address,\n      long)","static":false,"name":"subtract","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#add(ghidra.program.model.address.Address,\n      long)","static":false,"name":"add","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"parseString","comment":"","params":[{"type_long":"java.lang.String","name":"addr","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"parseNonSegmented","comment":"","params":[{"type_long":"java.lang.String","name":"offStr","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"","type_short":"SegmentedAddress"}},{"javadoc":"","static":false,"name":"parseSegmented","comment":"","params":[{"type_long":"java.lang.String","name":"segStr","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"offStr","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"","type_short":"SegmentedAddress"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#getAddress(long)","static":false,"name":"getAddress","comment":"","params":[{"type_long":"long","name":"byteOffset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"","type_short":"SegmentedAddress"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#getAddressInThisSpaceOnly(long)","static":false,"name":"getAddressInThisSpaceOnly","comment":"","params":[{"type_long":"long","name":"byteOffset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"","type_short":"SegmentedAddress"}},{"javadoc":"@see ghidra.program.model.address.AbstractAddressSpace#getUncheckedAddress(long)","static":false,"name":"getUncheckedAddress","comment":"","params":[{"type_long":"long","name":"byteOffset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"","type_short":"SegmentedAddress"}},{"javadoc":"Generates a segmented address with the given segment, offset, and overlay id.\n@param segment the segment\n@param segmentOffset the offset in the segment\n@return SegmentedAddress the newly created segmented address.","static":false,"name":"getAddress","comment":"Generates a segmented address with the given segment, offset, and overlay id.","params":[{"type_long":"int","name":"segment","comment":"the segment","type_short":"int"},{"type_long":"int","name":"segmentOffset","comment":"the offset in the segment","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddress","comment":"SegmentedAddress the newly created segmented address.","type_short":"SegmentedAddress"}},{"javadoc":"Get the segment index for the first segment whose start address\n comes after the given address\n@param addr is the given address\n@return the segment index","static":false,"name":"getNextOpenSegment","comment":"Get the segment index for the first segment whose start address\n comes after the given address","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"is the given address","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"the segment index","type_short":"int"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#getPhysicalSpace()","static":false,"name":"getPhysicalSpace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.SegmentedAddressSpace","comment":"","type_short":"SegmentedAddressSpace"}},{"javadoc":"@see ghidra.program.model.address.AddressSpace#getPointerSize()","static":false,"name":"getPointerSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"SegmentedAddressSpace","comment":"Address Space for dealing with (intel) segmented address spaces.\n It understands the mapping between the segmented encoding (seg:offset) and\n the flat address encoding necessary to produce an Address object that can be\n used by other analyses.  This mapping is inherent in protected methods:\n   - getDefaultOffsetFromFlat\n   - getDefaultSegmentFromFlat\n   - getFlatOffset\n   - getOffsetFromFlat\n   - getAddressInSegment\n \n These 5 methods can be overridden to get a different mapping. This base class is\n set up to map as for x86 16-bit real-mode.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"REALMODE_SIZE","comment":"","type_short":"int","constant_value":"21"},{"type_long":"long","javadoc":"","static":true,"name":"REALMODE_MAXOFFSET","comment":"","type_short":"long","constant_value":"1114095"}]}
