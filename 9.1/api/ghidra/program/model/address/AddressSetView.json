{"implements":["java.lang.Iterable"],"javadoc":"Defines a read-only interface for an address set.","static":false,"methods":[{"javadoc":"Test if the address is contained within this set.\n <P>\n@param addr address to test.\n@return true if addr exists in the set, false otherwise.","static":false,"name":"contains","comment":"Test if the address is contained within this set.\n ","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address to test.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if addr exists in the set, false otherwise.","type_short":"boolean"}},{"javadoc":"Test if the given address range is contained in this set.\n <P>\n@param start the first address in the range.\n@param end the last address in the range.\n@return true if entire range is contained within the set,\n         false otherwise.","static":false,"name":"contains","comment":"Test if the given address range is contained in this set.\n ","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if entire range is contained within the set,\n         false otherwise.","type_short":"boolean"}},{"javadoc":"Test if the given address set is a subset of this set.\n <P>\n@param rangeSet the set to test.\n@return true if the entire set is contained within this set,\n         false otherwise.","static":false,"name":"contains","comment":"Test if the given address set is a subset of this set.\n ","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"rangeSet","comment":"the set to test.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the entire set is contained within this set,\n         false otherwise.","type_short":"boolean"}},{"javadoc":"Returns true if this set is empty.","static":false,"name":"isEmpty","comment":"Returns true if this set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return the minimum address for this set. Returns null if the set is empty.","static":false,"name":"getMinAddress","comment":"Return the minimum address for this set. Returns null if the set is empty.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Return the maximum address for this set. Returns null if the set is empty.","static":false,"name":"getMaxAddress","comment":"Return the maximum address for this set. Returns null if the set is empty.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Return the number of address ranges in this set.","static":false,"name":"getNumAddressRanges","comment":"Return the number of address ranges in this set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns an iterator over the address ranges in this address set.","static":false,"name":"getAddressRanges","comment":"Returns an iterator over the address ranges in this address set.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an iterator over the ranges in the specified order\n@param forward the ranges are returned from lowest to highest, otherwise from\n highest to lowest\n@return an iterator over all the addresse ranges in the set.","static":false,"name":"getAddressRanges","comment":"Returns an iterator over the ranges in the specified order","params":[{"type_long":"boolean","name":"forward","comment":"the ranges are returned from lowest to highest, otherwise from\n highest to lowest","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"an iterator over all the addresse ranges in the set.","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an iterator of address ranges starting with the range that contains the given address.\n If there is no range containing the start address, then the the first range will be\n the next range greater than the start address if going forward, otherwise the range less than\n the start address\n@param start the address the the first range should contain.\n@param forward true iterators forward, false backwards\n@return the AddressRange iterator","static":false,"name":"getAddressRanges","comment":"Returns an iterator of address ranges starting with the range that contains the given address.\n If there is no range containing the start address, then the the first range will be\n the next range greater than the start address if going forward, otherwise the range less than\n the start address","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the address the the first range should contain.","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"true iterators forward, false backwards","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"the AddressRange iterator","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an iterator over the address ranges in this address set.","static":false,"name":"iterator","comment":"Returns an iterator over the address ranges in this address set.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.address.AddressRange>","comment":"","type_short":"Iterator"}},{"javadoc":"Returns an iterator over the ranges in the specified order\n@param forward the ranges are returned from lowest to highest, otherwise from\n highest to lowest\n@return an iterator over all the addresse ranges in the set.","static":false,"name":"iterator","comment":"Returns an iterator over the ranges in the specified order","params":[{"type_long":"boolean","name":"forward","comment":"the ranges are returned from lowest to highest, otherwise from\n highest to lowest","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.address.AddressRange>","comment":"an iterator over all the addresse ranges in the set.","type_short":"Iterator"}},{"javadoc":"Returns an iterator of address ranges starting with the range that contains the given address.\n If there is no range containing the start address, then the the first range will be\n the next range greater than the start address if going forward, otherwise the range less than\n the start address\n@param start the address the the first range should contain.\n@param forward true iterators forward, false backwards\n@return the AddressRange iterator","static":false,"name":"iterator","comment":"Returns an iterator of address ranges starting with the range that contains the given address.\n If there is no range containing the start address, then the the first range will be\n the next range greater than the start address if going forward, otherwise the range less than\n the start address","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the address the the first range should contain.","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"true iterators forward, false backwards","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.address.AddressRange>","comment":"the AddressRange iterator","type_short":"Iterator"}},{"javadoc":"Returns the number of addresses in this set.","static":false,"name":"getNumAddresses","comment":"Returns the number of addresses in this set.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns an iterator over all addresses in this set.\n@param forward if true the address are return in increasing order, otherwise in\n decreasing order.","static":false,"name":"getAddresses","comment":"Returns an iterator over all addresses in this set.","params":[{"type_long":"boolean","name":"forward","comment":"if true the address are return in increasing order, otherwise in\n decreasing order.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns an iterator over the addresses in this address set\n starting at the start address\n@param start address to start iterating at in the address set\n@param forward if true address are return from lowest to highest, else from highest to lowest","static":false,"name":"getAddresses","comment":"Returns an iterator over the addresses in this address set\n starting at the start address","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"address to start iterating at in the address set","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"if true address are return from lowest to highest, else from highest to lowest","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Determine if this address set intersects with the specified address set.\n@param addrSet address set to check intersection with.","static":false,"name":"intersects","comment":"Determine if this address set intersects with the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"address set to check intersection with.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determine if the start and end range\n intersects with the specified address set.\n@param start start of range\n@param end end of range\n@return true if the given range intersects this address set.","static":false,"name":"intersects","comment":"Determine if the start and end range\n intersects with the specified address set.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start of range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of range","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given range intersects this address set.","type_short":"boolean"}},{"javadoc":"Computes the intersection of this address set with the given address set.\n This method does not modify this address set.\n@param view the address set to intersect with.\n@return AddressSet a new address set that contains all addresses that are\n contained in both this set and the given set.","static":false,"name":"intersect","comment":"Computes the intersection of this address set with the given address set.\n This method does not modify this address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"view","comment":"the address set to intersect with.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"AddressSet a new address set that contains all addresses that are\n contained in both this set and the given set.","type_short":"AddressSet"}},{"javadoc":"Computes the intersection of this address set with the given address range.\n This method does not modify this address set.\n@param start start of range\n@param end end of range\n@return AddressSet a new address set that contains all addresses that are\n contained in both this set and the given range.","static":false,"name":"intersectRange","comment":"Computes the intersection of this address set with the given address range.\n This method does not modify this address set.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start of range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of range","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"AddressSet a new address set that contains all addresses that are\n contained in both this set and the given range.","type_short":"AddressSet"}},{"javadoc":"Computes the union of this address set with the given address set.  This\n method does not change this address set.\n@param addrSet The address set to be unioned with this address set.\n@return AddressSet A new address set which contains all the addresses\n from both this set and the given set.","static":false,"name":"union","comment":"Computes the union of this address set with the given address set.  This\n method does not change this address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"The address set to be unioned with this address set.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"AddressSet A new address set which contains all the addresses\n from both this set and the given set.","type_short":"AddressSet"}},{"javadoc":"Computes the difference of this address set with the given address set\n (this - set).  Note that this is not the same as (set - this).  This\n method does not change this address set.\n@param addrSet the set to subtract from this set.\n@return AddressSet a new address set which contains all the addresses\n that are in this set, but not in the given set.","static":false,"name":"subtract","comment":"Computes the difference of this address set with the given address set\n (this - set).  Note that this is not the same as (set - this).  This\n method does not change this address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"the set to subtract from this set.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"AddressSet a new address set which contains all the addresses\n that are in this set, but not in the given set.","type_short":"AddressSet"}},{"javadoc":"Computes the exclusive-or of this address set with the given set. This\n method does not modify this address set.\n@param addrSet\n@return AddressSet a new address set containing all addresses that are in\n either this set or the given set, but not in both sets","static":false,"name":"xor","comment":"Computes the exclusive-or of this address set with the given set. This\n method does not modify this address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"AddressSet a new address set containing all addresses that are in\n either this set or the given set, but not in both sets","type_short":"AddressSet"}},{"javadoc":"Returns true if the given address set contains the same set of addresses\n as this set.\n@param view the address set to compare.\n@return true if the given set contains the same addresses as this set.","static":false,"name":"hasSameAddresses","comment":"Returns true if the given address set contains the same set of addresses\n as this set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"view","comment":"the address set to compare.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given set contains the same addresses as this set.","type_short":"boolean"}},{"javadoc":"Returns the first range in this set or null if the set is empty;\n@return the first range in this set or null if the set is empty;","static":false,"name":"getFirstRange","comment":"Returns the first range in this set or null if the set is empty;","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the first range in this set or null if the set is empty;","type_short":"AddressRange"}},{"javadoc":"Returns the last range in this set or null if the set is empty;\n@return the last range in this set or null if the set is empty;","static":false,"name":"getLastRange","comment":"Returns the last range in this set or null if the set is empty;","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the last range in this set or null if the set is empty;","type_short":"AddressRange"}},{"javadoc":"Returns the range that contains the given address\n@param address the address for which to find a range.\n@return the range that contains the given address.","static":false,"name":"getRangeContaining","comment":"Returns the range that contains the given address","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address for which to find a range.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the range that contains the given address.","type_short":"AddressRange"}},{"javadoc":"Finds the first address in this collection that is also in the given addressSet.\n@param set the addressSet to search for the first (lowest) common address.\n@return the first address that is contained in this set and the given set.","static":false,"name":"findFirstAddressInCommon","comment":"Finds the first address in this collection that is also in the given addressSet.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the addressSet to search for the first (lowest) common address.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the first address that is contained in this set and the given set.","type_short":"Address"}}],"name":"AddressSetView","comment":"Defines a read-only interface for an address set.","fields":[]}
