{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"Create an address from String. Attempts to use the \"default\" address space\n first.  Otherwise loops through each addressSpace, returning the first valid\n address that any addressSpace creates from the string.\n Returns an Address if the string is valid, otherwise null.","static":false,"name":"getAddress","comment":"Create an address from String. Attempts to use the \"default\" address space\n first.  Otherwise loops through each addressSpace, returning the first valid\n address that any addressSpace creates from the string.\n Returns an Address if the string is valid, otherwise null.","params":[{"type_long":"java.lang.String","name":"addrString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Generates all reasonable addresses that can be interpreted from\n the given string.  Each Address Space is given a change to parse\n the string and all the valid results are return in the array.\n@param addrString the address string to parse.\n@return Address[] The list of addresses generated from the string.","static":false,"name":"getAllAddresses","comment":"Generates all reasonable addresses that can be interpreted from\n the given string.  Each Address Space is given a change to parse\n the string and all the valid results are return in the array.","params":[{"type_long":"java.lang.String","name":"addrString","comment":"the address string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"Address[] The list of addresses generated from the string.","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"Generates all reasonable addresses that can be interpreted from\n the given string.  Each Address Space is given a change to parse\n the string and all the valid results are return in the array.\n@param addrString the address string to parse.\n@param caseSensitive determines if addressSpace names must be case sensitive to match.\n@return Address[] The list of addresses generated from the string.","static":false,"name":"getAllAddresses","comment":"Generates all reasonable addresses that can be interpreted from\n the given string.  Each Address Space is given a change to parse\n the string and all the valid results are return in the array.","params":[{"type_long":"java.lang.String","name":"addrString","comment":"the address string to parse.","type_short":"String"},{"type_long":"boolean","name":"caseSensitive","comment":"determines if addressSpace names must be case sensitive to match.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"Address[] The list of addresses generated from the string.","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"Returns the default AddressSpace","static":false,"name":"getDefaultAddressSpace","comment":"Returns the default AddressSpace","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Get the array of all \"physical\" AddressSpaces.","static":false,"name":"getAddressSpaces","comment":"Get the array of all \"physical\" AddressSpaces.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace[]","comment":"","type_short":"ghidra.program.model.address.AddressSpace[]"}},{"javadoc":"Returns an array of all address spaces, including analysis spaces.\n@return an array of all the address spaces.","static":false,"name":"getAllAddressSpaces","comment":"Returns an array of all address spaces, including analysis spaces.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace[]","comment":"an array of all the address spaces.","type_short":"ghidra.program.model.address.AddressSpace[]"}},{"javadoc":"Returns the space with the given name or null if no space\n exists with that name.","static":false,"name":"getAddressSpace","comment":"Returns the space with the given name or null if no space\n exists with that name.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns the space with the given spaceID or null if none exists","static":false,"name":"getAddressSpace","comment":"Returns the space with the given spaceID or null if none exists","params":[{"type_long":"int","name":"spaceID","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns the number of physical AddressSpaces.","static":false,"name":"getNumAddressSpaces","comment":"Returns the number of physical AddressSpaces.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Tests if the given address is valid for at least one of the \n Address Spaces in this factory\n@param addr The address to test\n@return boolean true if the address valid, false otherwise","static":false,"name":"isValidAddress","comment":"Tests if the given address is valid for at least one of the \n Address Spaces in this factory","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"The address to test","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the address valid, false otherwise","type_short":"boolean"}},{"javadoc":"@see java.lang.Object#equals(Object)","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the index (old encoding) for the given address.\n@param addr the address to encode.","static":false,"name":"getIndex","comment":"Returns the index (old encoding) for the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to encode.","type_short":"Address"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Gets the physical address space associated with the given address space. If \n the given space is physical, then it will be returned.\n@param space the addressSpace for which the physical space is requested.\n@return the physical address space associated with the given address space.","static":false,"name":"getPhysicalSpace","comment":"Gets the physical address space associated with the given address space. If \n the given space is physical, then it will be returned.","params":[{"type_long":"ghidra.program.model.address.AddressSpace","name":"space","comment":"the addressSpace for which the physical space is requested.","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"the physical address space associated with the given address space.","type_short":"AddressSpace"}},{"javadoc":"Returns an array of all the physical address spaces.\n@return an array of all the physical address spaces.","static":false,"name":"getPhysicalSpaces","comment":"Returns an array of all the physical address spaces.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace[]","comment":"an array of all the physical address spaces.","type_short":"ghidra.program.model.address.AddressSpace[]"}},{"javadoc":"Get an address using the addressSpace with the given id and having the given offset.\n@param spaceID the id of the address space to use to create the new address.\n@param offset the offset of the new address to be created.\n@return the new address.","static":false,"name":"getAddress","comment":"Get an address using the addressSpace with the given id and having the given offset.","params":[{"type_long":"int","name":"spaceID","comment":"the id of the address space to use to create the new address.","type_short":"int"},{"type_long":"long","name":"offset","comment":"the offset of the new address to be created.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the new address.","type_short":"Address"}},{"javadoc":"Returns the \"constant\" address space.","static":false,"name":"getConstantSpace","comment":"Returns the \"constant\" address space.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns the \"unique\" address space.","static":false,"name":"getUniqueSpace","comment":"Returns the \"unique\" address space.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns the \"stack\" address space.","static":false,"name":"getStackSpace","comment":"Returns the \"stack\" address space.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns the \"register\" address space.","static":false,"name":"getRegisterSpace","comment":"Returns the \"register\" address space.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"Returns an address in \"constant\" space with the given offset.\n@param offset the offset in \"constant\" space for the new address.\n@return a new address in the \"constant\" space with the given offset.","static":false,"name":"getConstantAddress","comment":"Returns an address in \"constant\" space with the given offset.","params":[{"type_long":"long","name":"offset","comment":"the offset in \"constant\" space for the new address.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"a new address in the \"constant\" space with the given offset.","type_short":"Address"}},{"javadoc":"Computes an address set from a start and end address that may span address spaces.  Although \n in general, it is not meaningful to compare addresses from multiple spaces, but since there \n is an absolute ordering of address spaces it can be useful for iterating over all addresses\n in a program with multiple address spaces.\n@param min the start address\n@param max the end address.\n@return an addressSet containing ranges that don't span address spaces.","static":false,"name":"getAddressSet","comment":"Computes an address set from a start and end address that may span address spaces.  Although \n in general, it is not meaningful to compare addresses from multiple spaces, but since there \n is an absolute ordering of address spaces it can be useful for iterating over all addresses\n in a program with multiple address spaces.","params":[{"type_long":"ghidra.program.model.address.Address","name":"min","comment":"the start address","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"max","comment":"the end address.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"an addressSet containing ranges that don't span address spaces.","type_short":"AddressSet"}},{"javadoc":"Returns an addressSet containing all possible \"real\" addresses for this address factory.","static":false,"name":"getAddressSet","comment":"Returns an addressSet containing all possible \"real\" addresses for this address factory.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"Returns the address using the old encoding format.\n@param value to decode into an address.","static":false,"name":"oldGetAddressFromLong","comment":"Returns the address using the old encoding format.","params":[{"type_long":"long","name":"value","comment":"to decode into an address.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns true if there is more than one memory address space","static":false,"name":"hasMultipleMemorySpaces","comment":"Returns true if there is more than one memory address space","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"AddressFactory","comment":"","fields":[]}
