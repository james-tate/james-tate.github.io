{"implements":[],"javadoc":"An interface for storing the relocations defined in a program.","static":false,"methods":[{"javadoc":"Creates and adds a new relocation with the specified\n address, type, and value.\n@param addr the address where the relocation is required\n@param type the type of relocation to perform\n@param values the values needed when performing the relocation\n@param bytes original instruction bytes affected by relocation\n@param the name of the symbol being relocated; may be null\n@return the newly added relocation object","static":false,"name":"add","comment":"Creates and adds a new relocation with the specified\n address, type, and value.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address where the relocation is required","type_short":"Address"},{"type_long":"int","name":"type","comment":"the type of relocation to perform","type_short":"int"},{"type_long":"long[]","name":"values","comment":"the values needed when performing the relocation","type_short":"long[]"},{"type_long":"byte[]","name":"bytes","comment":"original instruction bytes affected by relocation","type_short":"byte[]"},{"type_long":"java.lang.String","name":"symbolName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.reloc.Relocation","comment":"the newly added relocation object","type_short":"Relocation"}},{"javadoc":"Removes the relocation object.\n@param reloc the relocation object to remove","static":false,"name":"remove","comment":"Removes the relocation object.","params":[{"type_long":"ghidra.program.model.reloc.Relocation","name":"reloc","comment":"the relocation object to remove","type_short":"Relocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the relocation with the specified address.\n@param addr the address where the relocation is defined\n@return the relocation with the specified address","static":false,"name":"getRelocation","comment":"Returns the relocation with the specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address where the relocation is defined","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.reloc.Relocation","comment":"the relocation with the specified address","type_short":"Relocation"}},{"javadoc":"Returns an iterator over all relocation points (in ascending address order) located \n within the program.\n@return relocation iterator","static":false,"name":"getRelocations","comment":"Returns an iterator over all relocation points (in ascending address order) located \n within the program.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.reloc.Relocation>","comment":"relocation iterator","type_short":"Iterator"}},{"javadoc":"Returns an iterator over all the relocation points (in ascending address order) located \n within the specified address set.\n@param set address set\n@return relocation iterator","static":false,"name":"getRelocations","comment":"Returns an iterator over all the relocation points (in ascending address order) located \n within the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"address set","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.reloc.Relocation>","comment":"relocation iterator","type_short":"Iterator"}},{"javadoc":"Returns the next relocation point which follows the specified address.\n@param addr starting point\n@return next relocation after addr","static":false,"name":"getRelocationAfter","comment":"Returns the next relocation point which follows the specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"starting point","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.reloc.Relocation","comment":"next relocation after addr","type_short":"Relocation"}},{"javadoc":"Returns the number of relocation in this table.\n@return the number of relocation in this table","static":false,"name":"getSize","comment":"Returns the number of relocation in this table.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of relocation in this table","type_short":"int"}},{"javadoc":"Returns true if this relocation table contains relocations for a relocatable binary.\n Some binaries may contain relocations, but not actually be relocatable. For example, ELF executables.\n@return true if this relocation table contains relocations for a relocatable binary","static":false,"name":"isRelocatable","comment":"Returns true if this relocation table contains relocations for a relocatable binary.\n Some binaries may contain relocations, but not actually be relocatable. For example, ELF executables.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this relocation table contains relocations for a relocatable binary","type_short":"boolean"}}],"name":"RelocationTable","comment":"An interface for storing the relocations defined in a program.","fields":[{"type_long":"java.lang.String","javadoc":"Name of the relocatable property in the program information property list.","static":true,"name":"RELOCATABLE_PROP_NAME","comment":"Name of the relocatable property in the program information property list.","type_short":"String","constant_value":"\"Relocatable\""}]}
