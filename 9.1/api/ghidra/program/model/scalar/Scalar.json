{"implements":["java.lang.Comparable"],"javadoc":"<p>\n The Scalar defines a immutable fixed bit signed integer.\n Bit operations on a Scalar expect Scalar to act as a number in the\n two's complement format. Scalar was designed to be used as an\n offset (difference between two Addresses), an arithmetic operand,\n and also potentially for simulating registers.\n <\/p>\n\n <p>\n If an operation varies depending on whether the Scalar is\n treated as signed or unsigned, there are usally two version such as\n multiply and unsignedMultiply.  Please note that this means that\n the Comparable interface treats the number as signed.\n <\/p>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param bitLength number of bits\n@param value value of the scalar\n@param signed true for a signed value, false for an unsigned value.","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"int","name":"bitLength","comment":"number of bits","type_short":"int"},{"type_long":"long","name":"value","comment":"value of the scalar","type_short":"long"},{"type_long":"boolean","name":"signed","comment":"true for a signed value, false for an unsigned value.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if scalar was created as a signed value","static":false,"name":"isSigned","comment":"Returns true if scalar was created as a signed value","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Constructor a new signed scalar object.\n@param bitLength number of bits\n@param value value of the scalar","static":false,"name":"<init>","comment":"Constructor a new signed scalar object.","params":[{"type_long":"int","name":"bitLength","comment":"number of bits","type_short":"int"},{"type_long":"long","name":"value","comment":"value of the scalar","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the value as signed.","static":false,"name":"getSignedValue","comment":"Get the value as signed.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Get the value as unsigned.","static":false,"name":"getUnsignedValue","comment":"Get the value as unsigned.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the value as a signed value if it was created signed, otherwise the value is\n returned as an unsigned value","static":false,"name":"getValue","comment":"Returns the value as a signed value if it was created signed, otherwise the value is\n returned as an unsigned value","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the BigInteger representation of the value.","static":false,"name":"getBigInteger","comment":"Returns the BigInteger representation of the value.","params":[],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"<p>Creates a new Scalar of the same size as this scalar but with the\n given value\n@param newValue the Scalar value which will be used to initialize\n  the new Scalar.\n@return the new Scalar.","static":false,"name":"newScalar","comment":"Creates a new Scalar of the same size as this scalar but with the\n given value","params":[{"type_long":"long","name":"newValue","comment":"the Scalar value which will be used to initialize\n  the new Scalar.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"the new Scalar.","type_short":"Scalar"}},{"javadoc":"<p>Returns a byte array representing this Scalar.  The size of\n the byte array is the number of bytes required to hold the\n number of bits returned by <CODE>bitLength()<\/CODE>.<\/p>\n@return a big-endian byte array containing the bits in this Scalar.","static":false,"name":"byteArrayValue","comment":"Returns a byte array representing this Scalar.  The size of\n the byte array is the number of bytes required to hold the\n number of bits returned by bitLength().","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"a big-endian byte array containing the bits in this Scalar.","type_short":"byte[]"}},{"javadoc":"@see java.lang.Object#equals(java.lang.Object)","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see java.lang.Comparable#compareTo(java.lang.Object)","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.program.model.scalar.Scalar","name":"other","comment":"","type_short":"Scalar"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"<p>Adds the integer n to <tt>this<\/tt>.\n Computes (<tt>this = this + n<\/tt>).\n@param n the value to add to this scalars value to produce a new scalar.","static":false,"name":"add","comment":"Adds the integer n to this.\n Computes (this = this + n).","params":[{"type_long":"long","name":"n","comment":"the value to add to this scalars value to produce a new scalar.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>The size of this Scalar in bits.  This is constant for a\n Scalar.  It is not dependent on the particular value of the scalar.\n For example, a 16-bit Scalar should always return 16 regardless of the\n actual value held.<\/p>\n@return the width of this Scalar.","static":false,"name":"bitLength","comment":"The size of this Scalar in bits.  This is constant for a\n Scalar.  It is not dependent on the particular value of the scalar.\n For example, a 16-bit Scalar should always return 16 regardless of the\n actual value held.","params":[],"throws":[],"return":{"type_long":"int","comment":"the width of this Scalar.","type_short":"int"}},{"javadoc":"<p>The bit number n in this Scalar is set to zero.  Computes\n (this = this &amp; ~(1&lt;&lt;n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.<\/p>\n@param n the bit to clear in this scalar.\n@throws IndexOutOfBoundsException if n >= bitLength().","static":false,"name":"clearBit","comment":"The bit number n in this Scalar is set to zero.  Computes\n (this = this  ~(1n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.","params":[{"type_long":"int","name":"n","comment":"the bit to clear in this scalar.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>The bit number n in this Scalar is flipped.  Computes\n (this = this ^ (1&lt;&lt;n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.<\/p>\n@param n the bit to flip.\n@throws IndexOutOfBoundsException if n &gt;= bitLength().","static":false,"name":"flipBit","comment":"The bit number n in this Scalar is flipped.  Computes\n (this = this ^ (1n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.","params":[{"type_long":"int","name":"n","comment":"the bit to flip.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>The bit number n in this Scalar is set to one.  Computes\n (this = this | (1&lt;&lt;n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.<\/p>\n@param n the bit to set.\n@throws IndexOutOfBoundsException if n &gt;= bitLength().","static":false,"name":"setBit","comment":"The bit number n in this Scalar is set to one.  Computes\n (this = this | (1n)).  Bits are numbered 0..bitlength()-1\n with 0 being the least significant bit.","params":[{"type_long":"int","name":"n","comment":"the bit to set.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>Sets <tt>this = this &lt;&lt; n<\/tt>.<\/p>\n@param n the number of bits to shift left.\n@throws ArithmeticException if n &lt; 0.","static":false,"name":"shiftLeft","comment":"Sets this = this  n.","params":[{"type_long":"int","name":"n","comment":"the number of bits to shift left.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>Sets <tt>this = this &gt;&gt; n<\/tt> using 0 as the fill bit.<\/p>\n@param n the number of bits to shift right.\n@throws ArithmeticException if n &lt; 0.","static":false,"name":"shiftRight","comment":"Sets this = this  n using 0 as the fill bit.","params":[{"type_long":"int","name":"n","comment":"the number of bits to shift right.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>Sets <tt>this = this &gt;&gt; n<\/tt> replicating the sign bit.<\/p>\n@param n the number of bits to arithmetically shift.\n@throws ArithmeticException if n &lt; 0.","static":false,"name":"shiftRightSign","comment":"Sets this = this  n replicating the sign bit.","params":[{"type_long":"int","name":"n","comment":"the number of bits to arithmetically shift.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>Sets <tt>this = this - n<\/tt>.<\/p>\n@param n the value to subtract from this scalar to produce a new scalar.","static":false,"name":"subtract","comment":"Sets this = this - n.","params":[{"type_long":"long","name":"n","comment":"the value to subtract from this scalar to produce a new scalar.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.scalar.Scalar","comment":"","type_short":"Scalar"}},{"javadoc":"<p>Returns true if and only if the designated bit is set to one.\n Computes ((this &amp; (1&lt;&lt;n)) != 0).  Bits are numbered\n 0..bitlength()-1 with 0 being the least significant bit.<\/p>\n@param n the bit to test.\n@return true if and only if the designated bit is set to one.\n@throws IndexOutOfBoundsException if n &gt;= bitLength().","static":false,"name":"testBit","comment":"Returns true if and only if the designated bit is set to one.\n Computes ((this  (1n)) != 0).  Bits are numbered\n 0..bitlength()-1 with 0 being the least significant bit.","params":[{"type_long":"int","name":"n","comment":"the bit to test.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if and only if the designated bit is set to one.","type_short":"boolean"}},{"javadoc":"<p>Get a String representing this Scalar using the\n format defined by radix.<\/p>\n@param radix an integer base to use in representing the number\n  (only 2, 8, 10, 16 are valid).  If 10 is specified, all\n  remaining parameters are ignored.\n@param zeroPadded a boolean which if true will have the\n  number left padded with 0 to the width necessary to hold\n  the maximum value.\n@param showSign if true the '-' sign will be prepended for negative values, else\n value will be treated as an unsigned value and output without a sign.\n@param pre a String to append after the sign (if signed) but before\n  the digits.\n@param post a String to append after the digits.\n@return a String representation of this scalar.\n@throws IllegalArgumentException If radix is not valid.","static":false,"name":"toString","comment":"Get a String representing this Scalar using the\n format defined by radix.","params":[{"type_long":"int","name":"radix","comment":"an integer base to use in representing the number\n  (only 2, 8, 10, 16 are valid).  If 10 is specified, all\n  remaining parameters are ignored.","type_short":"int"},{"type_long":"boolean","name":"zeroPadded","comment":"a boolean which if true will have the\n  number left padded with 0 to the width necessary to hold\n  the maximum value.","type_short":"boolean"},{"type_long":"boolean","name":"showSign","comment":"if true the '-' sign will be prepended for negative values, else\n value will be treated as an unsigned value and output without a sign.","type_short":"boolean"},{"type_long":"java.lang.String","name":"pre","comment":"a String to append after the sign (if signed) but before\n  the digits.","type_short":"String"},{"type_long":"java.lang.String","name":"post","comment":"a String to append after the digits.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a String representation of this scalar.","type_short":"String"}},{"javadoc":"@see java.lang.Object#toString()","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDigits","comment":"","params":[{"type_long":"int","name":"radix","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"Scalar","comment":"\n The Scalar defines a immutable fixed bit signed integer.\n Bit operations on a Scalar expect Scalar to act as a number in the\n two's complement format. Scalar was designed to be used as an\n offset (difference between two Addresses), an arithmetic operand,\n and also potentially for simulating registers.\n \n\n \n If an operation varies depending on whether the Scalar is\n treated as signed or unsigned, there are usally two version such as\n multiply and unsignedMultiply.  Please note that this means that\n the Comparable interface treats the number as signed.\n ","fields":[{"type_long":"long[]","javadoc":"","static":true,"name":"BITMASKS","comment":"","type_short":"long[]","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"bitLength","comment":"","type_short":"byte","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"value","comment":"","type_short":"long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"signed","comment":"","type_short":"boolean","constant_value":null}]}
