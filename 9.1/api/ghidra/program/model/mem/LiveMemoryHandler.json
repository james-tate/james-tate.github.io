{"implements":[],"javadoc":"Live memory handler interface.","static":false,"methods":[{"javadoc":"Called when the memory map is re-initializing. Usually after an undo or redo.","static":false,"name":"clearCache","comment":"Called when the memory map is re-initializing. Usually after an undo or redo.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the byte at the given address.\n@param addr the address of the byte to be retrieved\n@return the byte at the given address.\n@throws MemoryAccessException if the byte can't be read.","static":false,"name":"getByte","comment":"Gets the byte at the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address of the byte to be retrieved","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the byte can't be read.","type_short":"MemoryAccessException"}],"return":{"type_long":"byte","comment":"the byte at the given address.","type_short":"byte"}},{"javadoc":"Get the bytes at the given address and size and put them into the destination buffer.\n@param address the address of the first byte to be retrieved.\n@param buffer the byte buffer in which to place the bytes.\n@param startIndex the starting index in the buffer to put the first byte.\n@param size the number of bytes to retrieve and put in the buffer.\n@return the number of bytes placed into the given buffer.\n@throws MemoryAccessException if the bytes can't be read.","static":false,"name":"getBytes","comment":"Get the bytes at the given address and size and put them into the destination buffer.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address of the first byte to be retrieved.","type_short":"Address"},{"type_long":"byte[]","name":"buffer","comment":"the byte buffer in which to place the bytes.","type_short":"byte[]"},{"type_long":"int","name":"startIndex","comment":"the starting index in the buffer to put the first byte.","type_short":"int"},{"type_long":"int","name":"size","comment":"the number of bytes to retrieve and put in the buffer.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the bytes can't be read.","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes placed into the given buffer.","type_short":"int"}},{"javadoc":"Writes the given byte value to the address in memory.\n@param address the address whose byte is to be updated to the new value.\n@param value the value to set at the given address.\n@throws MemoryAccessException if the value can not be written to the memory.","static":false,"name":"putByte","comment":"Writes the given byte value to the address in memory.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address whose byte is to be updated to the new value.","type_short":"Address"},{"type_long":"byte","name":"value","comment":"the value to set at the given address.","type_short":"byte"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the value can not be written to the memory.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes the given bytes to memory starting at the given address.\n@param address the address in memory to write the bytes.\n@param source the buffer containing the byte values to be written to memory.\n@param startIndex the starting index in the buffer to get byte values.\n@param size the number of bytes to write to memory.\n@return the number of bytes written to memory.\n@throws MemoryAccessException if the bytes can't be written to memory.","static":false,"name":"putBytes","comment":"Writes the given bytes to memory starting at the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address in memory to write the bytes.","type_short":"Address"},{"type_long":"byte[]","name":"source","comment":"the buffer containing the byte values to be written to memory.","type_short":"byte[]"},{"type_long":"int","name":"startIndex","comment":"the starting index in the buffer to get byte values.","type_short":"int"},{"type_long":"int","name":"size","comment":"the number of bytes to write to memory.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the bytes can't be written to memory.","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes written to memory.","type_short":"int"}},{"javadoc":"Adds a LiveMemoryListener to this handler.  The listener will be notified when memory\n bytes change.\n@param listener the listener to be notified of memory byte value changes.","static":false,"name":"addLiveMemoryListener","comment":"Adds a LiveMemoryListener to this handler.  The listener will be notified when memory\n bytes change.","params":[{"type_long":"ghidra.program.model.mem.LiveMemoryListener","name":"listener","comment":"the listener to be notified of memory byte value changes.","type_short":"LiveMemoryListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the LiveMemoryListener from this handler.\n@param listener the listener to be removed.","static":false,"name":"removeLiveMemoryListener","comment":"Removes the LiveMemoryListener from this handler.","params":[{"type_long":"ghidra.program.model.mem.LiveMemoryListener","name":"listener","comment":"the listener to be removed.","type_short":"LiveMemoryListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LiveMemoryHandler","comment":"Live memory handler interface.","fields":[]}
