{"implements":[],"javadoc":"Interface for managing references.","static":false,"methods":[{"javadoc":"Add a memory, stack, register or external reference\n@param reference","static":false,"name":"addReference","comment":"Add a memory, stack, register or external reference","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"reference","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Add a reference to a stack location. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr \"from\" address within a function\n@param opIndex operand index\n@param stackOffset stack offset of the reference\n@param type reference type - how the location is being referenced.\n@param source the source of this reference","static":false,"name":"addStackReference","comment":"Add a reference to a stack location. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"\"from\" address within a function","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"int","name":"stackOffset","comment":"stack offset of the reference","type_short":"int"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced.","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Add a reference to a register. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.\n@param fromAddr \"from\" address\n@param opIndex operand index\n@param register register to add the reference to\n@param type reference type - how the location is being referenced.\n@param source the source of this reference","static":false,"name":"addRegisterReference","comment":"Add a reference to a register. If a reference already\n exists for the fromAddr and opIndex, the existing reference is replaced\n with the new reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"\"from\" address","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"register to add the reference to","type_short":"Register"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced.","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Adds a memory reference.\n@param fromAddr address of the codeunit where the reference occurs\n@param toAddr address of the location being referenced.  \n Memory, stack, and register addresses are all permitted.\n@param type reference type - how the location is being referenced.\n@param source the source of this reference\n@param opIndex the operand index \n display of the operand making this reference","static":false,"name":"addMemoryReference","comment":"Adds a memory reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address of the codeunit where the reference occurs","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"address of the location being referenced.  \n Memory, stack, and register addresses are all permitted.","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced.","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"int","name":"opIndex","comment":"the operand index \n display of the operand making this reference","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Add an offset memory reference.\n@param fromAddr address for the \"from\"\n@param toAddr address of the \"to\"\n@param offset value added to a base address to get the toAddr\n@param type reference type - how the location is being referenced\n@param source the source of this reference\n@param opIndex the operand index","static":false,"name":"addOffsetMemReference","comment":"Add an offset memory reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address for the \"from\"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"address of the \"to\"","type_short":"Address"},{"type_long":"long","name":"offset","comment":"value added to a base address to get the toAddr","type_short":"long"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"int","name":"opIndex","comment":"the operand index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Add a shifted memory reference; the \"to\" address is computed as the value\n at the operand at opIndex shifted by some number of bits, specified in the \n shiftValue parameter.\n@param fromAddr address for the \"from\"\n@param toAddr computed as the value of the operand at opIndex shifted\n by the number of bits specified by shiftValue\n@param shiftValue\n@param type reference type - how the location is being referenced\n@param source the source of this reference\n@param opIndex the operand index","static":false,"name":"addShiftedMemReference","comment":"Add a shifted memory reference; the \"to\" address is computed as the value\n at the operand at opIndex shifted by some number of bits, specified in the \n shiftValue parameter.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address for the \"from\"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"computed as the value of the operand at opIndex shifted\n by the number of bits specified by shiftValue","type_short":"Address"},{"type_long":"int","name":"shiftValue","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"int","name":"opIndex","comment":"the operand index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Adds an external reference.\n@param fromAddr from address (source of the reference)\n@param libraryName name of external program\n@param extLabel label within the external program, may be null if extAddr is not null\n@param extAddr address within the external program, may be null\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@param opIndex operand index\n@throws InvalidInputException\n@throws DuplicateNameException","static":false,"name":"addExternalReference","comment":"Adds an external reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"from address (source of the reference)","type_short":"Address"},{"type_long":"java.lang.String","name":"libraryName","comment":"name of external program","type_short":"String"},{"type_long":"java.lang.String","name":"extLabel","comment":"label within the external program, may be null if extAddr is not null","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"extAddr","comment":"address within the external program, may be null","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced","type_short":"RefType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Adds an external reference.\n@param fromAddr from address (source of the reference)\n@param extNamespace external namespace containing the named external label.\n@param extLabel label within the external program, may be null if extAddr is not null\n@param extAddr address within the external program, may be null\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@param opIndex operand index\n@throws InvalidInputException\n@throws DuplicateNameException","static":false,"name":"addExternalReference","comment":"Adds an external reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"from address (source of the reference)","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"extNamespace","comment":"external namespace containing the named external label.","type_short":"Namespace"},{"type_long":"java.lang.String","name":"extLabel","comment":"label within the external program, may be null if extAddr is not null","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"extAddr","comment":"address within the external program, may be null","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced","type_short":"RefType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Adds an external reference.\n@param fromAddr from address (source of the reference)\n@param opIndex operand index\n@param location external location\n@param source the source of this reference\n@param type reference type - how the location is being referenced\n@return external reference\n@throws InvalidInputException","static":false,"name":"addExternalReference","comment":"Adds an external reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"from address (source of the reference)","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"},{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"location","comment":"external location","type_short":"ExternalLocation"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this reference","type_short":"SourceType"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"reference type - how the location is being referenced","type_short":"RefType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"external reference","type_short":"Reference"}},{"javadoc":"Removes all references where \"From address\" is in the given range.\n@param beginAddr the first address in the range.\n@param endAddr the last address in the range.","static":false,"name":"removeAllReferencesFrom","comment":"Removes all references where \"From address\" is in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"beginAddr","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"endAddr","comment":"the last address in the range.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove all stack, external, and memory references for the given\n from address.\n@param fromAddr the address of the codeunit from which to remove all references.","static":false,"name":"removeAllReferencesFrom","comment":"Remove all stack, external, and memory references for the given\n from address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address of the codeunit from which to remove all references.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns all references to the given variable.  Only data references to storage \n are considered.\n@param var variable to retrieve references to\n@return array of variable references, or zero length array if no\n references exist","static":false,"name":"getReferencesTo","comment":"Returns all references to the given variable.  Only data references to storage \n are considered.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"variable to retrieve references to","type_short":"Variable"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"array of variable references, or zero length array if no\n references exist","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Returns the referenced function variable.\n@param reference\n@return function variable or null if variable not found","static":false,"name":"getReferencedVariable","comment":"Returns the referenced function variable.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"reference","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"function variable or null if variable not found","type_short":"Variable"}},{"javadoc":"Set the given reference's primary attribute\n@param ref the reference to make primary.\n@param isPrimary true to make the reference primary, false to make it non-primary","static":false,"name":"setPrimary","comment":"Set the given reference's primary attribute","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference to make primary.","type_short":"Reference"},{"type_long":"boolean","name":"isPrimary","comment":"true to make the reference primary, false to make it non-primary","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return whether the given address has flow references from this address.\n@param addr the address to test for flow references.","static":false,"name":"hasFlowReferencesFrom","comment":"Return whether the given address has flow references from this address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to test for flow references.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the flow references from the given address.\n@param addr the address of the codeunit to get all flows from.","static":false,"name":"getFlowReferencesFrom","comment":"Get the flow references from the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address of the codeunit to get all flows from.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Returns an iterator over all external references","static":false,"name":"getExternalReferences","comment":"Returns an iterator over all external references","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ReferenceIterator","comment":"","type_short":"ReferenceIterator"}},{"javadoc":"Get an iterator over all references that have the given address as\n their \"To\" address.\n@param addr the address that all references in the iterator refer to.","static":false,"name":"getReferencesTo","comment":"Get an iterator over all references that have the given address as\n their \"To\" address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address that all references in the iterator refer to.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ReferenceIterator","comment":"","type_short":"ReferenceIterator"}},{"javadoc":"Get an iterator over references starting with the specified \n fromAddr.  A forward iterator is returned with references sorted on\n the from address.\n@param startAddr the first from address to consider.\n@return a forward memory reference iterator.","static":false,"name":"getReferenceIterator","comment":"Get an iterator over references starting with the specified \n fromAddr.  A forward iterator is returned with references sorted on\n the from address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the first from address to consider.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ReferenceIterator","comment":"a forward memory reference iterator.","type_short":"ReferenceIterator"}},{"javadoc":"Get the reference that has the given from and to address, and\n operand index.\n@param fromAddr the address of the codeunit making the reference.\n@param toAddr the address being referred to.\n@param opIndex the operand index.","static":false,"name":"getReference","comment":"Get the reference that has the given from and to address, and\n operand index.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address of the codeunit making the reference.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the address being referred to.","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"the operand index.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Get all references \"from\" the specified addr.\n@param addr address of code-unit making the references.\n@return array of all references \"from\" the specified addr.","static":false,"name":"getReferencesFrom","comment":"Get all references \"from\" the specified addr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address of code-unit making the references.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"array of all references \"from\" the specified addr.","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Returns all references \"from\" the given fromAddr and operand (specified by opIndex).\n@param fromAddr the from which to get references\n@param opIndex the operand from which to get references\n@return all references \"from\" the given fromAddr and operand.","static":false,"name":"getReferencesFrom","comment":"Returns all references \"from\" the given fromAddr and operand (specified by opIndex).","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the from which to get references","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"the operand from which to get references","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"all references \"from\" the given fromAddr and operand.","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Returns true if there are any memory references at the given\n address\/opIndex.  Keep in mind this is a rather inefficient \n method as it must examine all references from the specified \n fromAddr.\n@param fromAddr the address of the codeunit being tested\n@param opIndex the index of the operand being tested.","static":false,"name":"hasReferencesFrom","comment":"Returns true if there are any memory references at the given\n address\/opIndex.  Keep in mind this is a rather inefficient \n method as it must examine all references from the specified \n fromAddr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address of the codeunit being tested","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"the index of the operand being tested.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if there are any memory references at the given\n address.\n@param fromAddr the address of the codeunit being tested","static":false,"name":"hasReferencesFrom","comment":"Returns true if there are any memory references at the given\n address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address of the codeunit being tested","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the primary reference from the given address.\n@param addr from address\n@param opIndex operand index","static":false,"name":"getPrimaryReferenceFrom","comment":"Get the primary reference from the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"from address","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"operand index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Returns an iterator over addresses that are the \"From\" address in a\n reference\n@param startAddr address to position iterator.\n@param forward true means to iterate in the forward direction","static":false,"name":"getReferenceSourceIterator","comment":"Returns an iterator over addresses that are the \"From\" address in a\n reference","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"address to position iterator.","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"true means to iterate in the forward direction","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns an iterator over all addresses that are the \"From\" address in a\n reference, restricted by the given address set.\n@param addrSet the set of address to restrict the iterator.\n@param forward true means to iterate in the forward direction","static":false,"name":"getReferenceSourceIterator","comment":"Returns an iterator over all addresses that are the \"From\" address in a\n reference, restricted by the given address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"the set of address to restrict the iterator.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"true means to iterate in the forward direction","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns an iterator over all addresses that are the \"To\" address in a\n reference.\n@param startAddr start of iterator\n@param forward true means to iterate in the forward direction","static":false,"name":"getReferenceDestinationIterator","comment":"Returns an iterator over all addresses that are the \"To\" address in a\n reference.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"start of iterator","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"true means to iterate in the forward direction","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns an iterator over all addresses that are the \"To\" address in a\n memory reference, restricted by the given address set.\n@param addrSet the set of address to restrict the iterator.\n@param forward true means to iterate in the forward direction","static":false,"name":"getReferenceDestinationIterator","comment":"Returns an iterator over all addresses that are the \"To\" address in a\n memory reference, restricted by the given address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"the set of address to restrict the iterator.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"true means to iterate in the forward direction","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns the number of memory References to the specified\n <code>toAddr<\/code>\n@param toAddr the address being referenced","static":false,"name":"getReferenceCountTo","comment":"Returns the number of memory References to the specified\n toAddr","params":[{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the address being referenced","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of memory References from the specified\n <code>fromAddr<\/code>\n@param fromAddr the address of the codeunit making the reference.","static":false,"name":"getReferenceCountFrom","comment":"Returns the number of memory References from the specified\n fromAddr","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address of the codeunit making the reference.","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Return the number of references for \"to\" addresses.","static":false,"name":"getReferenceDestinationCount","comment":"Return the number of references for \"to\" addresses.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Return the number of references for \"from\" addresses.","static":false,"name":"getReferenceSourceCount","comment":"Return the number of references for \"from\" addresses.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Return true if a memory reference exists with the given \"to\" address.\n@param toAddr address being refered to.","static":false,"name":"hasReferencesTo","comment":"Return true if a memory reference exists with the given \"to\" address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"address being refered to.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Uodate the reference type on a memory reference.\n@param ref reference to be updated\n@param refType new reference type","static":false,"name":"updateRefType","comment":"Uodate the reference type on a memory reference.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"reference to be updated","type_short":"Reference"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"new reference type","type_short":"RefType"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Associates the given reference with the given symbol.\n@param s the symbol to associate with the given reference.\n@param ref the reference to associate with the given symbol\n@throws IllegalArgumentException If the given reference does not already\n exist or its \"To\" address\n is not the same as the symbol's address.","static":false,"name":"setAssociation","comment":"Associates the given reference with the given symbol.","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"s","comment":"the symbol to associate with the given reference.","type_short":"Symbol"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference to associate with the given symbol","type_short":"Reference"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes any symbol associations with the given reference.\n@param ref the reference for which any symbol association is to be removed.\n@throws IllegalArgumentException if the given references does not exist.","static":false,"name":"removeAssociation","comment":"Removes any symbol associations with the given reference.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference for which any symbol association is to be removed.","type_short":"Reference"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes the given reference object\n@param ref the reference to be deleted.","static":false,"name":"delete","comment":"Deletes the given reference object","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference to be deleted.","type_short":"Reference"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the reference level for the references to the given address\n@param toAddr the address at which to find the highest reference level","static":false,"name":"getReferenceLevel","comment":"Returns the reference level for the references to the given address","params":[{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the address at which to find the highest reference level","type_short":"Address"}],"throws":[],"return":{"type_long":"byte","comment":"","type_short":"byte"}}],"name":"ReferenceManager","comment":"Interface for managing references.","fields":[{"type_long":"int","javadoc":"Operand index which corresponds to the instruction\/data mnemonic.","static":true,"name":"MNEMONIC","comment":"Operand index which corresponds to the instruction\/data mnemonic.","type_short":"int","constant_value":"-1"}]}
