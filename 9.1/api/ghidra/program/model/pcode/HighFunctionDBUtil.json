{"implements":[],"javadoc":"<code>HighFunctionDBUtil<\/code> provides various methods for updating the state of a\n function contained within a program database.  It is important to note that the decompiler\n result state (e.g., HighFunction, HighParam, HighLocal, etc.) is not altered by any of\n these methods.  A new decompiler result will need to be generated to reflect any\n changes made to the database.  Care must be taken when making incremental changes\n to multiple elements (e.g., Variables)","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Commit function return to the underlying database.\n@param highFunction","static":true,"name":"commitReturnToDatabase","comment":"Commit function return to the underlying database.","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"","type_short":"HighFunction"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Commit all parameters associated with HighFunction to the underlying database.\n@param highFunction is the associated HighFunction\n@param useDataTypes is true if the HighFunction's parameter data-types should be committed\n@param source is the signature source type to set\n@throws DuplicateNameException if commit of parameters caused conflict with other\n local variable\/label.\n@throws InvalidInputException if specified storage is invalid","static":true,"name":"commitParamsToDatabase","comment":"Commit all parameters associated with HighFunction to the underlying database.","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"is the associated HighFunction","type_short":"HighFunction"},{"type_long":"boolean","name":"useDataTypes","comment":"is true if the HighFunction's parameter data-types should be committed","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"is the signature source type to set","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if commit of parameters caused conflict with other\n local variable\/label.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if specified storage is invalid","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getParameters","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"","type_short":"HighFunction"},{"type_long":"boolean","name":"useDataTypes","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"java.util.List<ghidra.program.model.listing.Parameter>","comment":"","type_short":"List"}},{"javadoc":"Commit the specified parameter list to the specified function.\n@param function\n@param params\n@param renameConflicts if true any name conflicts will be resolved\n by renaming the conflicting local variable\/label\n@param source source type\n@throws DuplicateNameException if commit of parameters caused conflict with other\n local variable\/label.  Should not occur if renameConflicts is true.\n@throws InvalidInputException","static":true,"name":"commitParamsToDatabase","comment":"Commit the specified parameter list to the specified function.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.pcode.FunctionPrototype","name":"prototype","comment":"","type_short":"FunctionPrototype"},{"type_long":"java.util.List<ghidra.program.model.listing.Parameter>","name":"params","comment":"","type_short":"List"},{"type_long":"boolean","name":"hasVarArgs","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"renameConflicts","comment":"if true any name conflicts will be resolved\n by renaming the conflicting local variable\/label","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"source type","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if commit of parameters caused conflict with other\n local variable\/label.  Should not occur if renameConflicts is true.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"changeConflictingSymbolNames","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.listing.Variable","name":"ignoreVariable","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Commit all local variables to the underlying database.\n@param highFunction\n@param source source type","static":true,"name":"commitLocalsToDatabase","comment":"Commit all local variables to the underlying database.","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"","type_short":"HighFunction"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"source type","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a local DB variable with a default name\n@param local\n@param dt data type or null to use local data type defined by local high variable\n@param storage storage or null to use storage defined by local high variable\n@param source\n@return \n@throws InvalidInputException\n@throws DuplicateNameException","static":true,"name":"createLocalVariable","comment":"Create a local DB variable with a default name","params":[{"type_long":"ghidra.program.model.pcode.HighLocal","name":"local","comment":"","type_short":"HighLocal"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"data type or null to use local data type defined by local high variable","type_short":"DataType"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"storage or null to use storage defined by local high variable","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"","static":true,"name":"clearObsoleteDynamicLocalsFromDatabase","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"","type_short":"HighFunction"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"isValidUniqueVariable","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunction","comment":"","type_short":"HighFunction"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Low-level routine for clearing any variables in the\n database which conflict with this variable and return\n one of them for re-use.  The returned variable still\n exists within the function at the same first-use-offset.\n@throws InvalidInputException\n@returns variable with conflicting storage or null, all\n aspects of variable returned should be reset (i.e., name, datatype and storage)","static":true,"name":"clearConflictingLocalVariables","comment":"Low-level routine for clearing any variables in the\n database which conflict with this variable and return\n one of them for re-use.  The returned variable still\n exists within the function at the same first-use-offset.","params":[{"type_long":"ghidra.program.model.pcode.HighLocal","name":"local","comment":"","type_short":"HighLocal"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"Get database parameter which corresponds to HighParam, where we anticipate that\n the parameter will be modified to match the HighParam. The entire prototype is\n committed to the database if necessary. An exception is thrown if a modifiable parameter\n can't be found\/created.\n@param param is the HighParam describing the desired function parameter\n@return the matching parameter that can be modified\n@throws InvalidInputException if the desired parameter cannot be modified","static":true,"name":"getDatabaseParameter","comment":"Get database parameter which corresponds to HighParam, where we anticipate that\n the parameter will be modified to match the HighParam. The entire prototype is\n committed to the database if necessary. An exception is thrown if a modifiable parameter\n can't be found\/created.","params":[{"type_long":"ghidra.program.model.pcode.HighParam","name":"param","comment":"is the HighParam describing the desired function parameter","type_short":"HighParam"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the desired parameter cannot be modified","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"the matching parameter that can be modified","type_short":"Parameter"}},{"javadoc":"Retype the specified variable in the database.  All parameters may be flushed\n to the database if typed parameter inconsistency detected.\n Only variable types HighParam, HighLocal and HighGlobal are supported.\n@param variable\n@param name new variable name or null to use retain current variable name\n@param dataType newly assigned data type or null to retain current variable datatype.\n Only a fixed-length data type may be specified.  If size varies from the current size,\n an attempt will be made to grow\/shrink the storage.\n@param source source type\n@throws InvalidInputException if suitable data type was not specified, or unable to\n resize storage, or invalid name specified\n@throws DuplicateNameException if name was specified and conflicts with another\n variable\/label within the function's namespace\n@throws UnsupportedOperationException if unsupported variable type is specified","static":true,"name":"updateDBVariable","comment":"Retype the specified variable in the database.  All parameters may be flushed\n to the database if typed parameter inconsistency detected.\n Only variable types HighParam, HighLocal and HighGlobal are supported.","params":[{"type_long":"ghidra.program.model.pcode.HighVariable","name":"variable","comment":"","type_short":"HighVariable"},{"type_long":"java.lang.String","name":"name","comment":"new variable name or null to use retain current variable name","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"newly assigned data type or null to retain current variable datatype.\n Only a fixed-length data type may be specified.  If size varies from the current size,\n an attempt will be made to grow\/shrink the storage.","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"source type","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if suitable data type was not specified, or unable to\n resize storage, or invalid name specified","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if name was specified and conflicts with another\n variable\/label within the function's namespace","type_short":"DuplicateNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"setGlobalName","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighGlobal","name":"global","comment":"","type_short":"HighGlobal"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"setGlobalDataType","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighGlobal","name":"global","comment":"","type_short":"HighGlobal"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"","type_short":"Data"}},{"javadoc":"Commit an override of a calls prototype to the database\n@param func is the Function whose call is being overriden\n@param callsite is the address of the call\n@param function signature override\n@throws InvalidInputException\n@throws DuplicateNameException","static":true,"name":"writeOverride","comment":"Commit an override of a calls prototype to the database","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"signature override","type_short":"Function"},{"type_long":"ghidra.program.model.address.Address","name":"callsite","comment":"is the address of the call","type_short":"Address"},{"type_long":"ghidra.program.model.listing.FunctionSignature","name":"sig","comment":"","type_short":"FunctionSignature"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read a call prototype override which corresponds to the specified override code symbol\n@param sym special call override code symbol whose address corresponds to a callsite\n@return call prototype override DataTypeSymbol or null if associated function signature\n datatype could not be found","static":true,"name":"readOverride","comment":"Read a call prototype override which corresponds to the specified override code symbol","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"sym","comment":"special call override code symbol whose address corresponds to a callsite","type_short":"Symbol"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.DataTypeSymbol","comment":"call prototype override DataTypeSymbol or null if associated function signature\n datatype could not be found","type_short":"DataTypeSymbol"}}],"name":"HighFunctionDBUtil","comment":"HighFunctionDBUtil provides various methods for updating the state of a\n function contained within a program database.  It is important to note that the decompiler\n result state (e.g., HighFunction, HighParam, HighLocal, etc.) is not altered by any of\n these methods.  A new decompiler result will need to be generated to reflect any\n changes made to the database.  Care must be taken when making incremental changes\n to multiple elements (e.g., Variables)","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"AUTO_CAT","comment":"","type_short":"String","constant_value":"\"\/auto_proto\""}]}
