{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"@throws IOException","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return int size of mask section in bytes","static":false,"name":"getMaskLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"int size of mask section in bytes","type_short":"int"}},{"javadoc":"","static":false,"name":"getSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getWidth","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getHeight","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getPlanes","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getBitCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getCompression","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the raw image data size as contained within this resource.  If compressed, \n this will be smaller than the value returned by {@link #getImageDataSize()} which reflects\n the uncompressed size.\n@return raw image data size","static":false,"name":"getRawSizeImage","comment":"Get the raw image data size as contained within this resource.  If compressed, \n this will be smaller than the value returned by #getImageDataSize() which reflects\n the uncompressed size.","params":[],"throws":[],"return":{"type_long":"int","comment":"raw image data size","type_short":"int"}},{"javadoc":"Returns the uncompressed image data size.  The default implementation will\n return the image data size specified by the header if non-zero, otherwize\n a computed data length will be returned based upon getHeight(), getWidth() and\n getBitCount().\n@return image data size","static":false,"name":"getImageDataSize","comment":"Returns the uncompressed image data size.  The default implementation will\n return the image data size specified by the header if non-zero, otherwize\n a computed data length will be returned based upon getHeight(), getWidth() and\n getBitCount().","params":[],"throws":[],"return":{"type_long":"int","comment":"image data size","type_short":"int"}},{"javadoc":"Compute the uncompressed image data size based upon getHeight(), getWidth() and\n getBitCount().\n@return computed image data size","static":false,"name":"getComputedUncompressedImageDataSize","comment":"Compute the uncompressed image data size based upon getHeight(), getWidth() and\n getBitCount().","params":[],"throws":[],"return":{"type_long":"int","comment":"computed image data size","type_short":"int"}},{"javadoc":"Compute the uncompressed image data size for a single line based upon getWidth() and\n getBitCount().\n@return computed image data size for single line","static":false,"name":"getBytesPerLine","comment":"Compute the uncompressed image data size for a single line based upon getWidth() and\n getBitCount().","params":[],"throws":[],"return":{"type_long":"int","comment":"computed image data size for single line","type_short":"int"}},{"javadoc":"","static":false,"name":"getXPelsPerMeter","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getYPelsPerMeter","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getClrUsed","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getClrImportant","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getPixelData","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"getRGBData","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"getColorMap","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"@return int","static":false,"name":"getColorMapLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"int","type_short":"int"}},{"javadoc":"@return DataImage","static":false,"name":"getDataImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@return DataImage","static":false,"name":"get32PlaneImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@return DataImage","static":false,"name":"get18PlaneImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@return DataImage","static":false,"name":"getEightPlaneImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@return DataImage","static":false,"name":"getFourPlaneImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@return DataImage","static":false,"name":"getOnePlaneImage","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataImage","comment":"DataImage","type_short":"DataImage"}},{"javadoc":"@param buf\n@param dbuf","static":false,"name":"getPixelData","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"byte[]","name":"dbuf","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Process compressed image data contained within the specified memory buffer.\n@param mem memory buffer positioned to start of compressed image data\n@param out optional decompressed image data output stream\n@return BitmapDecompressResult result of decompression processing where decompressedImageData\n will only be filled-in if returnDecompressedData is true;\n@throws MemoryAccessException if decompression fails due to memory constraint","static":false,"name":"decompress","comment":"Process compressed image data contained within the specified memory buffer.","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"boolean","name":"returnDecompressedData","comment":"","type_short":"boolean"},{"type_long":"int","name":"maxCompressedDataLength","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if decompression fails due to memory constraint","type_short":"MemoryAccessException"}],"return":{"type_long":"ghidra.program.model.data.BitmapResource.BitmapDecompressResult","comment":"BitmapDecompressResult result of decompression processing where decompressedImageData\n will only be filled-in if returnDecompressedData is true;","type_short":"BitmapDecompressResult"}}],"name":"BitmapResource","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"BOTTOM_UP","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"width","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"planes","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"bitCount","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"compression","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"xPelsPerMeter","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"yPelsPerMeter","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"clrUsed","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"clrImportant","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"sizeImage","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"rawSizeImage","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"imageDataOffset","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"height","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"rowOrder","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"BI_RGB","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"BI_RLE8","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"BI_RLE4","comment":"","type_short":"int","constant_value":"2"}]}
