{"implements":["java.lang.Comparable"],"javadoc":"A category path is the full path to a particular data type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Converts a non-escaped String into an escaped string suitable for being passed in as a\n component of a single category path string to the constructor that takes a single\n escaped category path string.  The user is responsible for constructing the single\n category path string from the escaped components.\n@param nonEscapedString String that might need escaping for characters used for delimiting\n@return escaped String\n@see #unescapeString(String)","static":true,"name":"escapeString","comment":"Converts a non-escaped String into an escaped string suitable for being passed in as a\n component of a single category path string to the constructor that takes a single\n escaped category path string.  The user is responsible for constructing the single\n category path string from the escaped components.","params":[{"type_long":"java.lang.String","name":"nonEscapedString","comment":"String that might need escaping for characters used for delimiting","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"escaped String","type_short":"String"}},{"javadoc":"Converts an escaped String suitable for being passed in as a component of a single category\n path string into an non-escaped string.\n@param escapedString String that might need unescaping for characters used for delimiting\n@return non-escaped String\n@see #escapeString(String)","static":true,"name":"unescapeString","comment":"Converts an escaped String suitable for being passed in as a component of a single category\n path string into an non-escaped string.","params":[{"type_long":"java.lang.String","name":"escapedString","comment":"String that might need unescaping for characters used for delimiting","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"non-escaped String","type_short":"String"}},{"javadoc":"Constructor for internal creation of ROOT.","static":false,"name":"<init>","comment":"Constructor for internal creation of ROOT.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a CategoryPath from a parent and a hierarchical array of strings where each\n string is the name of a category in the category path.\n@param parent the parent CategoryPath.  Choose {@code ROOT} if needed.\n@param subPathElements the array of names of sub-categories of the parent.\n@throws IllegalArgumentException if the given array is null or empty.","static":false,"name":"<init>","comment":"Construct a CategoryPath from a parent and a hierarchical array of strings where each\n string is the name of a category in the category path.","params":[{"type_long":"ghidra.program.model.data.CategoryPath","name":"parent","comment":"the parent CategoryPath.  Choose  if needed.","type_short":"CategoryPath"},{"type_long":"java.lang.String[]","name":"subPathElements","comment":"the array of names of sub-categories of the parent.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a CategoryPath from a parent and a hierarchical list of strings where each\n string is the name of a category in the category path.\n@param parent the parent CategoryPath.  Choose {@code ROOT} if needed.\n@param subPathElements the hierarchical array of sub-categories of the parent.\n@throws IllegalArgumentException if the given list is null or empty.","static":false,"name":"<init>","comment":"Construct a CategoryPath from a parent and a hierarchical list of strings where each\n string is the name of a category in the category path.","params":[{"type_long":"ghidra.program.model.data.CategoryPath","name":"parent","comment":"the parent CategoryPath.  Choose  if needed.","type_short":"CategoryPath"},{"type_long":"java.util.List<java.lang.String>","name":"subPathElements","comment":"the hierarchical array of sub-categories of the parent.","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a category path given a forward-slash-delimited string (e.g., {@code \"\/aa\/bb\"}).\n If an individual path component has one or more '\/' characters in it, then it can be\n <I><B>escaped<\/B><\/I> using the {@link #escapeString(String)} utility method.  The\n {@link #unescapeString(String)} method can be used to unescape an individual component.\n <P>\n <B>Refrain<\/B> from using this constructor in production code, and instead use one of the\n other constructors that does not require escaping.  Situations where using this constructor\n is OK is in simple cases where a literal is passed in, such as in testing methods or in\n scripts.\n@param path category path string, delimited with '\/' characters where individual components\n may have '\/' characters escaped.  Must start with the '\/' character.","static":false,"name":"<init>","comment":"Creates a category path given a forward-slash-delimited string (e.g., ).\n If an individual path component has one or more '\/' characters in it, then it can be\n escaped using the #escapeString(String) utility method.  The\n #unescapeString(String) method can be used to unescape an individual component.\n \n Refrain from using this constructor in production code, and instead use one of the\n other constructors that does not require escaping.  Situations where using this constructor\n is OK is in simple cases where a literal is passed in, such as in testing methods or in\n scripts.","params":[{"type_long":"java.lang.String","name":"path","comment":"category path string, delimited with '\/' characters where individual components\n may have '\/' characters escaped.  Must start with the '\/' character.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"endsWithNonEscapedDelimiter","comment":"","params":[{"type_long":"java.lang.String","name":"string","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"findIndexOfLastNonEscapedDelimiter","comment":"","params":[{"type_long":"java.lang.String","name":"string","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Determine if this category path corresponds to the root category\n@return true if this is a root category path","static":false,"name":"isRoot","comment":"Determine if this category path corresponds to the root category","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a root category path","type_short":"boolean"}},{"javadoc":"Return the parent category path.\n@return the parent","static":false,"name":"getParent","comment":"Return the parent category path.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.CategoryPath","comment":"the parent","type_short":"CategoryPath"}},{"javadoc":"Return the terminating name of this category path.\n@return the name","static":false,"name":"getName","comment":"Return the terminating name of this category path.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name","type_short":"String"}},{"javadoc":"Return the {@link String} representation of this category path including the category name,\n where components are delimited with a forward slash.  Any component that contains a forward\n slash will be have the forward slash characters escaped.\n@return the full category path","static":false,"name":"getPath","comment":"Return the String representation of this category path including the category name,\n where components are delimited with a forward slash.  Any component that contains a forward\n slash will be have the forward slash characters escaped.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the full category path","type_short":"String"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Tests if the specified categoryPath is the same as, or an ancestor of, this category path.\n@param candidateAncestorPath the category path to be checked.\n@return true if the given path is the same as, or an ancestor of, this category path.","static":false,"name":"isAncestorOrSelf","comment":"Tests if the specified categoryPath is the same as, or an ancestor of, this category path.","params":[{"type_long":"ghidra.program.model.data.CategoryPath","name":"candidateAncestorPath","comment":"the category path to be checked.","type_short":"CategoryPath"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given path is the same as, or an ancestor of, this category path.","type_short":"boolean"}},{"javadoc":"Returns array of names in category path.\n@return array of names","static":false,"name":"getPathElements","comment":"Returns array of names in category path.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"array of names","type_short":"java.lang.String[]"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.program.model.data.CategoryPath","name":"other","comment":"","type_short":"CategoryPath"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns a hierarchical list of names of the categories in the category path, starting with\n the name just below the {@code ROOT} category.\n@return a hierarchical list of names of the category in the category path.","static":false,"name":"asList","comment":"Returns a hierarchical list of names of the categories in the category path, starting with\n the name just below the  category.","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a hierarchical list of names of the category in the category path.","type_short":"List"}},{"javadoc":"Returns a hierarchical array of names of the categories in the category path, starting with\n the name just below the {@code ROOT} category.\n@return a hierarchical array of names of the categories in the category path.","static":false,"name":"asArray","comment":"Returns a hierarchical array of names of the categories in the category path, starting with\n the name just below the  category.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"a hierarchical array of names of the categories in the category path.","type_short":"java.lang.String[]"}}],"name":"CategoryPath","comment":"A category path is the full path to a particular data type","fields":[{"type_long":"char","javadoc":"","static":true,"name":"DELIMITER_CHAR","comment":"","type_short":"char","constant_value":"\/"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DELIMITER_STRING","comment":"","type_short":"String","constant_value":"\"\/\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ESCAPED_DELIMITER_STRING","comment":"","type_short":"String","constant_value":"\"\\\/\""},{"type_long":"ghidra.program.model.data.CategoryPath","javadoc":"","static":true,"name":"ROOT","comment":"","type_short":"CategoryPath","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ILLEGAL_STRING","comment":"","type_short":"String","constant_value":"\"\/\/\""},{"type_long":"int","javadoc":"","static":true,"name":"DIFF","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.data.CategoryPath","javadoc":"","static":false,"name":"parent","comment":"","type_short":"CategoryPath","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null}]}
