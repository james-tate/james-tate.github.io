{"implements":["ghidra.program.model.data.DataOrganization"],"javadoc":"DataOrganization provides a single place for determining size and alignment information \n for data types within an archive or a program.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.\n@return a new default DataOrganization.","static":true,"name":"getDefaultOrganization","comment":"Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataOrganization","comment":"a new default DataOrganization.","type_short":"DataOrganization"}},{"javadoc":"Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.\n@param language optional language used to initialize defaults (pointer size, endianess, etc.) (may be null)\n@return a new default DataOrganization.","static":true,"name":"getDefaultOrganization","comment":"Creates a new default DataOrganization. This has a mapping which defines the alignment\n of a data type based on its size. The map defines pairs for data types that are\n 1, 2, 4, and 8 bytes in length.","params":[{"type_long":"ghidra.program.model.lang.Language","name":"language","comment":"optional language used to initialize defaults (pointer size, endianess, etc.) (may be null)","type_short":"Language"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataOrganizationImpl","comment":"a new default DataOrganization.","type_short":"DataOrganizationImpl"}},{"javadoc":"Creates a new default DataOrganization with an empty size to alignment mapping.","static":false,"name":"<init>","comment":"Creates a new default DataOrganization with an empty size to alignment mapping.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBigEndian","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getPointerSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getPointerShift","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isSignedChar","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getCharSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getWideCharSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getShortSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getIntegerSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLongSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLongLongSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getFloatSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getDoubleSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLongDoubleSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getBitFieldPacking","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.BitFieldPacking","comment":"","type_short":"BitFieldPacking"}},{"javadoc":"Set data endianess\n@param bigEndian","static":false,"name":"setBigEndian","comment":"Set data endianess","params":[{"type_long":"boolean","name":"bigEndian","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a pointer data type.\n@param shortSize the size of a short.","static":false,"name":"setPointerSize","comment":"Defines the size of a pointer data type.","params":[{"type_long":"int","name":"pointerSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the left shift amount for a shifted pointer data type.\n Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.\n@param pointerShift left shift amount for in-memory pointer values","static":false,"name":"setPointerShift","comment":"Defines the left shift amount for a shifted pointer data type.\n Shift amount affects interpretation of in-memory pointer values only\n and will also be reflected within instruction pcode.","params":[{"type_long":"int","name":"pointerShift","comment":"left shift amount for in-memory pointer values","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the signed-ness of the \"char\" data type\n@param signed true if \"char\" type is signed","static":false,"name":"setCharIsSigned","comment":"Defines the signed-ness of the \"char\" data type","params":[{"type_long":"boolean","name":"signed","comment":"true if \"char\" type is signed","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a char (char) data type.\n@param wideCharSize the size of a char (char).","static":false,"name":"setCharSize","comment":"Defines the size of a char (char) data type.","params":[{"type_long":"int","name":"charSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a wide-char (wchar_t) data type.\n@param wideCharSize the size of a wide-char (wchar_t).","static":false,"name":"setWideCharSize","comment":"Defines the size of a wide-char (wchar_t) data type.","params":[{"type_long":"int","name":"wideCharSize","comment":"the size of a wide-char (wchar_t).","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a short primitive data type.\n@param shortSize the size of a short.","static":false,"name":"setShortSize","comment":"Defines the size of a short primitive data type.","params":[{"type_long":"int","name":"shortSize","comment":"the size of a short.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of an int primitive data type.\n@param integerSize the size of an int.","static":false,"name":"setIntegerSize","comment":"Defines the size of an int primitive data type.","params":[{"type_long":"int","name":"integerSize","comment":"the size of an int.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a long primitive data type.\n@param longSize the size of a long.","static":false,"name":"setLongSize","comment":"Defines the size of a long primitive data type.","params":[{"type_long":"int","name":"longSize","comment":"the size of a long.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a long long primitive data type.\n@param longLongSize the size of a long long.","static":false,"name":"setLongLongSize","comment":"Defines the size of a long long primitive data type.","params":[{"type_long":"int","name":"longLongSize","comment":"the size of a long long.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a float primitive data type.\n@param floatSize the size of a float.","static":false,"name":"setFloatSize","comment":"Defines the size of a float primitive data type.","params":[{"type_long":"int","name":"floatSize","comment":"the size of a float.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a double primitive data type.\n@param doubleSize the size of a double.","static":false,"name":"setDoubleSize","comment":"Defines the size of a double primitive data type.","params":[{"type_long":"int","name":"doubleSize","comment":"the size of a double.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Defines the size of a long double primitive data type.\n@param longDoubleSize the size of a long double.","static":false,"name":"setLongDoubleSize","comment":"Defines the size of a long double primitive data type.","params":[{"type_long":"int","name":"longDoubleSize","comment":"the size of a long double.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn't specifically limited.\n@return the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT","static":false,"name":"getAbsoluteMaxAlignment","comment":"Gets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn't specifically limited.","params":[],"throws":[],"return":{"type_long":"int","comment":"the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT","type_short":"int"}},{"javadoc":"Gets the maximum useful alignment for the target machine\n@return the machine alignment","static":false,"name":"getMachineAlignment","comment":"Gets the maximum useful alignment for the target machine","params":[],"throws":[],"return":{"type_long":"int","comment":"the machine alignment","type_short":"int"}},{"javadoc":"Gets the default alignment to be used for any data type that isn't a \n structure, union, array, pointer, type definition, and whose size isn't in the \n size\/alignment map.\n@return the default alignment to be used if no other alignment can be \n determined for a data type.","static":false,"name":"getDefaultAlignment","comment":"Gets the default alignment to be used for any data type that isn't a \n structure, union, array, pointer, type definition, and whose size isn't in the \n size\/alignment map.","params":[],"throws":[],"return":{"type_long":"int","comment":"the default alignment to be used if no other alignment can be \n determined for a data type.","type_short":"int"}},{"javadoc":"Gets the default alignment to be used for a pointer that doesn't have size.\n@return the default alignment for a pointer","static":false,"name":"getDefaultPointerAlignment","comment":"Gets the default alignment to be used for a pointer that doesn't have size.","params":[],"throws":[],"return":{"type_long":"int","comment":"the default alignment for a pointer","type_short":"int"}},{"javadoc":"Sets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn't specifically limited.\n@param absoluteMaxAlignment the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT","static":false,"name":"setAbsoluteMaxAlignment","comment":"Sets the maximum alignment value that is allowed by this data organization. When getting\n an alignment for any data type it will not exceed this value. If NO_MAXIMUM_ALIGNMENT\n is returned, the data organization isn't specifically limited.","params":[{"type_long":"int","name":"absoluteMaxAlignment","comment":"the absolute maximum alignment or NO_MAXIMUM_ALIGNMENT","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the maximum useful alignment for the target machine\n@param machineAlignment the machine alignment","static":false,"name":"setMachineAlignment","comment":"Sets the maximum useful alignment for the target machine","params":[{"type_long":"int","name":"machineAlignment","comment":"the machine alignment","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the default alignment to be used for any data type that isn't a \n structure, union, array, pointer, type definition, and whose size isn't in the \n size\/alignment map.\n@param defaultAlignment the default alignment to be used if no other alignment can be \n determined for a data type.","static":false,"name":"setDefaultAlignment","comment":"Sets the default alignment to be used for any data type that isn't a \n structure, union, array, pointer, type definition, and whose size isn't in the \n size\/alignment map.","params":[{"type_long":"int","name":"defaultAlignment","comment":"the default alignment to be used if no other alignment can be \n determined for a data type.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the default alignment to be used for a pointer that doesn't have size.\n@param defaultPointerAlignment the default alignment for a pointer","static":false,"name":"setDefaultPointerAlignment","comment":"Sets the default alignment to be used for a pointer that doesn't have size.","params":[{"type_long":"int","name":"defaultPointerAlignment","comment":"the default alignment for a pointer","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the alignment that is defined for a data type of the indicated size if one is defined.\n@param size the size of the data type\n@return the alignment of the data type.\n@throws NoValueException if there isn't an alignment defined for the indicated size.","static":false,"name":"getSizeAlignment","comment":"Gets the alignment that is defined for a data type of the indicated size if one is defined.","params":[{"type_long":"int","name":"size","comment":"the size of the data type","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.NoValueException","comment":"if there isn't an alignment defined for the indicated size.","type_short":"NoValueException"}],"return":{"type_long":"int","comment":"the alignment of the data type.","type_short":"int"}},{"javadoc":"Sets the alignment that is defined for a data type of the indicated size if one is defined.\n@param size the size of the data type\n@param alignment the alignment of the data type.","static":false,"name":"setSizeAlignment","comment":"Sets the alignment that is defined for a data type of the indicated size if one is defined.","params":[{"type_long":"int","name":"size","comment":"the size of the data type","type_short":"int"},{"type_long":"int","name":"alignment","comment":"the alignment of the data type.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the bitfield packing information associated with this data organization.\n@param bitFieldPacking bitfield packing information","static":false,"name":"setBitFieldPacking","comment":"Set the bitfield packing information associated with this data organization.","params":[{"type_long":"ghidra.program.model.data.BitFieldPacking","name":"bitFieldPacking","comment":"bitfield packing information","type_short":"BitFieldPacking"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove all entries from the size alignment map","static":false,"name":"clearSizeAlignmentMap","comment":"Remove all entries from the size alignment map","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the number of sizes that have an alignment specified.\n@return the number of sizes with an alignment mapped to them.","static":false,"name":"getSizeAlignmentCount","comment":"Gets the number of sizes that have an alignment specified.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of sizes with an alignment mapped to them.","type_short":"int"}},{"javadoc":"Gets the sizes that have an alignment specified.\n@return the sizes with alignments mapped to them.","static":false,"name":"getSizes","comment":"Gets the sizes that have an alignment specified.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"the sizes with alignments mapped to them.","type_short":"int[]"}},{"javadoc":"Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";\n@param size integer size\n@param signed if false the unsigned modifier will be prepended.\n@return the best fitting","static":false,"name":"getIntegerCTypeApproximation","comment":"Returns the best fitting integer C-type whose size is less-than-or-equal\n to the specified size.  \"long long\" will be returned for any size larger\n than \"long long\";","params":[{"type_long":"int","name":"size","comment":"integer size","type_short":"int"},{"type_long":"boolean","name":"signed","comment":"if false the unsigned modifier will be prepended.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the best fitting","type_short":"String"}},{"javadoc":"","static":false,"name":"getAlignment","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"int","name":"dtSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isForcingAlignment","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getForcedAlignment","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Determines the offset where the specified data type should be placed to be properly aligned.\n@param minimumOffset the minimum allowable offset where the data type can be placed.\n@param dataType the data type\n@param dtSize the data type's size\n@return the aligned offset for the data type","static":false,"name":"getAlignmentOffset","comment":"Determines the offset where the specified data type should be placed to be properly aligned.","params":[{"type_long":"int","name":"minimumOffset","comment":"the minimum allowable offset where the data type can be placed.","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the data type","type_short":"DataType"},{"type_long":"int","name":"dtSize","comment":"the data type's size","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the aligned offset for the data type","type_short":"int"}},{"javadoc":"Determines the first offset that is equal to or greater than the minimum offset which \n has the specified alignment.\n@param alignment the desired alignment\n@param minimumOffset the minimum offset\n@return the aligned offset","static":true,"name":"getOffset","comment":"Determines the first offset that is equal to or greater than the minimum offset which \n has the specified alignment.","params":[{"type_long":"int","name":"alignment","comment":"the desired alignment","type_short":"int"},{"type_long":"int","name":"minimumOffset","comment":"the minimum offset","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the aligned offset","type_short":"int"}},{"javadoc":"Determines the amount of padding that should be added to a structure at the indicated\n offset in order to get the next component (member) to be aligned with the specified \n alignment within the structure.\n@param alignment the desired alignment\n@param offset the offset that the padding would be placed at to achieve the desired alignment.\n@return the padding needed at the offset.","static":true,"name":"getPaddingSize","comment":"Determines the amount of padding that should be added to a structure at the indicated\n offset in order to get the next component (member) to be aligned with the specified \n alignment within the structure.","params":[{"type_long":"int","name":"alignment","comment":"the desired alignment","type_short":"int"},{"type_long":"int","name":"offset","comment":"the offset that the padding would be placed at to achieve the desired alignment.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the padding needed at the offset.","type_short":"int"}},{"javadoc":"Determines the least (lowest) common multiple of two numbers.\n@param value1 the first number\n@param value2 the second number\n@return the least common multiple","static":true,"name":"getLeastCommonMultiple","comment":"Determines the least (lowest) common multiple of two numbers.","params":[{"type_long":"int","name":"value1","comment":"the first number","type_short":"int"},{"type_long":"int","name":"value2","comment":"the second number","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the least common multiple","type_short":"int"}},{"javadoc":"Determines the greatest common denominator of two numbers.\n@param value1 the first number\n@param value2 the second number\n@return the greatest common denominator","static":true,"name":"getGreatestCommonDenominator","comment":"Determines the greatest common denominator of two numbers.","params":[{"type_long":"int","name":"value1","comment":"the first number","type_short":"int"},{"type_long":"int","name":"value2","comment":"the second number","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the greatest common denominator","type_short":"int"}}],"name":"DataOrganizationImpl","comment":"DataOrganization provides a single place for determining size and alignment information \n for data types within an archive or a program.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"absoluteMaxAlignment","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"machineAlignment","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"defaultAlignment","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"defaultPointerAlignment","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pointerShift","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pointerSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"charSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"wideCharSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"shortSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"integerSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"longSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"longLongSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"floatSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"doubleSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"longDoubleSize","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"bigEndian","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isSignedChar","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.data.BitFieldPacking","javadoc":"","static":false,"name":"bitFieldPacking","comment":"","type_short":"BitFieldPacking","constant_value":null},{"type_long":"ghidra.util.datastruct.IntIntHashtable","javadoc":"","static":false,"name":"sizeAlignmentMap","comment":"","type_short":"IntIntHashtable","constant_value":null}]}
