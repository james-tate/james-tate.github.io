{"implements":["ghidra.program.model.data.BitFieldPacking"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"useMSConvention","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isTypeAlignmentEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getZeroLengthBoundary","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.\n@param useMSConvention true if MSVC packing conventions are used, else false (e.g., GNU conventions apply).","static":false,"name":"setUseMSConvention","comment":"Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.","params":[{"type_long":"boolean","name":"useMSConvention","comment":"true if MSVC packing conventions are used, else false (e.g., GNU conventions apply).","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in gcc.\n@param typeAlignmentEnabled true if the alignment of the bit-field type should be used\n to impact the alignment of the containing structure, and ensure that individual bit-fields \n will not straddle an alignment boundary.","static":false,"name":"setTypeAlignmentEnabled","comment":"Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in gcc.","params":[{"type_long":"boolean","name":"typeAlignmentEnabled","comment":"true if the alignment of the bit-field type should be used\n to impact the alignment of the containing structure, and ensure that individual bit-fields \n will not straddle an alignment boundary.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Indicate a fixed alignment size in bytes which should be used for zero-length bit-fields.\n@param zeroLengthBoundary fixed alignment size as number of bytes for a bit-field \n which follows a zero-length bit-field.  A value of 0 causes zero-length type size to be used.","static":false,"name":"setZeroLengthBoundary","comment":"Indicate a fixed alignment size in bytes which should be used for zero-length bit-fields.","params":[{"type_long":"int","name":"zeroLengthBoundary","comment":"fixed alignment size as number of bytes for a bit-field \n which follows a zero-length bit-field.  A value of 0 causes zero-length type size to be used.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BitFieldPackingImpl","comment":"","fields":[{"type_long":"boolean","javadoc":"","static":false,"name":"useMSConvention","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"typeAlignmentEnabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"zeroLengthBoundary","comment":"","type_short":"int","constant_value":null}]}
