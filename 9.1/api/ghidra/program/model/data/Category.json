{"implements":["java.lang.Comparable"],"javadoc":"Each data type resides in a given a category.","static":false,"methods":[{"javadoc":"Get the name of this category.","static":false,"name":"getName","comment":"Get the name of this category.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Sets the name of this category.\n@param name the new name for this category\n@throws DuplicateNameException if another category exists in the same parent with the same name;\n@throws InvalidNameException if the name is not an acceptable name.","static":false,"name":"setName","comment":"Sets the name of this category.","params":[{"type_long":"java.lang.String","name":"name","comment":"the new name for this category","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another category exists in the same parent with the same name;","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.InvalidNameException","comment":"if the name is not an acceptable name.","type_short":"InvalidNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get all categories in this category.\n@return zero-length array if there are no categories","static":false,"name":"getCategories","comment":"Get all categories in this category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.Category[]","comment":"zero-length array if there are no categories","type_short":"ghidra.program.model.data.Category[]"}},{"javadoc":"Get all data types in this category.\n@return zero-length array if there are no data types","static":false,"name":"getDataTypes","comment":"Get all data types in this category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType[]","comment":"zero-length array if there are no data types","type_short":"ghidra.program.model.data.DataType[]"}},{"javadoc":"Adds the given datatype to this category.\n@param dt the datatype to add to this category.\n@param handler the DataTypeConflictHandler to use if conflicts are discovered.\n@return the new datatype with its category path adjusted.","static":false,"name":"addDataType","comment":"Adds the given datatype to this category.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"the datatype to add to this category.","type_short":"DataType"},{"type_long":"ghidra.program.model.data.DataTypeConflictHandler","name":"handler","comment":"the DataTypeConflictHandler to use if conflicts are discovered.","type_short":"DataTypeConflictHandler"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"the new datatype with its category path adjusted.","type_short":"DataType"}},{"javadoc":"Get a category with the given name.\n@param name the name of the category\n@return null if there is no category by this name","static":false,"name":"getCategory","comment":"Get a category with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the category","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Category","comment":"null if there is no category by this name","type_short":"Category"}},{"javadoc":"return the full CategoryPath for this category.\n@return the full CategoryPath for this category.","static":false,"name":"getCategoryPath","comment":"return the full CategoryPath for this category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.CategoryPath","comment":"the full CategoryPath for this category.","type_short":"CategoryPath"}},{"javadoc":"Get a data type with the given name.\n@param name the name of the data type\n@return null if there is no data type by this name","static":false,"name":"getDataType","comment":"Get a data type with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the data type","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"null if there is no data type by this name","type_short":"DataType"}},{"javadoc":"Create a category with the given name; if category already exists, then\n return that category.\n@param name the category name\n@throws InvalidNameException if name has invalid characters","static":false,"name":"createCategory","comment":"Create a category with the given name; if category already exists, then\n return that category.","params":[{"type_long":"java.lang.String","name":"name","comment":"the category name","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if name has invalid characters","type_short":"InvalidNameException"}],"return":{"type_long":"ghidra.program.model.data.Category","comment":"","type_short":"Category"}},{"javadoc":"Remove the named category from this category.\n@param name the name of the category to remove\n@param monitor the task monitor\n@return true if the category was removed","static":false,"name":"removeCategory","comment":"Remove the named category from this category.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the category to remove","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the category was removed","type_short":"boolean"}},{"javadoc":"Remove the named category from this category, IFF it is empty.\n@param name the name of the category to remove\n@param monitor the task monitor\n@return true if the category was removed","static":false,"name":"removeEmptyCategory","comment":"Remove the named category from this category, IFF it is empty.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the category to remove","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the category was removed","type_short":"boolean"}},{"javadoc":"Move the given category to this category; category is removed from\n its original parent category.\n@param category the category to move\n@throws DuplicateNameException if this category already contains a\n category or data type with the same name as the category param.","static":false,"name":"moveCategory","comment":"Move the given category to this category; category is removed from\n its original parent category.","params":[{"type_long":"ghidra.program.model.data.Category","name":"category","comment":"the category to move","type_short":"Category"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if this category already contains a\n category or data type with the same name as the category param.","type_short":"DuplicateNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Make a new subcategory from the given category.\n@param category the category to copy into this category\n@return category that is added to this category","static":false,"name":"copyCategory","comment":"Make a new subcategory from the given category.","params":[{"type_long":"ghidra.program.model.data.Category","name":"category","comment":"the category to copy into this category","type_short":"Category"},{"type_long":"ghidra.program.model.data.DataTypeConflictHandler","name":"handler","comment":"","type_short":"DataTypeConflictHandler"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Category","comment":"category that is added to this category","type_short":"Category"}},{"javadoc":"Return this category's parent; return null if this is the root category.","static":false,"name":"getParent","comment":"Return this category's parent; return null if this is the root category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.Category","comment":"","type_short":"Category"}},{"javadoc":"Returns true if this is the root category.\n@return true if this is the root category.","static":false,"name":"isRoot","comment":"Returns true if this is the root category.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is the root category.","type_short":"boolean"}},{"javadoc":"Get the fully qualified name for this category.","static":false,"name":"getCategoryPathName","comment":"Get the fully qualified name for this category.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the root category.","static":false,"name":"getRoot","comment":"Get the root category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.Category","comment":"","type_short":"Category"}},{"javadoc":"Get the data type manager associated with this category.","static":false,"name":"getDataTypeManager","comment":"Get the data type manager associated with this category.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeManager","comment":"","type_short":"DataTypeManager"}},{"javadoc":"Move a data type into this category\n@param type data type to be moved\n@param handler the handler to call if there is a data type conflict\n@throws DataTypeDependencyException","static":false,"name":"moveDataType","comment":"Move a data type into this category","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"data type to be moved","type_short":"DataType"},{"type_long":"ghidra.program.model.data.DataTypeConflictHandler","name":"handler","comment":"the handler to call if there is a data type conflict","type_short":"DataTypeConflictHandler"}],"throws":[{"type_long":"ghidra.program.model.data.DataTypeDependencyException","comment":"","type_short":"DataTypeDependencyException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a datatype from this category\n@param type data type to be removed\n@param monitor monitor of progress in case operation takes a long time.\n@return true if the data type was found in this category and successfully removed.","static":false,"name":"remove","comment":"Remove a datatype from this category","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"data type to be removed","type_short":"DataType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor of progress in case operation takes a long time.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the data type was found in this category and successfully removed.","type_short":"boolean"}},{"javadoc":"Get the ID for this category.","static":false,"name":"getID","comment":"Get the ID for this category.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}}],"name":"Category","comment":"Each data type resides in a given a category.","fields":[]}
