{"implements":[],"javadoc":"<CODE>ProgramMemoryUtil<\/CODE> contains some static methods for \n checking Memory block data.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copies the bytes to one program from another for the specified address \n range.\n@param toProgram program that the bytes are copied to.\n@param fromProgram program the bytes are copied from.\n@param minAddr the minimum address of the range to be copied.\n This address should be derived from the toProgram.\n@param maxAddr the maximum address of the range to be copied.\n This address should be derived from the toProgram.\n@throws MemoryAccessException if bytes can't be copied.","static":true,"name":"copyBytesInRanges","comment":"Copies the bytes to one program from another for the specified address \n range.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"toProgram","comment":"program that the bytes are copied to.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"fromProgram","comment":"program the bytes are copied from.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"minAddr","comment":"the minimum address of the range to be copied.\n This address should be derived from the toProgram.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddr","comment":"the maximum address of the range to be copied.\n This address should be derived from the toProgram.","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copies the bytes to one program from another for the specified set of\n address ranges.\n@param toProgram program that the bytes are copied to.\n@param fromProgram program the bytes are copied from.\n@param addrSet the set of address ranges to be copied.\n The addresses in this set are derived from the \"to program\".\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels copy bytes via the monitor.","static":true,"name":"copyBytesInRanges","comment":"Copies the bytes to one program from another for the specified set of\n address ranges.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"toProgram","comment":"program that the bytes are copied to.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"fromProgram","comment":"program the bytes are copied from.","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"the set of address ranges to be copied.\n The addresses in this set are derived from the \"to program\".","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels copy bytes via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copies the bytes to one program memory from another for the specified \n address range.\n@param toMem program memory that the bytes are copied to.\n@param fromMem program memory the bytes are copied from.\n@param range the address range to be copied.\n The addresses in this range are derived from the program associated with the \"to memory\".\n@throws MemoryAccessException if bytes can't be copied.","static":true,"name":"copyByteRange","comment":"Copies the bytes to one program memory from another for the specified \n address range.","params":[{"type_long":"ghidra.program.model.mem.Memory","name":"toMem","comment":"program memory that the bytes are copied to.","type_short":"Memory"},{"type_long":"ghidra.program.model.mem.Memory","name":"fromMem","comment":"program memory the bytes are copied from.","type_short":"Memory"},{"type_long":"ghidra.program.model.address.AddressRange","name":"range","comment":"the address range to be copied.\n The addresses in this range are derived from the program associated with the \"to memory\".","type_short":"AddressRange"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the program memory blocks of the indicated type for the \n specified program.\n@param program the program whose memory blocks we want.\n@param withBytes if true include blocks that have their own bytes. If false, include only\n blocks that don't have their own bytes (this includes bit and byte mapped blocks)\n@return an array of program memory blocks","static":true,"name":"getMemBlocks","comment":"Gets the program memory blocks of the indicated type for the \n specified program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory blocks we want.","type_short":"Program"},{"type_long":"boolean","name":"withBytes","comment":"if true include blocks that have their own bytes. If false, include only\n blocks that don't have their own bytes (this includes bit and byte mapped blocks)","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock[]","comment":"an array of program memory blocks","type_short":"ghidra.program.model.mem.MemoryBlock[]"}},{"javadoc":"Gets the address set for the specified program.\n@param program the program whose address set we want.\n@return the address set","static":true,"name":"getAddressSet","comment":"Gets the address set for the specified program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose address set we want.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set","type_short":"AddressSetView"}},{"javadoc":"Gets a new address set indicating all addresses of the indicated \n memory type in the specified program.\n@param program the program whose address set we want.\n@param blocksWithBytes if true, include memory blocks that have their own bytes.\n@return the memory's address set of the indicated type.","static":true,"name":"getAddressSet","comment":"Gets a new address set indicating all addresses of the indicated \n memory type in the specified program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose address set we want.","type_short":"Program"},{"type_long":"boolean","name":"blocksWithBytes","comment":"if true, include memory blocks that have their own bytes.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the memory's address set of the indicated type.","type_short":"AddressSet"}},{"javadoc":"Gets an address set with the overlay addresses that are in the specified program.\n@param program the program\n@return the overlay addresses within the specified program.","static":true,"name":"getOverlayAddresses","comment":"Gets an address set with the overlay addresses that are in the specified program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the overlay addresses within the specified program.","type_short":"AddressSet"}},{"javadoc":"Checks a programs memory for direct references to the addresses indicated in the toAddressSet.\n Direct references are only found at addresses that match the indicated alignment. Each\n direct reference is added to the directReferenceList as a from\/to address pair.\n@param program the program whose memory is to be checked.\n@param alignment direct references are to only be found at the indicated alignment in memory.\n@param toAddress address that we are interested in finding references to.\n@param toAddressSet address set indicating the addresses that we are interested in \n \t\t  finding directly referred to in memory. \n \t\t  Null if only interested in finding references to the toAddress.\n@param directReferenceList the list to be populated with possible direct references\n@param monitor a task monitor for progress or to allow cancelling.\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"loadDirectReferenceList","comment":"Checks a programs memory for direct references to the addresses indicated in the toAddressSet.\n Direct references are only found at addresses that match the indicated alignment. Each\n direct reference is added to the directReferenceList as a from\/to address pair.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"int","name":"alignment","comment":"direct references are to only be found at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"address that we are interested in finding references to.","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"toAddressSet","comment":"address set indicating the addresses that we are interested in \n \t\t  finding directly referred to in memory. \n \t\t  Null if only interested in finding references to the toAddress.","type_short":"AddressSetView"},{"type_long":"java.util.List<ghidra.app.plugin.core.analysis.ReferenceAddressPair>","name":"directReferenceList","comment":"the list to be populated with possible direct references","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow cancelling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks a programs memory for direct references to the addresses indicated in the toAddressSet.\n Direct references are only found at addresses that match the indicated alignment. Each\n direct reference is added to the directReferenceList as a from\/to address pair.\n@param program the program whose memory is to be checked.\n@param alignment direct references are to only be found at the indicated alignment in memory.\n@param toAddress address that we are interested in finding references to.\n@param toAddressSet address set indicating the addresses that we are interested in \n \t\t  finding directly referred to in memory. \n \t\t  Null if only interested in finding references to the toAddress.\n@param accumulator the datastructure to be populated with possible direct references\n@param monitor a task monitor for progress or to allow cancelling.\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"loadDirectReferenceList","comment":"Checks a programs memory for direct references to the addresses indicated in the toAddressSet.\n Direct references are only found at addresses that match the indicated alignment. Each\n direct reference is added to the directReferenceList as a from\/to address pair.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"int","name":"alignment","comment":"direct references are to only be found at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"address that we are interested in finding references to.","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"toAddressSet","comment":"address set indicating the addresses that we are interested in \n \t\t  finding directly referred to in memory. \n \t\t  Null if only interested in finding references to the toAddress.","type_short":"AddressSetView"},{"type_long":"ghidra.util.datastruct.Accumulator<ghidra.app.plugin.core.analysis.ReferenceAddressPair>","name":"accumulator","comment":"the datastructure to be populated with possible direct references","type_short":"Accumulator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow cancelling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks a programs memory for direct references to the CodeUnit indicated.\n Direct references are only found at addresses that match the indicated alignment.\n@param program the program whose memory is to be checked.\n@param alignment direct references are to only be found at the indicated alignment in memory.\n@param toAddressSet the set of addresses that we are interested in finding references to.\n@param directReferenceList the list to be populated with possible direct references\n@param monitor a task monitor for progress or to allow canceling.\n@return list of addresses referring directly to the toAddress\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"findDirectReferencesCodeUnit","comment":"Checks a programs memory for direct references to the CodeUnit indicated.\n Direct references are only found at addresses that match the indicated alignment.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"int","name":"alignment","comment":"direct references are to only be found at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow canceling.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.Address>","comment":"list of addresses referring directly to the toAddress","type_short":"List"}},{"javadoc":"Checks a programs memory for direct references to the address indicated.\n Direct references are only found at addresses that match the indicated alignment.\n@param program the program whose memory is to be checked.\n@param alignment direct references are to only be found at the indicated alignment in memory.\n@param toAddress address that we are interested in finding references to.\n@param monitor a task monitor for progress or to allow canceling.\n@return list of addresses referring directly to the toAddress\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"findDirectReferences","comment":"Checks a programs memory for direct references to the address indicated.\n Direct references are only found at addresses that match the indicated alignment.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"int","name":"alignment","comment":"direct references are to only be found at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"address that we are interested in finding references to.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow canceling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"java.util.Set<ghidra.program.model.address.Address>","comment":"list of addresses referring directly to the toAddress","type_short":"Set"}},{"javadoc":"Checks a programs memory for direct references to the address indicated within the \n listed memory blocks. If null is passed for the list of memory blocks then all of the\n program's memory blocks will be checked.<br>\n Direct references are only found at addresses that match the indicated alignment.\n@param program the program whose memory is to be checked.\n@param blocks the only memory blocks to be checked. A null value indicates all memory \n blocks should be checked.\n@param alignment direct references are to only be found at the indicated alignment in memory.\n@param toAddress address that we are interested in finding references to.\n@param monitor a task monitor for progress or to allow canceling.\n@return list of addresses referring directly to the toAddress\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"findDirectReferences","comment":"Checks a programs memory for direct references to the address indicated within the \n listed memory blocks. If null is passed for the list of memory blocks then all of the\n program's memory blocks will be checked.\n Direct references are only found at addresses that match the indicated alignment.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"java.util.List<ghidra.program.model.mem.MemoryBlock>","name":"blocks","comment":"the only memory blocks to be checked. A null value indicates all memory \n blocks should be checked.","type_short":"List"},{"type_long":"int","name":"alignment","comment":"direct references are to only be found at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"address that we are interested in finding references to.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow canceling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"java.util.Set<ghidra.program.model.address.Address>","comment":"list of addresses referring directly to the toAddress","type_short":"Set"}},{"javadoc":"Checks a programs memory for 32 bit image base offset references to the address \n indicated.  These relative references are only found at addresses that match the \n indicated alignment.\n@param program the program whose memory is to be checked.\n@param alignment 32 bit image base offset relative references are to only be found \n at the indicated alignment in memory.\n@param toAddress address that we are interested in finding references to.\n@param monitor a task monitor for progress or to allow canceling.\n@return list of addresses with 32 bit image base offset relative references to the \n toAddress\n@throws CancelledException if the user cancels via the monitor.","static":true,"name":"findImageBaseOffsets32","comment":"Checks a programs memory for 32 bit image base offset references to the address \n indicated.  These relative references are only found at addresses that match the \n indicated alignment.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose memory is to be checked.","type_short":"Program"},{"type_long":"int","name":"alignment","comment":"32 bit image base offset relative references are to only be found \n at the indicated alignment in memory.","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"toAddress","comment":"address that we are interested in finding references to.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor for progress or to allow canceling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"java.util.Set<ghidra.program.model.address.Address>","comment":"list of addresses with 32 bit image base offset relative references to the \n toAddress","type_short":"Set"}},{"javadoc":"","static":true,"name":"findBytePattern","comment":"","params":[{"type_long":"ghidra.program.model.mem.Memory","name":"memory","comment":"","type_short":"Memory"},{"type_long":"ghidra.program.model.address.AddressRange","name":"memoryRange","comment":"","type_short":"AddressRange"},{"type_long":"byte[]","name":"bytePattern","comment":"","type_short":"byte[]"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","name":"foundList","comment":"","type_short":"Set"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"findBytePattern","comment":"","params":[{"type_long":"ghidra.program.model.mem.Memory","name":"memory","comment":"","type_short":"Memory"},{"type_long":"java.util.List<ghidra.program.model.mem.MemoryBlock>","name":"blocks","comment":"","type_short":"List"},{"type_long":"byte[]","name":"bytePattern","comment":"","type_short":"byte[]"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","name":"foundList","comment":"","type_short":"Set"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Finds the string in memory indicated by the searchString limited to the indicated \n memory blocks and address set.\n@param searchString the string to find\n@param program the program to search\n@param blocks the only blocks to search\n@param set a set of the addresses to limit the results\n@param monitor a task monitor to allow\n@return a list of addresses where the string was found\n@throws CancelledException if the user cancels","static":true,"name":"findString","comment":"Finds the string in memory indicated by the searchString limited to the indicated \n memory blocks and address set.","params":[{"type_long":"java.lang.String","name":"searchString","comment":"the string to find","type_short":"String"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to search","type_short":"Program"},{"type_long":"java.util.List<ghidra.program.model.mem.MemoryBlock>","name":"blocks","comment":"the only blocks to search","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"a set of the addresses to limit the results","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor to allow","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.program.model.address.Address>","comment":"a list of addresses where the string was found","type_short":"List"}},{"javadoc":"Gets a list of memory blocks whose name starts with the indicated name. Only memory \n blocks that are initialized  and part of the indicated address set will be returned.\n@param program the program for obtaining the memory blocks\n@param set the address set to use to limit the blocks returned\n@param name the text which the memory block's name must start with.\n@param monitor a status monitor that allows the operation to be cancelled\n@return the list of memory blocks\n@throws CancelledException if the user cancels","static":true,"name":"getMemoryBlocksStartingWithName","comment":"Gets a list of memory blocks whose name starts with the indicated name. Only memory \n blocks that are initialized  and part of the indicated address set will be returned.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for obtaining the memory blocks","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to use to limit the blocks returned","type_short":"AddressSetView"},{"type_long":"java.lang.String","name":"name","comment":"the text which the memory block's name must start with.","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a status monitor that allows the operation to be cancelled","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.program.model.mem.MemoryBlock>","comment":"the list of memory blocks","type_short":"List"}}],"name":"ProgramMemoryUtil","comment":"ProgramMemoryUtil contains some static methods for \n checking Memory block data.","fields":[]}
