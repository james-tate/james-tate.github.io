{"implements":[],"javadoc":"<CODE>MultiCodeUnitIterator<\/CODE> is a class for iterating through multiple\n code unit iterators simultaneously. The next() method returns an array \n of code units, since a code unit can be obtained from neither, either, or\n both of the original code unit iterators.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor of a multi-code unit iterator.\n@param listings an array of the program listings whose code units are to be iterated.\n@param addr the address where the iterator should start.\n@param forward true indicates a forward iterator.  false indicates a backwards iterator.","static":false,"name":"<init>","comment":"Constructor of a multi-code unit iterator.","params":[{"type_long":"ghidra.program.model.listing.Listing[]","name":"listings","comment":"an array of the program listings whose code units are to be iterated.","type_short":"ghidra.program.model.listing.Listing[]"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address where the iterator should start.","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"true indicates a forward iterator.  false indicates a backwards iterator.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor of a multi-code unit iterator.\n@param listings an array of the program listings whose code units are to be iterated.\n@param addrs the address set over which the code units should be iterated.\n@param forward true indicates a forward iterator.  false indicates a backwards iterator.","static":false,"name":"<init>","comment":"Constructor of a multi-code unit iterator.","params":[{"type_long":"ghidra.program.model.listing.Listing[]","name":"listings","comment":"an array of the program listings whose code units are to be iterated.","type_short":"ghidra.program.model.listing.Listing[]"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the address set over which the code units should be iterated.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"true indicates a forward iterator.  false indicates a backwards iterator.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines whether or not any of the iterators have a\n  next code unit.\n@return true if the next code unit can be obtained from any of\n the code unit iterators.","static":false,"name":"hasNext","comment":"Determines whether or not any of the iterators have a\n  next code unit.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the next code unit can be obtained from any of\n the code unit iterators.","type_short":"boolean"}},{"javadoc":"Returns the next code unit(s). The next code unit could be from any one \n or more of the iterators. The array returns a code unit for each listing\n that has a code unit with a minimum address at the next iterator address.\n The code units in the array match up to the listings in the array passed \n to this classes constructor. The code unit will be null in the array if\n no code unit started at the next code unit address for that listing.\n@return an array with the next code unit(s).","static":false,"name":"next","comment":"Returns the next code unit(s). The next code unit could be from any one \n or more of the iterators. The array returns a code unit for each listing\n that has a code unit with a minimum address at the next iterator address.\n The code units in the array match up to the listings in the array passed \n to this classes constructor. The code unit will be null in the array if\n no code unit started at the next code unit address for that listing.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnit[]","comment":"an array with the next code unit(s).","type_short":"ghidra.program.model.listing.CodeUnit[]"}},{"javadoc":"Determines whether the first code unit's minimum address is less \n  than, equal to, or greater than the second's.\n@param cu1 the first code unit.\n@param cu2 the second code unit.\n@return -1 if less than, 0 if equal to, or 1 if greater than.","static":false,"name":"compareAddress","comment":"Determines whether the first code unit's minimum address is less \n  than, equal to, or greater than the second's.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu1","comment":"the first code unit.","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu2","comment":"the second code unit.","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"int","comment":"-1 if less than, 0 if equal to, or 1 if greater than.","type_short":"int"}}],"name":"MultiCodeUnitIterator","comment":"MultiCodeUnitIterator is a class for iterating through multiple\n code unit iterators simultaneously. The next() method returns an array \n of code units, since a code unit can be obtained from neither, either, or\n both of the original code unit iterators.","fields":[{"type_long":"ghidra.program.model.listing.CodeUnitIterator[]","javadoc":"the code unit iterators","static":false,"name":"iter","comment":"the code unit iterators","type_short":"ghidra.program.model.listing.CodeUnitIterator[]","constant_value":null},{"type_long":"ghidra.program.model.listing.CodeUnit[]","javadoc":"the current code units","static":false,"name":"cu","comment":"the current code units","type_short":"ghidra.program.model.listing.CodeUnit[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forward","comment":"","type_short":"boolean","constant_value":null}]}
