{"implements":[],"javadoc":"The <CODE>DiffUtility<\/CODE> class provides static methods for getting and\n creating an object in one program based on an object from another program.","static":false,"extends":"ghidra.program.util.SimpleDiffUtility","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines the memory address in the other program that is compatible with the \n specified address.\n@param memoryAddress the memory address to be converted\n@param otherProgram target program which corresponds to the returned address.\n@return the memory address derived from the other program or null if one cannot\n be determined.","static":true,"name":"getCompatibleMemoryAddress","comment":"Determines the memory address in the other program that is compatible with the \n specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"memoryAddress","comment":"the memory address to be converted","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"target program which corresponds to the returned address.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the memory address derived from the other program or null if one cannot\n be determined.","type_short":"Address"}},{"javadoc":"Convert an address-set from one program to a compatible address-set in the \n specified otherProgram.  Those regions which can not be mapped will be eliminated \n from the new address-set.  Only memory addresses will be considered.\n@param set address-set corresponding to program\n@param otherProgram target program which corresponds to the returned address set.\n@return translated address-set","static":true,"name":"getCompatibleAddressSet","comment":"Convert an address-set from one program to a compatible address-set in the \n specified otherProgram.  Those regions which can not be mapped will be eliminated \n from the new address-set.  Only memory addresses will be considered.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"address-set corresponding to program","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"target program which corresponds to the returned address set.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"translated address-set","type_short":"AddressSet"}},{"javadoc":"Reduce an address-set from one program to the set of addresses that are incompatible with\n the specified otherProgram.\n@param set address-set corresponding to one program\n@param otherProgram the addresses are incompatible with this other program.\n@return incompatible address-set","static":true,"name":"getNonCompatibleAddressSet","comment":"Reduce an address-set from one program to the set of addresses that are incompatible with\n the specified otherProgram.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"address-set corresponding to one program","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"the addresses are incompatible with this other program.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"incompatible address-set","type_short":"AddressSet"}},{"javadoc":"Convert an address range from one program to a compatible address range in the \n specified otherProgram.  Only memory addresses will be considered.\n If the entire range cannot be converted then null is returned.\n@param range address range to convert\n@param otherProgram target program which corresponds to the returned address range.\n@return translated address range or null if a compatible range could not be \n determined in the other program.","static":true,"name":"getCompatibleAddressRange","comment":"Convert an address range from one program to a compatible address range in the \n specified otherProgram.  Only memory addresses will be considered.\n If the entire range cannot be converted then null is returned.","params":[{"type_long":"ghidra.program.model.address.AddressRange","name":"range","comment":"address range to convert","type_short":"AddressRange"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"target program which corresponds to the returned address range.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"translated address range or null if a compatible range could not be \n determined in the other program.","type_short":"AddressRange"}},{"javadoc":"Compare any two addresses from two different programs.\n@param program1\n@param addr1\n@param program2\n@param addr2\n@return ","static":true,"name":"compare","comment":"Compare any two addresses from two different programs.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Given a namespace, get the corresponding namespace from the \n specified otherProgram.  The return namespace body may be different.\n@param namespace namespace to look for\n@param otherProgram other program\n@return corresponding namespace for otherProgram or null if no such namespace exists.","static":true,"name":"getNamespace","comment":"Given a namespace, get the corresponding namespace from the \n specified otherProgram.  The return namespace body may be different.","params":[{"type_long":"ghidra.program.model.symbol.Namespace","name":"namespace","comment":"namespace to look for","type_short":"Namespace"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"corresponding namespace for otherProgram or null if no such namespace exists.","type_short":"Namespace"}},{"javadoc":"Given a namespace, create the corresponding namespace in the \n specified otherProgram. If a corresponding namespace already exists, it is returned.\n The return namespace body may be different.\n@param program program which contains the specified namespace instance\n@param namespace namespace to look for\n@param otherProgram other program\n@return corresponding namespace for otherProgram or null if no such namespace exists.\n@throws InvalidInputException if the namespace's name or path is not valid.\n@throws DuplicateNameException if the namespace's name or path cannot be created\n due to a conflict with another namespace or symbol.","static":true,"name":"createNamespace","comment":"Given a namespace, create the corresponding namespace in the \n specified otherProgram. If a corresponding namespace already exists, it is returned.\n The return namespace body may be different.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which contains the specified namespace instance","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"namespace","comment":"namespace to look for","type_short":"Namespace"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the namespace's name or path is not valid.","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if the namespace's name or path cannot be created\n due to a conflict with another namespace or symbol.","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"corresponding namespace for otherProgram or null if no such namespace exists.","type_short":"Namespace"}},{"javadoc":"Determine if the specified variables have overlapping storage.\n Variable storage check includes dynamically mapped storage for parameters.  This method\n should not be used with caution if both arguments are parameters which use dynamically \n mapped storage.\n@param var1\n@param var2\n@return true if variables overlap, else false","static":true,"name":"variableStorageOverlaps","comment":"Determine if the specified variables have overlapping storage.\n Variable storage check includes dynamically mapped storage for parameters.  This method\n should not be used with caution if both arguments are parameters which use dynamically \n mapped storage.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if variables overlap, else false","type_short":"boolean"}},{"javadoc":"Determine if the specified variables have exactly the same storage.  This method\n should not be used with caution if both arguments are parameters which use dynamically \n mapped storage.\n@param var1\n@param var2\n@return true if variables have matching storage, else false","static":true,"name":"variableStorageMatches","comment":"Determine if the specified variables have exactly the same storage.  This method\n should not be used with caution if both arguments are parameters which use dynamically \n mapped storage.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if variables have matching storage, else false","type_short":"boolean"}},{"javadoc":"Given a function, get the corresponding function from the \n specified otherProgram.  Function matchup is done based upon \n function entry point only.  The function bodies may be different.\n@param function function to look for\n@param otherProgram other program\n@return corresponding function for otherProgram or null if no such function exists.","static":true,"name":"getFunction","comment":"Given a function, get the corresponding function from the \n specified otherProgram.  Function matchup is done based upon \n function entry point only.  The function bodies may be different.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"function to look for","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"corresponding function for otherProgram or null if no such function exists.","type_short":"Function"}},{"javadoc":"Given a reference for a specified program, get the corresponding reference from the \n specified otherProgram.  A Non-memory reference is considered a suitable reference\n for returning if its destination address is from the same address space (i.e., stack, \n register, etc.)\n@param program program which contains the specified reference instance\n@param ref reference to look for\n@param otherProgram other program\n@return corresponding reference for otherProgram or null if no such reference exists.","static":true,"name":"getReference","comment":"Given a reference for a specified program, get the corresponding reference from the \n specified otherProgram.  A Non-memory reference is considered a suitable reference\n for returning if its destination address is from the same address space (i.e., stack, \n register, etc.)","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which contains the specified reference instance","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"reference to look for","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"corresponding reference for otherProgram or null if no such reference exists.","type_short":"Reference"}},{"javadoc":"@param p2ToP1Translator\n@param p2Ref\n@return ","static":true,"name":"getReference","comment":"","params":[{"type_long":"ghidra.program.util.AddressTranslator","name":"p2ToP1Translator","comment":"","type_short":"AddressTranslator"},{"type_long":"ghidra.program.model.symbol.Reference","name":"p2Ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"Create equivalent external location in otherProgram.\n@param program program containing extLoc\n@param extLoc existing external location to be copied\n@param otherProgram target program\n@return new external location\n@throws InvalidInputException","static":true,"name":"createExtLocation","comment":"Create equivalent external location in otherProgram.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program containing extLoc","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"extLoc","comment":"existing external location to be copied","type_short":"ExternalLocation"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"target program","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.symbol.ExternalLocation","comment":"new external location","type_short":"ExternalLocation"}},{"javadoc":"Given a reference for a specified program, create a comparable reference in the \n specified otherProgram if possible. An open transaction on otherProgram must exist.\n@param program program which contains the specified reference instance\n@param ref reference to be added\n@param otherProgram other program\n@return new reference for otherProgram or null if unable to create reference.","static":true,"name":"createReference","comment":"Given a reference for a specified program, create a comparable reference in the \n specified otherProgram if possible. An open transaction on otherProgram must exist.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which contains the specified reference instance","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"reference to be added","type_short":"Reference"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"new reference for otherProgram or null if unable to create reference.","type_short":"Reference"}},{"javadoc":"Given a variable for a specified program, get the corresponding variable from the \n specified otherProgram.\n@param program program which contains the specified variable instance\n@param var variable to look for\n@param otherProgram other program\n@return corresponding variable for otherProgram or null if no such variable exists.","static":true,"name":"getVariable","comment":"Given a variable for a specified program, get the corresponding variable from the \n specified otherProgram.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which contains the specified variable instance","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"variable to look for","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"corresponding variable for otherProgram or null if no such variable exists.","type_short":"Variable"}},{"javadoc":"Given a variable, get the corresponding variable from the \n specified otherFunction.\n@param var variable to look for\n@param otherFunction other function\n@return corresponding variable for otherFunction or null if no such variable exists.","static":true,"name":"getVariable","comment":"Given a variable, get the corresponding variable from the \n specified otherFunction.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"variable to look for","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Function","name":"otherFunction","comment":"other function","type_short":"Function"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"corresponding variable for otherFunction or null if no such variable exists.","type_short":"Variable"}},{"javadoc":"Given a variable for a specified program, create a comparable variable in the \n specified otherProgram if possible. An open transaction on otherProgram must exist.\n@param program program which contains the specified variable instance\n@param var variable to be added from program to otherProgram.\n@param otherProgram other program\n@return new variable for otherProgram or null if unable to create variable.\n@throws DuplicateNameException if another variable already exists with \n the same name as var in the resulting function.\n@throws InvalidInputException if data type is not a fixed length or variable name is invalid, etc.\n@throws VariableSizeException if data type size is too large based upon storage constraints.","static":true,"name":"createVariable","comment":"Given a variable for a specified program, create a comparable variable in the \n specified otherProgram if possible. An open transaction on otherProgram must exist.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which contains the specified variable instance","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"variable to be added from program to otherProgram.","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"other program","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable already exists with \n the same name as var in the resulting function.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or variable name is invalid, etc.","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"new variable for otherProgram or null if unable to create variable.","type_short":"Variable"}},{"javadoc":"Creates an address set that contains the entire code units within the\n  program's listing that are part of the address set that is passed in.\n <br>Note: This method will not remove any addresses from the address set even\n if they are not part of code units in the program's listing.\n@param addrSet The original address set that may contain portions of\n code units.\n@param program the program which has the code units.\n@return the address set that contains addresses for whole code units.","static":true,"name":"getCodeUnitSet","comment":"Creates an address set that contains the entire code units within the\n  program's listing that are part of the address set that is passed in.\n Note: This method will not remove any addresses from the address set even\n if they are not part of code units in the program's listing.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"The original address set that may contain portions of\n code units.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program which has the code units.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the address set that contains addresses for whole code units.","type_short":"AddressSet"}},{"javadoc":"Returns the signed hex string representing the int value. \n Positive values are represented beginning with 0x. (i.e. value of 12 would be 0xc)\n Negative values are represented beginning with -0x. (i.e. value of -12 would be -0xc)\n@param value the value\n@return the signed hex string","static":true,"name":"toSignedHexString","comment":"Returns the signed hex string representing the int value. \n Positive values are represented beginning with 0x. (i.e. value of 12 would be 0xc)\n Negative values are represented beginning with -0x. (i.e. value of -12 would be -0xc)","params":[{"type_long":"int","name":"value","comment":"the value","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the signed hex string","type_short":"String"}},{"javadoc":"Returns the signed hex string representing the long value. \n Positive values are represented beginning with 0x. (i.e. value of 12 would be 0xc)\n Negative values are represented beginning with -0x. (i.e. value of -12 would be -0xc)\n@param value the value\n@return the signed hex string","static":true,"name":"toSignedHexString","comment":"Returns the signed hex string representing the long value. \n Positive values are represented beginning with 0x. (i.e. value of 12 would be 0xc)\n Negative values are represented beginning with -0x. (i.e. value of -12 would be -0xc)","params":[{"type_long":"long","name":"value","comment":"the value","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the signed hex string","type_short":"String"}},{"javadoc":"Returns the string representation of the specified reference's \"to\" address.\n@param program the program containing the reference\n@param ref the reference\n@return the \"to\" address for the reference as a meaningful address for the user.","static":true,"name":"getUserToAddressString","comment":"Returns the string representation of the specified reference's \"to\" address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program containing the reference","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the \"to\" address for the reference as a meaningful address for the user.","type_short":"String"}},{"javadoc":"Returns a string representation of the specified address.\n@param program the program containing the address\n@param address the address\n@return the address as a meaningful string for the user.","static":true,"name":"getUserToAddressString","comment":"Returns a string representation of the specified address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program containing the address","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the address as a meaningful string for the user.","type_short":"String"}},{"javadoc":"Returns the string representation of the specified reference's \"to\" symbol.\n@param program the program containing the reference\n@param ref the reference\n@return the \"to\" symbol for the reference as a meaningful string for the user. \n The empty string, \"\", is returned if the reference isn't to a symbol.","static":true,"name":"getUserToSymbolString","comment":"Returns the string representation of the specified reference's \"to\" symbol.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program containing the reference","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"the reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the \"to\" symbol for the reference as a meaningful string for the user. \n The empty string, \"\", is returned if the reference isn't to a symbol.","type_short":"String"}},{"javadoc":"","static":true,"name":"getCompatibleProgramLocation","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.util.ProgramLocation","name":"location","comment":"","type_short":"ProgramLocation"},{"type_long":"ghidra.program.model.listing.Program","name":"otherProgram","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramLocation","comment":"","type_short":"ProgramLocation"}}],"name":"DiffUtility","comment":"The DiffUtility class provides static methods for getting and\n creating an object in one program based on an object from another program.","fields":[]}
