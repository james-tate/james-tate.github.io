{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDebug","comment":"","params":[{"type_long":"boolean","name":"debug","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"set up a pointer mask to be used when creating pointers into this memory","static":false,"name":"setPointerMask","comment":"set up a pointer mask to be used when creating pointers into this memory","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Identify EXTERNAL block range which should not be disassembled.\n@param program\n@return EXTERNAL block range or null if not found","static":false,"name":"setExternalRange","comment":"Identify EXTERNAL block range which should not be disassembled.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"EXTERNAL block range or null if not found","type_short":"void"}},{"javadoc":"Process a subroutine using the processor function.\n The process function can control what flows are followed and when to stop.\n@param entryPoint start address\n@param processor processor to use\n@return the address set of instructions that were followed\n@throws CancelledException","static":false,"name":"flowConstants","comment":"Process a subroutine using the processor function.\n The process function can control what flows are followed and when to stop.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ContextEvaluator","name":"eval","comment":"","type_short":"ContextEvaluator"},{"type_long":"boolean","name":"saveContext","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the address set of instructions that were followed","type_short":"AddressSet"}},{"javadoc":"Save off the current context and set the current context to a copy\n This is done so that the values in the context are not changed, but can be used for computation.\n@param startAddr\n@return ","static":false,"name":"saveOffCurrentContext","comment":"Save off the current context and set the current context to a copy\n This is done so that the values in the context are not changed, but can be used for computation.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.util.VarnodeContext","comment":"","type_short":"VarnodeContext"}},{"javadoc":"Get constant or register relative value assigned to the \n specified register at the specified address\n@param addr address\n@param reg register\n@return register value","static":false,"name":"getRegisterValue","comment":"Get constant or register relative value assigned to the \n specified register at the specified address","params":[{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"register","type_short":"Register"}],"throws":[],"return":{"type_long":"ghidra.program.util.SymbolicPropogator.Value","comment":"register value","type_short":"Value"}},{"javadoc":"Do not depend on this method!  For display debugging purposes only.\n This will change.\n@param addr\n@param reg\n@return ","static":false,"name":"getRegisterValueRepresentation","comment":"Do not depend on this method!  For display debugging purposes only.\n This will change.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setRegister","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.Register","name":"stackReg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"flowConstants","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ContextEvaluator","name":"eval","comment":"","type_short":"ContextEvaluator"},{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"","static":false,"name":"flowConstants","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ContextEvaluator","name":"eval","comment":"","type_short":"ContextEvaluator"},{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"","static":false,"name":"isSimpleFallThrough","comment":"","params":[{"type_long":"ghidra.program.model.symbol.FlowType","name":"instrFlow","comment":"","type_short":"FlowType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Check that we haven't hit a run of the same exact instruction.\n    Uses hashcodes in an attempt to be as fast as possible.\n@param instr new instruction to check\n@return true if we have hit the max number of exact same instructions.","static":false,"name":"checkSameInstructionRun","comment":"Check that we haven't hit a run of the same exact instruction.\n    Uses hashcodes in an attempt to be as fast as possible.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"new instruction to check","type_short":"Instruction"}],"throws":[],"return":{"type_long":"boolean","comment":"true if we have hit the max number of exact same instructions.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getInstructionPcode","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeOp[]","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"}},{"javadoc":"","static":false,"name":"getInstructionAt","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Instruction","comment":"","type_short":"Instruction"}},{"javadoc":"","static":false,"name":"getInstructionContaining","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Instruction","comment":"","type_short":"Instruction"}},{"javadoc":"","static":false,"name":"getInstructionFlows","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"","static":false,"name":"applyPcode","comment":"","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getStoredLocation","comment":"","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"in","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"","static":false,"name":"handleFunctionSideEffects","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.address.Address","name":"target","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBranch","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"resolveFunctionReference","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"checkForCallFixup","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeOp[]","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"}},{"javadoc":"","static":false,"name":"checkForUponReturnCallMechanismInjection","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.address.Address","name":"target","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeOp[]","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"}},{"javadoc":"","static":false,"name":"injectPcode","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp[]","name":"currentPcode","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"},{"type_long":"int","name":"pcodeIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.PcodeOp[]","name":"replacePcode","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeOp[]","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"}},{"javadoc":"","static":false,"name":"checkSegmented","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"out","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"in1","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"in2","comment":"","type_short":"Varnode"},{"type_long":"boolean","name":"mustClearAll","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"","type_short":"NotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get\/Compute the Purge size from the stack for the function starting at\n entryPoint.\n@param prog -\n            program containing the function to analyze\n@param function -\n@return size in bytes that is removed from the stack after the function\n         is called.","static":false,"name":"getFunctionPurge","comment":"Get\/Compute the Purge size from the stack for the function starting at\n entryPoint.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"-\n            program containing the function to analyze","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"-","type_short":"Function"}],"throws":[],"return":{"type_long":"int","comment":"size in bytes that is removed from the stack after the function\n         is called.","type_short":"int"}},{"javadoc":"Get the default\/assumed stack depth change for this language\n@param depth stack depth to return if the default is unknown for the language\n@return ","static":false,"name":"getDefaultStackDepthChange","comment":"Get the default\/assumed stack depth change for this language","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"int","name":"depth","comment":"stack depth to return if the default is unknown for the language","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Modify the function purge by any stack depth override\n@param prog program\n@param addr addr of instruction that could have an override of the stack depth\n@param purge current purge depth.\n@return ","static":false,"name":"addStackOverride","comment":"Modify the function purge by any stack depth override","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"program","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"addr of instruction that could have an override of the stack depth","type_short":"Address"},{"type_long":"int","name":"purge","comment":"current purge depth.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"addParamReferences","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.address.Address","name":"callTarget","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.util.VarnodeContext","name":"varnodeContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addReturnReferences","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.util.VarnodeContext","name":"varnodeContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addLoadStoreReference","comment":"","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"int","name":"pcodeType","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"refLocation","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"targetSpaceID","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"assigningVarnode","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.symbol.RefType","name":"reftype","comment":"","type_short":"RefType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find the operand that is assigning to the varnode with contains the load or store reference offset\n@param instruction\n@param assigningVarnode\n@return operand index if found or -1 if not","static":false,"name":"findOperandWithVarnodeAssignment","comment":"Find the operand that is assigning to the varnode with contains the load or store reference offset","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"assigningVarnode","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"int","comment":"operand index if found or -1 if not","type_short":"int"}},{"javadoc":"check if the offset is large enough to possibly be an address\n     It shouldn't be smaller than +- MIN_BOUNDS\n@param offset assumed relative to another register\n@return true if it could be an address","static":false,"name":"checkPossibleOffsetAddr","comment":"check if the offset is large enough to possibly be an address\n     It shouldn't be smaller than +- MIN_BOUNDS","params":[{"type_long":"long","name":"offset","comment":"assumed relative to another register","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"true if it could be an address","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addStoredReferences","comment":"","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"storageLocation","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"valueToStore","comment":"","type_short":"Varnode"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createVariableStorageReference","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.util.VarnodeContext","name":"varnodeContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"","type_short":"VariableStorage"},{"type_long":"long","name":"callOffset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createRegisterStorageReference","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.util.VarnodeContext","name":"varnodeContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"long","name":"callOffset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"rval","comment":"","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"get the return variable storage location for this function","static":false,"name":"getReturnLocationStorage","comment":"get the return variable storage location for this function","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"","type_short":"VariableStorage"}},{"javadoc":"Find the best address space to use for the reference if the space was unknown.\n@param instruction - reference is to be placed on (used for address)\n@param offset - offset into the address space. (word addressing based)\n@return ","static":false,"name":"getReferenceSpaceID","comment":"Find the best address space to use for the reference if the space was unknown.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"- reference is to be placed on (used for address)","type_short":"Instruction"},{"type_long":"long","name":"offset","comment":"- offset into the address space. (word addressing based)","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Make from the instruction to the reference based on the varnode passed in.\n@param varnodeContext - context to use for any other infomation needed\n@param instruction - instruction to place the reference on.\n@param pcodeop - pcode op that caused the reference\n@param opIndex - operand it should be placed on, or -1 if unknown\n@param vt - place to reference, could be a full address, or just a constant\n@param refType - type of reference\n@param monitor","static":false,"name":"makeReference","comment":"Make from the instruction to the reference based on the varnode passed in.","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"varnodeContext","comment":"- context to use for any other infomation needed","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"- instruction to place the reference on.","type_short":"Instruction"},{"type_long":"int","name":"pcodeop","comment":"- pcode op that caused the reference","type_short":"int"},{"type_long":"int","name":"opIndex","comment":"- operand it should be placed on, or -1 if unknown","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"vt","comment":"- place to reference, could be a full address, or just a constant","type_short":"Varnode"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"- type of reference","type_short":"RefType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Make a reference from the instruction to the address based on the spaceID,offset passed in.\n   This could make a reference into an overlay (overriding the spaceID), or into memory, if\n   spaceID is a constant space.\n  The target could be an external Address carried along and then finally used.\n  External addresses are OK as long as nothing is done to the offset.\n@param varnodeContext - context to use for any other infomation needed\n@param instruction - instruction to place the reference on.\n@param opIndex - operand it should be placed on, or -1 if unknown\n@param spaceID target space ID or -1 if only offset is known\n@param wordOffset - target offset that is word addressing based\n@param refType - type of reference\n@param pcodeop - pcode op that caused the reference\n@param monitor","static":false,"name":"makeReference","comment":"Make a reference from the instruction to the address based on the spaceID,offset passed in.\n   This could make a reference into an overlay (overriding the spaceID), or into memory, if\n   spaceID is a constant space.\n  The target could be an external Address carried along and then finally used.\n  External addresses are OK as long as nothing is done to the offset.","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"vContext","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"- instruction to place the reference on.","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"- operand it should be placed on, or -1 if unknown","type_short":"int"},{"type_long":"long","name":"knownSpaceID","comment":"","type_short":"long"},{"type_long":"long","name":"wordOffset","comment":"- target offset that is word addressing based","type_short":"long"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"- type of reference","type_short":"RefType"},{"type_long":"int","name":"pcodeop","comment":"- pcode op that caused the reference","type_short":"int"},{"type_long":"boolean","name":"knownReference","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Evaluate reference type for a pure data reference for valid reference to instructions\n@param instruction that reference is from\n@param target of reference\n@param wordOffset target address word offset\n@param refType type of reference\n@return true if not a pure data ref, or the reference is OK to make","static":false,"name":"evaluatePureDataRef","comment":"Evaluate reference type for a pure data reference for valid reference to instructions","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"that reference is from","type_short":"Instruction"},{"type_long":"long","name":"wordOffset","comment":"target address word offset","type_short":"long"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"type of reference","type_short":"RefType"},{"type_long":"ghidra.program.model.address.Address","name":"target","comment":"of reference","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if not a pure data ref, or the reference is OK to make","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createData","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"findOpIndexForRef","comment":"","params":[{"type_long":"ghidra.program.util.VarnodeContext","name":"context","comment":"","type_short":"VarnodeContext"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"long","name":"wordOffset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"","type_short":"RefType"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"check if the current Register value and wordOffset are off by just the low-bit.\n@param reg - register to get a current value for\n@param wordOffset - word offset for the reference\n@return True if the two values are off by just the one bit.","static":false,"name":"checkOffByOne","comment":"check if the current Register value and wordOffset are off by just the low-bit.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"- register to get a current value for","type_short":"Register"},{"type_long":"long","name":"wordOffset","comment":"- word offset for the reference","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"True if the two values are off by just the one bit.","type_short":"boolean"}},{"javadoc":"@return true if any branching instructions have been encountered","static":false,"name":"encounteredBranch","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if any branching instructions have been encountered","type_short":"boolean"}},{"javadoc":"@return return true if the code ever read from an executable location","static":false,"name":"readExecutable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"return true if the code ever read from an executable location","type_short":"boolean"}},{"javadoc":"enable\/disable checking parameters for constant references\n@param checkParamRefsOption true to enable","static":false,"name":"setParamRefCheck","comment":"enable\/disable checking parameters for constant references","params":[{"type_long":"boolean","name":"checkParamRefsOption","comment":"true to enable","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"enable\/disable checking return for constant references\n@param checkReturnRefsOption","static":false,"name":"setReturnRefCheck","comment":"enable\/disable checking return for constant references","params":[{"type_long":"boolean","name":"checkReturnRefsOption","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"enable\/disable checking stored values for constant references\n@param checkStoredRefsOption","static":false,"name":"setStoredRefCheck","comment":"enable\/disable checking stored values for constant references","params":[{"type_long":"boolean","name":"checkStoredRefsOption","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"SymbolicPropogator","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"_POINTER_MIN_BOUNDS","comment":"","type_short":"int","constant_value":"256"},{"type_long":"long[]","javadoc":"","static":true,"name":"maskSize","comment":"","type_short":"long[]","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.address.AddressSpace>","javadoc":"","static":false,"name":"memorySpaces","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"defaultSpacesAreTheSame","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.util.ContextEvaluator","javadoc":"","static":false,"name":"evaluator","comment":"","type_short":"ContextEvaluator","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.ProgramContext","javadoc":"","static":false,"name":"programContext","comment":"","type_short":"ProgramContext","constant_value":null},{"type_long":"ghidra.program.model.listing.ProgramContext","javadoc":"","static":false,"name":"spaceContext","comment":"","type_short":"ProgramContext","constant_value":null},{"type_long":"ghidra.program.model.listing.ProgramContext","javadoc":"","static":false,"name":"savedProgramContext","comment":"","type_short":"ProgramContext","constant_value":null},{"type_long":"ghidra.program.model.listing.ProgramContext","javadoc":"","static":false,"name":"savedSpaceContext","comment":"","type_short":"ProgramContext","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"canceled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"readExecutableAddress","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.util.VarnodeContext","javadoc":"","static":false,"name":"context","comment":"","type_short":"VarnodeContext","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"conflict","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hitCodeFlow","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"debug","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.exception.NotFoundException","javadoc":"","static":true,"name":"valueTooBigException","comment":"","type_short":"NotFoundException","constant_value":null},{"type_long":"ghidra.util.exception.NotFoundException","javadoc":"","static":true,"name":"divideByZeroException","comment":"","type_short":"NotFoundException","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"pointerMask","comment":"","type_short":"long","constant_value":null},{"type_long":"ghidra.program.model.address.AddressRange","javadoc":"","static":false,"name":"externalBlockRange","comment":"","type_short":"AddressRange","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"MAX_EXACT_INSTRUCTIONS","comment":"","type_short":"int","constant_value":"100"},{"type_long":"int","javadoc":"","static":false,"name":"lastFullHashCode","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"lastInstrCode","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"sameInstrCount","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"checkForParamRefs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"checkForReturnRefs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"checkForStoredRefs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,ghidra.program.model.pcode.PcodeOp[]>","javadoc":"","static":false,"name":"pcodeCache","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,ghidra.program.model.listing.Instruction>","javadoc":"","static":false,"name":"instructionAtCache","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,ghidra.program.model.listing.Instruction>","javadoc":"","static":false,"name":"instructionContainingCache","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,ghidra.program.model.address.Address[]>","javadoc":"","static":false,"name":"instructionFlowsCache","comment":"","type_short":"HashMap","constant_value":null}]}
