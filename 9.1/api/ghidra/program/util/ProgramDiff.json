{"implements":[],"javadoc":"<CODE>ProgramDiff<\/CODE> is a class for comparing two programs and\n determining where there are differences between them.\n <P>\n Currently, the differences can be determined if the two programs have\n equivalent address spaces. If the programs have different program context\n registers, the Diff can still occur but will not determine program context\n differences.\n <P>\n@see ghidra.program.util.ProgramDiffFilter","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"<CODE>ProgramDiff<\/CODE> is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n <P>Currently, the differences can be determined only if the address\n spaces match between the programs.\n@param program1 the first program\n@param program2 the second program\n@throws ProgramConflictException indicates that programs\n couldn't be compared to determine the differences.\n <P>For example,\n <P>the two programs have different address spaces.\n@throws IllegalArgumentException if one of the programs is null.","static":false,"name":"<init>","comment":"ProgramDiff is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n Currently, the differences can be determined only if the address\n spaces match between the programs.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program","type_short":"Program"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"indicates that programs\n couldn't be compared to determine the differences.\n For example,\n the two programs have different address spaces.","type_short":"ProgramConflictException"},{"type_long":"java.lang.IllegalArgumentException","comment":"if one of the programs is null.","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>ProgramDiff<\/CODE> is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n <P>Currently, the differences can be determined only if the address\n spaces match between the programs.\n@param program1 the first program\n@param program2 the second program\n@param checkAddressSet the address set to be used to constrain where\n differences are found.\n The addresses in this address set should be derived from program1.\n@throws ProgramConflictException indicates that programs\n couldn't be compared to determine the differences.\n <P>For example,\n <P>the two programs have different address spaces.\n between the two programs, do not match.\n@throws IllegalArgumentException if one of the programs is null.","static":false,"name":"<init>","comment":"ProgramDiff is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n Currently, the differences can be determined only if the address\n spaces match between the programs.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"checkAddressSet","comment":"the address set to be used to constrain where\n differences are found.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"indicates that programs\n couldn't be compared to determine the differences.\n For example,\n the two programs have different address spaces.\n between the two programs, do not match.","type_short":"ProgramConflictException"},{"type_long":"java.lang.IllegalArgumentException","comment":"if one of the programs is null.","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines all of the addresses that are in the Diff's two programs\n for the indicated address set and that are compatible with the first program.\n Any program2 addresses for which an equivalent (compatible) address can't be determined will not be\n included in the combined set.\n@param addrs the addresses to combine from the first program.\n@return the addresses which are derived from the two programs combined addresses that are in common\n with the ones in the address set that is passed in as a parameter.","static":false,"name":"getCombinedAddressSet","comment":"Determines all of the addresses that are in the Diff's two programs\n for the indicated address set and that are compatible with the first program.\n Any program2 addresses for which an equivalent (compatible) address can't be determined will not be\n included in the combined set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to combine from the first program.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses which are derived from the two programs combined addresses that are in common\n with the ones in the address set that is passed in as a parameter.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses that are in common between the Diff's two programs\n for the indicated address set.\n@param addrs the addresses to intersect with the initialized addresses\n in common between our two programs.\n The addresses in this address set should be derived from program1.\n@return the addresses from the indicated address set that are initialized and in common.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getInCommonAddressSet","comment":"Determines the addresses that are in common between the Diff's two programs\n for the indicated address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to intersect with the initialized addresses\n in common between our two programs.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses from the indicated address set that are initialized and in common.\n The addresses in the returned address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where both programs have initialized memory.\n@param addrs the addresses to intersect with the initialized addresses\n in common between the two programs.\n The addresses in this address set should be derived from program1.\n@return the addresses from the indicated address set that are initialized and in common.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getCommonInitializedAddressSet","comment":"Determines the addresses where both programs have initialized memory.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to intersect with the initialized addresses\n in common between the two programs.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses from the indicated address set that are initialized and in common.\n The addresses in the returned address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where both programs have uninitialized memory.\n@param addrs the addresses to intersect with the uninitialized addresses\n in common between the two programs.\n The addresses in this address set should be derived from program1.\n@return the addresses from the indicated address set that are uninitialized and in common.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getCommonUninitializedAddressSet","comment":"Determines the addresses where both programs have uninitialized memory.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to intersect with the uninitialized addresses\n in common between the two programs.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses from the indicated address set that are uninitialized and in common.\n The addresses in the returned address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where one program initialized memory and the other didn't.\n@param addrs the addresses to intersect with the addresses where initialization differs\n between the two programs.\n The addresses in this address set should be derived from program1.\n@return the addresses from the indicated address set whre initialization differs.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getInitializationDiffersAddressSet","comment":"Determines the addresses where one program initialized memory and the other didn't.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to intersect with the addresses where initialization differs\n between the two programs.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses from the indicated address set whre initialization differs.\n The addresses in the returned address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses that are NOT in common between the Diff's two programs\n for the indicated address set.\n@param addrs the addresses to intersect with the addresses\n not in common between the two programs.\n The addresses in this address set should be derived from program1.\n@return the addresses from the indicated address set that are not in common.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getNonCommonAddressSet","comment":"Determines the addresses that are NOT in common between the Diff's two programs\n for the indicated address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to intersect with the addresses\n not in common between the two programs.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses from the indicated address set that are not in common.\n The addresses in the returned address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Return true if the programs to compare have matching memory maps.","static":false,"name":"memoryMatches","comment":"Return true if the programs to compare have matching memory maps.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns a copy of this ProgramDiff.\n@return the copy of this ProgramDiff or null if a\n  MemoryConflictException occurs.","static":false,"name":"clone","comment":"Returns a copy of this ProgramDiff.","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the copy of this ProgramDiff or null if a\n  MemoryConflictException occurs.","type_short":"Object"}},{"javadoc":"Get a message indicating any warnings about this PRogramDiff. For example,\n if the program context registers don't match between the programs, the\n string is a message indicating this.\n@return the warning message string. null if no warnings.","static":false,"name":"getWarnings","comment":"Get a message indicating any warnings about this PRogramDiff. For example,\n if the program context registers don't match between the programs, the\n string is a message indicating this.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the warning message string. null if no warnings.","type_short":"String"}},{"javadoc":"Returns a new ProgramDiffFilter equal to the one in this program diff.\n The filter indicates which types of differences are to be determined.\n@return a copy of the program diff filter currently in use.","static":false,"name":"getFilter","comment":"Returns a new ProgramDiffFilter equal to the one in this program diff.\n The filter indicates which types of differences are to be determined.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramDiffFilter","comment":"a copy of the program diff filter currently in use.","type_short":"ProgramDiffFilter"}},{"javadoc":"Sets the ProgramDiffFilter for this program diff. The filter indicates\n which types of differences are to be determined.\n@param filter the program diff filter","static":false,"name":"setFilter","comment":"Sets the ProgramDiffFilter for this program diff. The filter indicates\n which types of differences are to be determined.","params":[{"type_long":"ghidra.program.util.ProgramDiffFilter","name":"filter","comment":"the program diff filter","type_short":"ProgramDiffFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the first program being compared by the ProgramDiff.\n@return program1.","static":false,"name":"getProgramOne","comment":"Gets the first program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program1.","type_short":"Program"}},{"javadoc":"Gets the second program being compared by the ProgramDiff.\n@return program2.","static":false,"name":"getProgramTwo","comment":"Gets the second program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program2.","type_short":"Program"}},{"javadoc":"Returns the addresses from combining the address sets in program1 and program2.\n@return the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getCombinedAddresses","comment":"Returns the addresses from combining the address sets in program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns the initialized memory addresses in common between\n program1 and program2.\n@return the initialized memory addresses in common between\n program1 and program2.\n The addresses in the this set are derived from program1.","static":false,"name":"getInitializedInCommon","comment":"Returns the initialized memory addresses in common between\n program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the initialized memory addresses in common between\n program1 and program2.\n The addresses in the this set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses in common between program1 and program2.\n@return the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesInCommon","comment":"Returns the addresses in common between program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses that are in program1, but not in program2.\n@return the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesOnlyInOne","comment":"Returns the addresses that are in program1, but not in program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses that are in program2, but not in program1.\n@return the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","static":false,"name":"getAddressesOnlyInTwo","comment":"Returns the addresses that are in program2, but not in program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","type_short":"AddressSet"}},{"javadoc":"<CODE>getDifferences<\/CODE> is used to determine\n the addresses where there are differences between two programs using\n the current filter. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, and program context register values.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.\n@return an address set of where differences were found between the two\n programs based on the current filter setting.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getDifferences","comment":"getDifferences is used to determine\n the addresses where there are differences between two programs using\n the current filter. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, and program context register values.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"an address set of where differences were found between the two\n programs based on the current filter setting.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"<CODE>getDifferences<\/CODE> is used to determine\n the addresses where there are differences between two programs. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, tags and program context register values.\n <P>The specified filter will become the new current filter.\n@param filter the filter to use instead of the current filter defined for\n this ProgramDiff.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.\n@return an address set of where differences were found between the two\n programs based on the specified filter setting.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getDifferences","comment":"getDifferences is used to determine\n the addresses where there are differences between two programs. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, tags and program context register values.\n The specified filter will become the new current filter.","params":[{"type_long":"ghidra.program.util.ProgramDiffFilter","name":"filter","comment":"the filter to use instead of the current filter defined for\n this ProgramDiff.","type_short":"ProgramDiffFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"an address set of where differences were found between the two\n programs based on the specified filter setting.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"<CODE>reDiffSubSet<\/CODE> re-determines the differences between the\n two programs for the indicated address set.\n@param subSet the address set indicating which addresses should have\n their differences re-determined.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","static":false,"name":"reDiffSubSet","comment":"reDiffSubSet re-determines the differences between the\n two programs for the indicated address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"subSet","comment":"the address set indicating which addresses should have\n their differences re-determined.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an address set indicating where the user defined property differs\n between the Diff's two programs within the specified address set.\n@param property the user defined property\n@param addrs the address set for limiting checking.\n The addresses in this address set should be derived from program1.\n@param monitor the progress monitor.\n@return the address set indicating where the property differs.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getUserDefinedDiffs","comment":"Returns an address set indicating where the user defined property differs\n between the Diff's two programs within the specified address set.","params":[{"type_long":"java.lang.String","name":"property","comment":"the user defined property","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the address set for limiting checking.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the progress monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set indicating where the property differs.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.\n@param diffType the type of difference to look for between the programs.\n@param addrs the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the address set indicating the differences.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getTypeDiffs","comment":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.","params":[{"type_long":"int","name":"diffType","comment":"the type of difference to look for between the programs.","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set indicating the differences.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Get the address set that the diff process is limited to when checking for differences.\n Returns null if the diff is not limited (i.e. the entire program is being diffed).\n The addresses in the returned address set are derived from program1.","static":false,"name":"getLimitedAddressSet","comment":"Get the address set that the diff process is limited to when checking for differences.\n Returns null if the diff is not limited (i.e. the entire program is being diffed).\n The addresses in the returned address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Set the address set that the diff process is limited to when checking for differences.\n@param checkSet the set of addresses to limit checking. null indicates the entire program.\n The addresses in this address set should be derived from program1.","static":false,"name":"setLimitedAddressSet","comment":"Set the address set that the diff process is limited to when checking for differences.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"checkSet","comment":"the set of addresses to limit checking. null indicates the entire program.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the address set that the getDifferences method results are restricted to.\n null indicates no current restrictions.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getRestrictedAddressSet","comment":"Get the address set that the getDifferences method results are restricted to.\n null indicates no current restrictions.\n The addresses in the returned address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Set the address set that the getDifferences method results are restricted to.\n@param restrictSet the address set to restrict results to. null indicates no restriction.\n The addresses in this address set should be derived from program1.","static":false,"name":"setRestrictedAddressSet","comment":"Set the address set that the getDifferences method results are restricted to.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"the address set to restrict results to. null indicates no restriction.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the address set which was restricting the results of the getDifferences method.","static":false,"name":"removeRestrictedAddressSet","comment":"Removes the address set which was restricting the results of the getDifferences method.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the address set that contains addresses that should not be indicated as\n having any differences.\n The addresses in this address set are derived from program1.","static":false,"name":"getIgnoreAddressSet","comment":"Get the address set that contains addresses that should not be indicated as\n having any differences.\n The addresses in this address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Set the indicated additional addresses that should not report any\n differences that are found at them.\n@param addrs the set of addresses to add to the current ignore set.\n The addresses in this address set should be derived from program1.","static":false,"name":"ignore","comment":"Set the indicated additional addresses that should not report any\n differences that are found at them.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the set of addresses to add to the current ignore set.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear the set of addresses that are ignored. Ignored addresses will not\n have differences reported by the <CODE>getDifferences<\/CODE> call.","static":false,"name":"clearIgnoreAddressSet","comment":"Clear the set of addresses that are ignored. Ignored addresses will not\n have differences reported by the getDifferences call.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"computeDiffsToReturn","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns whether the last <CODE>getDifferences<\/CODE> call was cancelled.\n If a TaskMonitor displays a progress dialog to the user, then the cancel\n button could have been pressed.\n@return true if the last <CODE>getDifferences<\/CODE> call was cancelled.","static":false,"name":"isCancelled","comment":"Returns whether the last getDifferences call was cancelled.\n If a TaskMonitor displays a progress dialog to the user, then the cancel\n button could have been pressed.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the last getDifferences call was cancelled.","type_short":"boolean"}},{"javadoc":"Checks the task associated with the indicated monitor to determine if it has\n been canceled.\n@param monitor the task monitor, associated with getting differences from this Diff,\n to be checked\n@throws CancelledException if the getDifferences() task has been canceled by the user.","static":false,"name":"checkCancelled","comment":"Checks the task associated with the indicated monitor to determine if it has\n been canceled.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor, associated with getting differences from this Diff,\n to be checked","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the getDifferences() task has been canceled by the user.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences that have been found so far by calls to\n <CODE>getDifferences<\/CODE>.","static":false,"name":"printDifferences","comment":"Print the differences that have been found so far by calls to\n getDifferences.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences matching the types indicated that were found thus\n far by all calls to <CODE>getDifferences<\/CODE>.\n@param type the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","static":false,"name":"printKnownDifferences","comment":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences.","params":[{"type_long":"int","name":"type","comment":"the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences. The differences are grouped by\n each of the primary difference types.\n@param type the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","static":false,"name":"printKnownDifferencesByType","comment":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences. The differences are grouped by\n each of the primary difference types.","params":[{"type_long":"int","name":"type","comment":"the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.\n The addresses in this address set are derived from program1\n and put into diffAddrSets using the diffType number as an index.\n@param diffType the type of difference to look for between the programs.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@throws ProgramConflictException if the two programs are not comparable since registers differ.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"createAddressSet","comment":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.\n The addresses in this address set are derived from program1\n and put into diffAddrSets using the diffType number as an index.","params":[{"type_long":"int","name":"diffType","comment":"the type of difference to look for between the programs.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"if the two programs are not comparable since registers differ.","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compareBytes","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressRange","name":"limitedRange","comment":"","type_short":"AddressRange"},{"type_long":"ghidra.program.model.address.AddressSet","name":"differences","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines the addresses within the two programs where bytes differ.\n If a byte difference is found, the entire code unit is added to the address set.\n This also indicates addresses in program1 that are not in program2 as well as\n program2 addresses that are compatible with program1 but not in program1 memory.\n@param addrs the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were different byte values including where\n one program has bytes and the other does not.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user canceled the Diff.","static":false,"name":"getByteDifferences","comment":"Determines the addresses within the two programs where bytes differ.\n If a byte difference is found, the entire code unit is added to the address set.\n This also indicates addresses in program1 that are not in program2 as well as\n program2 addresses that are compatible with program1 but not in program1 memory.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were different byte values including where\n one program has bytes and the other does not.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses for the code units that differ between program1\n and program2.\n@param addrs the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were different code units.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getCodeUnitDifferences","comment":"Determines the addresses for the code units that differ between program1\n and program2.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were different code units.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Gets the addresses where the Program Context (register bits) differ\n between two programs.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses of code units where the program context (register\n bits values) differs.\n The addresses in this address set are derived from program1.\n@throws ProgramConflictException if the two programs are not comparable since registers differ.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getProgramContextDifferences","comment":"Gets the addresses where the Program Context (register bits) differ\n between two programs.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"if the two programs are not comparable since registers differ.","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses of code units where the program context (register\n bits values) differs.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Gets the addresses where the Program Context (register bits) differ\n between two programs for the specified registers (which should generally match).\n@param pc1 program context for 1st program\n@param reg1 register corresponding to pc1 (should generally be the same as reg2)\n@param pc2 program context for 2nd program\n@param reg2 register corresponding to pc2 (should generally be the same as reg1)\n@param addressSet the addresses (in common to both programs) to check for differences.\n The addresses in this address set should be derived from program1.\n@param differences the addresses of code units where the register value differs will be\n added to this set. The addresses in this address set are derived from the 1st program.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@throws ProgramConflictException if the two programs can't are not comparable.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getProgramContextDifferences","comment":"Gets the addresses where the Program Context (register bits) differ\n between two programs for the specified registers (which should generally match).","params":[{"type_long":"ghidra.program.model.listing.ProgramContext","name":"pc1","comment":"program context for 1st program","type_short":"ProgramContext"},{"type_long":"ghidra.program.model.lang.Register","name":"reg1","comment":"register corresponding to pc1 (should generally be the same as reg2)","type_short":"Register"},{"type_long":"ghidra.program.model.listing.ProgramContext","name":"pc2","comment":"program context for 2nd program","type_short":"ProgramContext"},{"type_long":"ghidra.program.model.lang.Register","name":"reg2","comment":"register corresponding to pc2 (should generally be the same as reg1)","type_short":"Register"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses (in common to both programs) to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.AddressSet","name":"differences","comment":"the addresses of code units where the register value differs will be\n added to this set. The addresses in this address set are derived from the 1st program.","type_short":"AddressSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the addresses where the context-register value differs\n between two programs.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses of code units where the program context (register\n bits values) differs.\n The addresses in this address set are derived from program1.\n@throws ProgramConflictException if the two programs can't are not comparable.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getContextRegisterDifferences","comment":"Gets the addresses where the context-register value differs\n between two programs.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses of code units where the program context (register\n bits values) differs.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Gets the addresses where the user defined properties differ between\n two programs.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses of code units where the user defined properties differed.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getUserDefinedDifferences","comment":"Gets the addresses where the user defined properties differ between\n two programs.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses of code units where the user defined properties differed.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Gets the addresses where bookmarks differ between two programs.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses of code units where the user defined properties differed.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getBookmarkDifferences","comment":"Gets the addresses where bookmarks differ between two programs.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses of code units where the user defined properties differed.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where program1 and program2 have different\n  labels (symbols or aliases) specified.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were different labels.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getLabelDifferences","comment":"Determines the addresses where program1 and program2 have different\n  labels (symbols or aliases) specified.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were different labels.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where program1 and program2 have different equates\n specified.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where the equates differed between program1 and program2.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getEquateDifferences","comment":"Determines the addresses where program1 and program2 have different equates\n specified.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where the equates differed between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines if the two programs have the same equates specified at\n the indicated address and operand\n@param address the address\n This address should be derived from program1.\n@param opIndex the operand index\n@return true if both programs have the same operands.","static":false,"name":"isSameOperandEquates","comment":"Determines if the two programs have the same equates specified at\n the indicated address and operand","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address\n This address should be derived from program1.","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"the operand index","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if both programs have the same operands.","type_short":"boolean"}},{"javadoc":"Determines the addresses where program1 and program2 have different\n references specified.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where the memory references differed between program1 and program2.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getReferenceDifferences","comment":"Determines the addresses where program1 and program2 have different\n references specified.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where the memory references differed between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the addresses where program1 and program2 have different\n function information specified. This may be the signature, comment,\n stack variables, or register variables.\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where the equates differed between program1 and program2.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getFunctionDifferences","comment":"Determines the addresses where program1 and program2 have different\n function information specified. This may be the signature, comment,\n stack variables, or register variables.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where the equates differed between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the function start addresses of all functions where there is a difference\n in tags between program 1 and program 2.\n@param addressSet\n@param monitor\n@return \n@throws CancelledException","static":false,"name":"getFunctionTagDifferences","comment":"Returns the function start addresses of all functions where there is a difference\n in tags between program 1 and program 2.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"Determines the code unit addresses where there are differences of the\n indicated type between program1 and program2.\n@param cuiType the type of difference on the code unit. These are defined\n in <CODE>CodeUnit<\/CODE>. (i.e. CodeUnit.EOL_COMMENT_PROPERTY).\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param c the comparator to use for determining where the differences are.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.\n@see ghidra.program.model.listing.CodeUnit","static":false,"name":"getCuiDiffs","comment":"Determines the code unit addresses where there are differences of the\n indicated type between program1 and program2.","params":[{"type_long":"java.lang.String","name":"cuiType","comment":"the type of difference on the code unit. These are defined\n in CodeUnit. (i.e. CodeUnit.EOL_COMMENT_PROPERTY).","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramDiff.CodeUnitComparator","name":"c","comment":"the comparator to use for determining where the differences are.","type_short":"CodeUnitComparator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the code unit addresses where there are comment differences of the\n indicated type between program1 and program2.\n@param commentType the type of comment. These are defined\n in <CODE>CodeUnit<\/CODE>. (i.e. CodeUnit.EOL_COMMENT).\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param c the comparator to use for determining where the differences are.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.\n@see ghidra.program.model.listing.CodeUnit","static":false,"name":"getCommentDiffs","comment":"Determines the code unit addresses where there are comment differences of the\n indicated type between program1 and program2.","params":[{"type_long":"int","name":"commentType","comment":"the type of comment. These are defined\n in CodeUnit. (i.e. CodeUnit.EOL_COMMENT).","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramDiff.CommentTypeComparator","name":"c","comment":"the comparator to use for determining where the differences are.","type_short":"CommentTypeComparator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Determines the code unit addresses where there are differences of the\n indicated type between program1 and program2. If address ranges in the\n address set begin inside a code unit instead of at the beginning, the\n entire code unit will be added to the address set.\n@param cuiType the type of difference on the code unit. These are defined\n in <CODE>CodeUnit<\/CODE>. (i.e. CodeUnit.EOL_COMMENT_PROPERTY).\n@param addressSet the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param c the comparator to use for determining where the differences are.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.\n@see ghidra.program.model.listing.CodeUnit","static":false,"name":"getAdjustedCuiDiffs","comment":"Determines the code unit addresses where there are differences of the\n indicated type between program1 and program2. If address ranges in the\n address set begin inside a code unit instead of at the beginning, the\n entire code unit will be added to the address set.","params":[{"type_long":"java.lang.String","name":"cuiType","comment":"the type of difference on the code unit. These are defined\n in CodeUnit. (i.e. CodeUnit.EOL_COMMENT_PROPERTY).","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramDiff.CodeUnitComparator","name":"c","comment":"the comparator to use for determining where the differences are.","type_short":"CodeUnitComparator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where there were code unit differences of the\n specified type.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"adjustCodeUnitAddressSet creates a new address set from the initial\n address set by adjusting the address ranges so that they contain\n complete code units as indicated by the program listing.\n@param initialAddressSet the initial address set\n The addresses in this address set should be derived from the program\n passed as a parameter.\n@param program the program to get the code units from.\n@return the new address set\n The addresses in this address set are derived from the program\n that was passed as a parameter.\n@throws CancelledException","static":false,"name":"adjustCodeUnitAddressSet","comment":"adjustCodeUnitAddressSet creates a new address set from the initial\n address set by adjusting the address ranges so that they contain\n complete code units as indicated by the program listing.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"initialAddressSet","comment":"the initial address set\n The addresses in this address set should be derived from the program\n passed as a parameter.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.listing.Listing","name":"listing","comment":"","type_short":"Listing"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the new address set\n The addresses in this address set are derived from the program\n that was passed as a parameter.","type_short":"AddressSet"}},{"javadoc":"Determines where the property of interest to the comparator is different\n between program1 and program2. This is for use with object iterators as\n opposed to determining differences using a code unit iterator.\n (For example, object iterators are used for equates and functions.)\n@param c the comparator to use for determining where the differences are.\n@param iter1 the program1 object iterator for where the property type\n to be compared exists.\n@param iter2 the program2 object iterator for where the property type\n to be compared exists.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the addresses where the comparator determined the property type\n of interest was different. null if canceled.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user canceled the Diff.","static":false,"name":"getObjectDiffs","comment":"Determines where the property of interest to the comparator is different\n between program1 and program2. This is for use with object iterators as\n opposed to determining differences using a code unit iterator.\n (For example, object iterators are used for equates and functions.)","params":[{"type_long":"ghidra.program.util.ProgramDiff.ProgramDiffComparator","name":"c","comment":"the comparator to use for determining where the differences are.","type_short":"ProgramDiffComparator"},{"type_long":"ghidra.program.util.ProgramDiff.IteratorWrapper","name":"iter1","comment":"the program1 object iterator for where the property type\n to be compared exists.","type_short":"IteratorWrapper"},{"type_long":"ghidra.program.util.ProgramDiff.IteratorWrapper","name":"iter2","comment":"the program2 object iterator for where the property type\n to be compared exists.","type_short":"IteratorWrapper"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses where the comparator determined the property type\n of interest was different. null if canceled.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Compares an array of bookmarks from program1 with an array of bookmarks from program2 to see if they are equivalent.\n@param pgm1 program1\n@param bookmarks1 program1 array of bookmarks\n@param pgm2 program2\n@param bookmarks2 program2 array of bookmarks\n@return true if the arrays of bookmarks are equal.","static":true,"name":"equivalentBookmarkArrays","comment":"Compares an array of bookmarks from program1 with an array of bookmarks from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"pgm1","comment":"program1","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"pgm2","comment":"program2","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Bookmark[]","name":"bookmarks1","comment":"program1 array of bookmarks","type_short":"ghidra.program.model.listing.Bookmark[]"},{"type_long":"ghidra.program.model.listing.Bookmark[]","name":"bookmarks2","comment":"program2 array of bookmarks","type_short":"ghidra.program.model.listing.Bookmark[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the arrays of bookmarks are equal.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentBookmarks","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"pgm1","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"pgm2","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Bookmark","name":"bookmark1","comment":"","type_short":"Bookmark"},{"type_long":"ghidra.program.model.listing.Bookmark","name":"bookmark2","comment":"","type_short":"Bookmark"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentVariableArrays","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable[]","name":"vars1","comment":"","type_short":"ghidra.program.model.listing.Variable[]"},{"type_long":"ghidra.program.model.listing.Variable[]","name":"vars2","comment":"","type_short":"ghidra.program.model.listing.Variable[]"},{"type_long":"boolean","name":"checkParamStorage","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentVariables","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"","type_short":"Variable"},{"type_long":"boolean","name":"checkStorage","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentFunctions","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentFunctions","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"},{"type_long":"boolean","name":"ignoreName","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compares two thunk functions from different programs to determine if they are \n equivalent to each other (effectively the same thunk function in the other program).\n@param thunkFunction1 the first thunk function\n@param thunkFunction2 the second thunk function\n@return true if the functions are equivalent thunk functions.","static":true,"name":"isEquivalentThunk","comment":"Compares two thunk functions from different programs to determine if they are \n equivalent to each other (effectively the same thunk function in the other program).","params":[{"type_long":"ghidra.program.model.listing.Function","name":"thunkFunction1","comment":"the first thunk function","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"thunkFunction2","comment":"the second thunk function","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the functions are equivalent thunk functions.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"sameFunctionNames","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isDefaultName","comment":"","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"","type_short":"Symbol"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the two sets contain function tags with the same\n name\/comment pairs.\n@param setA the first set\n@param setB the second set\n@return true if sets contain tags with the same name\/comment pairs","static":true,"name":"equivalentTagSets","comment":"Returns true if the two sets contain function tags with the same\n name\/comment pairs.","params":[{"type_long":"java.util.Set<ghidra.program.model.listing.FunctionTag>","name":"setA","comment":"the first set","type_short":"Set"},{"type_long":"java.util.Set<ghidra.program.model.listing.FunctionTag>","name":"setB","comment":"the second set","type_short":"Set"}],"throws":[],"return":{"type_long":"boolean","comment":"true if sets contain tags with the same name\/comment pairs","type_short":"boolean"}},{"javadoc":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.\n@param refs1 program1 array of references\n@param refs2 program2 array of references\n@return true if the arrays of references are equal.","static":false,"name":"equalRefArrays","comment":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs1","comment":"program1 array of references","type_short":"ghidra.program.model.symbol.Reference[]"},{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs2","comment":"program2 array of references","type_short":"ghidra.program.model.symbol.Reference[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the arrays of references are equal.","type_short":"boolean"}},{"javadoc":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.\n@param pgm1 program1\n@param pgm2 program2\n@param refs1 program1 array of references\n@param refs2 program2 array of references\n@return true if the arrays of references are equal.","static":true,"name":"equivalentReferenceArrays","comment":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"pgm1","comment":"program1","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"pgm2","comment":"program2","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs1","comment":"program1 array of references","type_short":"ghidra.program.model.symbol.Reference[]"},{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs2","comment":"program2 array of references","type_short":"ghidra.program.model.symbol.Reference[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the arrays of references are equal.","type_short":"boolean"}},{"javadoc":"Compares reference from program1 with reference from program2 to see if they are equivalent.\n@param ref1 program1 reference\n@param ref2 program2 reference\n@return true if they are equivalent","static":false,"name":"equalRefs","comment":"Compares reference from program1 with reference from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref1","comment":"program1 reference","type_short":"Reference"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref2","comment":"program2 reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"boolean","comment":"true if they are equivalent","type_short":"boolean"}},{"javadoc":"Compares reference from program1 with reference from program2 to see if they are equivalent.\n@param p1 program1\n@param p2 program2\n@param ref1 program1 reference\n@param ref2 program2 reference\n@return true if they are equivalent","static":true,"name":"equivalentReferences","comment":"Compares reference from program1 with reference from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"p1","comment":"program1","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"p2","comment":"program2","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref1","comment":"program1 reference","type_short":"Reference"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref2","comment":"program2 reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"boolean","comment":"true if they are equivalent","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isEquivalent","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"extLoc1","comment":"","type_short":"ExternalLocation"},{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"extLoc2","comment":"","type_short":"ExternalLocation"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@param addressTranslator\n@param p1Ref\n@param p2Ref\n@return ","static":true,"name":"equivalentReferences","comment":"","params":[{"type_long":"ghidra.program.util.AddressTranslator","name":"p2ToP1Translator","comment":"","type_short":"AddressTranslator"},{"type_long":"ghidra.program.model.symbol.Reference","name":"p1Ref","comment":"","type_short":"Reference"},{"type_long":"ghidra.program.model.symbol.Reference","name":"p2Ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the references that need to be checked for differences from those that are handed\n to it via the refs parameter.\n@param refs the references before removing those that we don't want to diff.\n@return only the references that should be part of the diff.","static":true,"name":"getDiffRefs","comment":"Gets the references that need to be checked for differences from those that are handed\n to it via the refs parameter.","params":[{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs","comment":"the references before removing those that we don't want to diff.","type_short":"ghidra.program.model.symbol.Reference[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"only the references that should be part of the diff.","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"","static":true,"name":"equivalentInstructionPrototypes","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"i1","comment":"","type_short":"Instruction"},{"type_long":"ghidra.program.model.listing.Instruction","name":"i2","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determines whether the fallthrough is the same for the two indicated instructions.\n@param program1 the program for the first instruction\n@param i1 the first instruction\n@param program2 the program for the second instruction\n@param i2 the second instruction\n@return true if the fallthrough is the same for the two instructions.","static":true,"name":"isSameFallthrough","comment":"Determines whether the fallthrough is the same for the two indicated instructions.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the program for the first instruction","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Instruction","name":"i1","comment":"the first instruction","type_short":"Instruction"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the program for the second instruction","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Instruction","name":"i2","comment":"the second instruction","type_short":"Instruction"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the fallthrough is the same for the two instructions.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentSymbols","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"p1","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"p2","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"p1Symbol","comment":"","type_short":"Symbol"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"p2Symbol","comment":"","type_short":"Symbol"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentSymbols","comment":"","params":[{"type_long":"ghidra.program.util.AddressTranslator","name":"p2ToP1Translator","comment":"","type_short":"AddressTranslator"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"p1Symbol","comment":"","type_short":"Symbol"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"p2Symbol","comment":"","type_short":"Symbol"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"ProgramDiff","comment":"ProgramDiff is a class for comparing two programs and\n determining where there are differences between them.\n \n Currently, the differences can be determined if the two programs have\n equivalent address spaces. If the programs have different program context\n registers, the Diff can still occur but will not determine program context\n differences.\n ","fields":[{"type_long":"ghidra.program.util.ProgramDiffFilter","javadoc":"A filter for keeping track of all types of differences determined by\n this ProgramDiff so that it knows what differences to recompute.","static":false,"name":"reDiffFilter","comment":"A filter for keeping track of all types of differences determined by\n this ProgramDiff so that it knows what differences to recompute.","type_short":"ProgramDiffFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"The first program for the diff.","static":false,"name":"program1","comment":"The first program for the diff.","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"The second program for the diff.","static":false,"name":"program2","comment":"The second program for the diff.","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Listing","javadoc":"","static":false,"name":"listing1","comment":"","type_short":"Listing","constant_value":null},{"type_long":"ghidra.program.model.listing.Listing","javadoc":"","static":false,"name":"listing2","comment":"","type_short":"Listing","constant_value":null},{"type_long":"ghidra.program.util.ProgramMemoryComparator","javadoc":"Comparator that holds information about differences between the\n  two programs memory blocks.","static":false,"name":"pgmMemComp","comment":"Comparator that holds information about differences between the\n  two programs memory blocks.","type_short":"ProgramMemoryComparator","constant_value":null},{"type_long":"boolean","javadoc":"Indicator of whether or not the two programs have the same program context registers.","static":false,"name":"sameProgramContext","comment":"Indicator of whether or not the two programs have the same program context registers.","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"Indicator of whether or not to display the address space name in task monitor status messages.","static":true,"name":"showAddressSpace","comment":"Indicator of whether or not to display the address space name in task monitor status messages.","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"The number of bytes to get at a time when determining byte differences\n between program1 and program2.","static":true,"name":"BYTE_DIFF_GRAB_SIZE","comment":"The number of bytes to get at a time when determining byte differences\n between program1 and program2.","type_short":"int","constant_value":"1024"},{"type_long":"ghidra.program.util.ProgramDiffFilter","javadoc":"The filter for indicating program differences we are interested in.","static":false,"name":"pdf","comment":"The filter for indicating program differences we are interested in.","type_short":"ProgramDiffFilter","constant_value":null},{"type_long":"java.util.Hashtable<java.lang.Integer,ghidra.program.model.address.AddressSet>","javadoc":"Hash table for holding address sets for each of the primary difference types.\n  The addresses in these address sets are derived from program1.\n  The union of these address sets gives all program differences.","static":false,"name":"diffAddrSets","comment":"Hash table for holding address sets for each of the primary difference types.\n  The addresses in these address sets are derived from program1.\n  The union of these address sets gives all program differences.","type_short":"Hashtable","constant_value":null},{"type_long":"boolean","javadoc":"Whether or not the user cancelled the last getDifferences.","static":false,"name":"cancelled","comment":"Whether or not the user cancelled the last getDifferences.","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"The differences from the last getDifferences() call.\n  The addresses in this address set are derived from program1.","static":false,"name":"currentDiffs","comment":"The differences from the last getDifferences() call.\n  The addresses in this address set are derived from program1.","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"The returned diff address set is the current diffs less the ignore\n  address set and constrained by the restrict address set.\n  The addresses in this address set are derived from program1.","static":false,"name":"diffsToReturn","comment":"The returned diff address set is the current diffs less the ignore\n  address set and constrained by the restrict address set.\n  The addresses in this address set are derived from program1.","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"The address set that is checked by this Program Diff.\n  The addresses in this address set are derived from program1.","static":false,"name":"checkAddressSet","comment":"The address set that is checked by this Program Diff.\n  The addresses in this address set are derived from program1.","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"The address set to use for restricting the view of addresses where\n  differences are currently reported.\n  The addresses in this address set are derived from program1.","static":false,"name":"restrictAddressSet","comment":"The address set to use for restricting the view of addresses where\n  differences are currently reported.\n  The addresses in this address set are derived from program1.","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"The set of addresses that should currently not appear as part of the differences.\n  The addresses in this address set are derived from program1.","static":false,"name":"ignoreAddressSet","comment":"The set of addresses that should currently not appear as part of the differences.\n  The addresses in this address set are derived from program1.","type_short":"AddressSet","constant_value":null},{"type_long":"boolean","javadoc":"Indicates that the filter has been changed since the last getDifferences().\n  The addresses in this address set are derived from program1.","static":false,"name":"filterChanged","comment":"Indicates that the filter has been changed since the last getDifferences().\n  The addresses in this address set are derived from program1.","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"The current prefix message to appear in the monitor's message area.","static":true,"name":"monitorMsg","comment":"The current prefix message to appear in the monitor's message area.","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"String indicating a warning message if the program context registers are not the same.","static":false,"name":"warnings","comment":"String indicating a warning message if the program context registers are not the same.","type_short":"String","constant_value":null},{"type_long":"ghidra.program.model.listing.BookmarkTypeComparator","javadoc":"","static":true,"name":"BOOKMARK_TYPE_COMPARATOR","comment":"","type_short":"BookmarkTypeComparator","constant_value":null},{"type_long":"ghidra.program.model.listing.BookmarkComparator","javadoc":"","static":true,"name":"BOOKMARK_COMPARATOR","comment":"","type_short":"BookmarkComparator","constant_value":null}]}
