{"implements":[],"javadoc":"Determines where instructions couldn't be matched and where they differ between sets of \n addresses as provided by a ListingAddressCorrelation. Initially this will be byte \n differences and instruction operand differences for any instructions that were determined \n to be matched.\n <br>Important: This class is not intended to be used for an entire program. Instead it is \n for comparing smaller portions such as functions. If the correlation handed to this class \n associates two large address sets, then the address sets, such as byte differences, that are \n created by this class could potentially consume large amounts of memory.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a ListingDiff to determine where instructions couldn't be matched and where they \n differ between sets of addresses as provided by a ListingAddressCorrelation.","static":false,"name":"<init>","comment":"Creates a ListingDiff to determine where instructions couldn't be matched and where they \n differ between sets of addresses as provided by a ListingAddressCorrelation.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the address correlation that is used to determine matching addresses between the two \n listings. Differences can then be determined where a matching address is found.\n <br>Important: This class is not intended to be used for an entire program. Instead it is \n for comparing smaller portions such as functions. If the correlation handed to this class \n associates two large address sets, then the address sets, such as byte differences, that are \n created by this class could potentially consume large amounts of memory.\n@param correlation the address correlation. Otherwise, null to clear the correlation.\n@throws MemoryAccessException if memory can't be read.","static":false,"name":"setCorrelation","comment":"Sets the address correlation that is used to determine matching addresses between the two \n listings. Differences can then be determined where a matching address is found.\n Important: This class is not intended to be used for an entire program. Instead it is \n for comparing smaller portions such as functions. If the correlation handed to this class \n associates two large address sets, then the address sets, such as byte differences, that are \n created by this class could potentially consume large amounts of memory.","params":[{"type_long":"ghidra.program.util.ListingAddressCorrelation","name":"correlation","comment":"the address correlation. Otherwise, null to clear the correlation.","type_short":"ListingAddressCorrelation"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory can't be read.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines if this ListingDiff currently has an address correlation to use.\n@return true if it has an address correlation currently.","static":false,"name":"hasCorrelation","comment":"Determines if this ListingDiff currently has an address correlation to use.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if it has an address correlation currently.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDiffs","comment":"","params":[],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"recomputeCodeUnitDiffs","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getByteDiffs","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu2","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.address.AddressSet","name":"byteDiffs","comment":"","type_short":"AddressSet"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCodeUnitDiffs","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu2","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.address.AddressSet","name":"cuDiffs","comment":"","type_short":"AddressSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"equivalentCodeUnits","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu2","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isSameMnemonic","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit2","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets an array containing the operand indices where the two indicated code units differ.\n These differences are determined based on whether constants and registers are\n being ignored.\n@param codeUnit1 the first code unit\n@param codeUnit2 the second code unit\n@return an array of operand indices where the operands differ between the two code units \n based on the current settings that indicate what differences can be ignored.","static":false,"name":"getOperandsThatDiffer","comment":"Gets an array containing the operand indices where the two indicated code units differ.\n These differences are determined based on whether constants and registers are\n being ignored.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit1","comment":"the first code unit","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit2","comment":"the second code unit","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"int[]","comment":"an array of operand indices where the operands differ between the two code units \n based on the current settings that indicate what differences can be ignored.","type_short":"int[]"}},{"javadoc":"Determine if the first and second instructions objects for a particular operand differ.\n The opObjects are checked using the currently specified ignore flags for determining \n instruction operand differences.\n@param opObjects1 the operand objects that compose an operand for the first instruction\n@param opObjects2 the operand objects that compose an operand for the second instruction\n@return true if the opObjects differ based on the current diff ignore flags.","static":false,"name":"opObjectsDiffer","comment":"Determine if the first and second instructions objects for a particular operand differ.\n The opObjects are checked using the currently specified ignore flags for determining \n instruction operand differences.","params":[{"type_long":"java.lang.Object[]","name":"opObjects1","comment":"the operand objects that compose an operand for the first instruction","type_short":"java.lang.Object[]"},{"type_long":"java.lang.Object[]","name":"opObjects2","comment":"the operand objects that compose an operand for the second instruction","type_short":"java.lang.Object[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the opObjects differ based on the current diff ignore flags.","type_short":"boolean"}},{"javadoc":"Determines if the entire set of operands should indicate that it differs.\n If the code units aren't the same type then the entire set of operands is considered different.\n Also if the number of operands differs then as far as we're concerned the entire set differs.\n@param codeUnit1 the first code unit\n@param codeUnit2 the second code unit\n@return true if we should indicate that all operands differ.","static":false,"name":"doesEntireOperandSetDiffer","comment":"Determines if the entire set of operands should indicate that it differs.\n If the code units aren't the same type then the entire set of operands is considered different.\n Also if the number of operands differs then as far as we're concerned the entire set differs.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit1","comment":"the first code unit","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit2","comment":"the second code unit","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"true if we should indicate that all operands differ.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"sameType","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit2","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isSameData","comment":"","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data1","comment":"","type_short":"Data"},{"type_long":"ghidra.program.model.listing.Data","name":"data2","comment":"","type_short":"Data"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"sameBytes","comment":"","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu1","comment":"","type_short":"CodeUnit"},{"type_long":"ghidra.program.model.listing.CodeUnit","name":"cu2","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the addresses in the first listing where matching code couldn't be determined in the \n second listing.\n@return the addresses of the unmatched code in the first listing.","static":false,"name":"getListing1UnmatchedCode","comment":"Gets the addresses in the first listing where matching code couldn't be determined in the \n second listing.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses of the unmatched code in the first listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the second listing where matching code couldn't be determined in the \n first listing.\n@return the addresses of the unmatched code in the second listing.","static":false,"name":"getListing2UnmatchedCode","comment":"Gets the addresses in the second listing where matching code couldn't be determined in the \n first listing.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses of the unmatched code in the second listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the first listing where differences were found based on the current \n difference settings.\n@return the addresses with differences in the first listing.","static":false,"name":"getListing1Diffs","comment":"Gets the addresses in the first listing where differences were found based on the current \n difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with differences in the first listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the second listing where differences were found based on the current \n difference settings.\n@return the addresses with differences in the second listing.","static":false,"name":"getListing2Diffs","comment":"Gets the addresses in the second listing where differences were found based on the current \n difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with differences in the second listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the first listing where code unit (mnemonic and\/or operand) differences \n were found based on the current difference settings.\n@return the addresses with code unit differences in the first listing.","static":false,"name":"getListing1CodeUnitDiffs","comment":"Gets the addresses in the first listing where code unit (mnemonic and\/or operand) differences \n were found based on the current difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with code unit differences in the first listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the second listing where code unit (mnemonic and\/or operand) differences \n were found based on the current difference settings.\n@return the addresses with code unit differences in the second listing.","static":false,"name":"getListing2CodeUnitDiffs","comment":"Gets the addresses in the second listing where code unit (mnemonic and\/or operand) differences \n were found based on the current difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with code unit differences in the second listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the first listing where byte differences were found based on the \n current difference settings.\n@return the addresses with byte differences in the first listing.","static":false,"name":"getListing1ByteDiffs","comment":"Gets the addresses in the first listing where byte differences were found based on the \n current difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with byte differences in the first listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the addresses in the second listing where byte differences were found based on the \n current difference settings.\n@return the addresses with byte differences in the second listing.","static":false,"name":"getListing2ByteDiffs","comment":"Gets the addresses in the second listing where byte differences were found based on the \n current difference settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses with byte differences in the second listing.","type_short":"AddressSetView"}},{"javadoc":"Gets the matching address from the other listing for the specified address from one\n of the two listings whose differences this class determines.\n@param address the address whose matching address this determines.\n@param isListing1 true indicates the address is from the first listing. false indicates\n it is from the second listing.\n@return the matching address or null","static":false,"name":"getMatchingAddress","comment":"Gets the matching address from the other listing for the specified address from one\n of the two listings whose differences this class determines.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address whose matching address this determines.","type_short":"Address"},{"type_long":"boolean","name":"isListing1","comment":"true indicates the address is from the first listing. false indicates\n it is from the second listing.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the matching address or null","type_short":"Address"}},{"javadoc":"Outputs an information message, primarily for debugging, that indicates where code was \n unmatched with the other listing and where various differences, such as bytes and \n code units, were found.","static":false,"name":"printFunctionComparisonDiffs","comment":"Outputs an information message, primarily for debugging, that indicates where code was \n unmatched with the other listing and where various differences, such as bytes and \n code units, were found.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"outputAddressSet","comment":"","params":[{"type_long":"java.lang.StringBuffer","name":"buffer","comment":"","type_short":"StringBuffer"},{"type_long":"java.lang.String","name":"title","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSet","name":"addressSet","comment":"","type_short":"AddressSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the setting indicating if byte differences are currently being ignored.\n@return true if byte differences are being ignored.","static":false,"name":"isIgnoringByteDiffs","comment":"Gets the setting indicating if byte differences are currently being ignored.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if byte differences are being ignored.","type_short":"boolean"}},{"javadoc":"Changes the setting indicating whether or not byte differences should be ignored.\n@param ignore true indicates to ignore byte differences","static":false,"name":"setIgnoreByteDiffs","comment":"Changes the setting indicating whether or not byte differences should be ignored.","params":[{"type_long":"boolean","name":"ignore","comment":"true indicates to ignore byte differences","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the setting indicating if values of operand constants that differ are currently \n being ignored when determining code unit differences.\n@return true if code unit differences are ignoring differences in values of operand\n constants.","static":false,"name":"isIgnoringConstants","comment":"Gets the setting indicating if values of operand constants that differ are currently \n being ignored when determining code unit differences.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if code unit differences are ignoring differences in values of operand\n constants.","type_short":"boolean"}},{"javadoc":"Changes the setting indicating if values of operand constants that differ should be \n ignored when determining code unit differences.\n@param ignore true means code unit differences should ignore differences in values of \n operand constants.","static":false,"name":"setIgnoreConstants","comment":"Changes the setting indicating if values of operand constants that differ should be \n ignored when determining code unit differences.","params":[{"type_long":"boolean","name":"ignore","comment":"true means code unit differences should ignore differences in values of \n operand constants.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the setting indicating if operand registers that differ other than in size\n are currently being ignored when determining code unit differences.\n@return true if code unit differences are ignoring operand register differences other \n than in size.","static":false,"name":"isIgnoringRegisters","comment":"Gets the setting indicating if operand registers that differ other than in size\n are currently being ignored when determining code unit differences.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if code unit differences are ignoring operand register differences other \n than in size.","type_short":"boolean"}},{"javadoc":"Changes the setting indicating if operand registers that differ other than in size \n should be ignored when determining code unit differences.\n@param ignore true means code unit differences should ignore operand register differences\n other than in size.","static":false,"name":"setIgnoreRegisters","comment":"Changes the setting indicating if operand registers that differ other than in size \n should be ignored when determining code unit differences.","params":[{"type_long":"boolean","name":"ignore","comment":"true means code unit differences should ignore operand register differences\n other than in size.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyListeners","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the indicated listener to those that get notified when the ListingDiff's set of \n differences and unmatched addresses changes.\n@param listener the listener to be notified","static":false,"name":"addListingDiffChangeListener","comment":"Adds the indicated listener to those that get notified when the ListingDiff's set of \n differences and unmatched addresses changes.","params":[{"type_long":"ghidra.app.util.viewer.listingpanel.ListingDiffChangeListener","name":"listener","comment":"the listener to be notified","type_short":"ListingDiffChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the indicated listener from those that get notified when the ListingDiff's set of \n differences and unmatched addresses changes.\n@param listener the listener to be removed","static":false,"name":"removeListingDiffChangeListener","comment":"Removes the indicated listener from those that get notified when the ListingDiff's set of \n differences and unmatched addresses changes.","params":[{"type_long":"ghidra.app.util.viewer.listingpanel.ListingDiffChangeListener","name":"listener","comment":"the listener to be removed","type_short":"ListingDiffChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the matching code unit from the other listing for the specified code unit from one\n of the two listings whose differences this class determines.\n@param codeUnit the code unit whose match this determines.\n@param isListing1 true indicates the code unit is from the first listing. false indicates\n it is from the second listing.\n@return the matching code unit or null","static":false,"name":"getMatchingCodeUnit","comment":"Gets the matching code unit from the other listing for the specified code unit from one\n of the two listings whose differences this class determines.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"the code unit whose match this determines.","type_short":"CodeUnit"},{"type_long":"boolean","name":"isListing1","comment":"true indicates the code unit is from the first listing. false indicates\n it is from the second listing.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnit","comment":"the matching code unit or null","type_short":"CodeUnit"}},{"javadoc":"Returns an array of the indicated contiguous number of indices starting at 0.\n This provides a convenient way to get an array indicating all the operand indices for\n a particular code unit by specifying its number of operands.\n@param number the number of indices to return.\n@return the indices.","static":false,"name":"getAllIndices","comment":"Returns an array of the indicated contiguous number of indices starting at 0.\n This provides a convenient way to get an array indicating all the operand indices for\n a particular code unit by specifying its number of operands.","params":[{"type_long":"int","name":"number","comment":"the number of indices to return.","type_short":"int"}],"throws":[],"return":{"type_long":"int[]","comment":"the indices.","type_short":"int[]"}}],"name":"ListingDiff","comment":"Determines where instructions couldn't be matched and where they differ between sets of \n addresses as provided by a ListingAddressCorrelation. Initially this will be byte \n differences and instruction operand differences for any instructions that were determined \n to be matched.\n Important: This class is not intended to be used for an entire program. Instead it is \n for comparing smaller portions such as functions. If the correlation handed to this class \n associates two large address sets, then the address sets, such as byte differences, that are \n created by this class could potentially consume large amounts of memory.","fields":[{"type_long":"ghidra.program.util.ListingAddressCorrelation","javadoc":"","static":false,"name":"correlation","comment":"","type_short":"ListingAddressCorrelation","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"unmatchedCode1","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"unmatchedCode2","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"byteDiffs1","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"byteDiffs2","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"codeUnitDiffs1","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"codeUnitDiffs2","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"ignoreByteDiffs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"ignoreConstants","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"ignoreRegisters","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.app.util.viewer.listingpanel.ListingDiffChangeListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"ArrayList","constant_value":null}]}
