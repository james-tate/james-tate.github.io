{"implements":[],"javadoc":"<CODE>ProgramMergeManager<\/CODE> is a class for merging the differences between two\n programs as specified by a <CODE>ProgramMergeFilter<\/CODE> and the address \n ranges to be merged.\n <P>Program1 is the program being modified by the merge. Program2 is source\n for obtaining differences to apply to program1.\n <P>\n <CODE>ProgramDiff<\/CODE> is being used to determine the differences between\n the two programs.\n <P>If name conflicts occur while merging, the item (for example, symbol) will\n be merged with a new name that consists of the original name followed by \"_conflict\"\n and a one up number.\n@see ghidra.program.util.ProgramMergeFilter\n@see ghidra.program.util.ProgramDiff","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"<CODE>ProgramMergeManager<\/CODE> allows the merging of differences from program1\n or program2 into the merged program.\n@param program1 the first program (read only) for the merge.\n@param program2 the second program (read only) for the merge.\n@param monitor the task monitor for indicating progress at determining\n  the differences. This also allows the user to cancel the merge.\n@throws ProgramConflictException if the memory blocks, that overlap\n between the two programs, do not match. This indicates that programs\n couldn't be compared to determine the differences.","static":false,"name":"<init>","comment":"ProgramMergeManager allows the merging of differences from program1\n or program2 into the merged program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program (read only) for the merge.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program (read only) for the merge.","type_short":"Program"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating progress at determining\n  the differences. This also allows the user to cancel the merge.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"if the memory blocks, that overlap\n between the two programs, do not match. This indicates that programs\n couldn't be compared to determine the differences.","type_short":"ProgramConflictException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>ProgramMergeManager<\/CODE> allows the merging of differences from program1\n or program2 into the merged program.\n@param program1 the first program for the merge. This program will get \n modified by merge.\n@param program2 the second program (read only) for the merge.\n@param p1LimitedAddressSet the limited address set. program differences\n can only be merged if they overlap this address set. null means find\n differences in each of the entire programs.\n The addresses in this set should be derived from program1.\n@param monitor the task monitor for indicating progress at determining\n  the differences. This also allows the user to cancel the merge.\n@throws ProgramConflictException if the memory blocks, that overlap\n between the two programs, do not match. This indicates that programs\n couldn't be compared to determine the differences.","static":false,"name":"<init>","comment":"ProgramMergeManager allows the merging of differences from program1\n or program2 into the merged program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program for the merge. This program will get \n modified by merge.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program (read only) for the merge.","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1LimitedAddressSet","comment":"the limited address set. program differences\n can only be merged if they overlap this address set. null means find\n differences in each of the entire programs.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating progress at determining\n  the differences. This also allows the user to cancel the merge.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"if the memory blocks, that overlap\n between the two programs, do not match. This indicates that programs\n couldn't be compared to determine the differences.","type_short":"ProgramConflictException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine whether memory between the two programs matches.\n For example, if one program has more memory than the other then it \n doesn't match or if the address ranges for memory are different for \n the two programs then they don't match.\n@return whether the memory matches between the two programs.","static":false,"name":"memoryMatches","comment":"Determine whether memory between the two programs matches.\n For example, if one program has more memory than the other then it \n doesn't match or if the address ranges for memory are different for \n the two programs then they don't match.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"whether the memory matches between the two programs.","type_short":"boolean"}},{"javadoc":"Gets the filtered program differences for this merge. Only differences are\n indicated for merge filter categories that are enabled and for address\n that have not been marked as ignored.\n@return the program differences.\n The addresses in this address set are derived from program2.","static":false,"name":"getFilteredDifferences","comment":"Gets the filtered program differences for this merge. Only differences are\n indicated for merge filter categories that are enabled and for address\n that have not been marked as ignored.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the program differences.\n The addresses in this address set are derived from program2.","type_short":"AddressSetView"}},{"javadoc":"Gets the filtered program differences for this merge. Only differences are\n indicated for merge filter categories that are enabled and for address\n that have not been marked as ignored.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.\n@return the program differences.\n The addresses in this address set are derived from program2.","static":false,"name":"getFilteredDifferences","comment":"Gets the filtered program differences for this merge. Only differences are\n indicated for merge filter categories that are enabled and for address\n that have not been marked as ignored.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the program differences.\n The addresses in this address set are derived from program2.","type_short":"AddressSetView"}},{"javadoc":"Get a copy of the diff filter that the merge is using.","static":false,"name":"getDiffFilter","comment":"Get a copy of the diff filter that the merge is using.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramDiffFilter","comment":"","type_short":"ProgramDiffFilter"}},{"javadoc":"Set the filter that indicates which parts of the Program should be \n diffed.\n@param filter the filter indicating the types of differences to be \n determined by this ProgramMerge.","static":false,"name":"setDiffFilter","comment":"Set the filter that indicates which parts of the Program should be \n diffed.","params":[{"type_long":"ghidra.program.util.ProgramDiffFilter","name":"filter","comment":"the filter indicating the types of differences to be \n determined by this ProgramMerge.","type_short":"ProgramDiffFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a copy of the filter that indicates which parts of the Program \n should be merged.","static":false,"name":"getMergeFilter","comment":"Get a copy of the filter that indicates which parts of the Program \n should be merged.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramMergeFilter","comment":"","type_short":"ProgramMergeFilter"}},{"javadoc":"Set the filter that indicates which parts of the Program should be \n applied from the second program to the first program.\n@param filter the filter indicating the types of differences to apply.","static":false,"name":"setMergeFilter","comment":"Set the filter that indicates which parts of the Program should be \n applied from the second program to the first program.","params":[{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the filter indicating the types of differences to apply.","type_short":"ProgramMergeFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the addresses from combining the address sets in program1 and program2\n@return the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getCombinedAddresses","comment":"Returns the addresses from combining the address sets in program1 and program2","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns the addresses in common between program1 and program2\n@return the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesInCommon","comment":"Returns the addresses in common between program1 and program2","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns the addresses that are in program1, but not in program2\n@return the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesOnlyInOne","comment":"Returns the addresses that are in program1, but not in program2","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns the addresses that are in program2, but not in program1\n@return the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","static":false,"name":"getAddressesOnlyInTwo","comment":"Returns the addresses that are in program2, but not in program1","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","type_short":"AddressSetView"}},{"javadoc":"Gets the first program being compared by the ProgramDiff.\n@return program1. This is the program being modified by the merge.\n The addresses in this address set are derived from program1.","static":false,"name":"getProgramOne","comment":"Gets the first program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program1. This is the program being modified by the merge.\n The addresses in this address set are derived from program1.","type_short":"Program"}},{"javadoc":"Gets the second program being compared by the ProgramDiff.\n@return program2. This is the program for obtaining the program information to merge.","static":false,"name":"getProgramTwo","comment":"Gets the second program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program2. This is the program for obtaining the program information to merge.","type_short":"Program"}},{"javadoc":"Get the address set indicating the addresses to be ignored (not checked) when determining\n differences between the two programs.\n@return the set of addresses to ignore.\n The addresses in this address set are derived from program1.","static":false,"name":"getIgnoreAddressSet","comment":"Get the address set indicating the addresses to be ignored (not checked) when determining\n differences between the two programs.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the set of addresses to ignore.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Get the address set that the process of determining differences is limited to. \n In other words, only addresses in this set will be checked by the Diff.\n@return the address set\n The addresses in this address set are derived from program1.","static":false,"name":"getLimitedAddressSet","comment":"Get the address set that the process of determining differences is limited to. \n In other words, only addresses in this set will be checked by the Diff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Gets a string indicating warnings that occurred during the initial Diff \n of the two programs.\n@return the warnings","static":false,"name":"getWarnings","comment":"Gets a string indicating warnings that occurred during the initial Diff \n of the two programs.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the warnings","type_short":"String"}},{"javadoc":"Merge the differences from the indicated program at the specified\n  address with the indicated filtering.\n@param p2Address the address to be merged. \n This address should be derived from program2.\n@param filter the filter indicating what types of differences to merge.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program at the specified\n  address with the indicated filtering.","params":[{"type_long":"ghidra.program.model.address.Address","name":"p2Address","comment":"the address to be merged. \n This address should be derived from program2.","type_short":"Address"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the filter indicating what types of differences to merge.","type_short":"ProgramMergeFilter"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"Merge the differences from the indicated program at the specified\n  address with the current filtering.\n@param p2Address the address to be merged. \n This address should be derived from program2.\n@param monitor monitor for reporting merge status to the user.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program at the specified\n  address with the current filtering.","params":[{"type_long":"ghidra.program.model.address.Address","name":"p2Address","comment":"the address to be merged. \n This address should be derived from program2.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor for reporting merge status to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"Merge the differences from the indicated program at the specified\n  address with the indicated filtering.\n@param p2Address the address to be merged. \n This address should be derived from program2.\n@param filter the filter indicating what types of differences to merge.\n@param monitor monitor for reporting merge status to the user.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program at the specified\n  address with the indicated filtering.","params":[{"type_long":"ghidra.program.model.address.Address","name":"p2Address","comment":"the address to be merged. \n This address should be derived from program2.","type_short":"Address"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the filter indicating what types of differences to merge.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor for reporting merge status to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"Ignore the differences for the indicated address set.\n@param p1AddressSet the address set to be merged. \n The addresses in this set should be derived from program1.","static":false,"name":"ignore","comment":"Ignore the differences for the indicated address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1AddressSet","comment":"the address set to be merged. \n The addresses in this set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restrict the resulting differences to the indicated address set.\n Although the Diff will check for differences based on the limited set, the resulting\n differences from calls to getDifferences() will only return addresses contained in\n this restricted address set.\n@param p1AddressSet the address set to restrict the getFilteredDifferences() to.\n The addresses in this set are derived from program1.","static":false,"name":"restrictResults","comment":"Restrict the resulting differences to the indicated address set.\n Although the Diff will check for differences based on the limited set, the resulting\n differences from calls to getDifferences() will only return addresses contained in\n this restricted address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1AddressSet","comment":"the address set to restrict the getFilteredDifferences() to.\n The addresses in this set are derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the address set that is currently being used to restrict the\n differences that get returned.\n@return the address set being used to restrict the Diff results.\n The addresses in this set are derived from program1.","static":false,"name":"getRestrictedAddressSet","comment":"Return the address set that is currently being used to restrict the\n differences that get returned.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set being used to restrict the Diff results.\n The addresses in this set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Remove the restriction for the resulting differences to the indicated address set.","static":false,"name":"removeResultRestrictions","comment":"Remove the restriction for the resulting differences to the indicated address set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the error messages that resulted from doing the merge.\n@return String empty string if there were no problems with the merge.","static":false,"name":"getErrorMessage","comment":"Get the error messages that resulted from doing the merge.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"String empty string if there were no problems with the merge.","type_short":"String"}},{"javadoc":"Get the informational messages that resulted from doing the merge.\n@return String empty string if there were no information messages\n generated during the merge.","static":false,"name":"getInfoMessage","comment":"Get the informational messages that resulted from doing the merge.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"String empty string if there were no information messages\n generated during the merge.","type_short":"String"}},{"javadoc":"","static":false,"name":"clearMessages","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Merge the differences from the indicated program on the specified\n  address set with the indicated filtering.\n@param p1MergeSet the address set to be merged. \n The addresses in this set should be derived from program1.\n@param filter the filter indicating what types of differences to merge.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program on the specified\n  address set with the indicated filtering.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the address set to be merged. \n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the filter indicating what types of differences to merge.","type_short":"ProgramMergeFilter"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"Merge the differences from the indicated program on the specified\n  address set with the filtering that is currently set.\n@param p1MergeSet the address set to be merged\n The addresses in this set should be derived from program1.\n@param monitor task monitor for reporting merge status to the user.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program on the specified\n  address set with the filtering that is currently set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the address set to be merged\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor for reporting merge status to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"Merge the differences from the indicated program on the specified\n  address set with the indicated filtering.\n@param p1MergeSet the address set to be merged\n The addresses in this set should be derived from program1.\n@param filter the filter indicating what types of differences to merge.\n@param monitor task monitor for reporting merge status to the user.\n@return true if merge succeeds\n@throws MemoryAccessException if bytes can't be copied.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"merge","comment":"Merge the differences from the indicated program on the specified\n  address set with the indicated filtering.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the address set to be merged\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the filter indicating what types of differences to merge.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor for reporting merge status to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if merge succeeds","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasMergeAddresses","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1AddressSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"<CODE>mergeProgramContext<\/CODE> merges all program context register values\n (as indicated) in the specified address set from the second program. \n It merges them into the merge program.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"mergeProgramContext","comment":"mergeProgramContext merges all program context register values\n (as indicated) in the specified address set from the second program. \n It merges them into the merge program.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeBytes<\/CODE> merges byte differences within the specified\n  address set. The program number indicates whether to get the bytes from\n  program1 or program2 of the merge.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.\n@throws MemoryAccessException if bytes can't be merged.\n@throws CancelledException if user cancels via the monitor.","static":false,"name":"mergeBytes","comment":"mergeBytes merges byte differences within the specified\n  address set. The program number indicates whether to get the bytes from\n  program1 or program2 of the merge.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be merged.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels via the monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeCodeUnits<\/CODE> merges all instructions &\/or data\n (as indicated) in the specified address set from the second program. \n It merges them into the merge program. When merging\n instructions, the bytes are also moved if they differ.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.\n@throws MemoryAccessException if bytes can't be copied.","static":false,"name":"mergeCodeUnits","comment":"mergeCodeUnits merges all instructions \/or data\n (as indicated) in the specified address set from the second program. \n It merges them into the merge program. When merging\n instructions, the bytes are also moved if they differ.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines which addresses in the given set contain function tag differences \n between the two programs being compared. This address set is then passed\n to the {@link ProgramMerge} to be processed.\n@param p1AddressSet the address set to be merged\n@param filter the types of differences to merge\n@param monitor task monitor","static":false,"name":"mergeFunctionTags","comment":"Determines which addresses in the given set contain function tag differences \n between the two programs being compared. This address set is then passed\n to the ProgramMerge to be processed.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1AddressSet","comment":"the address set to be merged","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the types of differences to merge","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeComments<\/CODE> merges all comments\n in the specified address set from the second program \n based on the current merge filter setting.\n It merges them into the merge program.\n This merges eol, pre, post, and plate comments.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeComments","comment":"mergeComments merges all comments\n in the specified address set from the second program \n based on the current merge filter setting.\n It merges them into the merge program.\n This merges eol, pre, post, and plate comments.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeTypeOfComments","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1AddressSet","comment":"","type_short":"AddressSetView"},{"type_long":"int","name":"mergeCommentType","comment":"","type_short":"int"},{"type_long":"int","name":"applyType","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>replaceFunctionSymbols<\/CODE> merges function symbol differences within the specified\n  address set. The program number indicates whether to get the functions from\n  program1 or program2 of the merge.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"replaceFunctionSymbols","comment":"replaceFunctionSymbols merges function symbol differences within the specified\n  address set. The program number indicates whether to get the functions from\n  program1 or program2 of the merge.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeFunctions<\/CODE> merges function differences within the specified\n  address set based on the current merge filter setting.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeFunctions","comment":"mergeFunctions merges function differences within the specified\n  address set based on the current merge filter setting.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeReferences<\/CODE> merges all references\n in the specified address set from the second program\n based on the current merge filter setting.\n It merges them into the merge program.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeReferences","comment":"mergeReferences merges all references\n in the specified address set from the second program\n based on the current merge filter setting.\n It merges them into the merge program.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeLabels<\/CODE> merges all symbols and aliases\n in the specified address set from the second program \n based on the current merge filter setting.\n It merges them into the merge program.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeLabels","comment":"mergeLabels merges all symbols and aliases\n in the specified address set from the second program \n based on the current merge filter setting.\n It merges them into the merge program.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeBookmarks<\/CODE> merges bookmark differences \n  within the specified address set.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeBookmarks","comment":"mergeBookmarks merges bookmark differences \n  within the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>mergeProperties<\/CODE> merges user defined property differences \n  within the specified address set based on the current merge filter setting.\n@param p1MergeSet the addresses to be merged.\n The addresses in this set should be derived from program1.\n@param filter the current merge filter settings indicating what types\n of differences should be merged.\n@param monitor the task monitor for notifying the user of this merge's\n progress.","static":false,"name":"mergeProperties","comment":"mergeProperties merges user defined property differences \n  within the specified address set based on the current merge filter setting.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"p1MergeSet","comment":"the addresses to be merged.\n The addresses in this set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.program.util.ProgramMergeFilter","name":"filter","comment":"the current merge filter settings indicating what types\n of differences should be merged.","type_short":"ProgramMergeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's\n progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ProgramMergeManager","comment":"ProgramMergeManager is a class for merging the differences between two\n programs as specified by a ProgramMergeFilter and the address \n ranges to be merged.\n Program1 is the program being modified by the merge. Program2 is source\n for obtaining differences to apply to program1.\n \n ProgramDiff is being used to determine the differences between\n the two programs.\n If name conflicts occur while merging, the item (for example, symbol) will\n be merged with a new name that consists of the original name followed by \"_conflict\"\n and a one up number.","fields":[{"type_long":"java.lang.StringBuffer","javadoc":"","static":false,"name":"errorMsg","comment":"","type_short":"StringBuffer","constant_value":null},{"type_long":"java.lang.StringBuffer","javadoc":"","static":false,"name":"infoMsg","comment":"","type_short":"StringBuffer","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"The first program (used as read only) for the merge.","static":false,"name":"program1","comment":"The first program (used as read only) for the merge.","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"The second program (used as read only) for the merge.","static":false,"name":"program2","comment":"The second program (used as read only) for the merge.","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.util.ProgramDiffFilter","javadoc":"The last filter externally applied to the ProgramDiff.","static":false,"name":"diffFilter","comment":"The last filter externally applied to the ProgramDiff.","type_short":"ProgramDiffFilter","constant_value":null},{"type_long":"ghidra.program.util.ProgramDiff","javadoc":"Differences between program1 and program2 determined thus far.","static":false,"name":"programDiff","comment":"Differences between program1 and program2 determined thus far.","type_short":"ProgramDiff","constant_value":null},{"type_long":"ghidra.program.util.ProgramMergeFilter","javadoc":"","static":false,"name":"mergeFilter","comment":"","type_short":"ProgramMergeFilter","constant_value":null},{"type_long":"ghidra.program.util.ProgramMerge","javadoc":"","static":false,"name":"merger","comment":"","type_short":"ProgramMerge","constant_value":null}]}
