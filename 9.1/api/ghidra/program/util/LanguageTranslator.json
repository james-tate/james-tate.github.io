{"implements":["ghidra.util.classfinder.ExtensionPoint"],"javadoc":"NOTE:  ALL LanguageTranslator CLASSES MUST END IN \"LanguageTranslator\".  If not,\n the ClassSearcher will not find them.\n \n <code>LanguageTranslator<\/code> provides translation capabilities used by Program.setLanguage\n when converting a program from one language to another or from one version to another.\n <br>\n Explicit translator implementations must implement the default constructor and should not\n instantiate Language, AddressSpace, AddressFactory or Register objects until isValid() is invoked.","static":false,"methods":[{"javadoc":"Validate translator to complete initialization and ensure language compatibility.\n This method will be invoked by the LanguageTranslatorFactory before handing out this\n translator.\n@returns true if translator successfully validated","static":false,"name":"isValid","comment":"Validate translator to complete initialization and ensure language compatibility.\n This method will be invoked by the LanguageTranslatorFactory before handing out this\n translator.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns old language\n@throws IllegalStateException if instance has not been validated\n@see #isValid()","static":false,"name":"getOldLanguage","comment":"Returns old language","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"","type_short":"Language"}},{"javadoc":"Returns new language","static":false,"name":"getNewLanguage","comment":"Returns new language","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"","type_short":"Language"}},{"javadoc":"Returns old language name","static":false,"name":"getOldLanguageID","comment":"Returns old language name","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.LanguageID","comment":"","type_short":"LanguageID"}},{"javadoc":"Returns new language name","static":false,"name":"getNewLanguageID","comment":"Returns new language name","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.LanguageID","comment":"","type_short":"LanguageID"}},{"javadoc":"Returns old language version","static":false,"name":"getOldVersion","comment":"Returns old language version","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns new language version","static":false,"name":"getNewVersion","comment":"Returns new language version","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Translate BASE address spaces (Overlay spaces are not handled)\n@param oldSpaceName old space name\n@return corresponding address space in new language","static":false,"name":"getNewAddressSpace","comment":"Translate BASE address spaces (Overlay spaces are not handled)","params":[{"type_long":"java.lang.String","name":"oldSpaceName","comment":"old space name","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"corresponding address space in new language","type_short":"AddressSpace"}},{"javadoc":"Get the old register at the specified oldAddr.  This will null if the specified\n address is offcut within the register.\n The smallest register will be returned which is greater than or equal to the specified size.\n@param oldAddr old register address.\n@param size minimum register size\n@return old register or null if suitable register can not be found.\n@see #getOldRegisterContaining(Address)","static":false,"name":"getOldRegister","comment":"Get the old register at the specified oldAddr.  This will null if the specified\n address is offcut within the register.\n The smallest register will be returned which is greater than or equal to the specified size.","params":[{"type_long":"ghidra.program.model.address.Address","name":"oldAddr","comment":"old register address.","type_short":"Address"},{"type_long":"int","name":"size","comment":"minimum register size","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"old register or null if suitable register can not be found.","type_short":"Register"}},{"javadoc":"Get the largest old register which contains the specified oldAddr\n@param oldAddr old register address which may be offcut\n@return old register or null if suitable register can not be found.","static":false,"name":"getOldRegisterContaining","comment":"Get the largest old register which contains the specified oldAddr","params":[{"type_long":"ghidra.program.model.address.Address","name":"oldAddr","comment":"old register address which may be offcut","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"old register or null if suitable register can not be found.","type_short":"Register"}},{"javadoc":"Returns the old processor context register or null if not defined","static":false,"name":"getOldContextRegister","comment":"Returns the old processor context register or null if not defined","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"Find new register which corresponds to the specified old register.\n@param oldReg old register\n@return new register or null if corresponding register not found.","static":false,"name":"getNewRegister","comment":"Find new register which corresponds to the specified old register.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"oldReg","comment":"old register","type_short":"Register"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"new register or null if corresponding register not found.","type_short":"Register"}},{"javadoc":"Returns the new processor context register or null if not defined","static":false,"name":"getNewContextRegister","comment":"Returns the new processor context register or null if not defined","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"Get the translated register value\n@param oldValue old register value (may not be null)\n@return new register value or null if register not mapped\n@see #isValueTranslationRequired(Register)","static":false,"name":"getNewRegisterValue","comment":"Get the translated register value","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"oldValue","comment":"old register value (may not be null)","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"new register value or null if register not mapped","type_short":"RegisterValue"}},{"javadoc":"Returns true if register value translation required for \n program context.\n@param oldReg\n@see #getNewRegisterValue(RegisterValue)","static":false,"name":"isValueTranslationRequired","comment":"Returns true if register value translation required for \n program context.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"oldReg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Obtain the new compiler specification ID given the old compiler spec ID.\n@param oldCompilerSpecID old compiler spec ID.\n@return new compiler spec ID.","static":false,"name":"getNewCompilerSpecID","comment":"Obtain the new compiler specification ID given the old compiler spec ID.","params":[{"type_long":"ghidra.program.model.lang.CompilerSpecID","name":"oldCompilerSpecID","comment":"old compiler spec ID.","type_short":"CompilerSpecID"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.CompilerSpecID","comment":"new compiler spec ID.","type_short":"CompilerSpecID"}},{"javadoc":"Get a compiler spec suitable for use with the old language.  The compiler \n spec returned is intended for upgrade use only prior to the setLanguage\n and may be based upon compiler conventions specified in the new compiler \n spec returned by getNewCompilerSpec given the same compilerSpecID.\n@param oldCompilerSpecID old compiler spec ID.\n@return compiler spec for use with old language\n@throws CompilerSpecNotFoundException if new compiler spec not found based upon \n translator mappings.","static":false,"name":"getOldCompilerSpec","comment":"Get a compiler spec suitable for use with the old language.  The compiler \n spec returned is intended for upgrade use only prior to the setLanguage\n and may be based upon compiler conventions specified in the new compiler \n spec returned by getNewCompilerSpec given the same compilerSpecID.","params":[{"type_long":"ghidra.program.model.lang.CompilerSpecID","name":"oldCompilerSpecID","comment":"old compiler spec ID.","type_short":"CompilerSpecID"}],"throws":[{"type_long":"ghidra.program.model.lang.CompilerSpecNotFoundException","comment":"if new compiler spec not found based upon \n translator mappings.","type_short":"CompilerSpecNotFoundException"}],"return":{"type_long":"ghidra.program.model.lang.CompilerSpec","comment":"compiler spec for use with old language","type_short":"CompilerSpec"}},{"javadoc":"Invoked after Program language upgrade has completed.  \n Implementation of this method permits the final re-disassembled program to be\n examined\/modified to address more complex language upgrades.  This method will only be \n invoked on the latest translator, which means all complex multi-version post-upgrade\n concerns must factor in the complete language transition.  The program's language \n information will still reflect the original pre-upgrade state, and if the program is\n undergoing a schema version upgrade as well, certain complex upgrades may not\n have been completed (e.g., Function and Variable changes).  Program modifications should\n be restricted to instruction and instruction context changes only.\n@param program\n@param oldLanguage the oldest language involved in the current upgrade translation\n (this is passed since this is the only fixup invocation which must handle the any\n relevant fixup complexities when transitioning from the specified oldLanguage).\n@param monitor task monitor\n@throws Exception if a bad exception occurs with the post upgrade fixup\n@throws CancelledException if upgrade cancelled","static":false,"name":"fixupInstructions","comment":"Invoked after Program language upgrade has completed.  \n Implementation of this method permits the final re-disassembled program to be\n examined\/modified to address more complex language upgrades.  This method will only be \n invoked on the latest translator, which means all complex multi-version post-upgrade\n concerns must factor in the complete language transition.  The program's language \n information will still reflect the original pre-upgrade state, and if the program is\n undergoing a schema version upgrade as well, certain complex upgrades may not\n have been completed (e.g., Function and Variable changes).  Program modifications should\n be restricted to instruction and instruction context changes only.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.lang.Language","name":"oldLanguage","comment":"the oldest language involved in the current upgrade translation\n (this is passed since this is the only fixup invocation which must handle the any\n relevant fixup complexities when transitioning from the specified oldLanguage).","type_short":"Language"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.lang.Exception","comment":"if a bad exception occurs with the post upgrade fixup","type_short":"Exception"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if upgrade cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LanguageTranslator","comment":"NOTE:  ALL LanguageTranslator CLASSES MUST END IN \"LanguageTranslator\".  If not,\n the ClassSearcher will not find them.\n \n LanguageTranslator provides translation capabilities used by Program.setLanguage\n when converting a program from one language to another or from one version to another.\n \n Explicit translator implementations must implement the default constructor and should not\n instantiate Language, AddressSpace, AddressFactory or Register objects until isValid() is invoked.","fields":[]}
