{"implements":["ghidra.program.model.lang.DisassemblerContext"],"javadoc":"Maintains processor state information during disassembly and analysis.  Tracks register state \n associated with instruction flows.  Within this context, a flow is defined as a contiguous\n range of instructions.  Also, this context provides storage for context states at future flow\n addresses, which will be used when subsequent flowTo(Address) or flowStart(Address) calls \n are made with those addresses.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor for DisassemblerContext.\n@param programContext contains the values for registers at specific addresses store in the program.","static":false,"name":"<init>","comment":"Constructor for DisassemblerContext.","params":[{"type_long":"ghidra.program.model.listing.ProgramContext","name":"programContext","comment":"contains the values for registers at specific addresses store in the program.","type_short":"ProgramContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getProgramContext","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.ProgramContext","comment":"","type_short":"ProgramContext"}},{"javadoc":"","static":false,"name":"getBaseContextRegister","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"Saves the current processor state for when this context flows to the given address.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param address the address at which to save the current processor state.\n@return context register value which was copied","static":false,"name":"copyToFutureFlowState","comment":"Saves the current processor state for when this context flows to the given address.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address at which to save the current processor state.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"context register value which was copied","type_short":"RegisterValue"}},{"javadoc":"Saves the current processor state flowing from the fromAddr, for when this context flows to the given address.\n@param fromAddr the address from which this flow originates.\n@param destAddr the address at which to save the current processor state.\n@return context register value which was copied","static":false,"name":"copyToFutureFlowState","comment":"Saves the current processor state flowing from the fromAddr, for when this context flows to the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which this flow originates.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"the address at which to save the current processor state.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"context register value which was copied","type_short":"RegisterValue"}},{"javadoc":"Saves the current processor state for when this context is later used at the given address.\n If the address already has a value, return the value on a collision list!\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param address the address at which to save the current processor state.","static":false,"name":"mergeToFutureFlowState","comment":"Saves the current processor state for when this context is later used at the given address.\n If the address already has a value, return the value on a collision list!\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address at which to save the current processor state.","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.ArrayList<ghidra.program.model.lang.RegisterValue>","comment":"","type_short":"ArrayList"}},{"javadoc":"Saves the current processor state flowing from the fromAddr to the destAddr for when this context is later used.\n If the address already has a value, return the value on a collision list!\n@param fromAddr the address from which this flow originated\n@param destAddr the address at which to save the current processor state.","static":false,"name":"mergeToFutureFlowState","comment":"Saves the current processor state flowing from the fromAddr to the destAddr for when this context is later used.\n If the address already has a value, return the value on a collision list!","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which this flow originated","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"the address at which to save the current processor state.","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.ArrayList<ghidra.program.model.lang.RegisterValue>","comment":"","type_short":"ArrayList"}},{"javadoc":"Terminate active flow while preserving any accumulated future context.\n Any context commits resulting from a flowToAddress or flowEnd will be \n unaffected.","static":false,"name":"flowAbort","comment":"Terminate active flow while preserving any accumulated future context.\n Any context commits resulting from a flowToAddress or flowEnd will be \n unaffected.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Starts a new flow. Initializes the current state for all registers using any future flow state\n that has been set.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param address the starting address of a new instruction flow.\n@throws IllegalStateException if a previous flow was not ended.","static":false,"name":"flowStart","comment":"Starts a new flow. Initializes the current state for all registers using any future flow state\n that has been set.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the starting address of a new instruction flow.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Starts a new flow from an address to the new start.\n Initializes the current state for all registers using any future flow state\n that has been set flowing from the fromAddr.\n@param fromAddr address that this flow is flowing from.\n@param toAddr the starting address of a new instruction flow.\n@throws IllegalStateException if a previous flow was not ended.","static":false,"name":"flowStart","comment":"Starts a new flow from an address to the new start.\n Initializes the current state for all registers using any future flow state\n that has been set flowing from the fromAddr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address that this flow is flowing from.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the starting address of a new instruction flow.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get flowed context value at arbitrary destination address without affecting state.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param destAddr\n@param isFallThrough\n@return ","static":false,"name":"getFlowContextValue","comment":"Get flowed context value at arbitrary destination address without affecting state.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"isFallThrough","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"","type_short":"RegisterValue"}},{"javadoc":"Get flowed context value at a destination address, that has been flowed from the fromAddr, without affecting state.\n@param fromAddr address that this flow is flowing from.\n@param toAddr the starting address of a new instruction flow.\n@throws IllegalStateException if a previous flow was not ended.","static":false,"name":"getFlowContextValue","comment":"Get flowed context value at a destination address, that has been flowed from the fromAddr, without affecting state.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address that this flow is flowing from.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"isFallThrough","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"","type_short":"RegisterValue"}},{"javadoc":"Continues the current flow at the given address.  Checks for register values that have been\n stored in the future flow state.  If any registers have saved future state, the current state\n for all registers is written to the program context upto the specified address(exclusive).\n The future flow state values are then loaded into the current context.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param address the address to flow to.\n@throws IllegalStateException if no flow was started.","static":false,"name":"flowToAddress","comment":"Continues the current flow at the given address.  Checks for register values that have been\n stored in the future flow state.  If any registers have saved future state, the current state\n for all registers is written to the program context upto the specified address(exclusive).\n The future flow state values are then loaded into the current context.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to flow to.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Continues the current flow from an address to the given address.  Checks for register values that have been\n stored in the future flow state.  If any registers have saved future state, the current state\n for all registers is written to the program context upto the specified address(exclusive).\n The future flow state values are then loaded into the current context.\n@param fromAddr address that this flow is flowing from.\n@param toAddr the starting address of a new instruction flow.\n@throws IllegalStateException if a previous flow was not ended.","static":false,"name":"flowToAddress","comment":"Continues the current flow from an address to the given address.  Checks for register values that have been\n stored in the future flow state.  If any registers have saved future state, the current state\n for all registers is written to the program context upto the specified address(exclusive).\n The future flow state values are then loaded into the current context.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"address that this flow is flowing from.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the future Register state map and conditionally remove the map\n@param fromAddr Address flowing from\n@param destAddr Address flowing to\n@param remove true to remove the entry\n@return State Map or null if not found","static":false,"name":"getFutureRegisterStateMap","comment":"Get the future Register state map and conditionally remove the map","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"Address flowing from","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"Address flowing to","type_short":"Address"},{"type_long":"boolean","name":"remove","comment":"true to remove the entry","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>","comment":"State Map or null if not found","type_short":"Map"}},{"javadoc":"Lookup and if not found create a future Register flow state\n@param fromAddr can be NO_ADDRESS if flow from is unknown\n@param destAddr future flow state destination.\n@return future flow state at the destination","static":false,"name":"findFutureFlowStateMap","comment":"Lookup and if not found create a future Register flow state","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"can be NO_ADDRESS if flow from is unknown","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"future flow state destination.","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>","comment":"future flow state at the destination","type_short":"Map"}},{"javadoc":"Get next (i.e., fall-through) context register value in active flow.\n Internal state may be updated to track next future context change point.\n@param address\n@param futureStateMap\n@param startOfFlow\n@return ","static":false,"name":"getNextContextInFlow","comment":"Get next (i.e., fall-through) context register value in active flow.\n Internal state may be updated to track next future context change point.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>","name":"futureStateMap","comment":"","type_short":"Map"},{"type_long":"boolean","name":"startOfFlow","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"","type_short":"RegisterValue"}},{"javadoc":"","static":false,"name":"setNextContextChangePoint","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"currentAddress","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Ends the current flow.  Unsaved register values will be saved up to and including max address.\n@param maxAddress the maximum address of an instruction flow.  If maxAddress is null,\n or the current flow address has already advanced beyond maxAddress, then no save is performed.\n@throws IllegalStateException if a flow has not been started.","static":false,"name":"flowEnd","comment":"Ends the current flow.  Unsaved register values will be saved up to and including max address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"maxAddress","comment":"the maximum address of an instruction flow.  If maxAddress is null,\n or the current flow address has already advanced beyond maxAddress, then no save is performed.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#getRegisters()","static":false,"name":"getRegisters","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register[]","comment":"","type_short":"ghidra.program.model.lang.Register[]"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#getRegister(java.lang.String)","static":false,"name":"getRegister","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#getRegisterValue(ghidra.program.model.lang.Register)","static":false,"name":"getRegisterValue","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"","type_short":"RegisterValue"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#getValue(ghidra.program.model.lang.Register, boolean)","static":false,"name":"getValue","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"boolean","name":"signed","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"Sets the value for the given register to be used when the flow advances to the given address\n using either the flowTo() or flowStart() methods.  The new value has precedence over any\n existing value.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param register the register for which the value is to be saved.\n@param address the future flow address to save the value.\n@param newValue the value to save for future flow.","static":false,"name":"setValue","comment":"Sets the value for the given register to be used when the flow advances to the given address\n using either the flowTo() or flowStart() methods.  The new value has precedence over any\n existing value.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"the register for which the value is to be saved.","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the future flow address to save the value.","type_short":"Address"},{"type_long":"java.math.BigInteger","name":"newValue","comment":"the value to save for future flow.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the value for the given register to be used when the flow advances to the given address\n using either the flowTo() or flowStart() methods.  The new value has precedence over any\n existing value.\n@param register the register for which the value is to be saved.\n@param fromAddr the address from which this flow originated\n@param toAddr the future flow address to save the value.\n@param newValue the value to save for future flow.","static":false,"name":"setValue","comment":"Sets the value for the given register to be used when the flow advances to the given address\n using either the flowTo() or flowStart() methods.  The new value has precedence over any\n existing value.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"the register for which the value is to be saved.","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which this flow originated","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the future flow address to save the value.","type_short":"Address"},{"type_long":"java.math.BigInteger","name":"newValue","comment":"the value to save for future flow.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setFutureRegisterValue","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"value","comment":"","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setFutureRegisterValue","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"value","comment":"","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores register value in map.\n If <code>newValuePrecedence<\/code> is true, then the given <code>newValue<\/code>\n overrides the <code>currentValue<\/code>.\n@param fromAddr the address from which the Register value flows.\n@param destAddr the address to store the new value\n@param newValue new value to store\n@param newValuePrecedence true if the new value has precedence over any old value","static":false,"name":"setRegisterValue","comment":"Stores register value in map.\n If newValuePrecedence is true, then the given newValue\n overrides the currentValue.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which the Register value flows.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"the address to store the new value","type_short":"Address"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"newValue","comment":"new value to store","type_short":"RegisterValue"},{"type_long":"boolean","name":"newValuePrecedence","comment":"true if the new value has precedence over any old value","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Combines two Register values.\n@param currentValue the current value\n@param newValue the new value\n@param newValuePrecedence if true, new value has precedence for active bits, else currentValue\n has precedence for active bits.\n@return the combined register value or null if both values are null","static":false,"name":"combineRegisterValues","comment":"Combines two Register values.","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"currentValue","comment":"the current value","type_short":"RegisterValue"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"newValue","comment":"the new value","type_short":"RegisterValue"},{"type_long":"boolean","name":"newValuePrecedence","comment":"if true, new value has precedence for active bits, else currentValue\n has precedence for active bits.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"the combined register value or null if both values are null","type_short":"RegisterValue"}},{"javadoc":"Returns the current flow address for this context.","static":false,"name":"getAddress","comment":"Returns the current flow address for this context.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Saves the context from the startAddr (inclusive) to the end address (inclusive)\n back to the program's stored context.\n@param startAddress\n@param endAddress","static":false,"name":"saveProgramContext","comment":"Saves the context from the startAddr (inclusive) to the end address (inclusive)\n back to the program's stored context.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#hasValue(ghidra.program.model.lang.Register)","static":false,"name":"hasValue","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#setValue(ghidra.program.model.lang.Register, java.math.BigInteger)","static":false,"name":"setValue","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"java.math.BigInteger","name":"value","comment":"","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#clearRegister(ghidra.program.model.lang.Register)","static":false,"name":"clearRegister","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Modify the current context register value at the specified address.  If current \n disassembly flow address equals specified address the current disassembly context \n will be changed, otherwise the future flow state will be changed. This differs from \n {@link #setValue(Register, Address, BigInteger)} in that is can affect the current \n context state at the current address in a non-delayed fashion.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param value register value\n@param address disassembly address","static":false,"name":"setContextRegisterValue","comment":"Modify the current context register value at the specified address.  If current \n disassembly flow address equals specified address the current disassembly context \n will be changed, otherwise the future flow state will be changed. This differs from \n #setValue(Register, Address, BigInteger) in that is can affect the current \n context state at the current address in a non-delayed fashion.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"value","comment":"register value","type_short":"RegisterValue"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"disassembly address","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Modify the current context register value at the specified address.  If current \n disassembly toAddr address equals specified address the current disassembly context \n will be changed, otherwise the future flow state flowing from the fromAddr will be changed.\n This differs from {@link #setValue(Register, Address, BigInteger)} in that is can\n affect the current context state at the current address in a non-delayed fashion.\n@param value register value\n@param address disassembly address\n@param fromAddr the address from which this flow originated\n@param toAddr the future flow address to save the value.","static":false,"name":"setContextRegisterValue","comment":"Modify the current context register value at the specified address.  If current \n disassembly toAddr address equals specified address the current disassembly context \n will be changed, otherwise the future flow state flowing from the fromAddr will be changed.\n This differs from #setValue(Register, Address, BigInteger) in that is can\n affect the current context state at the current address in a non-delayed fashion.","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"value","comment":"register value","type_short":"RegisterValue"},{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which this flow originated","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the future flow address to save the value.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.lang.ProcessorContext#setRegisterValue(ghidra.program.model.lang.RegisterValue)","static":false,"name":"setRegisterValue","comment":"","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"value","comment":"","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the future register value at the specified address.  If no future value is stored,\n it will return the value stored in the program.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param register the register to get a value for.\n@param address the address at which to get a value.\n@param signed if true, interpret the value as signed.\n@return the value of the register at the location, or null if a full value is not established.","static":false,"name":"getValue","comment":"Returns the future register value at the specified address.  If no future value is stored,\n it will return the value stored in the program.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"the register to get a value for.","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address at which to get a value.","type_short":"Address"},{"type_long":"boolean","name":"signed","comment":"if true, interpret the value as signed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"the value of the register at the location, or null if a full value is not established.","type_short":"BigInteger"}},{"javadoc":"Returns the future register value at the specified address that occured because of a flow\n from the fromAddr.  If no future value is stored, it will return the value stored in the program.\n@param value register value\n@param fromAddr the address from which this flow originated\n@param toAddr the future flow address to save the value.\n@param signed if true, interpret the value as signed.\n@return the value of the register at the location, or null if a full value is not established.","static":false,"name":"getValue","comment":"Returns the future register value at the specified address that occured because of a flow\n from the fromAddr.  If no future value is stored, it will return the value stored in the program.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which this flow originated","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the future flow address to save the value.","type_short":"Address"},{"type_long":"boolean","name":"signed","comment":"if true, interpret the value as signed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"the value of the register at the location, or null if a full value is not established.","type_short":"BigInteger"}},{"javadoc":"Returns the future RegisterValue at the specified address.  If no future value is stored,\n it will return the value stored in the program. The value returned may not have a complete\n value for the requested register.\n \n Use this method if keeping separate flows from different flow from addresses is not important.\n@param register the register to get a value for.\n@param address the address at which to get a value.\n@param signed if true, interpret the value as signed.\n@return a RegisterValue object if one has been stored in the future flow or the program.\n The RegisterValue object may have a \"no value\" state for the bits specified by the given register.\n Also, null may be returned if no value have been stored.","static":false,"name":"getRegisterValue","comment":"Returns the future RegisterValue at the specified address.  If no future value is stored,\n it will return the value stored in the program. The value returned may not have a complete\n value for the requested register.\n \n Use this method if keeping separate flows from different flow from addresses is not important.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"the register to get a value for.","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address at which to get a value.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"a RegisterValue object if one has been stored in the future flow or the program.\n The RegisterValue object may have a \"no value\" state for the bits specified by the given register.\n Also, null may be returned if no value have been stored.","type_short":"RegisterValue"}},{"javadoc":"Returns the future RegisterValue at the specified address that occured because of a flow from\n the fromAddr.  If no future value is stored, it will return the value stored in the program.\n The value returned may not have a complete value for the requested register.\n@param register the register to get a value for.\n@param fromAddr the address from which the flow originated\n@param destAddr the address at which to get a value.\n@param signed if true, interpret the value as signed.\n@return a RegisterValue object if one has been stored in the future flow or the program.\n The RegisterValue object may have a \"no value\" state for the bits specified by the given register.\n Also, null may be returned if no value have been stored.","static":false,"name":"getRegisterValue","comment":"Returns the future RegisterValue at the specified address that occured because of a flow from\n the fromAddr.  If no future value is stored, it will return the value stored in the program.\n The value returned may not have a complete value for the requested register.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"the register to get a value for.","type_short":"Register"},{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the address from which the flow originated","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"the address at which to get a value.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"a RegisterValue object if one has been stored in the future flow or the program.\n The RegisterValue object may have a \"no value\" state for the bits specified by the given register.\n Also, null may be returned if no value have been stored.","type_short":"RegisterValue"}},{"javadoc":"Returns an array of locations that have values that will flow to this location\n@param toAddr address that is the target of a flow to\n@return and array of known address flows to this location","static":false,"name":"getKnownFlowToAddresses","comment":"Returns an array of locations that have values that will flow to this location","params":[{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"address that is the target of a flow to","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"and array of known address flows to this location","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"Returns true if a flow has been started and not yet ended.\n@return true if a flow has been started and not yet ended.","static":false,"name":"isFlowActive","comment":"Returns true if a flow has been started and not yet ended.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if a flow has been started and not yet ended.","type_short":"boolean"}}],"name":"DisassemblerContextImpl","comment":"Maintains processor state information during disassembly and analysis.  Tracks register state \n associated with instruction flows.  Within this context, a flow is defined as a contiguous\n range of instructions.  Also, this context provides storage for context states at future flow\n addresses, which will be used when subsequent flowTo(Address) or flowStart(Address) calls \n are made with those addresses.","fields":[{"type_long":"ghidra.program.model.listing.ProgramContext","javadoc":"","static":false,"name":"programContext","comment":"","type_short":"ProgramContext","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"startAddr","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"contextChangePoint","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"currentAddress","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.lang.Register","javadoc":"","static":false,"name":"contextRegister","comment":"","type_short":"Register","constant_value":null},{"type_long":"ghidra.program.model.lang.RegisterValue","javadoc":"Active context register state for the current flow location.","static":false,"name":"contextRegisterValue","comment":"Active context register state for the current flow location.","type_short":"RegisterValue","constant_value":null},{"type_long":"ghidra.program.model.lang.RegisterValue","javadoc":"Delayed context register state for the current flow location.\n Set only if context value changed for current flow location","static":false,"name":"delayedContextRegisterValue","comment":"Delayed context register state for the current flow location.\n Set only if context value changed for current flow location","type_short":"RegisterValue","constant_value":null},{"type_long":"ghidra.program.model.lang.RegisterValue","javadoc":"Noflow context-register value which repeats until the next contextChangePoint","static":false,"name":"repeatedNoflowValue","comment":"Noflow context-register value which repeats until the next contextChangePoint","type_short":"RegisterValue","constant_value":null},{"type_long":"java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>","javadoc":"Active Register context values for the current flow location.\n NOTE: default register values are never included within this state.\n This map is not used for storing the context register\n@see #contextRegisterValue","static":false,"name":"registerStateMap","comment":"Active Register context values for the current flow location.\n NOTE: default register values are never included within this state.\n This map is not used for storing the context register","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<ghidra.program.model.address.Address,java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>>","javadoc":"Future Register context values for specific flow starting locations when\n the flowFrom address is NO_ADDRESS.\n \n A flow from address of NO_ADDRESS is used when it doesn't matter from where\n the flow originates.\n \n NOTE: default register values are never included within this future state","static":false,"name":"noAddressFutureRegisterStateMap","comment":"Future Register context values for specific flow starting locations when\n the flowFrom address is NO_ADDRESS.\n \n A flow from address of NO_ADDRESS is used when it doesn't matter from where\n the flow originates.\n \n NOTE: default register values are never included within this future state","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<ghidra.program.model.address.Address,java.util.Map<ghidra.program.model.address.Address,java.util.Map<ghidra.program.model.lang.Register,ghidra.program.model.lang.RegisterValue>>>","javadoc":"Future RegisterStateMaps from a given flow with a given flowing address.\n    Address.NO_ADDRESS is used as the flow from if there is no flow from.\n NOTE: default register values are never included within this future state","static":false,"name":"futureFlowRegisterStateMaps","comment":"Future RegisterStateMaps from a given flow with a given flowing address.\n    Address.NO_ADDRESS is used as the flow from if there is no flow from.\n NOTE: default register values are never included within this future state","type_short":"Map","constant_value":null}]}
