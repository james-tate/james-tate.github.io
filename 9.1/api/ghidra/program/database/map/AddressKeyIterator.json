{"implements":["db.DBLongIterator"],"javadoc":"Iterator of primary keys that are addresses. The longs returned are the address longs.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs an empty iterator.","static":false,"name":"<init>","comment":"Constructs an empty iterator.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs  new AddressKeyIterator that iterates over all addresses.\n Memory addresses encoded as Absolute are not included.\n@param table the database table key by addresses\n@param addrMap the address map\n@param before positions the iterator before the min value,otherwise after the max value.\n@throws IOException if a database error occurs.","static":false,"name":"<init>","comment":"Constructs  new AddressKeyIterator that iterates over all addresses.\n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the database table key by addresses","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"boolean","name":"before","comment":"positions the iterator before the min value,otherwise after the max value.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs  new AddressKeyIterator that iterates overal all addresses and is initially\n positioned at startAddr.  Memory addresses encoded as Absolute are not included.\n@param table the database table key by addresses\n@param addrMap the address map\n@param startAddr the address at which to position the iterator.\n@param before positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.\n@throws IOException if a database error occurs.","static":false,"name":"<init>","comment":"Constructs  new AddressKeyIterator that iterates overal all addresses and is initially\n positioned at startAddr.  Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the database table key by addresses","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs  new AddressKeyIterator that iterates over an address range.\n Memory addresses encoded as Absolute are not included.\n@param table the database table key by addresses\n@param addrMap the address map\n@param minAddr the first address in the range.\n@param maxAddr the last address in the range.\n@param startAddr the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.\n@param before positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.\n@throws IOException if a database error occurs.","static":false,"name":"<init>","comment":"Constructs  new AddressKeyIterator that iterates over an address range.\n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the database table key by addresses","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.Address","name":"minAddr","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddr","comment":"the last address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs  new AddressKeyIterator to iterate over an address set.\n Memory addresses encoded as Absolute are not included.\n@param table the database table key by addresses\n@param addrMap the address map\n@param set the address set to iterator over\n@param startAddr the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.\n@param before positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.\n@throws IOException if a database error occurs.","static":false,"name":"<init>","comment":"Constructs  new AddressKeyIterator to iterate over an address set.\n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the database table key by addresses","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to iterator over","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterater after the largest address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs  new AddressKeyIterator to iterate over an address set.\n@param table the database table key by addresses\n@param addrMap the address map\n@param absolute if true, only absolute memory address encodings are considered, otherwise \n only standard\/relocatable address encodings are considered.\n@param set the address set to iterator over\n@param startAddr the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.\n@param before positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterator after the largest address.\n@throws IOException if a database error occurs.","static":false,"name":"<init>","comment":"Constructs  new AddressKeyIterator to iterate over an address set.","params":[{"type_long":"db.Table","name":"table","comment":"the database table key by addresses","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"boolean","name":"absolute","comment":"if true, only absolute memory address encodings are considered, otherwise \n only standard\/relocatable address encodings are considered.","type_short":"boolean"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to iterator over","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator, can be null. The exact\n position of the iterator depends on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"positions the iterator before the start address,otherwise after\n the start address. If the start address is null, then before positions the iterator before\n the lowest address, !before positions the iterator after the largest address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see db.DBLongIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.DBLongIterator#hasPrevious()","static":false,"name":"hasPrevious","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.DBLongIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@see db.DBLongIterator#previous()","static":false,"name":"previous","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@see db.DBLongIterator#delete()","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"AddressKeyIterator","comment":"Iterator of primary keys that are addresses. The longs returned are the address longs.","fields":[{"type_long":"db.Table","javadoc":"","static":false,"name":"table","comment":"","type_short":"Table","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","javadoc":"","static":false,"name":"keyRangeList","comment":"","type_short":"List","constant_value":null},{"type_long":"db.DBLongIterator","javadoc":"","static":false,"name":"it","comment":"","type_short":"DBLongIterator","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"keyRangeIndex","comment":"","type_short":"int","constant_value":null}]}
