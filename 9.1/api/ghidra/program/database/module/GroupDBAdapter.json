{"implements":[],"javadoc":"Adapter to access the module, fragment, and parent\/child database tables.","static":false,"methods":[{"javadoc":"Create the root module for a tree; the module ID for the root is 0.\n@param name the name of the program.\n@return record for the root module; should never be null\n@throws IOException if there was a problem accessing the database","static":false,"name":"createRootModule","comment":"Create the root module for a tree; the module ID for the root is 0.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the program.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"record for the root module; should never be null","type_short":"Record"}},{"javadoc":"Create a new module.\n@param parentModuleID ID of parent module\n@param name module name\n@return record for the module\n@throws IOException if there was a problem accessing the database\n@throws DuplicateNameException if a module or fragment already exists\n having the given name","static":false,"name":"createModule","comment":"Create a new module.","params":[{"type_long":"long","name":"parentModuleID","comment":"ID of parent module","type_short":"long"},{"type_long":"java.lang.String","name":"name","comment":"module name","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if a module or fragment already exists\n having the given name","type_short":"DuplicateNameException"}],"return":{"type_long":"db.Record","comment":"record for the module","type_short":"Record"}},{"javadoc":"Get the record for the module with the given key.\n@param module ID\n@return record for the module; null if the record was not found\n@throws IOException if there was a problem accessing the database","static":false,"name":"getModuleRecord","comment":"Get the record for the module with the given key.","params":[{"type_long":"long","name":"moduleID","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"record for the module; null if the record was not found","type_short":"Record"}},{"javadoc":"Get the module record with the given name.\n@param name module name\n@return module record; null if no module exists with the given name\n@throws IOException if there was a problem accessing the database","static":false,"name":"getModuleRecord","comment":"Get the module record with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"module name","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"module record; null if no module exists with the given name","type_short":"Record"}},{"javadoc":"Update the module table with the given record.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateModuleRecord","comment":"Update the module table with the given record.","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new fragment\n@param parentModuleID ID of parent module\n@param name fragment name\n@return record for the fragment\n@throws IOException if there was a problem accessing the database\n@throws DuplicateNameException if a module or fragment already exists\n having the given name","static":false,"name":"createFragment","comment":"Create a new fragment","params":[{"type_long":"long","name":"parentModuleID","comment":"ID of parent module","type_short":"long"},{"type_long":"java.lang.String","name":"name","comment":"fragment name","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if a module or fragment already exists\n having the given name","type_short":"DuplicateNameException"}],"return":{"type_long":"db.Record","comment":"record for the fragment","type_short":"Record"}},{"javadoc":"Get the record for the fragment with the given key.\n@param fragID\n@return \n@throws IOException if there was a problem accessing the database","static":false,"name":"getFragmentRecord","comment":"Get the record for the fragment with the given key.","params":[{"type_long":"long","name":"fragID","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the fragment record with the given name.\n@param name fragment name\n@return fragment record; null if no fragment exists with the given\n name\n@throws IOException if there was a problem accessing the database","static":false,"name":"getFragmentRecord","comment":"Get the fragment record with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"fragment name","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"fragment record; null if no fragment exists with the given\n name","type_short":"Record"}},{"javadoc":"Update the fragment table with the given record.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateFragmentRecord","comment":"Update the fragment table with the given record.","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the record in the Parent\/Child table.\n@param parentID module ID of the parent\n@param childID childID\n@return record; null if the record was not found\n@throws IOException if there was a problem accessing the database","static":false,"name":"getParentChildRecord","comment":"Get the record in the Parent\/Child table.","params":[{"type_long":"long","name":"parentID","comment":"module ID of the parent","type_short":"long"},{"type_long":"long","name":"childID","comment":"childID","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"record; null if the record was not found","type_short":"Record"}},{"javadoc":"Get the keys in the Parent\/Child table that are indexed on the given\n indexed column and have the value of ID.\n@param ID value of indexed column\n@param indexedCol column that is indexed in the table to do the lookup\n@return zero-length array if no records were found\n@throws IOException if there was a problem accessing the database","static":false,"name":"getParentChildKeys","comment":"Get the keys in the Parent\/Child table that are indexed on the given\n indexed column and have the value of ID.","params":[{"type_long":"long","name":"ID","comment":"value of indexed column","type_short":"long"},{"type_long":"int","name":"indexedCol","comment":"column that is indexed in the table to do the lookup","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"zero-length array if no records were found","type_short":"long[]"}},{"javadoc":"Get the Parent\/Child record with the given key.\n@return record or null if the record does not exist\n@throws IOException if there was a problem accessing the database","static":false,"name":"getParentChildRecord","comment":"Get the Parent\/Child record with the given key.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"record or null if the record does not exist","type_short":"Record"}},{"javadoc":"Create a new Parent\/Child record.\n@param parentID module ID of the parent\n@param childID ID for the child\n@return record or nul if the record does not exist\n@throws IOException if there was a problem accessing the database","static":false,"name":"addParentChildRecord","comment":"Create a new Parent\/Child record.","params":[{"type_long":"long","name":"parentID","comment":"module ID of the parent","type_short":"long"},{"type_long":"long","name":"childID","comment":"ID for the child","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"record or nul if the record does not exist","type_short":"Record"}},{"javadoc":"Remove the record with the given key in the Parent\/Child table.\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database","static":false,"name":"removeParentChildRecord","comment":"Remove the record with the given key in the Parent\/Child table.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record was deleted","type_short":"boolean"}},{"javadoc":"Update the Parent\/Child table with the given record.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateParentChildRecord","comment":"Update the Parent\/Child table with the given record.","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the fragment record.\n@param childID\n@throws IOException if there was a problem accessing the database","static":false,"name":"removeFragmentRecord","comment":"Remove the fragment record.","params":[{"type_long":"long","name":"childID","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Remove the module record.\n@param childID\n@return true if the record was removed\n@throws IOException if there was a problem accessing the database","static":false,"name":"removeModuleRecord","comment":"Remove the module record.","params":[{"type_long":"long","name":"childID","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record was removed","type_short":"boolean"}}],"name":"GroupDBAdapter","comment":"Adapter to access the module, fragment, and parent\/child database tables.","fields":[]}
