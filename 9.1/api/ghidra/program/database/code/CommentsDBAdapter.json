{"implements":[],"javadoc":"Adapter to access the comments table for code units. The primary key\n for the table is the address. The record contains all of the comment\n types: Pre, Post, EOL, Plate, & Repeatable.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"","type_short":"int"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.CommentsDBAdapter","comment":"","type_short":"CommentsDBAdapter"}},{"javadoc":"","static":true,"name":"findReadOnlyAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.CommentsDBAdapter","comment":"","type_short":"CommentsDBAdapter"}},{"javadoc":"","static":true,"name":"upgrade","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.program.database.code.CommentsDBAdapter","name":"oldAdapter","comment":"","type_short":"CommentsDBAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.database.code.CommentsDBAdapter","comment":"","type_short":"CommentsDBAdapter"}},{"javadoc":"@return ","static":false,"name":"getRecordCount","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the record at the given address.\n@param addr key for the record\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecord","comment":"Get the record at the given address.","params":[{"type_long":"long","name":"addr","comment":"key for the record","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Create a comment record for the given comment type\/\n@param addr key for the record.\n@param commentCol comment column (type)\n@param comment comment\n@return new comment record\n@throws IOException if there was a problem accessing the database","static":false,"name":"createRecord","comment":"Create a comment record for the given comment type\/","params":[{"type_long":"long","name":"addr","comment":"key for the record.","type_short":"long"},{"type_long":"int","name":"commentCol","comment":"comment column (type)","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"comment","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"new comment record","type_short":"Record"}},{"javadoc":"Delete the record at the given address\n@param addr key for the record\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteRecord","comment":"Delete the record at the given address","params":[{"type_long":"long","name":"addr","comment":"key for the record","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record was deleted","type_short":"boolean"}},{"javadoc":"Delete the records in the given range.\n@param start start address (key)\n@param end address (key)\n@return true if at least one record was removed in the range\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteRecords","comment":"Delete the records in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address (key)","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"address (key)","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if at least one record was removed in the range","type_short":"boolean"}},{"javadoc":"Update the record with the comments from the given record.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateRecord","comment":"Update the record with the comments from the given record.","params":[{"type_long":"db.Record","name":"commentRec","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.database.code.MoveRangeAdapter#getRecords(long, long, boolean)","static":false,"name":"getRecords","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Gets an iterator of all comment records in the program.\n@return iterator of all comment records\n@throws IOException","static":false,"name":"getRecords","comment":"Gets an iterator of all comment records in the program.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"iterator of all comment records","type_short":"RecordIterator"}},{"javadoc":"Get the keys in the given range.\n@param start start of the range\n@param end end of the range\n@param atStart true means to position iterator at start of the range\n@throws IOException if there was a problem accessing the database","static":false,"name":"getKeys","comment":"Get the keys in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start of the range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of the range","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"true means to position iterator at start of the range","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Puts the given record into the table\n@param record the record to put.\n@throws IOException if a database io error occurs","static":false,"name":"putRecord","comment":"Puts the given record into the table","params":[{"type_long":"db.Record","name":"record","comment":"the record to put.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a record iterator starting with the record at addr\n@param addr the address to start the iteration.\n@throws IOException if a database io error occurs","static":false,"name":"getRecords","comment":"Returns a record iterator starting with the record at addr","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to start the iteration.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Returns an address key iterator over the given address set in the given direction.\n@param addrSetView the set to iterator over.\n@param forward the direction to iterate.","static":false,"name":"getKeys","comment":"Returns an address key iterator over the given address set in the given direction.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"the direction to iterate.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Update the addresses in all records to reflect the movement of a memory block.\n@param fromAddr minimum address of the original block to be moved\n@param toAddr the new minimum address after the block move\n@param length the number of bytes in the memory block being moved\n@param monitor progress monitor\n@throws CancelledException\n@throws IOException","static":false,"name":"moveAddressRange","comment":"Update the addresses in all records to reflect the movement of a memory block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"minimum address of the original block to be moved","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the new minimum address after the block move","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of bytes in the memory block being moved","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"CommentsDBAdapter","comment":"Adapter to access the comments table for code units. The primary key\n for the table is the address. The record contains all of the comment\n types: Pre, Post, EOL, Plate,  Repeatable.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"COMMENTS_TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Comments\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"COMMENTS_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"PRE_COMMENT_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"POST_COMMENT_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"EOL_COMMENT_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"PLATE_COMMENT_COL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"REPEATABLE_COMMENT_COL","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"COMMENT_COL_COUNT","comment":"","type_short":"int","constant_value":"5"},{"type_long":"java.lang.String[]","javadoc":"","static":true,"name":"NAMES","comment":"","type_short":"java.lang.String[]","constant_value":null}]}
