{"implements":[],"javadoc":"Adapter that accesses the instruction table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"","type_short":"int"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.InstDBAdapter","comment":"","type_short":"InstDBAdapter"}},{"javadoc":"","static":true,"name":"findReadOnlyAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.InstDBAdapter","comment":"","type_short":"InstDBAdapter"}},{"javadoc":"","static":true,"name":"upgrade","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.program.database.code.InstDBAdapter","name":"oldAdapter","comment":"","type_short":"InstDBAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.database.code.InstDBAdapter","comment":"","type_short":"InstDBAdapter"}},{"javadoc":"Create a new instruction.\n@param addr address (key for the record)\n@param protoID prototype ID\n@throws IOException if there was a problem accessing the database","static":false,"name":"createInstruction","comment":"Create a new instruction.","params":[{"type_long":"long","name":"addr","comment":"address (key for the record)","type_short":"long"},{"type_long":"int","name":"protoID","comment":"prototype ID","type_short":"int"},{"type_long":"byte","name":"flags","comment":"","type_short":"byte"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the flag column in the record at addr to the give flags byte.\n@param addr key of the record to be changed.\n@param flags the flags byte to be stored in the record.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateFlags","comment":"Sets the flag column in the record at addr to the give flags byte.","params":[{"type_long":"long","name":"addr","comment":"key of the record to be changed.","type_short":"long"},{"type_long":"byte","name":"flags","comment":"the flags byte to be stored in the record.","type_short":"byte"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the instruction.\n@param addr address (key for the record)\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteRecord","comment":"Remove the instruction.","params":[{"type_long":"long","name":"addr","comment":"address (key for the record)","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the next record at or after the given address key\n@param addr the address to begin the search.\n@return the next record or null.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordAtOrAfter","comment":"Returns the next record at or after the given address key","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to begin the search.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the next record or null.","type_short":"Record"}},{"javadoc":"Returns the next record after the given address key\n@param addr the address to begin the search.\n@return the next record or null.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordAfter","comment":"Returns the next record after the given address key","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to begin the search.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the next record or null.","type_short":"Record"}},{"javadoc":"Returns the record at the given key or null if none exists.\n@param addr the key.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecord","comment":"Returns the record at the given key or null if none exists.","params":[{"type_long":"long","name":"addr","comment":"the key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Returns the record at the given address or null if none exists.\n@param addr the address to use as the key\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecord","comment":"Returns the record at the given address or null if none exists.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to use as the key","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Returns the record just before the given address key.\n@param addr the address to begin the search.\n@return the previous record or null.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordBefore","comment":"Returns the record just before the given address key.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to begin the search.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the previous record or null.","type_short":"Record"}},{"javadoc":"Returns a record iterator over all records in the given range.\n@param start the start of the range.\n@param end the end of the range.\n@param atStart if true, positions the iterator before start, otherwise after end.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Returns a record iterator over all records in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the start of the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the end of the range.","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"if true, positions the iterator before start, otherwise after end.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Returns an iterator over all records.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Returns an iterator over all records.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Returns the total number of records in this adapter.","static":false,"name":"getRecordCount","comment":"Returns the total number of records in this adapter.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the next record at or before the given address key\n@param addr the address to begin the search.\n@return the previous record or null.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordAtOrBefore","comment":"Returns the next record at or before the given address key","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to begin the search.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the previous record or null.","type_short":"Record"}},{"javadoc":"Returns an AddressKeyIterator over the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@param atStart if true, positions the iterator before the first address, otherwise after\n the last address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getKeys","comment":"Returns an AddressKeyIterator over the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range.","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"if true, positions the iterator before the first address, otherwise after\n the last address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Deletes all records in the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteRecords","comment":"Deletes all records in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Adds or updates the given record.\n@param record the record to add or update.\n@throws IOException if there was a problem accessing the database","static":false,"name":"putRecord","comment":"Adds or updates the given record.","params":[{"type_long":"db.Record","name":"record","comment":"the record to add or update.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a record iterator starting at the given address.\n@param addr the address at which to start.\n@param forward if true, positions the iterator before the start address, otherwise after.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Returns a record iterator starting at the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address at which to start.","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"if true, positions the iterator before the start address, otherwise after.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Returns an AddressKeyIterator over the given address set.\n@param addrSetView the set of address to iterator over.\n@param forward the direction to iterate.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getKeys","comment":"Returns an AddressKeyIterator over the given address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSetView","comment":"the set of address to iterator over.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"the direction to iterate.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Returns a Record interator over the given address set.\n@param set the address set to iterator over.\n@param forward if true positions the iterator before the first address, otherwise after the\n last address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Returns a Record interator over the given address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to iterator over.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"if true positions the iterator before the first address, otherwise after the\n last address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Update the addresses in all records to reflect the movement of a memory block.\n@param fromAddr minimum address of the original block to be moved\n@param toAddr the new minimum address after the block move\n@param length the number of bytes in the memory block being moved\n@param monitor progress monitor\n@throws CancelledException thrown if the user cancels the operation.\n@throws IOException if there was a problem accessing the database","static":false,"name":"moveAddressRange","comment":"Update the addresses in all records to reflect the movement of a memory block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"minimum address of the original block to be moved","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the new minimum address after the block move","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of bytes in the memory block being moved","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"thrown if the user cancels the operation.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes all records in this table\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteAll","comment":"Deletes all records in this table","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"InstDBAdapter","comment":"Adapter that accesses the instruction table.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"INSTRUCTION_TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Instructions\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"INSTRUCTION_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"PROTO_ID_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"FLAGS_COL","comment":"","type_short":"int","constant_value":"1"}]}
