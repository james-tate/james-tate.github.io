{"implements":["db.DBListener"],"javadoc":"<code>RangeMapDB<\/code> provides a generic value range map backed by a database table.\n A given range may be occupied by at most a single value which is painted over \n that range.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a generic range map.\n@param dbHandle database handle.\n@param name map name used in naming the underlying database table.  \n This name must be unique across all range maps.\n@param errHandler database error handler.\n@param valueFieldClass Field class to be used for stored values.\n@param indexed if true, values will be indexed allowing use of the \n getValueRangeIterator method.","static":false,"name":"<init>","comment":"Construct a generic range map.","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"database handle.","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.util.Lock","name":"lock","comment":"","type_short":"Lock"},{"type_long":"java.lang.String","name":"name","comment":"map name used in naming the underlying database table.  \n This name must be unique across all range maps.","type_short":"String"},{"type_long":"db.util.ErrorHandler","name":"errHandler","comment":"database error handler.","type_short":"ErrorHandler"},{"type_long":"java.lang.Class<?>","name":"valueFieldClass","comment":"Field class to be used for stored values.","type_short":"Class"},{"type_long":"boolean","name":"indexed","comment":"if true, values will be indexed allowing use of the \n getValueRangeIterator method.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the name associated with this range map.\n@param newName\n@return true if successful, else false\n@throws DuplicateNameException","static":false,"name":"setName","comment":"Set the name associated with this range map.","params":[{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"boolean","comment":"true if successful, else false","type_short":"boolean"}},{"javadoc":"","static":true,"name":"exists","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this map is empty","static":false,"name":"isEmpty","comment":"Returns true if this map is empty","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the number of records contained within this map.\n NOTE: This number will be greater or equal to the number of\n address ranges contained within the map.\n@return record count","static":false,"name":"getRecordCount","comment":"Returns the number of records contained within this map.\n NOTE: This number will be greater or equal to the number of\n address ranges contained within the map.","params":[],"throws":[],"return":{"type_long":"int","comment":"record count","type_short":"int"}},{"javadoc":"","static":false,"name":"findTable","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createTable","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value associated with the given index.\n@param index\n@return value or null no value exists","static":false,"name":"getValue","comment":"Returns the value associated with the given index.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"db.Field","comment":"value or null no value exists","type_short":"Field"}},{"javadoc":"Associates the given value with every index from start to end (inclusive)\n Any previous associates are overwritten.\n@param start\n@param end\n@param value value to be painted, or null for value removal.\n@throws IOException","static":false,"name":"paintRange","comment":"Associates the given value with every index from start to end (inclusive)\n Any previous associates are overwritten.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"endAddr","comment":"","type_short":"Address"},{"type_long":"db.Field","name":"value","comment":"value to be painted, or null for value removal.","type_short":"Field"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move all values within an address range to a new range.\n@param fromAddr the first address of the range to be moved.\n@param toAddr the address where to the range is to be moved.\n@param length the number of addresses to move.\n@param monitor the task monitor.\n@throws CancelledException if the user canceled the operation via the task monitor.\n@throws AddressOverflowException if the length is such that a address wrap occurs","static":false,"name":"moveAddressRange","comment":"Move all values within an address range to a new range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the first address of the range to be moved.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the address where to the range is to be moved.","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of addresses to move.","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the operation via the task monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Paint over a range of address keys which fall within the same key base\n@param start\n@param end\n@param value","static":false,"name":"paintRange","comment":"Paint over a range of address keys which fall within the same key base","params":[{"type_long":"long","name":"start","comment":"","type_short":"long"},{"type_long":"long","name":"end","comment":"","type_short":"long"},{"type_long":"db.Field","name":"value","comment":"","type_short":"Field"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove values from the given range.\n@param start\n@param end","static":false,"name":"clearRange","comment":"Remove values from the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"endAddr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a complete address set where any value has been set.\n@return address set","static":false,"name":"getAddressSet","comment":"Returns a complete address set where any value has been set.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"address set","type_short":"AddressSet"}},{"javadoc":"Returns a complete address set where the specified value has been set.\n@param value field value\n@return address set","static":false,"name":"getAddressSet","comment":"Returns a complete address set where the specified value has been set.","params":[{"type_long":"db.Field","name":"value","comment":"field value","type_short":"Field"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"address set","type_short":"AddressSet"}},{"javadoc":"Returns an address range iterator over all occupied ranges in the map.\n@return AddressRangeIterator that iterates over all occupied ranges in th\n map.","static":false,"name":"getAddressRanges","comment":"Returns an address range iterator over all occupied ranges in the map.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"AddressRangeIterator that iterates over all occupied ranges in th\n map.","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an address range iterator over all occupied ranges in the map.\n The first range must have a FROM address at or after \n the specified startAddr.\n@param startAddr the address to start the iterator.\n@return AddressRangeIterator that iterates over all occupied ranges in th\n map.","static":false,"name":"getAddressRanges","comment":"Returns an address range iterator over all occupied ranges in the map.\n The first range must have a FROM address at or after \n the specified startAddr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address to start the iterator.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"AddressRangeIterator that iterates over all occupied ranges in th\n map.","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an address range iterator over all occupied ranges whose\n FROM address falls within the range startAddr to endAddr.\n@param startAddr start of range\n@param endAddr end of range\n@return AddressRangeIterator","static":false,"name":"getAddressRanges","comment":"Returns an address range iterator over all occupied ranges whose\n FROM address falls within the range startAddr to endAddr.","params":[{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"start of range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"endAddr","comment":"end of range","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"AddressRangeIterator","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an address range iterator for those ranges which contain the\n specified value.  This method may only be invoked for indexed maps.\n@param value\n@return AddressRangeIterator","static":false,"name":"getValueRanges","comment":"Returns an address range iterator for those ranges which contain the\n specified value.  This method may only be invoked for indexed maps.","params":[{"type_long":"db.Field","name":"value","comment":"","type_short":"Field"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"AddressRangeIterator","type_short":"AddressRangeIterator"}},{"javadoc":"Returns the bounding address-range containing addr and the the same value throughout.\n@param register\n@param addr\n@return single value address-range containing addr","static":false,"name":"getAddressRangeContaining","comment":"Returns the bounding address-range containing addr and the the same value throughout.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"single value address-range containing addr","type_short":"AddressRange"}},{"javadoc":"@see ghidra.framework.store.db.DBListener#dbRestored(db.DBHandle)","static":false,"name":"dbRestored","comment":"","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"","type_short":"DBHandle"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see db.DBListener#dbClosed(db.DBHandle)","static":false,"name":"dbClosed","comment":"","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"","type_short":"DBHandle"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.store.db.DBListener#tableDeleted(db.DBHandle, ghidra.framework.store.db.Table)","static":false,"name":"tableDeleted","comment":"","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"","type_short":"DBHandle"},{"type_long":"db.Table","name":"table","comment":"","type_short":"Table"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.store.db.DBListener#tableAdded(db.DBHandle, ghidra.framework.store.db.Table)","static":false,"name":"tableAdded","comment":"","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"","type_short":"DBHandle"},{"type_long":"db.Table","name":"table","comment":"","type_short":"Table"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes the database table used to store this range map.","static":false,"name":"dispose","comment":"Deletes the database table used to store this range map.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AddressRangeMapDB","comment":"RangeMapDB provides a generic value range map backed by a database table.\n A given range may be occupied by at most a single value which is painted over \n that range.","fields":[{"type_long":"java.lang.String","javadoc":"","static":false,"name":"tableName","comment":"","type_short":"String","constant_value":null},{"type_long":"db.DBHandle","javadoc":"","static":false,"name":"dbHandle","comment":"","type_short":"DBHandle","constant_value":null},{"type_long":"ghidra.program.database.map.AddressMap","javadoc":"","static":false,"name":"addrMap","comment":"","type_short":"AddressMap","constant_value":null},{"type_long":"db.util.ErrorHandler","javadoc":"","static":false,"name":"errHandler","comment":"","type_short":"ErrorHandler","constant_value":null},{"type_long":"java.lang.Class<?>","javadoc":"","static":false,"name":"valueFieldClass","comment":"","type_short":"Class","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"indexed","comment":"","type_short":"boolean","constant_value":null},{"type_long":"db.Table","javadoc":"","static":false,"name":"rangeMapTable","comment":"","type_short":"Table","constant_value":null},{"type_long":"db.Schema","javadoc":"","static":false,"name":"rangeMapSchema","comment":"","type_short":"Schema","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"lastStart","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"lastEnd","comment":"","type_short":"Address","constant_value":null},{"type_long":"db.Field","javadoc":"","static":false,"name":"lastValue","comment":"","type_short":"Field","constant_value":null},{"type_long":"ghidra.program.model.address.AddressRange","javadoc":"","static":false,"name":"lastRange","comment":"","type_short":"AddressRange","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"modCount","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"RANGE_MAP_TABLE_PREFIX","comment":"","type_short":"String","constant_value":"\"Range Map - \""},{"type_long":"int","javadoc":"","static":true,"name":"TO_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"VALUE_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"java.lang.String[]","javadoc":"","static":true,"name":"COLUMN_NAMES","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":true,"name":"INDEXED_COLUMNS","comment":"","type_short":"int[]","constant_value":null},{"type_long":"ghidra.util.Lock","javadoc":"","static":false,"name":"lock","comment":"","type_short":"Lock","constant_value":null}]}
