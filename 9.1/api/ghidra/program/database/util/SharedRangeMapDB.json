{"implements":[],"javadoc":"<code>SharedRangeMapDB<\/code> provides a long value range map backed by a database table.\n This map allows values to share a given range with other values.\n@deprecated This map class should not be used except by the OldFunctionMapDB class","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createRangesSchema","comment":"","params":[],"throws":[],"return":{"type_long":"db.Schema","comment":"","type_short":"Schema"}},{"javadoc":"","static":true,"name":"createMapSchema","comment":"","params":[],"throws":[],"return":{"type_long":"db.Schema","comment":"","type_short":"Schema"}},{"javadoc":"Construct a shared range map.\n@param dbHandle database handle.\n@param name map name used in naming the underlying database table.  \n This name must be unqiue across all shared range maps.\n@param errHandler database error handler.\n@param create if true the underlying database tables will be created.","static":false,"name":"<init>","comment":"Construct a shared range map.","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"database handle.","type_short":"DBHandle"},{"type_long":"java.lang.String","name":"name","comment":"map name used in naming the underlying database table.  \n This name must be unqiue across all shared range maps.","type_short":"String"},{"type_long":"db.util.ErrorHandler","name":"errHandler","comment":"database error handler.","type_short":"ErrorHandler"},{"type_long":"boolean","name":"create","comment":"if true the underlying database tables will be created.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Frees resources used by this map.","static":false,"name":"dispose","comment":"Frees resources used by this map.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a value to this map over the specified range.\n@param start the start of the range.\n@param end the end of the range.\n@param value the value to associate with the range.","static":false,"name":"add","comment":"Add a value to this map over the specified range.","params":[{"type_long":"long","name":"start","comment":"the start of the range.","type_short":"long"},{"type_long":"long","name":"end","comment":"the end of the range.","type_short":"long"},{"type_long":"long","name":"value","comment":"the value to associate with the range.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert a new Map entry.\n@param rangeKey\n@param value","static":false,"name":"insertMapEntry","comment":"Insert a new Map entry.","params":[{"type_long":"long","name":"rangeKey","comment":"","type_short":"long"},{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert a new Range entry.\n@param start\n@param end","static":false,"name":"insertRangeEntry","comment":"Insert a new Range entry.","params":[{"type_long":"long","name":"start","comment":"","type_short":"long"},{"type_long":"long","name":"end","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Split a Range record and all related Map entries at a newEnd index.\n A new Range record is created at newEnd+1 to the end of the original \n range.  New Map entries are created for this new range.\n@param rangeRecord\n@param newEnd\n@return Record\n@throws IOException","static":false,"name":"splitRange","comment":"Split a Range record and all related Map entries at a newEnd index.\n A new Range record is created at newEnd+1 to the end of the original \n range.  New Map entries are created for this new range.","params":[{"type_long":"db.Record","name":"rangeRecord","comment":"","type_short":"Record"},{"type_long":"long","name":"newEnd","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record","type_short":"Record"}},{"javadoc":"Get a sorted array of map values for a given set of map keys.\n@param mapKeys\n@return long[]\n@throws IOException","static":false,"name":"getMapValues","comment":"Get a sorted array of map values for a given set of map keys.","params":[{"type_long":"long[]","name":"mapKeys","comment":"","type_short":"long[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"long[]","type_short":"long[]"}},{"javadoc":"If other values are mapped to a specified range, perform a consolidation\n on that range if possible.  If no reference exists, delete the range.\n@param rangeKey\n@param end end of range (must agree with record).","static":false,"name":"consolidateRange","comment":"If other values are mapped to a specified range, perform a consolidation\n on that range if possible.  If no reference exists, delete the range.","params":[{"type_long":"long","name":"rangeKey","comment":"","type_short":"long"},{"type_long":"long","name":"end","comment":"end of range (must agree with record).","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a value from this map.\n@param value the value to remove.","static":false,"name":"remove","comment":"Remove a value from this map.","params":[{"type_long":"long","name":"value","comment":"the value to remove.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a LongField value iterator over the specified range.\n List is pre-calculated such that any changes made to the map\n after invoking this method will not be reflected by the iterator\n and invalid function keys may be returned.\n The implementation assumes a small set of values exist over the \n range.\n@param start\n@param end\n@return Iterator of unique LongField values occuring within the\n specified range.","static":false,"name":"getValueIterator","comment":"Get a LongField value iterator over the specified range.\n List is pre-calculated such that any changes made to the map\n after invoking this method will not be reflected by the iterator\n and invalid function keys may be returned.\n The implementation assumes a small set of values exist over the \n range.","params":[{"type_long":"long","name":"start","comment":"","type_short":"long"},{"type_long":"long","name":"end","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"java.util.Iterator<db.Field>","comment":"Iterator of unique LongField values occuring within the\n specified range.","type_short":"Iterator"}},{"javadoc":"Get an index range iterator for a specified value.\n@param value the value for which to iterator indexes over.\n@return IndexRangeIterator","static":false,"name":"getValueRangeIterator","comment":"Get an index range iterator for a specified value.","params":[{"type_long":"long","name":"value","comment":"the value for which to iterator indexes over.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.IndexRangeIterator","comment":"IndexRangeIterator","type_short":"IndexRangeIterator"}}],"name":"SharedRangeMapDB","comment":"SharedRangeMapDB provides a long value range map backed by a database table.\n This map allows values to share a given range with other values.","fields":[{"type_long":"db.DBHandle","javadoc":"","static":false,"name":"dbHandle","comment":"","type_short":"DBHandle","constant_value":null},{"type_long":"db.util.ErrorHandler","javadoc":"","static":false,"name":"errHandler","comment":"","type_short":"ErrorHandler","constant_value":null},{"type_long":"db.Table","javadoc":"","static":false,"name":"rangeTable","comment":"","type_short":"Table","constant_value":null},{"type_long":"db.Table","javadoc":"","static":false,"name":"mapTable","comment":"","type_short":"Table","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"RANGES_TABLE_NAME_PREFIX","comment":"","type_short":"String","constant_value":"\"Shared Ranges - \""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MAP_TABLE_NAME_PREFIX","comment":"","type_short":"String","constant_value":"\"Shared Map - \""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"RANGES_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"db.Schema","javadoc":"","static":true,"name":"MAP_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"RANGE_TO_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"MAP_VALUE_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"MAP_RANGE_KEY_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int[]","javadoc":"","static":true,"name":"MAP_INDEXED_COLS","comment":"","type_short":"int[]","constant_value":null}]}
