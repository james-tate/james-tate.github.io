{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"","type_short":"int"},{"type_long":"ghidra.program.database.mem.MemoryMapDB","name":"memMap","comment":"","type_short":"MemoryMapDB"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","comment":"","type_short":"MemoryMapDBAdapter"}},{"javadoc":"","static":true,"name":"findReadOnlyAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.mem.MemoryMapDB","name":"memMap","comment":"","type_short":"MemoryMapDB"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","comment":"","type_short":"MemoryMapDBAdapter"}},{"javadoc":"","static":true,"name":"upgrade","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","name":"oldAdapter","comment":"","type_short":"MemoryMapDBAdapter"},{"type_long":"ghidra.program.database.mem.MemoryMapDB","name":"memMap","comment":"","type_short":"MemoryMapDB"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","comment":"","type_short":"MemoryMapDBAdapter"}},{"javadoc":"Returns a DBBuffer object for the given database buffer id\n@param bufferID the id of the first buffer in the DBBuffer.\n@return the DBBuffer for the given id.\n@throws IOException if a database IO error occurs.","static":false,"name":"getBuffer","comment":"Returns a DBBuffer object for the given database buffer id","params":[{"type_long":"int","name":"bufferID","comment":"the id of the first buffer in the DBBuffer.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBBuffer","comment":"the DBBuffer for the given id.","type_short":"DBBuffer"}},{"javadoc":"","static":false,"name":"deleteTable","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@throws IOException if a database IO error occurs.","static":false,"name":"refreshMemory","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array of memory blocks sorted on start Address\n@return all the memory blocks","static":false,"name":"getMemoryBlocks","comment":"Returns an array of memory blocks sorted on start Address","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.database.mem.MemoryBlockDB>","comment":"all the memory blocks","type_short":"List"}},{"javadoc":"Creates a new initialized block object using data provided from an \n input stream.  Once the input stream has been exhausted, the remaining \n block data will be initialized to zero (0x00).\n@param name the name of the block\n@param startAddr the start address of the block.\n@param is data source or null for zero initialization\n@param length size of block\n@param permissions the new block permissions\n@return new memory block\n@throws IOException\n@throws AddressOverflowException if block length is too large for the underlying space","static":false,"name":"createInitializedBlock","comment":"Creates a new initialized block object using data provided from an \n input stream.  Once the input stream has been exhausted, the remaining \n block data will be initialized to zero (0x00).","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the start address of the block.","type_short":"Address"},{"type_long":"java.io.InputStream","name":"is","comment":"data source or null for zero initialization","type_short":"InputStream"},{"type_long":"long","name":"length","comment":"size of block","type_short":"long"},{"type_long":"int","name":"permissions","comment":"the new block permissions","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if block length is too large for the underlying space","type_short":"AddressOverflowException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryBlockDB","comment":"new memory block","type_short":"MemoryBlockDB"}},{"javadoc":"Creates a new initialized block object\n@param name the name of the block\n@param startAddr the start address of the block.\n@param buf the DBBuffer used to hold the bytes for the block.\n@param permissions the new block permissions\n@return new memory block\n@throws IOException if a database IO error occurs.\n@throws AddressOverflowException if block length is too large for the underlying space","static":false,"name":"createInitializedBlock","comment":"Creates a new initialized block object","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the start address of the block.","type_short":"Address"},{"type_long":"db.DBBuffer","name":"buf","comment":"the DBBuffer used to hold the bytes for the block.","type_short":"DBBuffer"},{"type_long":"int","name":"permissions","comment":"the new block permissions","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if block length is too large for the underlying space","type_short":"AddressOverflowException"},{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryBlockDB","comment":"new memory block","type_short":"MemoryBlockDB"}},{"javadoc":"Creates a new memory block that doesn't have associated bytes.\n@param blockType the type of block to create.\n@param name the name of the block.\n@param startAddr the start address of the block\n@param length the size of the block\n@param mappedAddress the address at which to overlay this block. (If the type is overlay)\n@param initializeBytes if true, creates a database buffer for the bytes in the block\n@param permissions the new block permissions\n@return new memory block\n@throws IOException if a database IO error occurs.\n@throws AddressOverflowException if block length is too large for the underlying space","static":false,"name":"createBlock","comment":"Creates a new memory block that doesn't have associated bytes.","params":[{"type_long":"ghidra.program.model.mem.MemoryBlockType","name":"blockType","comment":"the type of block to create.","type_short":"MemoryBlockType"},{"type_long":"java.lang.String","name":"name","comment":"the name of the block.","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the start address of the block","type_short":"Address"},{"type_long":"long","name":"length","comment":"the size of the block","type_short":"long"},{"type_long":"ghidra.program.model.address.Address","name":"mappedAddress","comment":"the address at which to overlay this block. (If the type is overlay)","type_short":"Address"},{"type_long":"boolean","name":"initializeBytes","comment":"if true, creates a database buffer for the bytes in the block","type_short":"boolean"},{"type_long":"int","name":"permissions","comment":"the new block permissions","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if block length is too large for the underlying space","type_short":"AddressOverflowException"},{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryBlockDB","comment":"new memory block","type_short":"MemoryBlockDB"}},{"javadoc":"Deletes the given memory block.\n@param key the key for the memory block record\n@throws IOException if a database IO error occurs.","static":false,"name":"deleteMemoryBlock","comment":"Deletes the given memory block.","params":[{"type_long":"long","name":"key","comment":"the key for the memory block record","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the memory block record.\n@param record the record to update.\n@throws IOException if a database IO error occurs.","static":false,"name":"updateBlockRecord","comment":"Updates the memory block record.","params":[{"type_long":"db.Record","name":"record","comment":"the record to update.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new DBuffer object with the given length and initial value.\n@param length block\/chunk buffer length (length limited by ChainedBuffer implementation)\n@param initialValue fill value\n@return a new DBuffer object with the given length and initial value.\n@throws IOException if a database IO error occurs.","static":false,"name":"createBuffer","comment":"Creates a new DBuffer object with the given length and initial value.","params":[{"type_long":"int","name":"length","comment":"block\/chunk buffer length (length limited by ChainedBuffer implementation)","type_short":"int"},{"type_long":"byte","name":"initialValue","comment":"fill value","type_short":"byte"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBBuffer","comment":"a new DBuffer object with the given length and initial value.","type_short":"DBBuffer"}},{"javadoc":"Returns the MemoryMap that owns this adapter.\n@return the MemoryMap that owns this adapter.","static":false,"name":"getMemoryMap","comment":"Returns the MemoryMap that owns this adapter.","params":[],"throws":[],"return":{"type_long":"ghidra.program.database.mem.MemoryMapDB","comment":"the MemoryMap that owns this adapter.","type_short":"MemoryMapDB"}},{"javadoc":"Deletes the sub block record for the given key.\n@param key the record id of the sub block record to delete.\n@throws IOException if a database error occurs.","static":false,"name":"deleteSubBlock","comment":"Deletes the sub block record for the given key.","params":[{"type_long":"long","name":"key","comment":"the record id of the sub block record to delete.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the sub memory block record.\n@param record the record to update.\n@throws IOException if a database IO error occurs.","static":false,"name":"updateSubBlockRecord","comment":"Updates the sub memory block record.","params":[{"type_long":"db.Record","name":"record","comment":"the record to update.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a record for a new created sub block\n@param memBlockId the id of the memory block that contains this sub block\n@param startingOffset the starting offset relative to the containing memory block where this\n sub block starts\n@param length the length of this sub block\n@param subType the type of the subBlock\n@param sourceID if the type is a buffer, then this is the buffer id.  If the type is file bytes,\n then this is the FileBytes id.\n@param sourceOffset if the type is file bytes, then this is the offset into the filebytes. If\n the type is mapped, then this is the encoded mapped address.\n@return the newly created record.\n@throws IOException if a database error occurs","static":false,"name":"createSubBlockRecord","comment":"Creates a record for a new created sub block","params":[{"type_long":"long","name":"memBlockId","comment":"the id of the memory block that contains this sub block","type_short":"long"},{"type_long":"long","name":"startingOffset","comment":"the starting offset relative to the containing memory block where this\n sub block starts","type_short":"long"},{"type_long":"long","name":"length","comment":"the length of this sub block","type_short":"long"},{"type_long":"byte","name":"subType","comment":"the type of the subBlock","type_short":"byte"},{"type_long":"int","name":"sourceID","comment":"if the type is a buffer, then this is the buffer id.  If the type is file bytes,\n then this is the FileBytes id.","type_short":"int"},{"type_long":"long","name":"sourceOffset","comment":"if the type is file bytes, then this is the offset into the filebytes. If\n the type is mapped, then this is the encoded mapped address.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the newly created record.","type_short":"Record"}},{"javadoc":"Creates a new memory block.\n@param name the name of the block\n@param startAddress the start address of the block\n@param length the length of the block\n@param permissions the permissions for the block\n@param splitBlocks the list of subBlock objects that make up this block\n@return the new MemoryBlock\n@throws IOException if a database error occurs","static":false,"name":"createBlock","comment":"Creates a new memory block.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"startAddress","comment":"the start address of the block","type_short":"Address"},{"type_long":"long","name":"length","comment":"the length of the block","type_short":"long"},{"type_long":"int","name":"permissions","comment":"the permissions for the block","type_short":"int"},{"type_long":"java.util.List<ghidra.program.database.mem.SubMemoryBlock>","name":"splitBlocks","comment":"the list of subBlock objects that make up this block","type_short":"List"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryBlockDB","comment":"the new MemoryBlock","type_short":"MemoryBlockDB"}},{"javadoc":"Creates a new memory block using a FileBytes\n@param name the name of the block\n@param startAddress the start address of the block\n@param length the length of the block\n@param fileBytes the {@link FileBytes} object that provides the bytes for this block\n@param offset the offset into the {@link FileBytes} object\n@param permissions the permissions for the block\n@return the new MemoryBlock\n@throws IOException if a database error occurs\n@throws AddressOverflowException if block length is too large for the underlying space","static":false,"name":"createFileBytesBlock","comment":"Creates a new memory block using a FileBytes","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"startAddress","comment":"the start address of the block","type_short":"Address"},{"type_long":"long","name":"length","comment":"the length of the block","type_short":"long"},{"type_long":"ghidra.program.database.mem.FileBytes","name":"fileBytes","comment":"the FileBytes object that provides the bytes for this block","type_short":"FileBytes"},{"type_long":"long","name":"offset","comment":"the offset into the FileBytes object","type_short":"long"},{"type_long":"int","name":"permissions","comment":"the permissions for the block","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs","type_short":"IOException"},{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if block length is too large for the underlying space","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.database.mem.MemoryBlockDB","comment":"the new MemoryBlock","type_short":"MemoryBlockDB"}}],"name":"MemoryMapDBAdapter","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"CURRENT_VERSION","comment":"","type_short":"int","constant_value":"3"},{"type_long":"db.Schema","javadoc":"","static":true,"name":"BLOCK_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"db.Schema","javadoc":"","static":true,"name":"SUB_BLOCK_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"NAME_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"COMMENTS_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"SOURCE_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"PERMISSIONS_COL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"START_ADDR_COL","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"LENGTH_COL","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"SEGMENT_COL","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_PARENT_ID_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_TYPE_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_LENGTH_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_START_OFFSET_COL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_SOURCE_ID_COL","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"SUB_SOURCE_OFFSET_COL","comment":"","type_short":"int","constant_value":"5"},{"type_long":"byte","javadoc":"","static":true,"name":"SUB_TYPE_BIT_MAPPED","comment":"","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"","static":true,"name":"SUB_TYPE_BYTE_MAPPED","comment":"","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"","static":true,"name":"SUB_TYPE_BUFFER","comment":"","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"","static":true,"name":"SUB_TYPE_UNITIALIZED","comment":"","type_short":"byte","constant_value":"3"},{"type_long":"byte","javadoc":"","static":true,"name":"SUB_TYPE_FILE_BYTES","comment":"","type_short":"byte","constant_value":"4"}]}
