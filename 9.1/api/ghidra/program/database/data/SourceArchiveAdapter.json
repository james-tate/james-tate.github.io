{"implements":[],"javadoc":"Adapter to access the data type archive identifier table.\n This table holds an ID entry for each archive that has provided a data type to the \n data type manager for the program.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets an adapter for working with the Data Type Archive ID database table. This table is \n intended to associate a unique ID with a particular project data type archive. When a data \n type is added to a program it can indicate save the ID of the archive where it originated. \n This can then be used to synchronize the program with that archive. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of data type archive ID entries.\n@throws VersionException if the database handle's version doesn't match the expected version.\n@throws IOException if there is trouble accessing the database.","static":true,"name":"getAdapter","comment":"Gets an adapter for working with the Data Type Archive ID database table. This table is \n intended to associate a unique ID with a particular project data type archive. When a data \n type is added to a program it can indicate save the ID of the archive where it originated. \n This can then be used to synchronize the program with that archive. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to the database to be accessed.","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor to use for displaying status or for canceling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if the database handle's version doesn't match the expected version.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if there is trouble accessing the database.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.data.SourceArchiveAdapter","comment":"the adapter for accessing the table of data type archive ID entries.","type_short":"SourceArchiveAdapter"}},{"javadoc":"Tries to get a read only adapter for the database whose handle is passed to this method.\n@param handle handle to prior version of the database.\n@return the read only Data Type Archive ID table adapter\n@throws VersionException if a read only adapter can't be obtained for the database handle's version.","static":true,"name":"findReadOnlyAdapter","comment":"Tries to get a read only adapter for the database whose handle is passed to this method.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to prior version of the database.","type_short":"DBHandle"}],"throws":[],"return":{"type_long":"ghidra.program.database.data.SourceArchiveAdapter","comment":"the read only Data Type Archive ID table adapter","type_short":"SourceArchiveAdapter"}},{"javadoc":"Upgrades the DataType Archive ID table from the oldAdapter's version to the current version.\n@param handle handle to the database whose table is to be upgraded to a newer version.\n@param oldAdapter the adapter for the existing table to be upgraded.\n@return the adapter for the new upgraded version of the table.\n@throws VersionException if the the table's version does not match the expected version\n for this adapter.\n@throws IOException if the database can't be read or written.","static":true,"name":"upgrade","comment":"Upgrades the DataType Archive ID table from the oldAdapter's version to the current version.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to the database whose table is to be upgraded to a newer version.","type_short":"DBHandle"},{"type_long":"ghidra.program.database.data.SourceArchiveAdapter","name":"oldAdapter","comment":"the adapter for the existing table to be upgraded.","type_short":"SourceArchiveAdapter"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if the the table's version does not match the expected version\n for this adapter.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if the database can't be read or written.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.data.SourceArchiveAdapter","comment":"the adapter for the new upgraded version of the table.","type_short":"SourceArchiveAdapter"}},{"javadoc":"","static":false,"name":"deleteTable","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new source archive record using the information from the given source archive.\n@param sourceArchive the source archive from which to get the archive information.","static":false,"name":"createRecord","comment":"Creates a new source archive record using the information from the given source archive.","params":[{"type_long":"ghidra.app.plugin.core.datamgr.archive.SourceArchive","name":"sourceArchive","comment":"the source archive from which to get the archive information.","type_short":"SourceArchive"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Returns a list containing all records in the archive table\n@return ","static":false,"name":"getRecords","comment":"Returns a list containing all records in the archive table","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<db.Record>","comment":"","type_short":"List"}},{"javadoc":"Returns the record for the given key (sourceArchiveID)","static":false,"name":"getRecord","comment":"Returns the record for the given key (sourceArchiveID)","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Updates the data type archive ID table with the provided record.\n@param record the new record\n@throws IOException if the database can't be accessed.","static":false,"name":"updateRecord","comment":"Updates the data type archive ID table with the provided record.","params":[{"type_long":"db.Record","name":"record","comment":"the new record","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the record for the given data type archive ID.\n@param dataTypeArchiveID ID of data type archive record to delete\n@return true if the record was deleted\n@throws IOException if there was a problem accessing the database","static":false,"name":"removeRecord","comment":"Remove the record for the given data type archive ID.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record was deleted","type_short":"boolean"}},{"javadoc":"Removes the record for the given sourceArchive ID.\n@param sourceArchiveID the id for which to remove its record.\n@throws IOException if the database can't be accessed.","static":false,"name":"deleteRecord","comment":"Removes the record for the given sourceArchive ID.","params":[{"type_long":"ghidra.util.UniversalID","name":"sourceArchiveID","comment":"the id for which to remove its record.","type_short":"UniversalID"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"SourceArchiveAdapter","comment":"Adapter to access the data type archive identifier table.\n This table holds an ID entry for each archive that has provided a data type to the \n data type manager for the program.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Data Type Archive IDs\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"ARCHIVE_ID_DOMAIN_FILE_ID_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"ARCHIVE_ID_NAME_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"ARCHIVE_ID_TYPE_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"ARCHIVE_ID_LAST_SYNC_TIME_COL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"ARCHIVE_ID_DIRTY_FLAG_COL","comment":"","type_short":"int","constant_value":"4"}]}
