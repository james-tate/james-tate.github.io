{"implements":[],"javadoc":"Command for analyzing the Stack; the command is run in the background.\n NOTE: referenced thunk-functions should be created prior to this command","static":false,"extends":"ghidra.framework.cmd.BackgroundCommand","methods":[{"javadoc":"Constructs a new command for analyzing the Stack.\n@param entries and address set indicating the entry points of functions that have \n stacks to be analyzed.\n@param forceProcessing flag to force processing of stack references even if the stack\n           has already been defined.","static":false,"name":"<init>","comment":"Constructs a new command for analyzing the Stack.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"entries","comment":"and address set indicating the entry points of functions that have \n stacks to be analyzed.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forceProcessing","comment":"flag to force processing of stack references even if the stack\n           has already been defined.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for analyzing the Stack.\n@param entry the entry point of the function that contains the stack to\n           be analyzed.\n@param forceProcessing flag to force processing of stack references even if the stack\n           has already been defined.","static":false,"name":"<init>","comment":"Constructs a new command for analyzing the Stack.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"the entry point of the function that contains the stack to\n           be analyzed.","type_short":"Address"},{"type_long":"boolean","name":"forceProcessing","comment":"flag to force processing of stack references even if the stack\n           has already been defined.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"entries","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"doParameterAnalysis","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"doLocalAnalysis","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"forceProcessing","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.cmd.BackgroundCommand#applyTo(ghidra.framework.model.DomainObject, ghidra.util.task.TaskMonitor)","static":false,"name":"applyTo","comment":"","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"obj","comment":"","type_short":"DomainObject"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Analyze a function to build a stack frame based on stack references.\n@param entry The address of the entry point for the new function\n@param monitor the task monitor that is checked to see if the command has\n been cancelled.\n@throws CancelledException if the user canceled this command","static":false,"name":"analyzeFunction","comment":"Analyze a function to build a stack frame based on stack references.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"The address of the entry point for the new function","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor that is checked to see if the command has\n been cancelled.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled this command","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create locals and parameters based on references involving purely the stack pointer.\n Pushes, Pops, and arithmetic manipulation of the stack pointer must be tracked.\n@param func - function to analyze stack pointer references","static":false,"name":"createStackPointerVariables","comment":"Create locals and parameters based on references involving purely the stack pointer.\n Pushes, Pops, and arithmetic manipulation of the stack pointer must be tracked.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"- function to analyze stack pointer references","type_short":"Function"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"defineFuncVariable","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"int","name":"stackOffset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Look at the result register to try and figure out stack access size.\n@param instr instruction being analyzed\n@param opIndex operand that has a stack reference.\n@return size of value referenced on the stack","static":false,"name":"getRefSize","comment":"Look at the result register to try and figure out stack access size.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction being analyzed","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"operand that has a stack reference.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"size of value referenced on the stack","type_short":"int"}},{"javadoc":"","static":false,"name":"createVar","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"int","name":"frameOffset","comment":"","type_short":"int"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"int","name":"refSize","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}}],"name":"FunctionStackAnalysisCmd","comment":"Command for analyzing the Stack; the command is run in the background.\n NOTE: referenced thunk-functions should be created prior to this command","fields":[{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"entryPoints","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forceProcessing","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"dontCreateNewVariables","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doParams","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doLocals","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_FUNCTION_COMMENT","comment":"","type_short":"String","constant_value":null}]}
