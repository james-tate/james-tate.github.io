{"implements":["ghidra.framework.cmd.Command"],"javadoc":"Command to set the datatype on a stack variable.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new command for setting the datatype on a stack\/reg variable.\n Conflicting stack variables will be removed.\n@param var the variable for which to set the datatype.\n@param dataType the datatype to apply to the stack variable.\n@param source signature source","static":false,"name":"<init>","comment":"Constructs a new command for setting the datatype on a stack\/reg variable.\n Conflicting stack variables will be removed.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"the variable for which to set the datatype.","type_short":"Variable"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to apply to the stack variable.","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"signature source","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for setting the datatype on a stack\/reg variable.\n Conflicting stack variables will be removed.\n@param fnEntry\n@param varName\n@param dataType\n@param source signature source","static":false,"name":"<init>","comment":"Constructs a new command for setting the datatype on a stack\/reg variable.\n Conflicting stack variables will be removed.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fnEntry","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"varName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"signature source","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for setting the datatype on a stack\/reg variable\n@param fnEntry\n@param varName\n@param dataType\n@param align maintain proper alignment\/justification if supported by implementation (ignored for non-stack variables).\n \t\t\tIf false and this is a stack variable, the current stack address\/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification.\n@param force overwrite conflicting stack variables\n@param source signature source","static":false,"name":"<init>","comment":"Constructs a new command for setting the datatype on a stack\/reg variable","params":[{"type_long":"ghidra.program.model.address.Address","name":"fnEntry","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"varName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"boolean","name":"align","comment":"maintain proper alignment\/justification if supported by implementation (ignored for non-stack variables).\n \t\t\tIf false and this is a stack variable, the current stack address\/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification.","type_short":"boolean"},{"type_long":"boolean","name":"force","comment":"overwrite conflicting stack variables","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"signature source","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.framework.cmd.Command#getName()","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.framework.cmd.Command#applyTo(ghidra.framework.model.DomainObject)","static":false,"name":"applyTo","comment":"","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"obj","comment":"","type_short":"DomainObject"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.framework.cmd.Command#getStatusMsg()","static":false,"name":"getStatusMsg","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"SetVariableDataTypeCmd","comment":"Command to set the datatype on a stack variable.","fields":[{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"fnEntry","comment":"","type_short":"Address","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"varName","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"dataType","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SourceType","javadoc":"","static":false,"name":"source","comment":"","type_short":"SourceType","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"align","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"force","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isParm","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"status","comment":"","type_short":"String","constant_value":null}]}
