{"implements":[],"javadoc":"Given a function in a program or the start of a function, record information\n about the change to a stack pointer from a subroutine call. The routine\n getCallChange() can be called with the address of a call instruction. If the\n stack could be tracked, the call instruction will return the change in the\n stack pointer that would result from a call to the function.\n \n The computation is based on a set of equations that are generated and solved.\n Each equation represents the stack change for a given basic flow block or\n call instruction within the function.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new CallDepthChangeInfo object.\n@param func function to examine","static":false,"name":"<init>","comment":"Construct a new CallDepthChangeInfo object.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function to examine","type_short":"Function"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new CallDepthChangeInfo object.\n@param func function to examine\n@param monitor monitor used to cancel the operation\n@throws CancelledException if the operation was canceled","static":false,"name":"<init>","comment":"Construct a new CallDepthChangeInfo object.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function to examine","type_short":"Function"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor used to cancel the operation","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation was canceled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new CallDepthChangeInfo object.\n@param func function to examine\n@param frameReg register that is to have it's depth(value) change tracked\n@param monitor monitor used to cancel the operation\n@throws CancelledException if the operation was canceled","static":false,"name":"<init>","comment":"Construct a new CallDepthChangeInfo object.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.lang.Register","name":"frameReg","comment":"register that is to have it's depth(value) change tracked","type_short":"Register"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor used to cancel the operation","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation was canceled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new CallDepthChangeInfo object.\n@param program program containing the function to examime\n@param restrictedSet set of addresses to restrict flow flowing to.\n@param addr address within the function to examine\n@param frameReg register that is to have it's depth(value) change tracked\n@param monitor monitor used to cancel the operation\n@throws CancelledException if the operation was canceled","static":false,"name":"<init>","comment":"Construct a new CallDepthChangeInfo object.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program containing the function to examime","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address within the function to examine","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.lang.Register","name":"frameReg","comment":"register that is to have it's depth(value) change tracked","type_short":"Register"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor used to cancel the operation","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation was canceled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"initialize codeblocks and call locations.\n@param addressSetView\n@param monitor\n@throws CancelledException","static":false,"name":"initialize","comment":"initialize codeblocks and call locations.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCallChange","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setDepth","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"int","name":"depth","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDepth","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"depth","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDepth","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Inspect the instruction and return how it affects the stack depth. If the\n depth cannot be determined, then return that the stack depth change is\n unknown.\n@param instr instruction to analyze\n@return int change to stack depth if it can be determined,\n         Function.UNKNOWN_STACK_DEPTH_CHANGE otherwise.","static":false,"name":"getInstructionStackDepthChange","comment":"Inspect the instruction and return how it affects the stack depth. If the\n depth cannot be determined, then return that the stack depth change is\n unknown.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction to analyze","type_short":"Instruction"}],"throws":[],"return":{"type_long":"int","comment":"int change to stack depth if it can be determined,\n         Function.UNKNOWN_STACK_DEPTH_CHANGE otherwise.","type_short":"int"}},{"javadoc":"Inspect the instruction and return how it affects the stack depth. If the\n depth cannot be determined, then return that the stack depth change is\n unknown.\n@param instr instruction to analyze\n@return int change to stack depth if it can be determined,\n         Function.UNKNOWN_STACK_DEPTH_CHANGE otherwise.","static":false,"name":"getInstructionStackDepthChange","comment":"Inspect the instruction and return how it affects the stack depth. If the\n depth cannot be determined, then return that the stack depth change is\n unknown.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"instruction to analyze","type_short":"Instruction"},{"type_long":"ghidra.program.model.lang.ProcessorContext","name":"procContext","comment":"","type_short":"ProcessorContext"},{"type_long":"int","name":"currentStackDepth","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"int change to stack depth if it can be determined,\n         Function.UNKNOWN_STACK_DEPTH_CHANGE otherwise.","type_short":"int"}},{"javadoc":"","static":false,"name":"isStackPointer","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"output","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the default\/assumed stack depth change for this language\n@param depth stack depth to return if the default is unknown for the language\n@return ","static":false,"name":"getDefaultStackDepthChange","comment":"Get the default\/assumed stack depth change for this language","params":[{"type_long":"int","name":"depth","comment":"stack depth to return if the default is unknown for the language","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Gets the stack depth change value that has been set at the indicated address.\n@param program the program to be checked\n@param address the program address\n@return the stack depth change value or null if value has not been set","static":true,"name":"getStackDepthChange","comment":"Gets the stack depth change value that has been set at the indicated address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to be checked","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the program address","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.Integer","comment":"the stack depth change value or null if value has not been set","type_short":"Integer"}},{"javadoc":"Sets a new value for the stack depth change at the indicated address.\n@param program the program where the value will be set\n@param address the program address\n@param stackDepthChange the new stack depth change value\n@throws DuplicateNameException if the property name for stack depth changes conflicted \n with another property tha has the same name.","static":true,"name":"setStackDepthChange","comment":"Sets a new value for the stack depth change at the indicated address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program where the value will be set","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the program address","type_short":"Address"},{"type_long":"int","name":"stackDepthChange","comment":"the new stack depth change value","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if the property name for stack depth changes conflicted \n with another property tha has the same name.","type_short":"DuplicateNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the value for the stack depth change at the indicated address.\n@param program the program where the value will be removed\n@param address the program address\n@return true if a stack depth change existed at the indicated at the address and it was removed.","static":true,"name":"removeStackDepthChange","comment":"Removes the value for the stack depth change at the indicated address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program where the value will be removed","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the program address","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if a stack depth change existed at the indicated at the address and it was removed.","type_short":"boolean"}},{"javadoc":"Gets an iterator indicating all the addresses that have a stack depth change value specified\n within a program's indicated address set.\n@param program the program to be checked\n@param addressSet the set of addresses to check for a stack depth change value\n@return the address iterator indicating where stack depth change values have been set","static":true,"name":"getStackDepthChanges","comment":"Gets an iterator indicating all the addresses that have a stack depth change value specified\n within a program's indicated address set.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to be checked","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the set of addresses to check for a stack depth change value","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"the address iterator indicating where stack depth change values have been set","type_short":"AddressIterator"}},{"javadoc":"Do a better job of tracking the stack by attempting to follow the data\n flow of the stack pointer as it moves in and out of other variables.\n@param program1 -\n            program containing the function to analyze\n@param func -\n            function to analyze stack pointer references","static":false,"name":"smoothDepth","comment":"Do a better job of tracking the stack by attempting to follow the data\n flow of the stack pointer as it moves in and out of other variables.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"-\n            program containing the function to analyze","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"-\n            function to analyze stack pointer references","type_short":"Function"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Follow the flows of the subroutine, accumulating information about the\n stack pointer and any other register the stack pointer is assigned to.\n@param func function to analyze\n@param monitor monitor to provide feedback and cancel\n@throws CancelledException","static":false,"name":"followFlows","comment":"Follow the flows of the subroutine, accumulating information about the\n stack pointer and any other register the stack pointer is assigned to.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function to analyze","type_short":"Function"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"restrictSet","comment":"","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor to provide feedback and cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks the indicated function in the program to determine if it is a jump thunk\n through a function pointer.\n@param func the function to check\n@param monitor status monitor for indicating progress and allowing cancel.\n@returntrue if check if this is a jump thunk through a function pointer","static":false,"name":"getStackPurge","comment":"Checks the indicated function in the program to determine if it is a jump thunk\n through a function pointer.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getStackOffset","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"cu","comment":"","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param minAddress\n@return ","static":false,"name":"getSPDepth","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param minAddress\n@return ","static":false,"name":"getRegDepth","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param minAddress\n@return ","static":false,"name":"getRegValueRepresentation","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Create locals and parameters based on references involving purely the\n stack pointer. Pushes, Pops, and arithmetic manipulation of the stack\n pointer must be tracked.\n@param program1 -\n            program containing the function to analyze\n@param func -\n            function to analyze stack pointer references","static":false,"name":"smoothPcodeDepth","comment":"Create locals and parameters based on references involving purely the\n stack pointer. Pushes, Pops, and arithmetic manipulation of the stack\n pointer must be tracked.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"-\n            program containing the function to analyze","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"-\n            function to analyze stack pointer references","type_short":"Function"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param instr","static":false,"name":"getCallPurge","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"CallDepthChangeInfo","comment":"Given a function in a program or the start of a function, record information\n about the change to a stack pointer from a subroutine call. The routine\n getCallChange() can be called with the address of a call instruction. If the\n stack could be tracked, the call instruction will return the change in the\n stack pointer that would result from a call to the function.\n \n The computation is based on a set of equations that are generated and solved.\n Each equation represents the stack change for a given basic flow block or\n call instruction within the function.","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.program.model.block.CodeBlock>","javadoc":"","static":false,"name":"codeBlocks","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.program.model.address.Address>","javadoc":"","static":false,"name":"callLocs","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"ghidra.program.model.util.IntPropertyMap","javadoc":"","static":false,"name":"changeMap","comment":"","type_short":"IntPropertyMap","constant_value":null},{"type_long":"ghidra.program.model.util.IntPropertyMap","javadoc":"","static":false,"name":"depthMap","comment":"","type_short":"IntPropertyMap","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,java.lang.Integer>","javadoc":"","static":false,"name":"overrideMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"ghidra.program.model.pcode.VarnodeTranslator","javadoc":"","static":false,"name":"trans","comment":"","type_short":"VarnodeTranslator","constant_value":null},{"type_long":"ghidra.program.model.lang.Register","javadoc":"","static":false,"name":"stackReg","comment":"","type_short":"Register","constant_value":null},{"type_long":"ghidra.program.model.lang.Register","javadoc":"","static":false,"name":"frameReg","comment":"","type_short":"Register","constant_value":null},{"type_long":"ghidra.program.util.SymbolicPropogator","javadoc":"","static":false,"name":"symEval","comment":"","type_short":"SymbolicPropogator","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"stackPurge","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"STACK_DEPTH_CHANGE_NAME","comment":"","type_short":"String","constant_value":"\"StackDepthChange\""}]}
