{"implements":[],"javadoc":"Manages the threading involved with dealing with the decompiler. It uses a simpler approach\n than previous versions.  Currently, there is only one Runnable ever scheduled to the RunManager.\n If a new Decompile request comes in while a decompile is in progress, the new request is\n first checked to see if it going to result in the same function being decompile. If so, then the\n location is updated and the current decompile is allowed to continue.  If the new request is\n a new function or the \"forceDecompile\" option is on, then the current decompile is stopped\n and a new one is scheduled.  A SwingUpdateManger is used to prevent lots of decompile requests\n from coming to quickly.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.DecompilerController","name":"decompilerController","comment":"","type_short":"DecompilerController"},{"type_long":"ghidra.app.decompiler.DecompileOptions","name":"options","comment":"","type_short":"DecompileOptions"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the decompiler options for future decompiles.","static":false,"name":"setOptions","comment":"Set the decompiler options for future decompiles.","params":[{"type_long":"ghidra.app.decompiler.DecompileOptions","name":"decompilerOptions","comment":"","type_short":"DecompileOptions"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the TaskMonitorComponent created by the RunManager and to be used in the\n DecompilerPanel.","static":false,"name":"getTaskMonitorComponent","comment":"Returns the TaskMonitorComponent created by the RunManager and to be used in the\n DecompilerPanel.","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"Resets the native decompiler process.  Call this method when the decompiler's view\n of a program has been invalidated, such as when a new overlay space has been added.","static":false,"name":"resetDecompiler","comment":"Resets the native decompiler process.  Call this method when the decompiler's view\n of a program has been invalidated, such as when a new overlay space has been added.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Requests a new decompile be scheduled.  If a current decompile is already in progress,\n the new request is checked to see if represents the same function. If so, only the\n location of the current decompile is updated and the current decompile is allowed to continue.\n Otherwise a new DecompileRunnable is created and scheduled to run using the updateManager.\n When the updateMangers runs, it will stop any current decompiles and begin the new decompile.\n@param program The program containing the function to be decompiled.\n@param location the location in the program to be decompiled and positioned to.\n@param debugFile if non-null, creates decompile debug output to this file.\n@param forceDecompile true forces a new decompile to be scheduled even if the current job\n is the same function.","static":false,"name":"decompile","comment":"Requests a new decompile be scheduled.  If a current decompile is already in progress,\n the new request is checked to see if represents the same function. If so, only the\n location of the current decompile is updated and the current decompile is allowed to continue.\n Otherwise a new DecompileRunnable is created and scheduled to run using the updateManager.\n When the updateMangers runs, it will stop any current decompiles and begin the new decompile.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"The program containing the function to be decompiled.","type_short":"Program"},{"type_long":"ghidra.program.util.ProgramLocation","name":"location","comment":"the location in the program to be decompiled and positioned to.","type_short":"ProgramLocation"},{"type_long":"docking.widgets.fieldpanel.support.ViewerPosition","name":"viewerPosition","comment":"","type_short":"ViewerPosition"},{"type_long":"java.io.File","name":"debugFile","comment":"if non-null, creates decompile debug output to this file.","type_short":"File"},{"type_long":"boolean","name":"forceDecompile","comment":"true forces a new decompile to be scheduled even if the current job\n is the same function.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPendingRunnable","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.DecompileRunnable","name":"newDecompileRunnable","comment":"","type_short":"DecompileRunnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateCurrentRunnable","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.DecompileRunnable","name":"newDecompileRunnable","comment":"","type_short":"DecompileRunnable"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isBusy","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"cancelAll","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cancelCurrentRunnable","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doPendingDecompile","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"decompile","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"functionToDecompile","comment":"","type_short":"Function"},{"type_long":"java.io.File","name":"debugFile","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.DecompileResults","comment":"","type_short":"DecompileResults"}},{"javadoc":"","static":false,"name":"setDecompileData","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.DecompileRunnable","name":"runnable","comment":"","type_short":"DecompileRunnable"},{"type_long":"ghidra.app.decompiler.component.DecompileData","name":"decompileData","comment":"","type_short":"DecompileData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DecompilerManager","comment":"Manages the threading involved with dealing with the decompiler. It uses a simpler approach\n than previous versions.  Currently, there is only one Runnable ever scheduled to the RunManager.\n If a new Decompile request comes in while a decompile is in progress, the new request is\n first checked to see if it going to result in the same function being decompile. If so, then the\n location is updated and the current decompile is allowed to continue.  If the new request is\n a new function or the \"forceDecompile\" option is on, then the current decompile is stopped\n and a new one is scheduled.  A SwingUpdateManger is used to prevent lots of decompile requests\n from coming to quickly.","fields":[{"type_long":"ghidra.app.decompiler.component.DecompilerController","javadoc":"","static":false,"name":"decompilerController","comment":"","type_short":"DecompilerController","constant_value":null},{"type_long":"ghidra.app.decompiler.component.Decompiler","javadoc":"","static":false,"name":"decompiler","comment":"","type_short":"Decompiler","constant_value":null},{"type_long":"ghidra.app.decompiler.component.DecompileRunnable","javadoc":"","static":false,"name":"currentDecompileRunnable","comment":"","type_short":"DecompileRunnable","constant_value":null},{"type_long":"ghidra.app.decompiler.component.DecompileRunnable","javadoc":"","static":false,"name":"pendingDecompileRunnable","comment":"","type_short":"DecompileRunnable","constant_value":null},{"type_long":"ghidra.util.task.RunManager","javadoc":"","static":false,"name":"runManager","comment":"","type_short":"RunManager","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"updateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null}]}
