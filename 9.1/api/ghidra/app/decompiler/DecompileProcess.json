{"implements":[],"javadoc":"Class for communicating with a single decompiler process.\n The process controls decompilation for a single Program.\n The process is initiated by the registerProgram method.\n If the process is ready, the statusGood flag will be set\n to true.  This flag must be checked via the isReady method\n prior to invoking any of the public methods.  If the\n process isn't ready, the only way to recover is by\n reissuing the registerProgram call and making any other\n necessary initialization calls.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"path","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDisposeState","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.decompiler.DecompileProcess.DisposeState","comment":"","type_short":"DisposeState"}},{"javadoc":"","static":false,"name":"setup","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"readToBurst","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"readToResponse","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"readToBuffer","comment":"","params":[{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","name":"buf","comment":"","type_short":"LimitedByteBuffer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"readQueryString","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"writeString","comment":"","params":[{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Transfer bytes written to -out- to decompiler process\n@param out has the collected byte for this write\n@throws IOException","static":false,"name":"writeBytes","comment":"Transfer bytes written to -out- to decompiler process","params":[{"type_long":"ghidra.program.model.lang.PackedBytes","name":"out","comment":"has the collected byte for this write","type_short":"PackedBytes"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"generateException","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"readResponse","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","comment":"","type_short":"LimitedByteBuffer"}},{"javadoc":"Initialize decompiler for a particular platform\n@param cback = callback object for decompiler\n@param pspecxml = string containing .pspec xml\n@param cspecxml = string containing .cspec xml\n@param tspecxml = XML string containing translator spec\n@throws IOException\n@throws DecompileException","static":false,"name":"registerProgram","comment":"Initialize decompiler for a particular platform","params":[{"type_long":"ghidra.app.decompiler.DecompileCallback","name":"cback","comment":"= callback object for decompiler","type_short":"DecompileCallback"},{"type_long":"java.lang.String","name":"pspecxml","comment":"= string containing .pspec xml","type_short":"String"},{"type_long":"java.lang.String","name":"cspecxml","comment":"= string containing .cspec xml","type_short":"String"},{"type_long":"java.lang.String","name":"tspecxml","comment":"= XML string containing translator spec","type_short":"String"},{"type_long":"java.lang.String","name":"coretypesxml","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Free decompiler resources\n@return \n@throws IOException\n@throws DecompileException","static":false,"name":"deregisterProgram","comment":"Free decompiler resources","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Send a single command to the decompiler with no parameters and return response\n@param command is the name of the command to execute\n@return the response String\n@throws IOException\n@throws DecompileException","static":false,"name":"sendCommand","comment":"Send a single command to the decompiler with no parameters and return response","params":[{"type_long":"java.lang.String","name":"command","comment":"is the name of the command to execute","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","comment":"the response String","type_short":"LimitedByteBuffer"}},{"javadoc":"","static":false,"name":"isReady","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@param command the decompiler should execute\n@param param an additional parameter for the command\n@param timeoutSecs the number of seconds to run before timing out\n@return the response string\n@throws IOException\n@throws DecompileException","static":false,"name":"sendCommand1ParamTimeout","comment":"","params":[{"type_long":"java.lang.String","name":"command","comment":"the decompiler should execute","type_short":"String"},{"type_long":"java.lang.String","name":"param","comment":"an additional parameter for the command","type_short":"String"},{"type_long":"int","name":"timeoutSecs","comment":"the number of seconds to run before timing out","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","comment":"the response string","type_short":"LimitedByteBuffer"}},{"javadoc":"Send a command with 2 parameters to the decompiler and read the result\n@param command string to send\n@param param1 is the first parameter string\n@param param2 is the second parameter string\n@return the result string\n@throws IOException\n@throws DecompileException","static":false,"name":"sendCommand2Params","comment":"Send a command with 2 parameters to the decompiler and read the result","params":[{"type_long":"java.lang.String","name":"command","comment":"string to send","type_short":"String"},{"type_long":"java.lang.String","name":"param1","comment":"is the first parameter string","type_short":"String"},{"type_long":"java.lang.String","name":"param2","comment":"is the second parameter string","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","comment":"the result string","type_short":"LimitedByteBuffer"}},{"javadoc":"","static":false,"name":"setMaxResultSize","comment":"","params":[{"type_long":"int","name":"maxResultSizeMBytes","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setShowNamespace","comment":"","params":[{"type_long":"boolean","name":"showNamespace","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Send a command to the decompiler with one parameter and return the result\n@param command is the command string\n@param param1 is the parameter as a string\n@return the result string\n@throws IOException\n@throws DecompileException","static":false,"name":"sendCommand1Param","comment":"Send a command to the decompiler with one parameter and return the result","params":[{"type_long":"java.lang.String","name":"command","comment":"is the command string","type_short":"String"},{"type_long":"java.lang.String","name":"param1","comment":"is the parameter as a string","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"ghidra.app.decompiler.LimitedByteBuffer","comment":"the result string","type_short":"LimitedByteBuffer"}},{"javadoc":"","static":false,"name":"getRegister","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRegisterName","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTrackedRegisters","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getUserOpName","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPcodePacked","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPcodeInject","comment":"","params":[{"type_long":"int","name":"type","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCPoolRef","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMappedSymbolsXML","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExternalRefXML","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSymbol","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getComments","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getType","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBytes","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"write","comment":"","params":[{"type_long":"byte[]","name":"bytes","comment":"","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"write","comment":"","params":[{"type_long":"int","name":"i","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DecompileProcess","comment":"Class for communicating with a single decompiler process.\n The process controls decompilation for a single Program.\n The process is initiated by the registerProgram method.\n If the process is ready, the statusGood flag will be set\n to true.  This flag must be checked via the isReady method\n prior to invoking any of the public methods.  If the\n process isn't ready, the only way to recover is by\n reissuing the registerProgram call and making any other\n necessary initialization calls.","fields":[{"type_long":"byte[]","javadoc":"","static":true,"name":"command_start","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"command_end","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"query_response_start","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"query_response_end","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"string_start","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"string_end","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"exception_start","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"exception_end","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"byte_start","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"byte[]","javadoc":"","static":true,"name":"byte_end","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"java.lang.Runtime","javadoc":"","static":false,"name":"runtime","comment":"","type_short":"Runtime","constant_value":null},{"type_long":"java.lang.String[]","javadoc":"","static":false,"name":"exepath","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"timeoutRunnable","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"java.lang.Process","javadoc":"","static":false,"name":"nativeProcess","comment":"","type_short":"Process","constant_value":null},{"type_long":"java.io.InputStream","javadoc":"","static":false,"name":"nativeIn","comment":"","type_short":"InputStream","constant_value":null},{"type_long":"java.io.OutputStream","javadoc":"","static":false,"name":"nativeOut","comment":"","type_short":"OutputStream","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"statusGood","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"archId","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileCallback","javadoc":"","static":false,"name":"callback","comment":"","type_short":"DecompileCallback","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxResultSizeMBYtes","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"showNamespace","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileProcess.DisposeState","javadoc":"","static":false,"name":"disposestate","comment":"","type_short":"DisposeState","constant_value":null}]}
