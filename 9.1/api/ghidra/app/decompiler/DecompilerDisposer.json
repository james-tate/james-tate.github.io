{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disposes the given Process and related streams from a background thread.  This is necessary\n due to a low-probability deadlock that occurs in the JVM.\n@param process The process to destroy.\n@param ouputStream The output stream to close\n@param inputStream The input stream to close","static":true,"name":"dispose","comment":"Disposes the given Process and related streams from a background thread.  This is necessary\n due to a low-probability deadlock that occurs in the JVM.","params":[{"type_long":"java.lang.Process","name":"process","comment":"The process to destroy.","type_short":"Process"},{"type_long":"java.io.OutputStream","name":"ouputStream","comment":"The output stream to close","type_short":"OutputStream"},{"type_long":"java.io.InputStream","name":"inputStream","comment":"The input stream to close","type_short":"InputStream"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calls dispose in the given decompiler from a background thread.\n <p>\n Note:<br>\n A class to handle the rare case where the {@link DecompInterface}'s\n synchronized methods are blocking \n while a decompile operation has died and maintained the lock.  In that scenario, calling\n dispose on this class will eventually try to enter a synchronized method that will \n remain blocked forever.\n <p>\n I examined the uses of dispose() on the {@link DecompInterface} and \n determined that calling dispose() is a\n final operation, which means that you don't have to wait.  Further, after calling\n dispose() on this class, you should no longer use it.","static":true,"name":"dispose","comment":"Calls dispose in the given decompiler from a background thread.\n \n Note:\n A class to handle the rare case where the DecompInterface's\n synchronized methods are blocking \n while a decompile operation has died and maintained the lock.  In that scenario, calling\n dispose on this class will eventually try to enter a synchronized method that will \n remain blocked forever.\n \n I examined the uses of dispose() on the DecompInterface and \n determined that calling dispose() is a\n final operation, which means that you don't have to wait.  Further, after calling\n dispose() on this class, you should no longer use it.","params":[{"type_long":"ghidra.app.decompiler.DecompInterface","name":"decompiler","comment":"","type_short":"DecompInterface"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DecompilerDisposer","comment":"","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"THREAD_POOL_NAME","comment":"","type_short":"String","constant_value":null},{"type_long":"generic.concurrent.ConcurrentQ<ghidra.app.decompiler.DecompilerDisposer.AbstractDisposable,ghidra.app.decompiler.DecompilerDisposer.AbstractDisposable>","javadoc":"","static":true,"name":"queue","comment":"","type_short":"ConcurrentQ","constant_value":null}]}
