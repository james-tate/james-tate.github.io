{"implements":[],"javadoc":"This is a self-contained interface to a single decompile\n process, suitable for an open-ended number of function\n decompilations for a single program. The interface is\n persistent. It caches all the initialization data passed\n to it, and if the underlying decompiler process crashes,\n it automatically respawns the process and reinitializes\n it the next time it is needed.  The basic usage pattern\n is as follows\n \n   \/\/ Instantiate the interface\n   DecompInterface ifc = new DecompInterface();\n   \n   \/\/ Setup any options or other initialization\n   ifc.setOptions(xmlOptions); \/\/ Inform interface of global options\n   \/\/ ifc.toggleSyntaxTree(false);  \/\/ Don't produce syntax trees\n   \/\/ ifc.toggleCCode(false);       \/\/ Don't produce C code\n   \/\/ ifc.setSimplificationStyle(\"normalize\"); \/\/ Alternate analysis style\n   \n   \/\/ Setup up the actual decompiler process for a\n   \/\/ particular program, using all the above initialization\n   ifc.openProgram(program,language);\n   \n   \/\/ Make calls to the decompiler:\n   DecompileResults res = ifc.decompileFunction(func,0,taskmonitor);\n   \n   \/\/ Check for error conditions\n   if (!res.decompileCompleted()) {\n   \tsystem.out.println(res.getErrorMessage());\n      return;\n   }\n   \n   \/\/ Make use of results\n      \/\/ Get C code\n   ClangTokenGroup tokgroup = res.getCCodeMarkup();\n   ...  \n      \/\/ Get the function object\/syntax tree\n   HighFunction hfunc = res.getHighFunction();\n   ...","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Turn on debugging dump for the next decompiled\n function\n@param filename in which to save dump","static":false,"name":"enableDebug","comment":"Turn on debugging dump for the next decompiled\n function","params":[{"type_long":"java.io.File","name":"debugfile","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if debug has been enabled for the current\/next decompilation.","static":false,"name":"debugEnabled","comment":"Returns true if debug has been enabled for the current\/next decompilation.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return the identifier for the current simplification style\n@return the identifier as a String","static":false,"name":"getSimplificationStyle","comment":"Return the identifier for the current simplification style","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the identifier as a String","type_short":"String"}},{"javadoc":"","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"","static":false,"name":"getLanguage","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"","type_short":"Language"}},{"javadoc":"","static":false,"name":"getDataTypeManager","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeDataTypeManager","comment":"","type_short":"PcodeDataTypeManager"}},{"javadoc":"Get the last message produced by the decompiler process.\n If the message is non-null, it is probably an error\n message, but not always.  It is better to use the\n getErrorMessage method off of DecompileResults.\n@return the message string or null","static":false,"name":"getLastMessage","comment":"Get the last message produced by the decompiler process.\n If the message is non-null, it is probably an error\n message, but not always.  It is better to use the\n getErrorMessage method off of DecompileResults.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the message string or null","type_short":"String"}},{"javadoc":"","static":false,"name":"isErrorMessage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"fileToString","comment":"","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"","type_short":"ResourceFile"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"This is the main routine for making sure that a decompiler\n process is active and that it is initialized properly\n@throws IOException\n@throws DecompileException","static":false,"name":"initializeProcess","comment":"This is the main routine for making sure that a decompiler\n process is active and that it is initialized properly","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"verifyProcess","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.decompiler.DecompileException","comment":"","type_short":"DecompileException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This call initializes a new decompiler process to do\n decompilations for a new program. This method only\n needs to be called once per program.  Even if the\n underlying decompiler process crashes, the interface\n will automatically restart and reinitialize a new\n process when it needs it, and the openProgram call\n does not need to be made again. The call can be made\n multiple times, in which case, each call terminates\n the process initialized the last time and starts a\n new process\n@param prog = the program on which to perform decompilations\n@return true if the decompiler process is successfully initialized","static":false,"name":"openProgram","comment":"This call initializes a new decompiler process to do\n decompilations for a new program. This method only\n needs to be called once per program.  Even if the\n underlying decompiler process crashes, the interface\n will automatically restart and reinitialize a new\n process when it needs it, and the openProgram call\n does not need to be made again. The call can be made\n multiple times, in which case, each call terminates\n the process initialized the last time and starts a\n new process","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"= the program on which to perform decompilations","type_short":"Program"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process is successfully initialized","type_short":"boolean"}},{"javadoc":"Shutdown any existing decompiler process and free\n resources.  The interface cannot be used again\n to perform decompilations until an openProgram call\n is made again.","static":false,"name":"closeProgram","comment":"Shutdown any existing decompiler process and free\n resources.  The interface cannot be used again\n to perform decompilations until an openProgram call\n is made again.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This allows the application to the type of analysis\n performed by the decompiler, by giving the name of\n an analysis class. Right now, there are a few\n predefined classes. But there soon may be support\n for applications to define their own class and\n tailoring the decompiler's behaviour for that class.\n <p>\n The current predefined analysis class are:\n <ul>\n   <li>\"decompile\" - this is the default, and performs all\n      analysis steps suitable for producing C code.\n   <li>\"normalize\" - omits type recovery from the analysis\n      and some of the final clean-up steps involved in\n      making valid C code.  It is suitable for creating\n      normalized pcode syntax trees of the dataflow.\n   <li>\"firstpass\" - does no analysis, but produces an\n      unmodified syntax tree of the dataflow from the\n   <li>\"register\" - does ???.\n   <li>\"paramid\" - does required amount of decompilation\n      followed by analysis steps that send parameter\n      measure information for parameter id analysis.\n      raw pcode.\n <\/ul>\n      \n <p>\n This property should ideally be set once before the\n openProgram call is made, but it can be used repeatedly\n if the application needs to change analysis style in the\n middle of a sequence of decompiles.  Unless the style\n changes, the method does NOT need to be called repeatedly.\n Even after a crash, the new decompiler process will\n automatically configured with the cached style value.\n@param actionstring \"decompile\"|\"normalize\"|\"register\"|\"firstpass\"|\"paramid\"\n@return true - if the decompiler process was successfully configured","static":false,"name":"setSimplificationStyle","comment":"This allows the application to the type of analysis\n performed by the decompiler, by giving the name of\n an analysis class. Right now, there are a few\n predefined classes. But there soon may be support\n for applications to define their own class and\n tailoring the decompiler's behaviour for that class.\n \n The current predefined analysis class are:\n \n   \"decompile\" - this is the default, and performs all\n      analysis steps suitable for producing C code.\n   \"normalize\" - omits type recovery from the analysis\n      and some of the final clean-up steps involved in\n      making valid C code.  It is suitable for creating\n      normalized pcode syntax trees of the dataflow.\n   \"firstpass\" - does no analysis, but produces an\n      unmodified syntax tree of the dataflow from the\n   \"register\" - does ???.\n   \"paramid\" - does required amount of decompilation\n      followed by analysis steps that send parameter\n      measure information for parameter id analysis.\n      raw pcode.\n \n      \n \n This property should ideally be set once before the\n openProgram call is made, but it can be used repeatedly\n if the application needs to change analysis style in the\n middle of a sequence of decompiles.  Unless the style\n changes, the method does NOT need to be called repeatedly.\n Even after a crash, the new decompiler process will\n automatically configured with the cached style value.","params":[{"type_long":"java.lang.String","name":"actionstring","comment":"\"decompile\"|\"normalize\"|\"register\"|\"firstpass\"|\"paramid\"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true - if the decompiler process was successfully configured","type_short":"boolean"}},{"javadoc":"This method toggles whether or not the decompiler\n produces a syntax tree (via calls to decompileFunction).\n The default is to always produce a syntax tree, but\n some applications may only need C code.  Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process\n@param val = true, to produce a syntax tree, false otherwise\n@return true if the decompiler process, accepted the change of state","static":false,"name":"toggleSyntaxTree","comment":"This method toggles whether or not the decompiler\n produces a syntax tree (via calls to decompileFunction).\n The default is to always produce a syntax tree, but\n some applications may only need C code.  Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process","params":[{"type_long":"boolean","name":"val","comment":"= true, to produce a syntax tree, false otherwise","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process, accepted the change of state","type_short":"boolean"}},{"javadoc":"Toggle whether or not calls to the decompiler process\n (via the decompileFunction method) produce C code.\n The default is to always compute C code, but some\n applications may only need the syntax tree or other\n function information. Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process\n@param val = true, to produce C code, false otherwise\n@return true if the decompiler process accepted the new state","static":false,"name":"toggleCCode","comment":"Toggle whether or not calls to the decompiler process\n (via the decompileFunction method) produce C code.\n The default is to always compute C code, but some\n applications may only need the syntax tree or other\n function information. Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process","params":[{"type_long":"boolean","name":"val","comment":"= true, to produce C code, false otherwise","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process accepted the new state","type_short":"boolean"}},{"javadoc":"Toggle whether or not calls to the decompiler process\n (via the decompileFunction method) produce Parameter\n Measures. The default is to not compute Parameter\n Measures. Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process\n@param val = true, to produce C code, false otherwise\n@return true if the decompiler process accepted the new state","static":false,"name":"toggleParamMeasures","comment":"Toggle whether or not calls to the decompiler process\n (via the decompileFunction method) produce Parameter\n Measures. The default is to not compute Parameter\n Measures. Ideally this method should\n be called once before the openProgram call, but it\n can be used at any time, if the application wants\n to change before in the middle of a sequence of\n decompiles. Unless the desired value changes, the\n method does NOT need to be called repeatedly. Even\n after a decompiler process crash, the old value is\n cached and automatically sent to the new process","params":[{"type_long":"boolean","name":"val","comment":"= true, to produce C code, false otherwise","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process accepted the new state","type_short":"boolean"}},{"javadoc":"Toggle whether or not the decompiler process should return information about tables\n used to recover switch statements.  Most compilers implement switch statements using a\n so called \"jumptable\" of addresses or offsets.  The decompiler can frequently recover this\n and can return a description of the table\n@param val = true, to have the decompiler return table info, false otherwise\n@return true if the decompiler process accepted the new state","static":false,"name":"toggleJumpLoads","comment":"Toggle whether or not the decompiler process should return information about tables\n used to recover switch statements.  Most compilers implement switch statements using a\n so called \"jumptable\" of addresses or offsets.  The decompiler can frequently recover this\n and can return a description of the table","params":[{"type_long":"boolean","name":"val","comment":"= true, to have the decompiler return table info, false otherwise","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process accepted the new state","type_short":"boolean"}},{"javadoc":"Set the object controlling the list of global options\n used by the decompiler. Ideally this is called once,\n before the openProgram call is made. But it can be\n used at any time, if the options change in the middle\n of a sequence of decompiles.\n If there is no change to the options, this method\n does NOT need to be called repeatedly.  Even after\n recovering from decompiler process crash, the interface\n keeps the options object around and automatically\n sends it to the new decompiler process.\n@param xmloptions the new (or changed) option object\n@return true if the decompiler process accepted the new options","static":false,"name":"setOptions","comment":"Set the object controlling the list of global options\n used by the decompiler. Ideally this is called once,\n before the openProgram call is made. But it can be\n used at any time, if the options change in the middle\n of a sequence of decompiles.\n If there is no change to the options, this method\n does NOT need to be called repeatedly.  Even after\n recovering from decompiler process crash, the interface\n keeps the options object around and automatically\n sends it to the new decompiler process.","params":[{"type_long":"ghidra.app.decompiler.DecompileOptions","name":"xmloptions","comment":"the new (or changed) option object","type_short":"DecompileOptions"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the decompiler process accepted the new options","type_short":"boolean"}},{"javadoc":"Get the options currently in effect for the decompiler\n@return options that will be passed to the decompiler","static":false,"name":"getOptions","comment":"Get the options currently in effect for the decompiler","params":[],"throws":[],"return":{"type_long":"ghidra.app.decompiler.DecompileOptions","comment":"options that will be passed to the decompiler","type_short":"DecompileOptions"}},{"javadoc":"Tell the decompiler to clear any function and symbol\n information it gathered from the database.  Its a good\n idea to call this after any decompileFunction call,\n as the decompile process caches and reuses this kind\n of data, and there is no explicit method for keeping\n the cache in sync with the data base. Currently the\n return value has no meaning.\n@return -1","static":false,"name":"flushCache","comment":"Tell the decompiler to clear any function and symbol\n information it gathered from the database.  Its a good\n idea to call this after any decompileFunction call,\n as the decompile process caches and reuses this kind\n of data, and there is no explicit method for keeping\n the cache in sync with the data base. Currently the\n return value has no meaning.","params":[],"throws":[],"return":{"type_long":"int","comment":"-1","type_short":"int"}},{"javadoc":"","static":false,"name":"structureGraph","comment":"","params":[{"type_long":"ghidra.program.model.pcode.BlockGraph","name":"ingraph","comment":"","type_short":"BlockGraph"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"factory","comment":"","type_short":"AddressFactory"},{"type_long":"int","name":"timeoutSecs","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.BlockGraph","comment":"","type_short":"BlockGraph"}},{"javadoc":"Decompile function\n@param func function to be decompiled\n@param timeoutSecs if decompile does not complete in this time a null value\n will be returned and a timeout error set.\n@param monitor optional task monitor which may be used to cancel decompile\n@return decompiled function text\n@throws CancelledException operation was cancelled via monitor","static":false,"name":"decompileFunction","comment":"Decompile function","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function to be decompiled","type_short":"Function"},{"type_long":"int","name":"timeoutSecs","comment":"if decompile does not complete in this time a null value\n will be returned and a timeout error set.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"optional task monitor which may be used to cancel decompile","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.app.decompiler.DecompileResults","comment":"decompiled function text","type_short":"DecompileResults"}},{"javadoc":"Stop the decompile process. \n \n NOTE: Subsequent calls made from another  \n thread to this DecompInterface object may fail since the decompiler \n process is being yanked away.","static":false,"name":"stopProcess","comment":"Stop the decompile process. \n \n NOTE: Subsequent calls made from another  \n thread to this DecompInterface object may fail since the decompiler \n process is being yanked away.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Resets the native decompiler process.  Call this method when the decompiler's view\n of a program has been invalidated, such as when a new overlay space has been added.","static":false,"name":"resetDecompiler","comment":"Resets the native decompiler process.  Call this method when the decompiler's view\n of a program has been invalidated, such as when a new overlay space has been added.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Our threaded callback","static":false,"name":"disposeCallback","comment":"Our threaded callback","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCompilerSpec","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.CompilerSpec","comment":"","type_short":"CompilerSpec"}},{"javadoc":"","static":false,"name":"isDisplayNamespace","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"DecompInterface","comment":"This is a self-contained interface to a single decompile\n process, suitable for an open-ended number of function\n decompilations for a single program. The interface is\n persistent. It caches all the initialization data passed\n to it, and if the underlying decompiler process crashes,\n it automatically respawns the process and reinitializes\n it the next time it is needed.  The basic usage pattern\n is as follows\n \n   \/\/ Instantiate the interface\n   DecompInterface ifc = new DecompInterface();\n   \n   \/\/ Setup any options or other initialization\n   ifc.setOptions(xmlOptions); \/\/ Inform interface of global options\n   \/\/ ifc.toggleSyntaxTree(false);  \/\/ Don't produce syntax trees\n   \/\/ ifc.toggleCCode(false);       \/\/ Don't produce C code\n   \/\/ ifc.setSimplificationStyle(\"normalize\"); \/\/ Alternate analysis style\n   \n   \/\/ Setup up the actual decompiler process for a\n   \/\/ particular program, using all the above initialization\n   ifc.openProgram(program,language);\n   \n   \/\/ Make calls to the decompiler:\n   DecompileResults res = ifc.decompileFunction(func,0,taskmonitor);\n   \n   \/\/ Check for error conditions\n   if (!res.decompileCompleted()) {\n   \tsystem.out.println(res.getErrorMessage());\n      return;\n   }\n   \n   \/\/ Make use of results\n      \/\/ Get C code\n   ClangTokenGroup tokgroup = res.getCCodeMarkup();\n   ...  \n      \/\/ Get the function object\/syntax tree\n   HighFunction hfunc = res.getHighFunction();\n   ...","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.app.plugin.processors.sleigh.SleighLanguage","javadoc":"","static":false,"name":"pcodelanguage","comment":"","type_short":"SleighLanguage","constant_value":null},{"type_long":"ghidra.program.model.pcode.PcodeDataTypeManager","javadoc":"","static":false,"name":"dtmanage","comment":"","type_short":"PcodeDataTypeManager","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"decompileMessage","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.program.model.lang.BasicCompilerSpec","javadoc":"","static":false,"name":"compilerSpec","comment":"","type_short":"BasicCompilerSpec","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileProcess","javadoc":"","static":false,"name":"decompProcess","comment":"","type_short":"DecompileProcess","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileCallback","javadoc":"","static":false,"name":"decompCallback","comment":"","type_short":"DecompileCallback","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileDebug","javadoc":"","static":false,"name":"debug","comment":"","type_short":"DecompileDebug","constant_value":null},{"type_long":"ghidra.util.task.CancelledListener","javadoc":"","static":false,"name":"monitorListener","comment":"","type_short":"CancelledListener","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"actionname","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.app.decompiler.DecompileOptions","javadoc":"","static":false,"name":"xmlOptions","comment":"","type_short":"DecompileOptions","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"printSyntaxTree","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"printCCode","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"sendParamMeasures","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"jumpLoad","comment":"","type_short":"boolean","constant_value":null}]}
