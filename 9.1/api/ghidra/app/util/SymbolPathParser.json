{"implements":[],"javadoc":"A parser for breaking down namespaces in the presence of complicating factors such\n  as templates.\n <P>\n For example, if a SymbolPath is constructed with \"foo&lt;int, blah::hah&gt;::bar::baz\",\n then \"baz\" is the name of a symbol in the \"bar\" namespace, which is in the\n \"foo&lt;int, blah::hah&gt;\" namespace.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parses a String pathname into its constituent namespace and name components.\n The list does not contain the global namespace, which is implied, but then\n has each more deeply nested namespace contained in order in the list, followed\n by the trailing name.\n@param name The input String to be parsed.\n@return List<String> containing the sequence of namespaces and trailing name.","static":true,"name":"parse","comment":"Parses a String pathname into its constituent namespace and name components.\n The list does not contain the global namespace, which is implied, but then\n has each more deeply nested namespace contained in order in the list, followed\n by the trailing name.","params":[{"type_long":"java.lang.String","name":"name","comment":"The input String to be parsed.","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"List containing the sequence of namespaces and trailing name.","type_short":"List"}},{"javadoc":"Naive parsing that assumes evenly matched angle brackets (templates) with no operator\n overloading that contains these and no other rule breakers.\n@param name The input String to be parsed.\n@return List<String> containing the sequence of namespaces and trailing name.","static":true,"name":"naiveParse","comment":"Naive parsing that assumes evenly matched angle brackets (templates) with no operator\n overloading that contains these and no other rule breakers.","params":[{"type_long":"java.lang.String","name":"name","comment":"The input String to be parsed.","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"List containing the sequence of namespaces and trailing name.","type_short":"List"}}],"name":"SymbolPathParser","comment":"A parser for breaking down namespaces in the presence of complicating factors such\n  as templates.\n \n For example, if a SymbolPath is constructed with \"fooint, blah::hah::bar::baz\",\n then \"baz\" is the name of a symbol in the \"bar\" namespace, which is in the\n \"fooint, blah::hah\" namespace.","fields":[]}
