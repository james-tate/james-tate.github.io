{"implements":[],"javadoc":"A {@link Loader} for processing Microsoft MAP files.\n <p>\n Sample .map file section we parse to extract symbol information:\n <pre>\n   ...\n   ...\n   ...\n\n   Address         Publics by Value              Rva+Base               Lib:Object\n   \n  0000:00000000       ___safe_se_handler_table   0000000000000000     &lt;absolute&gt;\n  0000:00000000       ___safe_se_handler_count   0000000000000000     &lt;absolute&gt;\n  0000:00000000       __ImageBase                0000000140000000     &lt;linker-defined&gt;\n  0001:00000040       foo                        0000000140001040 f   foo.obj\n  0001:000000c0       bar                        00000001400010c0 f   foo.obj\n  \n  ...\n  ...\n  ...\n  <\/pre>","static":false,"extends":"ghidra.app.util.opinion.AbstractLibrarySupportLoader","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parses exported symbol information from the MAP file represented by the given provider.\n@param provider The bytes representing a MAP file\n@param log An optional log to write to (could be null)\n@return A {@link List} of {@link MapExport}s representing exported symbol information\n@throws IOException If there was a problem parsing","static":false,"name":"parseExports","comment":"Parses exported symbol information from the MAP file represented by the given provider.","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"The bytes representing a MAP file","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"An optional log to write to (could be null)","type_short":"MessageLog"}],"throws":[{"type_long":"java.io.IOException","comment":"If there was a problem parsing","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.app.util.opinion.MapLoader.MapExport>","comment":"A List of MapExports representing exported symbol information","type_short":"List"}},{"javadoc":"","static":false,"name":"findSupportedLoadSpecs","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.Collection<ghidra.app.util.opinion.LoadSpec>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"load","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"supportsLoadIntoProgram","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"MapLoader","comment":"A Loader for processing Microsoft MAP files.\n \n Sample .map file section we parse to extract symbol information:\n \n   ...\n   ...\n   ...\n\n   Address         Publics by Value              Rva+Base               Lib:Object\n   \n  0000:00000000       ___safe_se_handler_table   0000000000000000     absolute\n  0000:00000000       ___safe_se_handler_count   0000000000000000     absolute\n  0000:00000000       __ImageBase                0000000140000000     linker-defined\n  0001:00000040       foo                        0000000140001040 f   foo.obj\n  0001:000000c0       bar                        00000001400010c0 f   foo.obj\n  \n  ...\n  ...\n  ...\n  ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MAP_NAME","comment":"","type_short":"String","constant_value":"\"Program Mapfile (MAP)\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NO_MAGIC","comment":"","type_short":"String","constant_value":"\"0\""}]}
