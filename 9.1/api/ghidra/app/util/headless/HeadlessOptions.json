{"implements":[],"javadoc":"<code>HeadlessOptions<\/code>.  Options for headless analyzer.\n Option state may be adjusted to reflect assumed options\n during processing.  If multiple invocations of either\n {@link HeadlessAnalyzer#processLocal(String, String, String, List)} or\n {@link HeadlessAnalyzer#processURL(java.net.URL, List)} are performed,\n these options should be reset and adjusted as necessary.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new headless options object with default settings.","static":false,"name":"<init>","comment":"Creates a new headless options object with default settings.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Resets the options to its default settings.","static":false,"name":"reset","comment":"Resets the options to its default settings.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set to run scripts (and optionally, analysis) without importing a\n program.  Scripts will run on specified folder or program that already\n exists in the project.\n@param runScriptsOnly if true, no imports will occur and scripts\n \t\t\t\t\t\t (and analysis, if enabled) will run on the specified existing program\n \t\t\t\t\t     or directory of programs.\n@param filename name of specific project file or folder to be processed (the location\n \t\t\t\t\t is passed in elsewhere by the user).  If null, user has not specified\n \t\t\t\t\t a file to process -- therefore, the entire directory will be processed.\n \t\t\t\t\t The filename should not include folder path elements which should be \n                   specified separately via project or URL specification.\n@throws IllegalArgumentException if the specified filename is invalid and contains the\n path separator character '\/'.","static":false,"name":"setRunScriptsNoImport","comment":"Set to run scripts (and optionally, analysis) without importing a\n program.  Scripts will run on specified folder or program that already\n exists in the project.","params":[{"type_long":"boolean","name":"runScriptsOnly","comment":"if true, no imports will occur and scripts\n \t\t\t\t\t\t (and analysis, if enabled) will run on the specified existing program\n \t\t\t\t\t     or directory of programs.","type_short":"boolean"},{"type_long":"java.lang.String","name":"filename","comment":"name of specific project file or folder to be processed (the location\n \t\t\t\t\t is passed in elsewhere by the user).  If null, user has not specified\n \t\t\t\t\t a file to process -- therefore, the entire directory will be processed.\n \t\t\t\t\t The filename should not include folder path elements which should be \n                   specified separately via project or URL specification.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the ordered list of scripts to execute immediately following import and\n prior to analyzing an imported program.  If import not performed,\n these scripts will execute once prior to any post-scripts.\n@param preScripts list of script names","static":false,"name":"setPreScripts","comment":"Set the ordered list of scripts to execute immediately following import and\n prior to analyzing an imported program.  If import not performed,\n these scripts will execute once prior to any post-scripts.","params":[{"type_long":"java.util.List<java.lang.String>","name":"preScripts","comment":"list of script names","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the ordered list of scripts and their arguments to execute immediately following import \n and prior to analyzing an imported program.  If import not performed,\n these scripts will execute once prior to any post-scripts.\n@param preScripts list of script names\/script argument pairs","static":false,"name":"setPreScriptsWithArgs","comment":"Set the ordered list of scripts and their arguments to execute immediately following import \n and prior to analyzing an imported program.  If import not performed,\n these scripts will execute once prior to any post-scripts.","params":[{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String[]>>","name":"preScripts","comment":"list of script names\/script argument pairs","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the ordered list of scripts to execute immediately following import and\n and analysis of a program.  If import not performed,\n these scripts will execute once following any pre-scripts.\n@param postScripts list of script names","static":false,"name":"setPostScripts","comment":"Set the ordered list of scripts to execute immediately following import and\n and analysis of a program.  If import not performed,\n these scripts will execute once following any pre-scripts.","params":[{"type_long":"java.util.List<java.lang.String>","name":"postScripts","comment":"list of script names","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the ordered list of scripts to execute immediately following import and\n and analysis of a program.  If import not performed,\n these scripts will execute once following any pre-scripts.\n@param postScripts list of script names\/script argument pairs","static":false,"name":"setPostScriptsWithArgs","comment":"Set the ordered list of scripts to execute immediately following import and\n and analysis of a program.  If import not performed,\n these scripts will execute once following any pre-scripts.","params":[{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String[]>>","name":"postScripts","comment":"list of script names\/script argument pairs","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the script source directories to be searched for secondary scripts.\n The default set of enabled script directories within the Ghidra installation \n will be appended to the specified list of newPaths.\n Individual Paths may be constructed relative to Ghidra installation directory,\n User home directory, or absolute system paths.  Examples:\n <pre>\n     Path.GHIDRA_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n     Path.USER_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n     \"\/shared\/ghidra_scripts\"\n <\/pre>\n@param newPaths list of directories to be searched.","static":false,"name":"setScriptDirectories","comment":"Set the script source directories to be searched for secondary scripts.\n The default set of enabled script directories within the Ghidra installation \n will be appended to the specified list of newPaths.\n Individual Paths may be constructed relative to Ghidra installation directory,\n User home directory, or absolute system paths.  Examples:\n \n     Path.GHIDRA_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n     Path.USER_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n     \"\/shared\/ghidra_scripts\"\n ","params":[{"type_long":"java.util.List<java.lang.String>","name":"newPaths","comment":"list of directories to be searched.","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"List of valid script directory paths separated by a ';'.\n The default set of enabled script directories within the Ghidra installation \n will be appended to the specified list of newPaths.\n Individual Paths may be constructed relative to Ghidra installation directory,\n User home directory, or absolute system paths.  Examples:\n <pre>\n \t\tPath.GHIDRA_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n      Path.USER_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n\t\t\"\/shared\/ghidra_scripts\"\n <\/pre>\n@param paths semicolon (';') separated list of directory paths","static":false,"name":"setScriptDirectories","comment":"List of valid script directory paths separated by a ';'.\n The default set of enabled script directories within the Ghidra installation \n will be appended to the specified list of newPaths.\n Individual Paths may be constructed relative to Ghidra installation directory,\n User home directory, or absolute system paths.  Examples:\n \n \t\tPath.GHIDRA_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n      Path.USER_HOME + \"\/Ghidra\/Features\/Base\/ghidra_scripts\"\n\t\t\"\/shared\/ghidra_scripts\"\n ","params":[{"type_long":"java.lang.String","name":"paths","comment":"semicolon (';') separated list of directory paths","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets a single location for .properties files associated with GhidraScripts.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).\n@param path location of .properties file(s)","static":false,"name":"setPropertiesFileDirectory","comment":"Sets a single location for .properties files associated with GhidraScripts.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).","params":[{"type_long":"java.lang.String","name":"path","comment":"location of .properties file(s)","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets one or more locations to find .properties files associated with GhidraScripts.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).\n@param newPaths potential locations of .properties file(s)","static":false,"name":"setPropertiesFileDirectories","comment":"Sets one or more locations to find .properties files associated with GhidraScripts.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).","params":[{"type_long":"java.util.List<java.lang.String>","name":"newPaths","comment":"potential locations of .properties file(s)","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"List of valid .properties file directory paths, separated by a ';'.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).\n@param paths String representation of directories (each separated by ';')","static":false,"name":"setPropertiesFileDirectories","comment":"List of valid .properties file directory paths, separated by a ';'.\n \n Typically, .properties files should be located in the same directory as their corresponding \n scripts. However, this method may need to be used when circumstances make it impossible to\n have both files in the same directory (i.e., if the scripts are included in ghidra.jar).","params":[{"type_long":"java.lang.String","name":"paths","comment":"String representation of directories (each separated by ';')","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"During import, the default behavior is to skip the import if a conflict occurs \n within the destination folder.  This method can be used to force the original \n conflicting file to be removed prior to import.\n If the pre-existing file is versioned, the commit option must also be\n enabled to have the overwrite remove the versioned file.\n@param enabled if true conflicting domain files will be removed from the \n project prior to importing the new file.","static":false,"name":"enableOverwriteOnConflict","comment":"During import, the default behavior is to skip the import if a conflict occurs \n within the destination folder.  This method can be used to force the original \n conflicting file to be removed prior to import.\n If the pre-existing file is versioned, the commit option must also be\n enabled to have the overwrite remove the versioned file.","params":[{"type_long":"boolean","name":"enabled","comment":"if true conflicting domain files will be removed from the \n project prior to importing the new file.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method can be used to enable recursive processing of files during\n <tt>-import<\/tt> or <tt>-process<\/tt> modes.  In order for recursive processing of files to\n occur, the user must have specified a directory (and not a specific file)\n for the Headless Analyzer to import or process.\n@param enabled if true, enables recursive processing","static":false,"name":"enableRecursiveProcessing","comment":"This method can be used to enable recursive processing of files during\n -import or -process modes.  In order for recursive processing of files to\n occur, the user must have specified a directory (and not a specific file)\n for the Headless Analyzer to import or process.","params":[{"type_long":"boolean","name":"enabled","comment":"if true, enables recursive processing","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"When readOnly processing is enabled, any changes made by script or analyzers\n are discarded when the Headless Analyzer exits.  When used with import mode,\n the imported program file will not be saved to the project or repository.\n@param enabled if true, enables readOnly processing or import","static":false,"name":"enableReadOnlyProcessing","comment":"When readOnly processing is enabled, any changes made by script or analyzers\n are discarded when the Headless Analyzer exits.  When used with import mode,\n the imported program file will not be saved to the project or repository.","params":[{"type_long":"boolean","name":"enabled","comment":"if true, enables readOnly processing or import","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set project delete flag which allows temporary projects created\n to be deleted upon completion.  This option has no effect if a \n Ghidra URL or an existing project was specified.  This option\n will be assumed when importing with the readOnly option enabled.\n@param enabled if true a created project will be deleted when \n processing is complete.","static":false,"name":"setDeleteCreatedProjectOnClose","comment":"Set project delete flag which allows temporary projects created\n to be deleted upon completion.  This option has no effect if a \n Ghidra URL or an existing project was specified.  This option\n will be assumed when importing with the readOnly option enabled.","params":[{"type_long":"boolean","name":"enabled","comment":"if true a created project will be deleted when \n processing is complete.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Auto-analysis is enabled by default following import.  This method can be\n used to change the enablement of auto-analysis.\n@param enabled True if auto-analysis should be enabled; otherwise, false.","static":false,"name":"enableAnalysis","comment":"Auto-analysis is enabled by default following import.  This method can be\n used to change the enablement of auto-analysis.","params":[{"type_long":"boolean","name":"enabled","comment":"True if auto-analysis should be enabled; otherwise, false.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the language and compiler spec from the provided input. Any null value will attempt\n a \"best-guess\" if possible.\n@param languageId The language to set.\n@param compilerSpecId The compiler spec to set.\n@throws InvalidInputException if the language and compiler spec combination is not valid.","static":false,"name":"setLanguageAndCompiler","comment":"Sets the language and compiler spec from the provided input. Any null value will attempt\n a \"best-guess\" if possible.","params":[{"type_long":"java.lang.String","name":"languageId","comment":"The language to set.","type_short":"String"},{"type_long":"java.lang.String","name":"compilerSpecId","comment":"The compiler spec to set.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the language and compiler spec combination is not valid.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set analyzer timeout on a per-file basis.\n@param stringInSecs timeout value in seconds (as a String)\n@throws InvalidInputException if the timeout value was not a valid value","static":false,"name":"setPerFileAnalysisTimeout","comment":"Set analyzer timeout on a per-file basis.","params":[{"type_long":"java.lang.String","name":"stringInSecs","comment":"timeout value in seconds (as a String)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the timeout value was not a valid value","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPerFileAnalysisTimeout","comment":"","params":[{"type_long":"int","name":"secs","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set Ghidra Server client credentials to be used with \"shared\" projects.\n@param userID optional userId to use if server permits the user to use\n a userId which differs from the process owner name.\n@param keystorePath file path to keystore file containing users private key\n to be used with PKI or SSH based authentication.\n@param allowPasswordPrompt if true the user may be prompted for passwords\n via the console (stdin).  Please note that the Java console will echo \n the password entry to the terminal which may be undesirable.\n@throws IOException if an error occurs while opening the specified keystorePath.","static":false,"name":"setClientCredentials","comment":"Set Ghidra Server client credentials to be used with \"shared\" projects.","params":[{"type_long":"java.lang.String","name":"userID","comment":"optional userId to use if server permits the user to use\n a userId which differs from the process owner name.","type_short":"String"},{"type_long":"java.lang.String","name":"keystorePath","comment":"file path to keystore file containing users private key\n to be used with PKI or SSH based authentication.","type_short":"String"},{"type_long":"boolean","name":"allowPasswordPrompt","comment":"if true the user may be prompted for passwords\n via the console (stdin).  Please note that the Java console will echo \n the password entry to the terminal which may be undesirable.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if an error occurs while opening the specified keystorePath.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Enable committing of processed files to the repository which backs the specified\n project.\n@param commit if true imported files will be committed\n@param comment optional comment to use when committing","static":false,"name":"setCommitFiles","comment":"Enable committing of processed files to the repository which backs the specified\n project.","params":[{"type_long":"boolean","name":"commit","comment":"if true imported files will be committed","type_short":"boolean"},{"type_long":"java.lang.String","name":"comment","comment":"optional comment to use when committing","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setOkToDelete","comment":"","params":[{"type_long":"boolean","name":"deleteOk","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the maximum number of cpu cores to use during headless processing.\n@param cpu The maximum number of cpu cores to use during headless processing.\n     Setting it to 0 or a negative integer is equivalent to setting it to 1.","static":false,"name":"setMaxCpu","comment":"Sets the maximum number of cpu cores to use during headless processing.","params":[{"type_long":"int","name":"cpu","comment":"The maximum number of cpu cores to use during headless processing.\n     Setting it to 0 or a negative integer is equivalent to setting it to 1.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the loader to use for imports, as well as any loader-specific arguments.  A null loader \n will attempt \"best-guess\" if possible.  Loader arguments are not supported if a \"best-guess\"\n is made.\n@param loaderName The name (simple class name) of the loader to use.\n@param loaderArgs A list of loader-specific arguments.  Could be null if there are none.\n@throws InvalidInputException if an invalid loader name was specified, or if loader arguments\n   were specified but a loader was not.","static":false,"name":"setLoader","comment":"Sets the loader to use for imports, as well as any loader-specific arguments.  A null loader \n will attempt \"best-guess\" if possible.  Loader arguments are not supported if a \"best-guess\"\n is made.","params":[{"type_long":"java.lang.String","name":"loaderName","comment":"The name (simple class name) of the loader to use.","type_short":"String"},{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String>>","name":"loaderArgs","comment":"A list of loader-specific arguments.  Could be null if there are none.","type_short":"List"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if an invalid loader name was specified, or if loader arguments\n   were specified but a loader was not.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"HeadlessOptions","comment":"HeadlessOptions.  Options for headless analyzer.\n Option state may be adjusted to reflect assumed options\n during processing.  If multiple invocations of either\n HeadlessAnalyzer#processLocal(String, String, String, List) or\n HeadlessAnalyzer#processURL(java.net.URL, List) are performed,\n these options should be reset and adjusted as necessary.","fields":[{"type_long":"java.lang.String","javadoc":"","static":false,"name":"domainFileNameToProcess","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"runScriptsNoImport","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String[]>>","javadoc":"","static":false,"name":"preScripts","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Map<java.lang.String,generic.jar.ResourceFile>","javadoc":"","static":false,"name":"preScriptFileMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String[]>>","javadoc":"","static":false,"name":"postScripts","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Map<java.lang.String,generic.jar.ResourceFile>","javadoc":"","static":false,"name":"postScriptFileMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.List<java.lang.String>","javadoc":"","static":false,"name":"scriptPaths","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<java.lang.String>","javadoc":"","static":false,"name":"propertiesFileStrPaths","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<generic.jar.ResourceFile>","javadoc":"","static":false,"name":"propertiesFilePaths","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwrite","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"recursive","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"readOnly","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"deleteProject","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"analyze","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.lang.Language","javadoc":"","static":false,"name":"language","comment":"","type_short":"Language","constant_value":null},{"type_long":"ghidra.program.model.lang.CompilerSpec","javadoc":"","static":false,"name":"compilerSpec","comment":"","type_short":"CompilerSpec","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"perFileTimeout","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"keystore","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"connectUserID","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowPasswordPrompt","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"commit","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"commitComment","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"okToDelete","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxcpu","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.Class<? extends ghidra.app.util.opinion.Loader>","javadoc":"","static":false,"name":"loaderClass","comment":"","type_short":"Class","constant_value":null},{"type_long":"java.util.List<generic.stl.Pair<java.lang.String,java.lang.String>>","javadoc":"","static":false,"name":"loaderArgs","comment":"","type_short":"List","constant_value":null}]}
