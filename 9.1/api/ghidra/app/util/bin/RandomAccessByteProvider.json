{"implements":["ghidra.app.util.bin.ByteProvider"],"javadoc":"An implementation of ByteProvider where the underlying\n bytes are supplied by a random access file.\n <p>\n Note: this implementation is not thread-safe, and using an instance of this\n class from multiple threads will result in reading incorrect data and\/or\n {@link ArrayIndexOutOfBoundsException}s.\n <p>\n See {@link SynchronizedByteProvider} as a solution.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a byte provider using the specified file\n@param file the file to open for random access\n@throws FileNotFoundException if the file does not exist","static":false,"name":"<init>","comment":"Constructs a byte provider using the specified file","params":[{"type_long":"java.io.File","name":"file","comment":"the file to open for random access","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a byte provider using the specified file and FSRL.\n@param file the file to open for random access\n@param fsrl the FSRL to use for the file's path\n@throws FileNotFoundException if the file does not exist","static":false,"name":"<init>","comment":"Constructs a byte provider using the specified file and FSRL.","params":[{"type_long":"java.io.File","name":"file","comment":"the file to open for random access","type_short":"File"},{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"fsrl","comment":"the FSRL to use for the file's path","type_short":"FSRL"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a byte provider using the specified file and permissions string\n@param file the file to open for random access\n@param string indicating permissions used for open\n@throws FileNotFoundException if the file does not exist","static":false,"name":"<init>","comment":"Constructs a byte provider using the specified file and permissions string","params":[{"type_long":"java.io.File","name":"file","comment":"the file to open for random access","type_short":"File"},{"type_long":"java.lang.String","name":"permissions","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFSRL","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.FSRL","comment":"","type_short":"FSRL"}},{"javadoc":"Sets the {@link FSRL} of this byte provider.\n@param fsrl the FSRL to assign to this byte provider","static":false,"name":"setFSRL","comment":"Sets the FSRL of this byte provider.","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"fsrl","comment":"the FSRL to assign to this byte provider","type_short":"FSRL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#getFile()","static":false,"name":"getFile","comment":"","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#getName()","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getAbsolutePath","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#getInputStream(long)","static":false,"name":"getInputStream","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.io.InputStream","comment":"","type_short":"InputStream"}},{"javadoc":"Closes the underlying random-access file.\n@throws IOException if an I\/O error occurs","static":false,"name":"close","comment":"Closes the underlying random-access file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#length()","static":false,"name":"length","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"isValidIndex","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#readByte(long)","static":false,"name":"readByte","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"@see ghidra.app.util.bin.ByteProvider#readBytes(long, long)","static":false,"name":"readBytes","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"},{"type_long":"long","name":"length","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}}],"name":"RandomAccessByteProvider","comment":"An implementation of ByteProvider where the underlying\n bytes are supplied by a random access file.\n \n Note: this implementation is not thread-safe, and using an instance of this\n class from multiple threads will result in reading incorrect data and\/or\n ArrayIndexOutOfBoundsExceptions.\n \n See SynchronizedByteProvider as a solution.","fields":[{"type_long":"java.io.File","javadoc":"","static":false,"name":"file","comment":"","type_short":"File","constant_value":null},{"type_long":"ghidra.app.util.bin.GhidraRandomAccessFile","javadoc":"","static":false,"name":"randomAccessFile","comment":"","type_short":"GhidraRandomAccessFile","constant_value":null},{"type_long":"ghidra.formats.gfilesystem.FSRL","javadoc":"","static":false,"name":"fsrl","comment":"","type_short":"FSRL","constant_value":null}]}
