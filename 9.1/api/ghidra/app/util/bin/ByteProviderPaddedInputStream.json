{"implements":[],"javadoc":"Wraps a {@link ByteProvider} and presents it as an {@link InputStream}.\n <p>\n This InputStream will be limited to a region of the underlying ByteProvider, and\n has an optional amount of padding at the end of the stream where the stream will appear\n to have bytes with a value of zero.","static":false,"extends":"java.io.InputStream","methods":[{"javadoc":"Create a new {@link ByteProviderInputStream} instance, using the specified\n {@link ByteProvider} as the source of the bytes returned from this stream.\n <p>\n The source ByteProvider is not closed when this stream is closed.\n <p>\n The total number of bytes that can be read from this instance will be length + padCount.\n <p>\n@param provider the {@link ByteProvider} to wrap.\n@param startOffset the starting offset in the ByteProvider.\n@param length the number of bytes from the {@link ByteProvider} to allow to be read by this InputStream.\n@param padCount the number of fake zero bytes to add after the real {@code length} bytes.","static":false,"name":"<init>","comment":"Create a new ByteProviderInputStream instance, using the specified\n ByteProvider as the source of the bytes returned from this stream.\n \n The source ByteProvider is not closed when this stream is closed.\n \n The total number of bytes that can be read from this instance will be length + padCount.\n ","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"the ByteProvider to wrap.","type_short":"ByteProvider"},{"type_long":"long","name":"startOffset","comment":"the starting offset in the ByteProvider.","type_short":"long"},{"type_long":"long","name":"length","comment":"the number of bytes from the ByteProvider to allow to be read by this InputStream.","type_short":"long"},{"type_long":"long","name":"padCount","comment":"the number of fake zero bytes to add after the real  bytes.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"read","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"available","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"ByteProviderPaddedInputStream","comment":"Wraps a ByteProvider and presents it as an InputStream.\n \n This InputStream will be limited to a region of the underlying ByteProvider, and\n has an optional amount of padding at the end of the stream where the stream will appear\n to have bytes with a value of zero.","fields":[{"type_long":"ghidra.app.util.bin.ByteProvider","javadoc":"","static":false,"name":"provider","comment":"","type_short":"ByteProvider","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"currentBPOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"bpEndOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"bpEndPadOffset","comment":"","type_short":"long","constant_value":null}]}
