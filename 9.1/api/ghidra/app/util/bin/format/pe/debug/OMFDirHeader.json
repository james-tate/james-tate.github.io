{"implements":[],"javadoc":"<pre>\n typedef struct OMFDirHeader {\n     unsigned short cbDirHeader; \/\/ length of this structure unsigned           \n              short cbDirEntry;  \/\/ number of bytes in each directory entry \n     unsigned long  cDir;        \/\/ number of directorie entries \n              long lfoNextDir;   \/\/ offset from base of next directory \n     unsigned long flags;        \/\/ status flags\n } OMFDirHeader;\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createOMFDirHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.debug.OMFDirHeader","comment":"","type_short":"OMFDirHeader"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initOMFDirHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFlags","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLengthInBytes","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getNumberOfByteInEntries","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getNumberOfEntries","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getBaseOfNextEntry","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"OMFDirHeader","comment":"\n typedef struct OMFDirHeader {\n     unsigned short cbDirHeader; \/\/ length of this structure unsigned           \n              short cbDirEntry;  \/\/ number of bytes in each directory entry \n     unsigned long  cDir;        \/\/ number of directorie entries \n              long lfoNextDir;   \/\/ offset from base of next directory \n     unsigned long flags;        \/\/ status flags\n } OMFDirHeader;\n ","fields":[{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_SIZEOF_OMF_DIR_HEADER","comment":"","type_short":"int","constant_value":"16"},{"type_long":"short","javadoc":"","static":false,"name":"cbDirHeader","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"cbDirEntry","comment":"","type_short":"short","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"cDir","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"lfoNextDir","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"flags","comment":"","type_short":"int","constant_value":null}]}
