{"implements":["ghidra.app.util.bin.StructConverter"],"javadoc":"A class to represent the VS_VERSION_CHILD data structure which generally corresponds \n to either StringFileInfo or VarFileInfo.  Only a single instance of each childName\n is expected.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"long","name":"relativeOffset","comment":"","type_short":"long"},{"type_long":"java.lang.String","name":"parentName","comment":"","type_short":"String"},{"type_long":"java.util.HashMap<java.lang.String,java.lang.String>","name":"valueMap","comment":"","type_short":"HashMap"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Returns the array of children\n@return the array of children","static":false,"name":"getChildren","comment":"Returns the array of children","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD[]","comment":"the array of children","type_short":"ghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD[]"}},{"javadoc":"Return structure offset relative to parent structure start\n@return relative offset","static":false,"name":"getRelativeOffset","comment":"Return structure offset relative to parent structure start","params":[],"throws":[],"return":{"type_long":"long","comment":"relative offset","type_short":"long"}},{"javadoc":"Returns the version child name.\n@return the version child name","static":false,"name":"getChildName","comment":"Returns the version child name.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the version child name","type_short":"String"}},{"javadoc":"Returns the version child size.\n@return the version child size","static":false,"name":"getChildSize","comment":"Returns the version child size.","params":[],"throws":[],"return":{"type_long":"short","comment":"the version child size","type_short":"short"}},{"javadoc":"Return value offset relative to parent structure start.\n@return relative value offset or 0 if no value exists","static":false,"name":"getValueRelativeOffset","comment":"Return value offset relative to parent structure start.","params":[],"throws":[],"return":{"type_long":"long","comment":"relative value offset or 0 if no value exists","type_short":"long"}},{"javadoc":"Return unicode name string offset relative to parent structure start\n@return relative name offset or 0 if data type is unknown","static":false,"name":"getNameRelativeOffset","comment":"Return unicode name string offset relative to parent structure start","params":[],"throws":[],"return":{"type_long":"long","comment":"relative name offset or 0 if data type is unknown","type_short":"long"}},{"javadoc":"@return true if value is unicode string","static":false,"name":"valueIsUnicodeString","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if value is unicode string","type_short":"boolean"}},{"javadoc":"@return true if value is 4-byte integer value in memory \n while string value return by {@link #getValue()} is a\n numeric hex string.","static":false,"name":"valueIsDWord","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if value is 4-byte integer value in memory \n while string value return by #getValue() is a\n numeric hex string.","type_short":"boolean"}},{"javadoc":"@return true if this child has children","static":false,"name":"hasChildren","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this child has children","type_short":"boolean"}}],"name":"VS_VERSION_CHILD","comment":"A class to represent the VS_VERSION_CHILD data structure which generally corresponds \n to either StringFileInfo or VarFileInfo.  Only a single instance of each childName\n is expected.","fields":[{"type_long":"java.lang.String","javadoc":"","static":false,"name":"parentName","comment":"","type_short":"String","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"relativeOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"childName","comment":"","type_short":"String","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"childSize","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"childValueSize","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"childValueType","comment":"","type_short":"short","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"childDataType","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"valueAlignment","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"childValue","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.app.util.bin.format.pe.resource.VS_VERSION_CHILD>","javadoc":"","static":false,"name":"children","comment":"","type_short":"ArrayList","constant_value":null}]}
