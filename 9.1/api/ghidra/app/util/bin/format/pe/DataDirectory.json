{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.format.pe.PeMarkupable"],"javadoc":"An abstract base class to represent the\n <code>IMAGE_DATA_DIRECTORY<\/code>\n data structure defined in <b><code>winnt.h<\/code><\/b>.\n <pre>\n typedef struct _IMAGE_DATA_DIRECTORY {\n     DWORD   VirtualAddress;\n     DWORD   Size;\n } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; {\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processDataDirectory","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","name":"ntHeader","comment":"","type_short":"NTHeader"},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDirectoryName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Parses this data directory.\n@return True if parsing completed successfully; otherwise, false.\n@throws IOException If there was an IO problem while parsing.","static":false,"name":"parse","comment":"Parses this data directory.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"If there was an IO problem while parsing.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"True if parsing completed successfully; otherwise, false.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"va","comment":"","params":[{"type_long":"long","name":"va","comment":"","type_short":"long"},{"type_long":"boolean","name":"isBinary","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"createTerminatedString","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"label","comment":"","type_short":"boolean"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createDirectoryBookmark","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setBookmark","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPlateComment","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setEolComment","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPreComment","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a fragment with the given name (if it does not already exist).\n Move the address range into the fragment.\n Note: the end address is not inclusive!","static":false,"name":"createFragment","comment":"Creates a fragment with the given name (if it does not already exist).\n Move the address range into the fragment.\n Note: the end address is not inclusive!","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String","name":"fragmentName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"findFragment","comment":"","params":[{"type_long":"ghidra.program.model.listing.ProgramModule","name":"module","comment":"","type_short":"ProgramModule"},{"type_long":"java.lang.String","name":"fragmentName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.ProgramFragment","comment":"","type_short":"ProgramFragment"}},{"javadoc":"Returns the relative virtual address of this data directory.\n@return the relative virtual address of this data directory","static":false,"name":"getVirtualAddress","comment":"Returns the relative virtual address of this data directory.","params":[],"throws":[],"return":{"type_long":"int","comment":"the relative virtual address of this data directory","type_short":"int"}},{"javadoc":"Sets the relative virtual address of this data directory.\n@param addr the new relative virtual address","static":false,"name":"setVirtualAddress","comment":"Sets the relative virtual address of this data directory.","params":[{"type_long":"int","name":"addr","comment":"the new relative virtual address","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the size of this data directory.\n@return the size of this data directory","static":false,"name":"getSize","comment":"Returns the size of this data directory.","params":[],"throws":[],"return":{"type_long":"int","comment":"the size of this data directory","type_short":"int"}},{"javadoc":"Sets the size of this data directory.\n@param size the new size of this data directory","static":false,"name":"setSize","comment":"Sets the size of this data directory.","params":[{"type_long":"int","name":"size","comment":"the new size of this data directory","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see java.lang.Object#toString()","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Converts the relative virtual address of this data directory\n into a file pointer.\n@return the file pointer","static":false,"name":"rvaToPointer","comment":"Converts the relative virtual address of this data directory\n into a file pointer.","params":[],"throws":[],"return":{"type_long":"int","comment":"the file pointer","type_short":"int"}},{"javadoc":"Returns true if this data directory is contained inside of a section.\n If true, that means that the section is loaded into memory\n at runtime.\n@return true if this data directory is contained inside of a section","static":false,"name":"isContainedInSection","comment":"Returns true if this data directory is contained inside of a section.\n If true, that means that the section is loaded into memory\n at runtime.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this data directory is contained inside of a section","type_short":"boolean"}},{"javadoc":"This method should return a datatype representing the data stored\n in this directory.","static":false,"name":"toDataType","comment":"This method should return a datatype representing the data stored\n in this directory.","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Directories that are not contained inside of sections\n should override this method to write their bytes into the\n specified file.\n@param raf the random access file used for output\n@param dc the data converter for endianness\n@param template the original unadulterated PE\n@throws IOException if an I\/O error occurs","static":false,"name":"writeBytes","comment":"Directories that are not contained inside of sections\n should override this method to write their bytes into the\n specified file.","params":[{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"the random access file used for output","type_short":"RandomAccessFile"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"the data converter for endianness","type_short":"DataConverter"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable","name":"template","comment":"the original unadulterated PE","type_short":"PortableExecutable"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasParsedCorrectly","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getPointer","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"DataDirectory","comment":"An abstract base class to represent the\n IMAGE_DATA_DIRECTORY\n data structure defined in winnt.h.\n \n typedef struct _IMAGE_DATA_DIRECTORY {\n     DWORD   VirtualAddress;\n     DWORD   Size;\n } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; {\n ","fields":[{"type_long":"java.lang.String","javadoc":"The name to use when converting into a structure data type.","static":true,"name":"TITLE","comment":"The name to use when converting into a structure data type.","type_short":"String","constant_value":"\"IMAGE_DATA_DIRECTORY\""},{"type_long":"byte","javadoc":"The size of the data directory, in bytes.","static":true,"name":"IMAGE_SIZEOF_IMAGE_DIRECTORY_ENTRY","comment":"The size of the data directory, in bytes.","type_short":"byte","constant_value":"8"},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","javadoc":"","static":false,"name":"ntHeader","comment":"","type_short":"NTHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"virtualAddress","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasParsed","comment":"","type_short":"boolean","constant_value":null}]}
