{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.format.pe.PeMarkupable"],"javadoc":"The header of a {@link CliMetadataDirectory}.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new CLI Metadata Root datatype. Matches ISO 23271 II.24.2.\n@param reader A binary reader set to start reading at the start of this header.\n@param rva The RVA of this header.\n@throws if there is a problem reading the header.","static":false,"name":"<init>","comment":"Constructs a new CLI Metadata Root datatype. Matches ISO 23271 II.24.2.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A binary reader set to start reading at the start of this header.","type_short":"BinaryReader"},{"type_long":"int","name":"rva","comment":"The RVA of this header.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"parse","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"markup","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"boolean","name":"isBinary","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","name":"ntHeader","comment":"","type_short":"NTHeader"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"","type_short":"CodeUnitInsertionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Gets the file offset of this header.\n@return The file offset of this header.","static":false,"name":"getFileOffset","comment":"Gets the file offset of this header.","params":[],"throws":[],"return":{"type_long":"long","comment":"The file offset of this header.","type_short":"long"}},{"javadoc":"Gets the relative virtual address of this header.\n@return The relative virtual address of this header.","static":false,"name":"getRva","comment":"Gets the relative virtual address of this header.","params":[],"throws":[],"return":{"type_long":"int","comment":"The relative virtual address of this header.","type_short":"int"}},{"javadoc":"Gets the signature.  \n <p>\n Should always be 0x424a5342.\n@return The signature.","static":false,"name":"getSignature","comment":"Gets the signature.  \n \n Should always be 0x424a5342.","params":[],"throws":[],"return":{"type_long":"int","comment":"The signature.","type_short":"int"}},{"javadoc":"Gets the major version.\n@return The major version.","static":false,"name":"getMajorVersion","comment":"Gets the major version.","params":[],"throws":[],"return":{"type_long":"short","comment":"The major version.","type_short":"short"}},{"javadoc":"Gets the minor version.\n@return The minor version.","static":false,"name":"getMinorVersion","comment":"Gets the minor version.","params":[],"throws":[],"return":{"type_long":"short","comment":"The minor version.","type_short":"short"}},{"javadoc":"Gets the reserved field.  \n <p>\n Should always be 0.\n@return The reserved field.","static":false,"name":"getReserved","comment":"Gets the reserved field.  \n \n Should always be 0.","params":[],"throws":[],"return":{"type_long":"int","comment":"The reserved field.","type_short":"int"}},{"javadoc":"Gets the length of the version string that follows the length field.\n@return The length of the version string that follows the length field.","static":false,"name":"getVersionLength","comment":"Gets the length of the version string that follows the length field.","params":[],"throws":[],"return":{"type_long":"int","comment":"The length of the version string that follows the length field.","type_short":"int"}},{"javadoc":"Gets the version string.\n@return The version string.  Could be null if the version length appeared\n   too long during parsing of the header.","static":false,"name":"getVersion","comment":"Gets the version string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"The version string.  Could be null if the version length appeared\n   too long during parsing of the header.","type_short":"String"}},{"javadoc":"Gets the flags.\n <p>\n Should always be 0.\n@return The flags.","static":false,"name":"getFlags","comment":"Gets the flags.\n \n Should always be 0.","params":[],"throws":[],"return":{"type_long":"short","comment":"The flags.","type_short":"short"}},{"javadoc":"Gets the number of streams present in the metadata.\n@return The number of streams present in the metadata.","static":false,"name":"getStreamsCount","comment":"Gets the number of streams present in the metadata.","params":[],"throws":[],"return":{"type_long":"short","comment":"The number of streams present in the metadata.","type_short":"short"}},{"javadoc":"Gets the GUID stream.\n@return The GUID stream.  Could be null if it did not parse correctly.","static":false,"name":"getGuidStream","comment":"Gets the GUID stream.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid","comment":"The GUID stream.  Could be null if it did not parse correctly.","type_short":"CliStreamGuid"}},{"javadoc":"Gets the user strings stream.\n@return The user strings stream.  Could be null if it did not parse correctly.","static":false,"name":"getUserStringsStream","comment":"Gets the user strings stream.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings","comment":"The user strings stream.  Could be null if it did not parse correctly.","type_short":"CliStreamUserStrings"}},{"javadoc":"Gets the strings stream.\n@return The strings stream.  Could be null if it did not parse correctly.","static":false,"name":"getStringsStream","comment":"Gets the strings stream.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings","comment":"The strings stream.  Could be null if it did not parse correctly.","type_short":"CliStreamStrings"}},{"javadoc":"Gets the blob stream.\n@return The blob stream.  Could be null if it did not parse correctly.","static":false,"name":"getBlobStream","comment":"Gets the blob stream.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob","comment":"The blob stream.  Could be null if it did not parse correctly.","type_short":"CliStreamBlob"}},{"javadoc":"Gets the Metadata stream.\n@return The Metadata stream.  Could be null if it did not parse correctly.","static":false,"name":"getMetadataStream","comment":"Gets the Metadata stream.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata","comment":"The Metadata stream.  Could be null if it did not parse correctly.","type_short":"CliStreamMetadata"}},{"javadoc":"Gets the stream headers.\n@return A collection of stream headers.","static":false,"name":"getStreamHeaders","comment":"Gets the stream headers.","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.app.util.bin.format.pe.cli.CliStreamHeader>","comment":"A collection of stream headers.","type_short":"Collection"}},{"javadoc":"Gets the stream header with the given name.\n@param name The name of the stream header to get.\n@return The stream header that matches the given name, or null if it wasn't found.","static":false,"name":"getStreamHeader","comment":"Gets the stream header with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"The name of the stream header to get.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.CliStreamHeader","comment":"The stream header that matches the given name, or null if it wasn't found.","type_short":"CliStreamHeader"}},{"javadoc":"","static":false,"name":"getBlobOffsetAtIndex","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"CliMetadataRoot","comment":"The header of a CliMetadataDirectory.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"CLI_METADATA_HEADER\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PATH","comment":"","type_short":"String","constant_value":"\"\/PE\/CLI\""},{"type_long":"ghidra.app.util.bin.BinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"BinaryReader","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"fileOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"rva","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"signature","comment":"","type_short":"int","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"majorVersion","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"minorVersion","comment":"","type_short":"short","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"reserved","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"versionLength","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"version","comment":"","type_short":"String","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"flags","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"streamsCount","comment":"","type_short":"short","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.app.util.bin.format.pe.cli.CliStreamHeader>","javadoc":"","static":false,"name":"streamHeaderMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.CliStreamHeader","javadoc":"","static":false,"name":"metadataHeader","comment":"","type_short":"CliStreamHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamGuid","javadoc":"","static":false,"name":"guidStream","comment":"","type_short":"CliStreamGuid","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamUserStrings","javadoc":"","static":false,"name":"userStringsStream","comment":"","type_short":"CliStreamUserStrings","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamStrings","javadoc":"","static":false,"name":"stringsStream","comment":"","type_short":"CliStreamStrings","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamBlob","javadoc":"","static":false,"name":"blobStream","comment":"","type_short":"CliStreamBlob","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata","javadoc":"","static":false,"name":"metadataStream","comment":"","type_short":"CliStreamMetadata","constant_value":null}]}
