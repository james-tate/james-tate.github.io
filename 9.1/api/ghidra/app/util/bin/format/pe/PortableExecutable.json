{"implements":[],"javadoc":"A class to manage loading Portable Executables (PE).","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new Portable Executable using the specified byte provider and layout.\n  <p>\n Same as calling <code>createFileAlignedPortableExecutable(factory, bp, layout, true, false)<\/code>\n@param factory generic factory instance\n@param bp the byte provider\n@param layout specifies the layout of the underlying provider and governs RVA resolution\n@throws IOException if an I\/O error occurs.\n@see {@link #createPortableExecutable(GenericFactory, ByteProvider, Alignment, boolean, boolean)}","static":true,"name":"createPortableExecutable","comment":"Constructs a new Portable Executable using the specified byte provider and layout.\n  \n Same as calling createFileAlignedPortableExecutable(factory, bp, layout, true, false)","params":[{"type_long":"generic.continues.GenericFactory","name":"factory","comment":"generic factory instance","type_short":"GenericFactory"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"bp","comment":"the byte provider","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","name":"layout","comment":"specifies the layout of the underlying provider and governs RVA resolution","type_short":"SectionLayout"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable","comment":"","type_short":"PortableExecutable"}},{"javadoc":"Constructs a new Portable Executable using the specified byte provider and layout.\n@param factory generic factory instance\n@param bp the byte provider\n@param layout specifies the layout of the underlying provider and governs RVA resolution\n@param advancedProcess if true, the data directories are also processed\n@param parseCliHeaders if true, CLI headers are parsed (if present)\n@throws IOException if an I\/O error occurs.","static":true,"name":"createPortableExecutable","comment":"Constructs a new Portable Executable using the specified byte provider and layout.","params":[{"type_long":"generic.continues.GenericFactory","name":"factory","comment":"generic factory instance","type_short":"GenericFactory"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"bp","comment":"the byte provider","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","name":"layout","comment":"specifies the layout of the underlying provider and governs RVA resolution","type_short":"SectionLayout"},{"type_long":"boolean","name":"advancedProcess","comment":"if true, the data directories are also processed","type_short":"boolean"},{"type_long":"boolean","name":"parseCliHeaders","comment":"if true, CLI headers are parsed (if present)","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable","comment":"","type_short":"PortableExecutable"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initPortableExecutable","comment":"","params":[{"type_long":"generic.continues.GenericFactory","name":"factory","comment":"","type_short":"GenericFactory"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"bp","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","name":"layout","comment":"","type_short":"SectionLayout"},{"type_long":"boolean","name":"advancedProcess","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"parseCliHeaders","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the DOS header from the PE image.\n@return the DOS header from the PE image","static":false,"name":"getDOSHeader","comment":"Returns the DOS header from the PE image.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.mz.DOSHeader","comment":"the DOS header from the PE image","type_short":"DOSHeader"}},{"javadoc":"Returns the Rich header from the PE image.\n@return the Rich header from the PE image","static":false,"name":"getRichHeader","comment":"Returns the Rich header from the PE image.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.RichHeader","comment":"the Rich header from the PE image","type_short":"RichHeader"}},{"javadoc":"Returns the NT header from the PE image.\n@return the NT header from the PE image","static":false,"name":"getNTHeader","comment":"Returns the NT header from the PE image.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","comment":"the NT header from the PE image","type_short":"NTHeader"}},{"javadoc":"","static":false,"name":"writeHeader","comment":"","params":[{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"","type_short":"RandomAccessFile"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"computeAlignment","comment":"","params":[{"type_long":"int","name":"value","comment":"","type_short":"int"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getFileLength","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}}],"name":"PortableExecutable","comment":"A class to manage loading Portable Executables (PE).","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"PORTABLE_EXECUTABLE\""},{"type_long":"boolean","javadoc":"","static":true,"name":"DEBUG","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.mz.DOSHeader","javadoc":"","static":false,"name":"dosHeader","comment":"","type_short":"DOSHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.RichHeader","javadoc":"","static":false,"name":"richHeader","comment":"","type_short":"RichHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","javadoc":"","static":false,"name":"ntHeader","comment":"","type_short":"NTHeader","constant_value":null}]}
