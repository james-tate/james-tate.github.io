{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.ByteArrayConverter"],"javadoc":"<pre>\n typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n     union {\n         DWORD   Characteristics;            \/\/ 0 for terminating null import descriptor\n         DWORD   OriginalFirstThunk;         \/\/ RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n     };\n     DWORD   TimeDateStamp;\n     DWORD   ForwarderChain;                 \/\/ -1 if no forwarders\n     DWORD   Name;\n     DWORD   FirstThunk;                     \/\/ RVA to IAT (if bound this IAT has actual addresses)\n }\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createImportDescriptor","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.ImportDescriptor","comment":"","type_short":"ImportDescriptor"}},{"javadoc":"","static":false,"name":"initImportDescriptor","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new import descriptor initialized to zero.","static":false,"name":"<init>","comment":"Constructs a new import descriptor initialized to zero.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDLL","comment":"","params":[{"type_long":"java.lang.String","name":"dll","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDLL","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addImportNameTableThunkData","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.ThunkData","name":"thunk","comment":"","type_short":"ThunkData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addImportAddressTableThunkData","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.ThunkData","name":"thunk","comment":"","type_short":"ThunkData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the array of thunks from the import name table.\n@return the array of thunks from the import name table","static":false,"name":"getImportNameTableThunkData","comment":"Returns the array of thunks from the import name table.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.ThunkData[]","comment":"the array of thunks from the import name table","type_short":"ghidra.app.util.bin.format.pe.ThunkData[]"}},{"javadoc":"Returns the array of thunks from the import address table.\n@return the array of thunks from the import address table","static":false,"name":"getImportAddressTableThunkData","comment":"Returns the array of thunks from the import address table.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.ThunkData[]","comment":"the array of thunks from the import address table","type_short":"ghidra.app.util.bin.format.pe.ThunkData[]"}},{"javadoc":"At one time, this may have been a set of flags. \n However, Microsoft changed its meaning and \n never bothered to update WINNT.H. \n This field is really an offset (an RVA) to an \n array of pointers. Each of these pointers points \n to an IMAGE_IMPORT_BY_NAME structure.\n@return an offset (an RVA) to an array of pointers","static":false,"name":"getCharacteristics","comment":"At one time, this may have been a set of flags. \n However, Microsoft changed its meaning and \n never bothered to update WINNT.H. \n This field is really an offset (an RVA) to an \n array of pointers. Each of these pointers points \n to an IMAGE_IMPORT_BY_NAME structure.","params":[],"throws":[],"return":{"type_long":"int","comment":"an offset (an RVA) to an array of pointers","type_short":"int"}},{"javadoc":"At one time, this may have been a set of flags. \n However, Microsoft changed its meaning and \n never bothered to update WINNT.H. \n This field is really an offset (an RVA) to an \n array of pointers. Each of these pointers points \n to an IMAGE_IMPORT_BY_NAME structure.\n@return an offset (an RVA) to an array of pointers","static":false,"name":"getOriginalFirstThunk","comment":"At one time, this may have been a set of flags. \n However, Microsoft changed its meaning and \n never bothered to update WINNT.H. \n This field is really an offset (an RVA) to an \n array of pointers. Each of these pointers points \n to an IMAGE_IMPORT_BY_NAME structure.","params":[],"throws":[],"return":{"type_long":"int","comment":"an offset (an RVA) to an array of pointers","type_short":"int"}},{"javadoc":"This field is an offset (an RVA) to an \n IMAGE_THUNK_DATA union. In almost every case, \n the union is interpreted as a pointer to an \n IMAGE_IMPORT_BY_NAME structure. If the field \n isn't one of these pointers, then it's supposedly \n treated as an export ordinal value for the DLL \n that's being imported. It's not clear from the \n documentation if you really can import a function \n by ordinal rather than by name.\n@return an offset (an RVA) to an IMAGE_THUNK_DATA union","static":false,"name":"getFirstThunk","comment":"This field is an offset (an RVA) to an \n IMAGE_THUNK_DATA union. In almost every case, \n the union is interpreted as a pointer to an \n IMAGE_IMPORT_BY_NAME structure. If the field \n isn't one of these pointers, then it's supposedly \n treated as an export ordinal value for the DLL \n that's being imported. It's not clear from the \n documentation if you really can import a function \n by ordinal rather than by name.","params":[],"throws":[],"return":{"type_long":"int","comment":"an offset (an RVA) to an IMAGE_THUNK_DATA union","type_short":"int"}},{"javadoc":"This field relates to forwarding. \n Forwarding involves one DLL sending on \n references to one of its functions to \n another DLL. For example, in Windows NT, \n NTDLL.DLL appears to forward some of its \n exported functions to KERNEL32.DLL. An \n application may think it's calling a function \n in NTDLL.DLL, but it actually ends up calling \n into KERNEL32.DLL. This field contains an index \n into FirstThunk array (described momentarily). \n The function indexed by this field will be \n forwarded to another DLL. Unfortunately, the \n format of how a function is forwarded isn't \n documented, and examples of forwarded functions \n are hard to find.\n@return the forwarder chain","static":false,"name":"getForwarderChain","comment":"This field relates to forwarding. \n Forwarding involves one DLL sending on \n references to one of its functions to \n another DLL. For example, in Windows NT, \n NTDLL.DLL appears to forward some of its \n exported functions to KERNEL32.DLL. An \n application may think it's calling a function \n in NTDLL.DLL, but it actually ends up calling \n into KERNEL32.DLL. This field contains an index \n into FirstThunk array (described momentarily). \n The function indexed by this field will be \n forwarded to another DLL. Unfortunately, the \n format of how a function is forwarded isn't \n documented, and examples of forwarded functions \n are hard to find.","params":[],"throws":[],"return":{"type_long":"int","comment":"the forwarder chain","type_short":"int"}},{"javadoc":"Returns an RVA to a NULL-terminated \n ASCII string containing the imported \n DLL's name. Common examples are \n \"KERNEL32.DLL\" and \"USER32.DLL\".\n@return an RVA to a NULL-terminated ASCII string","static":false,"name":"getName","comment":"Returns an RVA to a NULL-terminated \n ASCII string containing the imported \n DLL's name. Common examples are \n \"KERNEL32.DLL\" and \"USER32.DLL\".","params":[],"throws":[],"return":{"type_long":"int","comment":"an RVA to a NULL-terminated ASCII string","type_short":"int"}},{"javadoc":"Returns the time\/date stamp indicating when the file was built.\n@return the time\/date stamp indicating when the file was built","static":false,"name":"getTimeDateStamp","comment":"Returns the time\/date stamp indicating when the file was built.","params":[],"throws":[],"return":{"type_long":"int","comment":"the time\/date stamp indicating when the file was built","type_short":"int"}},{"javadoc":"Returns true if the import descriptor is bound to an imported library.\n Being bound implies that the import has the function's preferred address\n@return true if the import descriptor is bound","static":false,"name":"isBound","comment":"Returns true if the import descriptor is bound to an imported library.\n Being bound implies that the import has the function's preferred address","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the import descriptor is bound","type_short":"boolean"}},{"javadoc":"@see ghidra.app.util.bin.StructConverter#toDataType()","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)","static":false,"name":"toBytes","comment":"","params":[{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"Sets the original first thunk to the specifed value.\n@param i the new original first thunk value.\n@see #getOriginalFirstThunk()","static":false,"name":"setOriginalFirstThunk","comment":"Sets the original first thunk to the specifed value.","params":[{"type_long":"int","name":"i","comment":"the new original first thunk value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the time\/date stamp to the specifed value.\n@param i the new time\/date stamp value.\n@see #getTimeDateStamp()","static":false,"name":"setTimeDateStamp","comment":"Sets the time\/date stamp to the specifed value.","params":[{"type_long":"int","name":"i","comment":"the new time\/date stamp value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the forwarder to the specifed value.\n@param i the new forwarder value.\n@see #getForwarderChain()","static":false,"name":"setForwarderChain","comment":"Sets the forwarder to the specifed value.","params":[{"type_long":"int","name":"i","comment":"the new forwarder value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the name to the specifed value.\n@param i the new name value.\n@see #getName()","static":false,"name":"setName","comment":"Sets the name to the specifed value.","params":[{"type_long":"int","name":"i","comment":"the new name value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the first thunk to the specifed value.\n@param i the new first thunk value.\n@see #getFirstThunk()","static":false,"name":"setFirstThunk","comment":"Sets the first thunk to the specifed value.","params":[{"type_long":"int","name":"i","comment":"the new first thunk value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks to see if this descriptor is a null entry.  A null entry\n indicates that no more descriptors follow in the import table.\n@return True if this descriptor is a null entry; otherwise, false.","static":false,"name":"isNullEntry","comment":"Checks to see if this descriptor is a null entry.  A null entry\n indicates that no more descriptors follow in the import table.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"True if this descriptor is a null entry; otherwise, false.","type_short":"boolean"}}],"name":"ImportDescriptor","comment":"\n typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n     union {\n         DWORD   Characteristics;            \/\/ 0 for terminating null import descriptor\n         DWORD   OriginalFirstThunk;         \/\/ RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n     };\n     DWORD   TimeDateStamp;\n     DWORD   ForwarderChain;                 \/\/ -1 if no forwarders\n     DWORD   Name;\n     DWORD   FirstThunk;                     \/\/ RVA to IAT (if bound this IAT has actual addresses)\n }\n ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"IMAGE_IMPORT_DESCRIPTOR\""},{"type_long":"int","javadoc":"","static":true,"name":"SIZEOF","comment":"","type_short":"int","constant_value":"20"},{"type_long":"int","javadoc":"","static":true,"name":"NOT_BOUND","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":false,"name":"characteristics","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"originalFirstThunk","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"timeDateStamp","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"forwarderChain","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"name","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"firstThunk","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"dll","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.pe.ThunkData>","javadoc":"","static":false,"name":"intList","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.pe.ThunkData>","javadoc":"","static":false,"name":"iatList","comment":"","type_short":"List","constant_value":null}]}
