{"implements":["ghidra.app.util.bin.StructConverter"],"javadoc":"A class to represent the IMAGE_FILE_HEADER struct as\n defined in <code>winnt.h<\/code>.\n <br>\n <pre>\n typedef struct _IMAGE_FILE_HEADER {\n     WORD    Machine;\t\t\t\t\t\t\t\t\/\/ MANDATORY\n     WORD    NumberOfSections;\t\t\t\t\t\/\/ USED\n     DWORD   TimeDateStamp;\n     DWORD   PointerToSymbolTable;\n     DWORD   NumberOfSymbols;\n     WORD    SizeOfOptionalHeader;\t\t\t\t\/\/ USED\n     WORD    Characteristics;\t\t\t\t\t\t\/\/ MANDATORY\n } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createFileHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"startIndex","comment":"","type_short":"int"},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","name":"ntHeader","comment":"","type_short":"NTHeader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.FileHeader","comment":"","type_short":"FileHeader"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initFileHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"startIndex","comment":"","type_short":"int"},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","name":"ntHeader","comment":"","type_short":"NTHeader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the architecture type of the computer.\n@return the architecture type of the computer","static":false,"name":"getMachine","comment":"Returns the architecture type of the computer.","params":[],"throws":[],"return":{"type_long":"short","comment":"the architecture type of the computer","type_short":"short"}},{"javadoc":"Returns a string representation of the architecture type of the computer.\n@return a string representation of the architecture type of the computer","static":false,"name":"getMachineName","comment":"Returns a string representation of the architecture type of the computer.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string representation of the architecture type of the computer","type_short":"String"}},{"javadoc":"Returns the number of sections. \n Sections equate to Ghidra memory blocks.\n@return the number of sections","static":false,"name":"getNumberOfSections","comment":"Returns the number of sections. \n Sections equate to Ghidra memory blocks.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of sections","type_short":"int"}},{"javadoc":"Returns the array of section headers.\n@return the array of section headers","static":false,"name":"getSectionHeaders","comment":"Returns the array of section headers.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.SectionHeader[]","comment":"the array of section headers","type_short":"ghidra.app.util.bin.format.pe.SectionHeader[]"}},{"javadoc":"Returns the array of symbols.\n@return the array of symbols","static":false,"name":"getSymbols","comment":"Returns the array of symbols.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbol>","comment":"the array of symbols","type_short":"List"}},{"javadoc":"Returns the section header that contains the specified virtual address.\n@param virtualAddr the virtual address\n@return the section header that contains the specified virtual address","static":false,"name":"getSectionHeaderContaining","comment":"Returns the section header that contains the specified virtual address.","params":[{"type_long":"int","name":"virtualAddr","comment":"the virtual address","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.SectionHeader","comment":"the section header that contains the specified virtual address","type_short":"SectionHeader"}},{"javadoc":"Returns the section header at the specified position in the array.\n@param index index of section header to return\n@return the section header at the specified position in the array, or null if invalid","static":false,"name":"getSectionHeader","comment":"Returns the section header at the specified position in the array.","params":[{"type_long":"int","name":"index","comment":"index of section header to return","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.SectionHeader","comment":"the section header at the specified position in the array, or null if invalid","type_short":"SectionHeader"}},{"javadoc":"Returns the time stamp of the image.\n@return the time stamp of the image","static":false,"name":"getTimeDateStamp","comment":"Returns the time stamp of the image.","params":[],"throws":[],"return":{"type_long":"int","comment":"the time stamp of the image","type_short":"int"}},{"javadoc":"Returns the file offset of the COFF symbol table\n@return the file offset of the COFF symbol table","static":false,"name":"getPointerToSymbolTable","comment":"Returns the file offset of the COFF symbol table","params":[],"throws":[],"return":{"type_long":"int","comment":"the file offset of the COFF symbol table","type_short":"int"}},{"javadoc":"Returns the number of symbols in the COFF symbol table\n@return the number of symbols in the COFF symbol table","static":false,"name":"getNumberOfSymbols","comment":"Returns the number of symbols in the COFF symbol table","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of symbols in the COFF symbol table","type_short":"int"}},{"javadoc":"Returns the size of the optional header data\n@return the size of the optional header, in bytes","static":false,"name":"getSizeOfOptionalHeader","comment":"Returns the size of the optional header data","params":[],"throws":[],"return":{"type_long":"int","comment":"the size of the optional header, in bytes","type_short":"int"}},{"javadoc":"Returns a set of bit flags indicating attributes of the file.\n@return a set of bit flags indicating attributes","static":false,"name":"getCharacteristics","comment":"Returns a set of bit flags indicating attributes of the file.","params":[],"throws":[],"return":{"type_long":"int","comment":"a set of bit flags indicating attributes","type_short":"int"}},{"javadoc":"Returns the file pointer to the section headers.\n@return the file pointer to the section headers","static":false,"name":"getPointerToSections","comment":"Returns the file pointer to the section headers.","params":[],"throws":[],"return":{"type_long":"int","comment":"the file pointer to the section headers","type_short":"int"}},{"javadoc":"","static":false,"name":"processSections","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.OptionalHeader","name":"optHeader","comment":"","type_short":"OptionalHeader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processSymbols","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isLordPE","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"parse","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.app.util.bin.StructConverter#toDataType()","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"","static":false,"name":"setSectionHeaders","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.SectionHeader[]","name":"sectionHeaders","comment":"","type_short":"ghidra.app.util.bin.format.pe.SectionHeader[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"writeHeader","comment":"","params":[{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"","type_short":"RandomAccessFile"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a new section to this file header. Uses the given memory block\n as the section template. The section will have the memory block's name, start address,\n size, etc. The optional header is needed to determine the free byte position in the\n file.\n@param block the memory block template\n@param optionalHeader the related optional header\n@throws MemoryAccessException if the memory block is uninitialized","static":false,"name":"addSection","comment":"Adds a new section to this file header. Uses the given memory block\n as the section template. The section will have the memory block's name, start address,\n size, etc. The optional header is needed to determine the free byte position in the\n file.","params":[{"type_long":"ghidra.program.model.mem.MemoryBlock","name":"block","comment":"the memory block template","type_short":"MemoryBlock"},{"type_long":"ghidra.app.util.bin.format.pe.OptionalHeader","name":"optionalHeader","comment":"the related optional header","type_short":"OptionalHeader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"computeAlignedNewPosition","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pe.OptionalHeader","name":"optionalHeader","comment":"","type_short":"OptionalHeader"},{"type_long":"ghidra.app.util.bin.format.pe.DataDirectory[]","name":"directories","comment":"","type_short":"ghidra.app.util.bin.format.pe.DataDirectory[]"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getDataStream","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.io.InputStream","comment":"","type_short":"InputStream"}}],"name":"FileHeader","comment":"A class to represent the IMAGE_FILE_HEADER struct as\n defined in winnt.h.\n \n \n typedef struct _IMAGE_FILE_HEADER {\n     WORD    Machine;\t\t\t\t\t\t\t\t\/\/ MANDATORY\n     WORD    NumberOfSections;\t\t\t\t\t\/\/ USED\n     DWORD   TimeDateStamp;\n     DWORD   PointerToSymbolTable;\n     DWORD   NumberOfSymbols;\n     WORD    SizeOfOptionalHeader;\t\t\t\t\/\/ USED\n     WORD    Characteristics;\t\t\t\t\t\t\/\/ MANDATORY\n } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;\n ","fields":[{"type_long":"java.lang.String","javadoc":"The name to use when converting into a structure data type.","static":true,"name":"NAME","comment":"The name to use when converting into a structure data type.","type_short":"String","constant_value":"\"IMAGE_FILE_HEADER\""},{"type_long":"int","javadoc":"The size of the <code>IMAGE_FILE_HEADER<\/code> in bytes.","static":true,"name":"IMAGE_SIZEOF_FILE_HEADER","comment":"The size of the IMAGE_FILE_HEADER in bytes.","type_short":"int","constant_value":"20"},{"type_long":"int","javadoc":"Relocation info stripped from file.","static":true,"name":"IMAGE_FILE_RELOCS_STRIPPED","comment":"Relocation info stripped from file.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"File is executable (no unresolved externel references).","static":true,"name":"IMAGE_FILE_EXECUTABLE_IMAGE","comment":"File is executable (no unresolved externel references).","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"Line nunbers stripped from file.","static":true,"name":"IMAGE_FILE_LINE_NUMS_STRIPPED","comment":"Line nunbers stripped from file.","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"Local symbols stripped from file.","static":true,"name":"IMAGE_FILE_LOCAL_SYMS_STRIPPED","comment":"Local symbols stripped from file.","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"Agressively trim working set","static":true,"name":"IMAGE_FILE_AGGRESIVE_WS_TRIM","comment":"Agressively trim working set","type_short":"int","constant_value":"16"},{"type_long":"int","javadoc":"App can handle >2gb addresses","static":true,"name":"IMAGE_FILE_LARGE_ADDRESS_AWARE","comment":"App can handle 2gb addresses","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"Bytes of machine word are reversed.","static":true,"name":"IMAGE_FILE_BYTES_REVERSED_LO","comment":"Bytes of machine word are reversed.","type_short":"int","constant_value":"128"},{"type_long":"int","javadoc":"32 bit word machine.","static":true,"name":"IMAGE_FILE_32BIT_MACHINE","comment":"32 bit word machine.","type_short":"int","constant_value":"256"},{"type_long":"int","javadoc":"Debugging info stripped from file in .DBG file","static":true,"name":"IMAGE_FILE_DEBUG_STRIPPED","comment":"Debugging info stripped from file in .DBG file","type_short":"int","constant_value":"512"},{"type_long":"int","javadoc":"If Image is on removable media, copy and run from the swap file.","static":true,"name":"IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP","comment":"If Image is on removable media, copy and run from the swap file.","type_short":"int","constant_value":"1024"},{"type_long":"int","javadoc":"If Image is on Net, copy and run from the swap file.","static":true,"name":"IMAGE_FILE_NET_RUN_FROM_SWAP","comment":"If Image is on Net, copy and run from the swap file.","type_short":"int","constant_value":"2048"},{"type_long":"int","javadoc":"System File.","static":true,"name":"IMAGE_FILE_SYSTEM","comment":"System File.","type_short":"int","constant_value":"4096"},{"type_long":"int","javadoc":"File is a DLL.","static":true,"name":"IMAGE_FILE_DLL","comment":"File is a DLL.","type_short":"int","constant_value":"8192"},{"type_long":"int","javadoc":"File should only be run on a UP machine","static":true,"name":"IMAGE_FILE_UP_SYSTEM_ONLY","comment":"File should only be run on a UP machine","type_short":"int","constant_value":"16384"},{"type_long":"int","javadoc":"Bytes of machine word are reversed.","static":true,"name":"IMAGE_FILE_BYTES_REVERSED_HI","comment":"Bytes of machine word are reversed.","type_short":"int","constant_value":"32768"},{"type_long":"java.lang.String[]","javadoc":"","static":true,"name":"CHARACTERISTICS","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"machine","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"numberOfSections","comment":"","type_short":"short","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"timeDateStamp","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pointerToSymbolTable","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"numberOfSymbols","comment":"","type_short":"int","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"sizeOfOptionalHeader","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"characteristics","comment":"","type_short":"short","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.SectionHeader[]","javadoc":"","static":false,"name":"sectionHeaders","comment":"","type_short":"ghidra.app.util.bin.format.pe.SectionHeader[]","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbol>","javadoc":"","static":false,"name":"symbols","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"startIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","javadoc":"","static":false,"name":"ntHeader","comment":"","type_short":"NTHeader","constant_value":null}]}
