{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.format.pe.PeMarkupable"],"javadoc":"Generic Metadata table.  Subclasses should provided implementations for the actual\n tables.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new generic CLI metadata table.  This is intended to be called by a subclass\n metadata table during its creation.\n@param reader A reader that is used to read the table.\n@param metadataStream The metadata stream that the table lives in.\n@param tableType The type of table to create.","static":false,"name":"<init>","comment":"Creates a new generic CLI metadata table.  This is intended to be called by a subclass\n metadata table during its creation.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A reader that is used to read the table.","type_short":"BinaryReader"},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata","name":"metadataStream","comment":"The metadata stream that the table lives in.","type_short":"CliStreamMetadata"},{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","name":"tableType","comment":"The type of table to create.","type_short":"CliTypeTable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets this table's table type.\n@return This table's table type.","static":false,"name":"getTableType","comment":"Gets this table's table type.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","comment":"This table's table type.","type_short":"CliTypeTable"}},{"javadoc":"Gets the number of rows in this table.\n \n return The number of rows in this table.","static":false,"name":"getNumRows","comment":"Gets the number of rows in this table.\n \n return The number of rows in this table.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Gets the size in bytes of a row in this table.\n \n return The size in bytes of a row in this table.","static":false,"name":"getRowSize","comment":"Gets the size in bytes of a row in this table.\n \n return The size in bytes of a row in this table.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Gets the size in bytes of this table.\n@return The size in bytes of this table.","static":false,"name":"getTableSize","comment":"Gets the size in bytes of this table.","params":[],"throws":[],"return":{"type_long":"int","comment":"The size in bytes of this table.","type_short":"int"}},{"javadoc":"Gets the row at the given index.\n <p>\n NOTE: Per ISO\/IEC 23271:2012(E) III.1.9, Row indices start from 1, while heap\/stream indices start from 0.\n@param rowIndex The index of the row to get (starting at 1).\n@return The row at the given index.\n@throws IndexOutOfBoundsException if the row index is invalid.","static":false,"name":"getRow","comment":"Gets the row at the given index.\n \n NOTE: Per ISO\/IEC 23271:2012(E) III.1.9, Row indices start from 1, while heap\/stream indices start from 0.","params":[{"type_long":"int","name":"rowIndex","comment":"The index of the row to get (starting at 1).","type_short":"int"}],"throws":[{"type_long":"java.lang.IndexOutOfBoundsException","comment":"if the row index is invalid.","type_short":"IndexOutOfBoundsException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTableRow","comment":"The row at the given index.","type_short":"CliAbstractTableRow"}},{"javadoc":"","static":false,"name":"markup","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"boolean","name":"isBinary","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","name":"ntHeader","comment":"","type_short":"NTHeader"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"","type_short":"CodeUnitInsertionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the data type of a row in this table.\n@return The data type of a row in this table.","static":false,"name":"getRowDataType","comment":"Gets the data type of a row in this table.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"The data type of a row in this table.","type_short":"DataType"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Reads the blob index that the reader is positioned at.\n@param reader A reader that is positioned at the blob index to read.\n@return The blob index that the reader is positioned at.\n@throws IOException if there is a problem reading the blob index.","static":false,"name":"readBlobIndex","comment":"Reads the blob index that the reader is positioned at.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A reader that is positioned at the blob index to read.","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the blob index.","type_short":"IOException"}],"return":{"type_long":"int","comment":"The blob index that the reader is positioned at.","type_short":"int"}},{"javadoc":"Reads the string index that the reader is positioned at.\n@param reader A reader that is positioned at the string index to read.\n@return The string index that the reader is positioned at.\n@throws IOException if there is a problem reading the string index.","static":false,"name":"readStringIndex","comment":"Reads the string index that the reader is positioned at.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A reader that is positioned at the string index to read.","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the string index.","type_short":"IOException"}],"return":{"type_long":"int","comment":"The string index that the reader is positioned at.","type_short":"int"}},{"javadoc":"Reads the GUID index that the reader is positioned at.\n@param reader A reader that is positioned at the GUID index to read.\n@return The GUID index that the reader is positioned at.\n@throws IOException if there is a problem reading the GUID index.","static":false,"name":"readGuidIndex","comment":"Reads the GUID index that the reader is positioned at.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A reader that is positioned at the GUID index to read.","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the GUID index.","type_short":"IOException"}],"return":{"type_long":"int","comment":"The GUID index that the reader is positioned at.","type_short":"int"}},{"javadoc":"Reads the table index that the reader is positioned at.\n@param reader A reader that is positioned at the table index to read.\n@return The table index that the reader is positioned at.\n@throws IOException if there is a problem reading the table index.","static":false,"name":"readTableIndex","comment":"Reads the table index that the reader is positioned at.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"A reader that is positioned at the table index to read.","type_short":"BinaryReader"},{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","name":"table","comment":"","type_short":"CliTypeTable"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the table index.","type_short":"IOException"}],"return":{"type_long":"int","comment":"The table index that the reader is positioned at.","type_short":"int"}},{"javadoc":"Convenience method for getting the row representation of a table.\n@param table The table that has the row.\n@param index The index of the row.\n@return The row representation of a table.","static":false,"name":"getRowRepresentationSafe","comment":"Convenience method for getting the row representation of a table.","params":[{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","name":"table","comment":"The table that has the row.","type_short":"CliTypeTable"},{"type_long":"int","name":"index","comment":"The index of the row.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The row representation of a table.","type_short":"String"}},{"javadoc":"Convenience method for getting a safe row representation of a table.\n@param table The table that has the row.\n@param index The index of the row.\n@return The safe row representation of a table.","static":false,"name":"getRowShortRepSafe","comment":"Convenience method for getting a safe row representation of a table.","params":[{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","name":"otherTable","comment":"","type_short":"CliTypeTable"},{"type_long":"int","name":"index","comment":"The index of the row.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The safe row representation of a table.","type_short":"String"}}],"name":"CliAbstractTable","comment":"Generic Metadata table.  Subclasses should provided implementations for the actual\n tables.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PATH","comment":"","type_short":"String","constant_value":"\"\/PE\/CLI\/Metadata\/Tables\""},{"type_long":"long","javadoc":"","static":false,"name":"readerOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.tables.CliTypeTable","javadoc":"","static":false,"name":"tableType","comment":"","type_short":"CliTypeTable","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"numRows","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.app.util.bin.format.pe.cli.tables.CliAbstractTableRow>","javadoc":"","static":false,"name":"rows","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata","javadoc":"","static":false,"name":"metadataStream","comment":"","type_short":"CliStreamMetadata","constant_value":null},{"type_long":"java.util.List<java.lang.Integer>","javadoc":"","static":false,"name":"strings","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<java.lang.Integer>","javadoc":"","static":false,"name":"blobs","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<java.lang.Integer>","javadoc":"","static":false,"name":"userStrings","comment":"","type_short":"List","constant_value":null}]}
