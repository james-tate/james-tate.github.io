{"implements":[],"javadoc":"A class to represent the Object Module Format (OMF) File Index data structure.\n <br>\n <pre>\n short cMod \t\t - Count or number of modules in the executable.\n short cRef \t\t - Count or number of file name references.\n short [] modStart - array of indices into the nameoffset table for each module.  Each index is the start of the file name references for each module.\n short cRefCnt \t - number of file name references per module.\n int [] nameRef \t - array of offsets in to the names table.  For each module the offset to the first references file name is at nameRef[modStart] and continues for cRefCnt entries.\n String names \t - file names.\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createOMFFileIndex","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"ptr","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.debug.OMFFileIndex","comment":"","type_short":"OMFFileIndex"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initOMFFileIndex","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"ptr","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of modules in the executable.\n@return the number of modules in the executable","static":false,"name":"getCMod","comment":"Returns the number of modules in the executable.","params":[],"throws":[],"return":{"type_long":"short","comment":"the number of modules in the executable","type_short":"short"}},{"javadoc":"Returns the number of file name references in the executable.\n@return the number of file name references in the executable","static":false,"name":"getCRef","comment":"Returns the number of file name references in the executable.","params":[],"throws":[],"return":{"type_long":"short","comment":"the number of file name references in the executable","type_short":"short"}},{"javadoc":"Returns the array of offsets into the names table.\n@return the array of offsets in to the names table","static":false,"name":"getNameRef","comment":"Returns the array of offsets into the names table.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"the array of offsets in to the names table","type_short":"int[]"}},{"javadoc":"Returns the file names referenced in the executable.\n@return the file names referenced in the executable","static":false,"name":"getNames","comment":"Returns the file names referenced in the executable.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"the file names referenced in the executable","type_short":"java.lang.String[]"}},{"javadoc":"Returns the indices into the nameoffset table for each file.\n@return the indices into the nameoffset table for each file","static":false,"name":"getCRefCnt","comment":"Returns the indices into the nameoffset table for each file.","params":[],"throws":[],"return":{"type_long":"short[]","comment":"the indices into the nameoffset table for each file","type_short":"short[]"}},{"javadoc":"Returns the array of indices into the nameoffset table for each module.\n@return the array of indices into the nameoffset table for each module","static":false,"name":"getModStart","comment":"Returns the array of indices into the nameoffset table for each module.","params":[],"throws":[],"return":{"type_long":"short[]","comment":"the array of indices into the nameoffset table for each module","type_short":"short[]"}}],"name":"OMFFileIndex","comment":"A class to represent the Object Module Format (OMF) File Index data structure.\n \n \n short cMod \t\t - Count or number of modules in the executable.\n short cRef \t\t - Count or number of file name references.\n short [] modStart - array of indices into the nameoffset table for each module.  Each index is the start of the file name references for each module.\n short cRefCnt \t - number of file name references per module.\n int [] nameRef \t - array of offsets in to the names table.  For each module the offset to the first references file name is at nameRef[modStart] and continues for cRefCnt entries.\n String names \t - file names.\n ","fields":[{"type_long":"short","javadoc":"","static":false,"name":"cMod","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"cRef","comment":"","type_short":"short","constant_value":null},{"type_long":"short[]","javadoc":"","static":false,"name":"modStart","comment":"","type_short":"short[]","constant_value":null},{"type_long":"short[]","javadoc":"","static":false,"name":"cRefCnt","comment":"","type_short":"short[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"nameRef","comment":"","type_short":"int[]","constant_value":null},{"type_long":"java.lang.String[]","javadoc":"","static":false,"name":"names","comment":"","type_short":"java.lang.String[]","constant_value":null}]}
