{"implements":["ghidra.app.util.bin.format.elf.ElfFileSection"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Create and parse an Elf string table\n@param reader\n@param header elf header\n@param stringTableSection string table section header or null if associated with a dynamic table entry\n@param fileOffset symbol table file offset\n@param addrOffset memory address of symbol table (should already be adjusted for prelink)\n@param length length of symbol table in bytes of -1 if unknown\n@param entrySize size of each symbol entry in bytes\n@param sectionType symbol table section type (SHT_DYNSYM, SHT_SYMTAB, or -1 if not section-based)\n@param stringTable string table to be associated with symbol table\n@return Elf string table object\n@throws IOException","static":true,"name":"createElfStringTable","comment":"Create and parse an Elf string table","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"header","comment":"elf header","type_short":"ElfHeader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfSectionHeader","name":"stringTableSection","comment":"string table section header or null if associated with a dynamic table entry","type_short":"ElfSectionHeader"},{"type_long":"long","name":"fileOffset","comment":"symbol table file offset","type_short":"long"},{"type_long":"long","name":"addrOffset","comment":"memory address of symbol table (should already be adjusted for prelink)","type_short":"long"},{"type_long":"long","name":"length","comment":"length of symbol table in bytes of -1 if unknown","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.elf.ElfStringTable","comment":"Elf string table object","type_short":"ElfStringTable"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initElfStringTable","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"header","comment":"","type_short":"ElfHeader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfSectionHeader","name":"stringTableSection","comment":"","type_short":"ElfSectionHeader"},{"type_long":"long","name":"fileOffset","comment":"","type_short":"long"},{"type_long":"long","name":"addrOffset","comment":"","type_short":"long"},{"type_long":"long","name":"length","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read string from table at specified relative table offset\n@param reader\n@param stringOffset table relative string offset\n@return string or null on error","static":false,"name":"readString","comment":"Read string from table at specified relative table offset","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"},{"type_long":"long","name":"stringOffset","comment":"table relative string offset","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"string or null on error","type_short":"String"}},{"javadoc":"","static":false,"name":"getAddressOffset","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry\n@return string table section header or null","static":false,"name":"getTableSectionHeader","comment":"Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.elf.ElfSectionHeader","comment":"string table section header or null","type_short":"ElfSectionHeader"}},{"javadoc":"","static":false,"name":"getFileOffset","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getLength","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getEntrySize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}}],"name":"ElfStringTable","comment":"","fields":[{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","javadoc":"","static":false,"name":"header","comment":"","type_short":"ElfHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.elf.ElfSectionHeader","javadoc":"","static":false,"name":"stringTableSection","comment":"","type_short":"ElfSectionHeader","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"fileOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"addrOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"length","comment":"","type_short":"long","constant_value":null}]}
