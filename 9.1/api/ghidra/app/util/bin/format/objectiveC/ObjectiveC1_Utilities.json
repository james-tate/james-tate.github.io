{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the code units defined in the given memory block.","static":true,"name":"clear","comment":"Clears the code units defined in the given memory block.","params":[{"type_long":"ghidra.app.util.bin.format.objc2.ObjectiveC2_State","name":"state","comment":"","type_short":"ObjectiveC2_State"},{"type_long":"ghidra.program.model.mem.MemoryBlock","name":"block","comment":"","type_short":"MemoryBlock"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reads the next index value. If is32bit is true, then 4 bytes\n will be read to form index. Otherwise, 8 bytes will be read to form index.","static":true,"name":"readNextIndex","comment":"Reads the next index value. If is32bit is true, then 4 bytes\n will be read to form index. Otherwise, 8 bytes will be read to form index.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"},{"type_long":"boolean","name":"is32bit","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Dereferences a string pointer and returns the string.\n If 32-bit only reads a 32-bit pointer.","static":true,"name":"dereferenceAsciiString","comment":"Dereferences a string pointer and returns the string.\n If 32-bit only reads a 32-bit pointer.","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"},{"type_long":"boolean","name":"is32bit","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns true if the given address is zero.","static":true,"name":"isNull","comment":"Returns true if the given address is zero.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the address is THUMB code.","static":true,"name":"isThumb","comment":"Returns true if the address is THUMB code.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the address is THUMB code.","static":true,"name":"isThumb","comment":"Returns true if the address is THUMB code.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"long","name":"address","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"If needed, sets the TMode bit at the specified address.","static":true,"name":"setThumbBit","comment":"If needed, sets the TMode bit at the specified address.","params":[{"type_long":"ghidra.app.util.bin.format.objectiveC.ObjectiveC1_State","name":"state","comment":"","type_short":"ObjectiveC1_State"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Manufactures an address from the given long.","static":true,"name":"toAddress","comment":"Manufactures an address from the given long.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Applies the data type at the specified address.","static":true,"name":"applyData","comment":"Applies the data type at the specified address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"","type_short":"CodeUnitInsertionException"},{"type_long":"ghidra.program.model.data.DataTypeConflictException","comment":"","type_short":"DataTypeConflictException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Applies a string data type at the specified address and returns the string object.","static":true,"name":"createString","comment":"Applies a string data type at the specified address and returns the string object.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Applies a pointer data type at the specified address and returns the address being referenced.","static":true,"name":"createPointerAndReturnAddressBeingReferenced","comment":"Applies a pointer data type at the specified address and returns the address being referenced.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"","type_short":"CodeUnitInsertionException"},{"type_long":"ghidra.program.model.data.DataTypeConflictException","comment":"","type_short":"DataTypeConflictException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Applies a pointer data type at the specified address and returns the newly created data object.","static":true,"name":"createPointer","comment":"Applies a pointer data type at the specified address and returns the newly created data object.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"","type_short":"Data"}},{"javadoc":"Returns the name space inside the given parent name space.\n If it does not exist, then create it and return it.","static":true,"name":"getNamespace","comment":"Returns the name space inside the given parent name space.\n If it does not exist, then create it and return it.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"parentNamespace","comment":"","type_short":"Namespace"},{"type_long":"java.lang.String","name":"namespaceName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"","type_short":"Namespace"}},{"javadoc":"Returns the class inside the given parent name space.\n If it does not exist, then create it and return it.","static":true,"name":"getClassNamespace","comment":"Returns the class inside the given parent name space.\n If it does not exist, then create it and return it.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"parentNamespace","comment":"","type_short":"Namespace"},{"type_long":"java.lang.String","name":"namespaceName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"","type_short":"Namespace"}},{"javadoc":"Creates a symbol.\n\n TODO - make symbols primary?","static":true,"name":"createSymbol","comment":"Creates a symbol.\n\n TODO - make symbols primary?","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"parentNamespace","comment":"","type_short":"Namespace"},{"type_long":"java.lang.String","name":"symbolName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"symbolAddress","comment":"","type_short":"Address"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"","type_short":"Symbol"}},{"javadoc":"Creates a namespace hierarchy using the list of strings specified in namespacePath.","static":true,"name":"createNamespace","comment":"Creates a namespace hierarchy using the list of strings specified in namespacePath.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String[]","name":"namespacePath","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"","type_short":"Namespace"}},{"javadoc":"","static":true,"name":"formatAsObjectiveC","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.app.util.bin.format.objectiveC.ObjectiveC_MethodType","name":"methodType","comment":"","type_short":"ObjectiveC_MethodType"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"formatAsObjectiveC","comment":"","params":[{"type_long":"ghidra.program.model.listing.FunctionSignature","name":"signature","comment":"","type_short":"FunctionSignature"},{"type_long":"ghidra.app.util.bin.format.objectiveC.ObjectiveC_MethodType","name":"methodType","comment":"","type_short":"ObjectiveC_MethodType"},{"type_long":"boolean","name":"appendSemicolon","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.lang.IllegalStateException","comment":"","type_short":"IllegalStateException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"createMethods","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.objectiveC.ObjectiveC1_State","name":"state","comment":"","type_short":"ObjectiveC1_State"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"createInstanceVariablesC2_OBJC2","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.objc2.ObjectiveC2_State","name":"state","comment":"","type_short":"ObjectiveC2_State"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method will remove references to the NULL address\n and it will adjust THUMB references to no longer be offcut.","static":true,"name":"fixupReferences","comment":"This method will remove references to the NULL address\n and it will adjust THUMB references to no longer be offcut.","params":[{"type_long":"ghidra.app.util.bin.format.objectiveC.ObjectiveC1_State","name":"state","comment":"","type_short":"ObjectiveC1_State"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ObjectiveC1_Utilities","comment":"","fields":[]}
