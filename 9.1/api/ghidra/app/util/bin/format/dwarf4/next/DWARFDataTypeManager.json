{"implements":[],"javadoc":"Manages mappings between DWARF DIEs and Ghidra DataTypes.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new {@link DWARFDataTypeManager} instance.\n@param prog {@link DWARFProgram} that holds the Ghidra {@link Program} being imported.\n@param dataTypeManager {@link DataTypeManager} of the Ghidra Program.\n@param builtInDTM {@link DataTypeManager} with built-in data types.\n@param importSummary {@link DWARFImportSummary} where summary information will be stored\n during the import session.","static":false,"name":"<init>","comment":"Creates a new DWARFDataTypeManager instance.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFProgram","name":"prog","comment":"DWARFProgram that holds the Ghidra Program being imported.","type_short":"DWARFProgram"},{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dataTypeManager","comment":"DataTypeManager of the Ghidra Program.","type_short":"DataTypeManager"},{"type_long":"ghidra.program.model.data.DataTypeManager","name":"builtInDTM","comment":"DataTypeManager with built-in data types.","type_short":"DataTypeManager"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportSummary","name":"importSummary","comment":"DWARFImportSummary where summary information will be stored\n during the import session.","type_short":"DWARFImportSummary"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a {@link DataType} from the DWARF {@link DIEAggregate DIEA}, or returns a\n pre-existing {@link DataType} created by the specified DIEA previously.\n <p>\n Creating a new DataType happens in two stages, where the DataType is created as\n an 'impl' DataType first (possibly representing a large graph of referred-to datatypes),\n and then it is submitted to the {@link DataTypeManager} to be added to the database and\n converted to a 'db' object.\n <p>\n Mapping from the DIEA's offset to the resultant 'db' DataType object is a two step\n process.\n <p>\n A {@link DataTypeGraphComparator} is used to walk the 'impl' DataType object graph\n in lock-step with the resultant 'db' DataType object graph, and the mapping between\n the 'impl' object and its creator DIEA (held in {@link #currentImplDataTypeToDIE})\n is used to create a mapping to the resultant 'db' DataType's path.\n@param diea DWARF {@link DIEAggregate} with datatype information that needs to be converted\n to a Ghidra DataType.\n@return {@link DataType} that is ready to use.\n@throws IOException if problem\n@throws DWARFExpressionException if problem","static":false,"name":"doGetDataType","comment":"Creates a DataType from the DWARF DIEAggregate, or returns a\n pre-existing DataType created by the specified DIEA previously.\n \n Creating a new DataType happens in two stages, where the DataType is created as\n an 'impl' DataType first (possibly representing a large graph of referred-to datatypes),\n and then it is submitted to the DataTypeManager to be added to the database and\n converted to a 'db' object.\n \n Mapping from the DIEA's offset to the resultant 'db' DataType object is a two step\n process.\n \n A DataTypeGraphComparator is used to walk the 'impl' DataType object graph\n in lock-step with the resultant 'db' DataType object graph, and the mapping between\n the 'impl' object and its creator DIEA (held in #currentImplDataTypeToDIE)\n is used to create a mapping to the resultant 'db' DataType's path.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"DWARF DIEAggregate with datatype information that needs to be converted\n to a Ghidra DataType.","type_short":"DIEAggregate"}],"throws":[{"type_long":"java.io.IOException","comment":"if problem","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"if problem","type_short":"DWARFExpressionException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"DataType that is ready to use.","type_short":"DataType"}},{"javadoc":"","static":false,"name":"addDataType","comment":"","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo","name":"dsi","comment":"","type_short":"DWARFSourceInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveDWARFSourceInfo","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo","name":"dsi","comment":"","type_short":"DWARFSourceInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getImportedTypes","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.data.DataTypePath>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getSourceInfo","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo","comment":"","type_short":"DWARFSourceInfo"}},{"javadoc":"","static":false,"name":"isGoodDWARFSourceInfo","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo","name":"dsi","comment":"","type_short":"DWARFSourceInfo"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"cacheOffsetToDataTypeMapping","comment":"","params":[{"type_long":"long","name":"dieOffset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a Ghidra {@link DataType} corresponding to the specified {@link DIEAggregate},\n or the specified defaultValue if the DIEA param is null or does not map to an already\n defined datatype (registered with {@link #addType(long, DataType, DWARFImportSummary)}).\n <p>\n@param diea {@link DIEAggregate} that defines a data type\n@param defaultValue Ghidra {@link DataType} to return if the specified DIEA is null\n or not already defined.\n@return Ghidra {@link DataType}\n@throws DWARFExpressionException\n@throws IOException","static":false,"name":"getDataType","comment":"Returns a Ghidra DataType corresponding to the specified DIEAggregate,\n or the specified defaultValue if the DIEA param is null or does not map to an already\n defined datatype (registered with #addType(long, DataType, DWARFImportSummary)).\n ","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"DIEAggregate that defines a data type","type_short":"DIEAggregate"},{"type_long":"ghidra.program.model.data.DataType","name":"defaultValue","comment":"Ghidra DataType to return if the specified DIEA is null\n or not already defined.","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"Ghidra DataType","type_short":"DataType"}},{"javadoc":"Returns a Ghidra {@link DataType} corresponding to the specified DIE (based on its\n offset), or the specified defaultValue if the DIE does not map to a defined\n datatype (registered with {@link #addType(long, DataType, DWARFImportSummary)}).\n <p>\n@param dieOffset offset of a DIE record that defines a data type\n@param defaultValue Ghidra {@link DataType} to return if the specified DIE not already defined.\n@return Ghidra {@link DataType}","static":false,"name":"getDataType","comment":"Returns a Ghidra DataType corresponding to the specified DIE (based on its\n offset), or the specified defaultValue if the DIE does not map to a defined\n datatype (registered with #addType(long, DataType, DWARFImportSummary)).\n ","params":[{"type_long":"long","name":"dieOffset","comment":"offset of a DIE record that defines a data type","type_short":"long"},{"type_long":"ghidra.program.model.data.DataType","name":"defaultValue","comment":"Ghidra DataType to return if the specified DIE not already defined.","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"Ghidra DataType","type_short":"DataType"}},{"javadoc":"","static":false,"name":"getSpecificDataType","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"java.lang.Class<T>","name":"dataTypeClazz","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"Returns a pointer to the specified data type.\n@param dt Ghidra {@link DataType}\n@return a {@link Pointer} that points to the specified datatype.","static":false,"name":"getPtrTo","comment":"Returns a pointer to the specified data type.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"Ghidra DataType","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"a Pointer that points to the specified datatype.","type_short":"DataType"}},{"javadoc":"Iterate all {@link DataType}s that match the CategoryPath \/ name given\n in the {@link DataTypePath} parameter, including \"conflict\" datatypes\n that have a \".CONFLICTxx\" suffix.\n@param dtp\n@return ","static":false,"name":"forAllConflicts","comment":"Iterate all DataTypes that match the CategoryPath \/ name given\n in the DataTypePath parameter, including \"conflict\" datatypes\n that have a \".CONFLICTxx\" suffix.","params":[{"type_long":"ghidra.program.model.data.DataTypePath","name":"dtp","comment":"","type_short":"DataTypePath"}],"throws":[],"return":{"type_long":"java.lang.Iterable<ghidra.program.model.data.DataType>","comment":"","type_short":"Iterable"}},{"javadoc":"","static":false,"name":"findGhidraType","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"","static":false,"name":"findMatchingDataTypeBySize","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType[]","name":"dtList","comment":"","type_short":"ghidra.program.model.data.DataType[]"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Returns a Ghidra {@link DataType datatype} that corresponds to a type\n that can be used to represent an offset.\n <p>\n@param size\n@return ","static":false,"name":"getOffsetType","comment":"Returns a Ghidra DataType that corresponds to a type\n that can be used to represent an offset.\n ","params":[{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Returns the void type.\n@return void {@link DataType}","static":false,"name":"getVoidType","comment":"Returns the void type.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"void DataType","type_short":"DataType"}},{"javadoc":"Returns datatype to hold a 1 byte undefined value.\n@return undefined 1 byte {@link DataType}.","static":false,"name":"getUndefined1Type","comment":"Returns datatype to hold a 1 byte undefined value.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"undefined 1 byte DataType.","type_short":"DataType"}},{"javadoc":"Returns a DWARF base data type based on its name, or null if it does not exist.\n@param name base type name\n@return {@link DataType} or null if base type does not exist","static":false,"name":"getBaseType","comment":"Returns a DWARF base data type based on its name, or null if it does not exist.","params":[{"type_long":"java.lang.String","name":"name","comment":"base type name","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"DataType or null if base type does not exist","type_short":"DataType"}},{"javadoc":"","static":false,"name":"isEncodingCompatible","comment":"","params":[{"type_long":"int","name":"requestedDwarfEncoding","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns a Ghidra {@link DataType datatype} that corresponds to the DWARF named type.\n <p>\n If there is no direct matching named Ghidra type, generic types of matching\n size will be returned for integer and floating numeric dwarf encoding types, boolean,\n and character types.  Failing that, generic storage types of matching size\n (word, dword, etc) will be returned, and failing that, an array of the correct size\n will be returned.\n <p>\n If the returned data type is not a direct named match, the returned data type\n will be wrapped in a Ghdira typedef using the dwarf type's name.\n <p>\n Any newly created Ghidra data types will be cached and the same instance will be returned\n if the same DWARF named base type is requested again.\n <p>\n@param name\n@param dwarfSize\n@param dwarfEncoding\n@param isBigEndian\n@return ","static":false,"name":"getBaseType","comment":"Returns a Ghidra DataType that corresponds to the DWARF named type.\n \n If there is no direct matching named Ghidra type, generic types of matching\n size will be returned for integer and floating numeric dwarf encoding types, boolean,\n and character types.  Failing that, generic storage types of matching size\n (word, dword, etc) will be returned, and failing that, an array of the correct size\n will be returned.\n \n If the returned data type is not a direct named match, the returned data type\n will be wrapped in a Ghdira typedef using the dwarf type's name.\n \n Any newly created Ghidra data types will be cached and the same instance will be returned\n if the same DWARF named base type is requested again.\n ","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"dwarfSize","comment":"","type_short":"int"},{"type_long":"int","name":"dwarfEncoding","comment":"","type_short":"int"},{"type_long":"boolean","name":"isBigEndian","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Create a string with the data type's size and type info so that\n the data type can be stored in the same map as the regular named base types without\n conflicting.\n <p>\n@param dwarfLength\n@param dwarfEncoding\n@return ","static":false,"name":"mangleDataTypeInfo","comment":"Create a string with the data type's size and type info so that\n the data type can be stored in the same map as the regular named base types without\n conflicting.\n ","params":[{"type_long":"int","name":"dwarfLength","comment":"","type_short":"int"},{"type_long":"int","name":"dwarfEncoding","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"initBaseDataTypes","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Does the actual import work.  Updates the {@link #importSummary summary} object\n with information about the types imported and errors encountered.\n@param TaskMonitor monitor to watch for cancel\n@throws IOException if errors are encountered reading data\n@throws DWARFException if errors are encountered processing\n@throws CancelledException if the {@link TaskMonitor} is canceled by the user.","static":false,"name":"importAllDataTypes","comment":"Does the actual import work.  Updates the #importSummary object\n with information about the types imported and errors encountered.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if errors are encountered reading data","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"if errors are encountered processing","type_short":"DWARFException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the TaskMonitor is canceled by the user.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFuncDIEA","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"Construct a temporary 'impl' {@link FunctionDefinition} DataType using the information\n found in the specified {@link DIEAggregate}.\n@param diea {@link DIEAggregate} of a subprogram, callsite, etc.\n@return {@link FunctionDefinition} impl (not saved to the DB) or null if not a valid\n DIEA.","static":false,"name":"getFunctionSignature","comment":"Construct a temporary 'impl' FunctionDefinition DataType using the information\n found in the specified DIEAggregate.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"DIEAggregate of a subprogram, callsite, etc.","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.FunctionDefinition","comment":"FunctionDefinition impl (not saved to the DB) or null if not a valid\n DIEA.","type_short":"FunctionDefinition"}},{"javadoc":"","static":false,"name":"importFuncSignatures","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isDataType","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Creates a new {@link FunctionDefinitionDataType} from the specified {@link DIEAggregate}\n using already known datatypes.\n <p>\n The logic of this impl is the same as {@link DWARFDataTypeImporter#makeDataTypeForFunctionDefinition(DIEAggregate, boolean)}\n but the impls can't be shared without excessive over-engineering.\n <p>\n This impl uses DataType's that have already been resolved and committed to the DTM, and\n a cache mapping entry of the DWARF die -> DataType has been registered via {@link #addDataType(long, DataType, DWARFSourceInfo)}.\n <p>\n This approach is necessary because of speed issues that arise if the referred datatypes\n are created from scratch from the DWARF information and then have to go through a\n resolve() before being used in the FunctionDefinition.\n@param diea DWARF {@link DIEAggregate} that points to a subprogram or subroutine_type.\n@param dni DWARF name info for the new function def\n@return new {@link FunctionDefinitionDataType}.","static":false,"name":"createFunctionDefinitionDataType","comment":"Creates a new FunctionDefinitionDataType from the specified DIEAggregate\n using already known datatypes.\n \n The logic of this impl is the same as DWARFDataTypeImporter#makeDataTypeForFunctionDefinition(DIEAggregate, boolean)\n but the impls can't be shared without excessive over-engineering.\n \n This impl uses DataType's that have already been resolved and committed to the DTM, and\n a cache mapping entry of the DWARF die - DataType has been registered via #addDataType(long, DataType, DWARFSourceInfo).\n \n This approach is necessary because of speed issues that arise if the referred datatypes\n are created from scratch from the DWARF information and then have to go through a\n resolve() before being used in the FunctionDefinition.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"DWARF DIEAggregate that points to a subprogram or subroutine_type.","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","name":"dni","comment":"DWARF name info for the new function def","type_short":"DWARFNameInfo"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.FunctionDefinitionDataType","comment":"new FunctionDefinitionDataType.","type_short":"FunctionDefinitionDataType"}}],"name":"DWARFDataTypeManager","comment":"Manages mappings between DWARF DIEs and Ghidra DataTypes.","fields":[{"type_long":"ghidra.program.model.data.DataTypeManager","javadoc":"","static":false,"name":"dataTypeManager","comment":"","type_short":"DataTypeManager","constant_value":null},{"type_long":"ghidra.program.model.data.DataTypeManager","javadoc":"","static":false,"name":"builtInDTM","comment":"","type_short":"DataTypeManager","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFProgram","javadoc":"","static":false,"name":"prog","comment":"","type_short":"DWARFProgram","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportSummary","javadoc":"","static":false,"name":"importSummary","comment":"","type_short":"DWARFImportSummary","constant_value":null},{"type_long":"java.util.Map<java.lang.Long,ghidra.program.model.data.DataTypePath>","javadoc":"Maps DWARF DIE offsets to Ghidra {@link DataType datatypes}, using the\n path\/name of the datatype instead of live object (to avoid issues with\n stale objects)","static":false,"name":"offsetToDTP","comment":"Maps DWARF DIE offsets to Ghidra DataType, using the\n path\/name of the datatype instead of live object (to avoid issues with\n stale objects)","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<ghidra.program.model.data.DataTypePath,ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo>","javadoc":"","static":false,"name":"dtpToSourceInfo","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.program.model.data.DataType>","javadoc":"Mapping of base type names to their Ghidra datatype.\n <p>\n Non-standard base-type names (created on the fly) will have a\n {@link #BASETYPE_MANGLE_PREFIX mangling} applied to them to keep them\n unique.","static":false,"name":"baseDataTypes","comment":"Mapping of base type names to their Ghidra datatype.\n \n Non-standard base-type names (created on the fly) will have a\n #BASETYPE_MANGLE_PREFIX applied to them to keep them\n unique.","type_short":"Map","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BASETYPE_MANGLE_PREFIX","comment":"","type_short":"String","constant_value":"\"__MANGLE__\""},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeVoid","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeNullPtr","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeBool","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeChar","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeUchar","comment":"","type_short":"DataType","constant_value":null},{"type_long":"ghidra.program.model.data.DataType[]","javadoc":"","static":false,"name":"baseDataTypeFloats","comment":"","type_short":"ghidra.program.model.data.DataType[]","constant_value":null},{"type_long":"ghidra.program.model.data.DataType[]","javadoc":"","static":false,"name":"baseDataTypeSignedInts","comment":"","type_short":"ghidra.program.model.data.DataType[]","constant_value":null},{"type_long":"ghidra.program.model.data.DataType[]","javadoc":"","static":false,"name":"baseDataTypeUnsignedInts","comment":"","type_short":"ghidra.program.model.data.DataType[]","constant_value":null},{"type_long":"ghidra.program.model.data.DataType[]","javadoc":"","static":false,"name":"baseDataTypeUntyped","comment":"","type_short":"ghidra.program.model.data.DataType[]","constant_value":null},{"type_long":"ghidra.program.model.data.DataType[]","javadoc":"","static":false,"name":"baseDataTypeChars","comment":"","type_short":"ghidra.program.model.data.DataType[]","constant_value":null},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataTypeUndefined1","comment":"","type_short":"DataType","constant_value":null}]}
