{"implements":["java.lang.Comparable"],"javadoc":"Represents a hierarchical path of containers that hold names of objects.\n <p>\n Each container of names (lets call them a namespace for short) can have a type that\n distinguishes it from other containers: classes, functions, c++ namespaces, etc.\n <p>\n A NamespacePath does not correlate directly to a Ghidra {@link Namespace}, as a Ghidra Namespace\n is tied to a Program and has rules about what can be placed inside of it.\n <p>\n NamespacePath instances can be created without referring to a Ghidra Program and without\n concern as to what will be valid or have collisions.\n <p>\n Use a NamespacePath to represent and hold forward-engineering namespace nesting information (ie.\n namespace info recovered from debug info), and when a Ghidra Namespace is needed,\n convert to or lookup the live\/'real' Ghidra Namespace.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new {@link NamespacePath} instance.\n@param parent optional - parent {@link NamespacePath} instance, default to {@link #ROOT} if null.\n@param name string name of the new namespace.\n@param type {@link SymbolType} of the named space - ie. a \"namespace\", a class,\n@return new {@link NamespacePath}","static":true,"name":"create","comment":"Creates a new NamespacePath instance.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","name":"parent","comment":"optional - parent NamespacePath instance, default to #ROOT if null.","type_short":"NamespacePath"},{"type_long":"java.lang.String","name":"name","comment":"string name of the new namespace.","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SymbolType","name":"type","comment":"SymbolType of the named space - ie. a \"namespace\", a class,","type_short":"SymbolType"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","comment":"new NamespacePath","type_short":"NamespacePath"}},{"javadoc":"","static":true,"name":"preMangleName","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","name":"parent","comment":"","type_short":"NamespacePath"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SymbolType","name":"type","comment":"","type_short":"SymbolType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this namespace path points to the root of the namespace space.\n@return boolean true if ROOT","static":false,"name":"isRoot","comment":"Returns true if this namespace path points to the root of the namespace space.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if ROOT","type_short":"boolean"}},{"javadoc":"Returns the name of this namespace element, ie. the last thing on the path.\n@return string name.","static":false,"name":"getName","comment":"Returns the name of this namespace element, ie. the last thing on the path.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"string name.","type_short":"String"}},{"javadoc":"Returns a reference to the parent NamespacePath.\n@return parent NamespacePath","static":false,"name":"getParent","comment":"Returns a reference to the parent NamespacePath.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","comment":"parent NamespacePath","type_short":"NamespacePath"}},{"javadoc":"Returns the {@link SymbolType} of this namespace element (ie. the symbol type of the last\n thing on the path).\n@return {@link SymbolType}","static":false,"name":"getType","comment":"Returns the SymbolType of this namespace element (ie. the symbol type of the last\n thing on the path).","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SymbolType","comment":"SymbolType","type_short":"SymbolType"}},{"javadoc":"","static":true,"name":"flattenSymbolTypeForDNI","comment":"","params":[{"type_long":"ghidra.program.model.symbol.SymbolType","name":"type","comment":"","type_short":"SymbolType"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SymbolType","comment":"","type_short":"SymbolType"}},{"javadoc":"Converts this NamespacePath into a Ghidra {@link Namespace} in the specified {@link Program},\n creating missing elements on the path as necessary.\n@param program Ghidra {@link Program} where the namespace should be retrieved from or created in.\n@return {@link Namespace} or fallback to the progam's Global root namespace if problem.","static":false,"name":"getNamespace","comment":"Converts this NamespacePath into a Ghidra Namespace in the specified Program,\n creating missing elements on the path as necessary.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"Ghidra Program where the namespace should be retrieved from or created in.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"Namespace or fallback to the progam's Global root namespace if problem.","type_short":"Namespace"}},{"javadoc":"Converts this namespace path into a {@link CategoryPath} style string.\n@return string path \"\/namespace1\/namespace2\"","static":false,"name":"asCategoryPathString","comment":"Converts this namespace path into a CategoryPath style string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"string path \"\/namespace1\/namespace2\"","type_short":"String"}},{"javadoc":"Converts this namespace path into a {@link Namespace} style string.\n@return string path \"ROOT::namespace1::namespace2\"","static":false,"name":"asNamespaceString","comment":"Converts this namespace path into a Namespace style string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"string path \"ROOT::namespace1::namespace2\"","type_short":"String"}},{"javadoc":"Converts this namespace path into a {@link Namespace} style string without the ROOT namespace\n included.\n@return string path \"namespace1::namespace2\"","static":false,"name":"asFormattedString","comment":"Converts this namespace path into a Namespace style string without the ROOT namespace\n included.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"string path \"namespace1::namespace2\"","type_short":"String"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"doInOrderTraversal","comment":"","params":[{"type_long":"java.util.function.Consumer<ghidra.app.util.bin.format.dwarf4.next.NamespacePath>","name":"consumer","comment":"","type_short":"Consumer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","name":"otherPath","comment":"","type_short":"NamespacePath"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"NamespacePath","comment":"Represents a hierarchical path of containers that hold names of objects.\n \n Each container of names (lets call them a namespace for short) can have a type that\n distinguishes it from other containers: classes, functions, c++ namespaces, etc.\n \n A NamespacePath does not correlate directly to a Ghidra Namespace, as a Ghidra Namespace\n is tied to a Program and has rules about what can be placed inside of it.\n \n NamespacePath instances can be created without referring to a Ghidra Program and without\n concern as to what will be valid or have collisions.\n \n Use a NamespacePath to represent and hold forward-engineering namespace nesting information (ie.\n namespace info recovered from debug info), and when a Ghidra Namespace is needed,\n convert to or lookup the live\/'real' Ghidra Namespace.","fields":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","javadoc":"","static":true,"name":"ROOT","comment":"","type_short":"NamespacePath","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FWDSLASH_MANGLE","comment":"","type_short":"String","constant_value":"\"-fwdslash-\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"COLON_MANGLE","comment":"","type_short":"String","constant_value":"\"-\""},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.NamespacePath","javadoc":"","static":false,"name":"parent","comment":"","type_short":"NamespacePath","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":false,"name":"type","comment":"","type_short":"SymbolType","constant_value":null}]}
