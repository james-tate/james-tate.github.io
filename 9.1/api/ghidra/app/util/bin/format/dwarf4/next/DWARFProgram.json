{"implements":["java.io.Closeable"],"javadoc":"DWARFProgram encapsulates a {@link Program Ghidra program} with DWARF specific reference data\n used by {@link DWARFDataTypeImporter} and {@link DWARFFunctionImporter}, along with some\n helper functions.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"alreadyDWARFImported","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the {@link Program program} probably DWARF information.\n <p>\n If the program is an Elf binary, it must have (at least) \".debug_info\" and \".debug_abbr\" program sections.\n <p>\n If the program is a MachO binary (ie. Mac), it must have a \".dSYM\" directory co-located next to the\n original binary file on the native filesystem.  (ie. outside of Ghidra).  See the DSymSectionProvider\n for more info.\n <p>\n@param program\n@param monitor\n@return ","static":true,"name":"isDWARF","comment":"Returns true if the Program probably DWARF information.\n \n If the program is an Elf binary, it must have (at least) \".debug_info\" and \".debug_abbr\" program sections.\n \n If the program is a MachO binary (ie. Mac), it must have a \".dSYM\" directory co-located next to the\n original binary file on the native filesystem.  (ie. outside of Ghidra).  See the DSymSectionProvider\n for more info.\n ","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Main constructor for DWARFProgram.\n <p>\n Auto-detects the DWARFSectionProvider and chains to the next constructor.\n@param program Ghidra {@link Program}.\n@param importOptions {@link DWARFImportOptions} to controls options during reading \/ parsing \/importing.\n@param monitor {@link TaskMonitor} to control canceling and progress.\n@throws CancelledException if user cancels\n@throws IOException if error reading data\n@throws DWARFException if bad stuff happens.","static":false,"name":"<init>","comment":"Main constructor for DWARFProgram.\n \n Auto-detects the DWARFSectionProvider and chains to the next constructor.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"Ghidra Program.","type_short":"Program"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","name":"importOptions","comment":"DWARFImportOptions to controls options during reading \/ parsing \/importing.","type_short":"DWARFImportOptions"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to control canceling and progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if error reading data","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"if bad stuff happens.","type_short":"DWARFException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for DWARFProgram.\n@param program Ghidra {@link Program}.\n@param importOptions {@link DWARFImportOptions} to controls options during reading \/ parsing \/importing.\n@param monitor {@link TaskMonitor} to control canceling and progress.\n@param sectionProvider {@link DWARFSectionProvider} factory that finds DWARF .debug_* sections\n wherever they live.\n@throws CancelledException if user cancels\n@throws IOException if error reading data\n@throws DWARFException if bad stuff happens.","static":false,"name":"<init>","comment":"Constructor for DWARFProgram.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"Ghidra Program.","type_short":"Program"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","name":"importOptions","comment":"DWARFImportOptions to controls options during reading \/ parsing \/importing.","type_short":"DWARFImportOptions"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to control canceling and progress.","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProvider","name":"sectionProvider","comment":"DWARFSectionProvider factory that finds DWARF .debug_* sections\n wherever they live.","type_short":"DWARFSectionProvider"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if error reading data","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"if bad stuff happens.","type_short":"DWARFException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getImportOptions","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","comment":"","type_short":"DWARFImportOptions"}},{"javadoc":"","static":false,"name":"getGhidraProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"","static":false,"name":"isBigEndian","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isLittleEndian","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getBinaryReaderFor","comment":"","params":[{"type_long":"java.lang.String","name":"sectionName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.BinaryReader","comment":"","type_short":"BinaryReader"}},{"javadoc":"","static":true,"name":"isAnonDWARFName","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getEntryName","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the string path of a DWARF entry.\n <p>\n Always returns a name for the passed-in entry, but you should probably only use this\n for entries that are {@link DIEAggregate#isNamedType()}\n <p>\n@param diea\n@return never null","static":false,"name":"getDWARFNameInfo","comment":"Returns the string path of a DWARF entry.\n \n Always returns a name for the passed-in entry, but you should probably only use this\n for entries that are DIEAggregate#isNamedType()\n ","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","name":"localRootDNI","comment":"","type_short":"DWARFNameInfo"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","comment":"never null","type_short":"DWARFNameInfo"}},{"javadoc":"","static":false,"name":"getAnonBaseTypeName","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getAnonEnumName","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Transform a string with a C++ template-like syntax into a hopefully shorter version that\n uses a fixed-length hash of the original string.\n <p>\n blah&lt;foo, bar&gt;\n <p>\n becomes\n <p>\n blah&lt;$12345678$&gt;\n@param s\n@return ","static":true,"name":"abbrevTemplateName","comment":"Transform a string with a C++ template-like syntax into a hopefully shorter version that\n uses a fixed-length hash of the original string.\n \n blahfoo, bar\n \n becomes\n \n blah$12345678$","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"ensureSafeNameLength","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"ensureSafeNameLengths","comment":"","params":[{"type_long":"java.util.List<java.lang.String>","name":"strs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","comment":"","type_short":"DWARFNameInfo"}},{"javadoc":"","static":false,"name":"lookupDNIByOffset","comment":"","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","comment":"","type_short":"DWARFNameInfo"}},{"javadoc":"","static":false,"name":"cacheDNIByOffset","comment":"","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","name":"dni","comment":"","type_short":"DWARFNameInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Bootstrap all compilation unit headers and abbreviation definitions.\n@throws DWARFException\n@throws IOException\n@throws CancelledException","static":false,"name":"bootstrapCompilationUnits","comment":"Bootstrap all compilation unit headers and abbreviation definitions.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"","type_short":"DWARFException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the {@link DIEAggregate} that contains the specified {@link DebugInfoEntry}.\n@param die {@link DebugInfoEntry} or null\n@return {@link DIEAggregate} that contains the specified DIE, or null if DIE null or\n the aggregate was not found.","static":false,"name":"getAggregate","comment":"Returns the DIEAggregate that contains the specified DebugInfoEntry.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"die","comment":"DebugInfoEntry or null","type_short":"DebugInfoEntry"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"DIEAggregate that contains the specified DIE, or null if DIE null or\n the aggregate was not found.","type_short":"DIEAggregate"}},{"javadoc":"Returns the {@link DIEAggregate} that contains the {@link DebugInfoEntry} specified\n by the offset.\n@param offset offset of a DIE record\n@return {@link DIEAggregate} that contains the DIE record specified, or null if bad\n offset.","static":false,"name":"getAggregate","comment":"Returns the DIEAggregate that contains the DebugInfoEntry specified\n by the offset.","params":[{"type_long":"long","name":"offset","comment":"offset of a DIE record","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"DIEAggregate that contains the DIE record specified, or null if bad\n offset.","type_short":"DIEAggregate"}},{"javadoc":"Returns the list of all currently loaded {@link DIEAggregate}s, which will be either\n just the DIEA of the current CU, or all DIEA if {@link DWARFImportOptions#isPreloadAllDIEs()}.\n@return List of {@link DIEAggregate}.","static":false,"name":"getAggregates","comment":"Returns the list of all currently loaded DIEAggregates, which will be either\n just the DIEA of the current CU, or all DIEA if DWARFImportOptions#isPreloadAllDIEs().","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DIEAggregate>","comment":"List of DIEAggregate.","type_short":"List"}},{"javadoc":"Returns the total number of DIE records in the entire program.\n@return the total number of DIE records in the entire program.","static":false,"name":"getTotalDIECount","comment":"Returns the total number of DIE records in the entire program.","params":[],"throws":[],"return":{"type_long":"int","comment":"the total number of DIE records in the entire program.","type_short":"int"}},{"javadoc":"Returns the total number of {@link DIEAggregate} objects in the entire program.\n@return the total number of {@link DIEAggregate} objects in the entire program.","static":false,"name":"getTotalAggregateCount","comment":"Returns the total number of DIEAggregate objects in the entire program.","params":[],"throws":[],"return":{"type_long":"int","comment":"the total number of DIEAggregate objects in the entire program.","type_short":"int"}},{"javadoc":"Sets the currently active compilation unit.  Used when 'paging' through the DIE records\n in a compilation-unit-at-a-time manner, vs the {@link DWARFImportOptions#isPreloadAllDIEs()}\n where all DIE\/DIEA records are loaded at once.\n@param cu {@link DWARFCompilationUnit} to set as the active element and load it's DIE records.\n@param monitor {@link TaskMonitor} to update with status and check for cancelation.\n@throws CancelledException if user cancels\n@throws IOException if error reading data\n@throws DWARFException if error in DWARF record structure","static":false,"name":"setCurrentCompilationUnit","comment":"Sets the currently active compilation unit.  Used when 'paging' through the DIE records\n in a compilation-unit-at-a-time manner, vs the DWARFImportOptions#isPreloadAllDIEs()\n where all DIE\/DIEA records are loaded at once.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit","name":"cu","comment":"DWARFCompilationUnit to set as the active element and load it's DIE records.","type_short":"DWARFCompilationUnit"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to update with status and check for cancelation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if error reading data","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"if error in DWARF record structure","type_short":"DWARFException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCompilationUnits","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getCompilationUnitFor","comment":"","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit","comment":"","type_short":"DWARFCompilationUnit"}},{"javadoc":"","static":false,"name":"getDebugLocation","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.BinaryReader","comment":"","type_short":"BinaryReader"}},{"javadoc":"","static":false,"name":"getDebugRanges","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.ByteProvider","comment":"","type_short":"ByteProvider"}},{"javadoc":"","static":false,"name":"getDebugInfo","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.BinaryReader","comment":"","type_short":"BinaryReader"}},{"javadoc":"","static":false,"name":"getDebugLine","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.BinaryReader","comment":"","type_short":"BinaryReader"}},{"javadoc":"","static":false,"name":"getRegisterMappings","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFRegisterMappings","comment":"","type_short":"DWARFRegisterMappings"}},{"javadoc":"","static":false,"name":"getRootDNI","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","comment":"","type_short":"DWARFNameInfo"}},{"javadoc":"","static":false,"name":"getUncategorizedRootDNI","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","comment":"","type_short":"DWARFNameInfo"}},{"javadoc":"","static":false,"name":"getDebugStrings","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.StringTable","comment":"","type_short":"StringTable"}},{"javadoc":"","static":false,"name":"getAttributeFactory","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFAttributeFactory","comment":"","type_short":"DWARFAttributeFactory"}},{"javadoc":"","static":false,"name":"setAttributeFactory","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFAttributeFactory","name":"attributeFactory","comment":"","type_short":"DWARFAttributeFactory"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFoundCrossCURefs","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setFoundCrossCURefs","comment":"","params":[{"type_long":"boolean","name":"b","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"internAttributeSpec","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFAttributeSpecification","name":"das","comment":"","type_short":"DWARFAttributeSpecification"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFAttributeSpecification","comment":"","type_short":"DWARFAttributeSpecification"}},{"javadoc":"@return the entries list","static":false,"name":"getEntries","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","comment":"the entries list","type_short":"List"}},{"javadoc":"Returns the count of the DIE records in this compilation unit.\n <p>\n Only valid if called after {@link #readDIEs()} and before {@link #clearEntries()}.\n@return number of DIE records in the compunit.\n@throws IOException\n@throws CancelledException","static":false,"name":"getDIECount","comment":"Returns the count of the DIE records in this compilation unit.\n \n Only valid if called after #readDIEs() and before #clearEntries().","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"number of DIE records in the compunit.","type_short":"int"}},{"javadoc":"Releases the memory used by the DIE entries read by {@link #readDIEs()}.","static":false,"name":"clearDIEIndexes","comment":"Releases the memory used by the DIE entries read by #readDIEs().","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the entry with the given byte offset.\n <p>\n The byte offset corresponds to the byte index\n in the original file where the entry was defined.\n <p>\n Returns null if the requested entry does not exist.\n@param byteOffset the byte offset\n@return the entry with the given byte offset","static":false,"name":"getEntryAtByteOffsetUnchecked","comment":"Returns the entry with the given byte offset.\n \n The byte offset corresponds to the byte index\n in the original file where the entry was defined.\n \n Returns null if the requested entry does not exist.","params":[{"type_long":"long","name":"byteOffset","comment":"the byte offset","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","comment":"the entry with the given byte offset","type_short":"DebugInfoEntry"}},{"javadoc":"","static":false,"name":"getTypeReferers","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"targetDIEA","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DIEAggregate>","comment":"","type_short":"List"}},{"javadoc":"Returns a list of {@link DIEAggregate}s that refer to the targetDIEA via an\n attribute of the specified tag type.\n@param targetDIEA {@link DIEAggregate} that might be pointed to by other DIEAs.\n@param tag the {@link DWARFTag} attribute type that is pointing DIEAs are using\n to refer to the target DIEA.\n@return list of DIEAs that point to the target, empty list if nothing found.","static":false,"name":"getTypeReferers","comment":"Returns a list of DIEAggregates that refer to the targetDIEA via an\n attribute of the specified tag type.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"targetDIEA","comment":"DIEAggregate that might be pointed to by other DIEAs.","type_short":"DIEAggregate"},{"type_long":"int","name":"tag","comment":"the DWARFTag attribute type that is pointing DIEAs are using\n to refer to the target DIEA.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DIEAggregate>","comment":"list of DIEAs that point to the target, empty list if nothing found.","type_short":"List"}},{"javadoc":"","static":false,"name":"rebuildDIEIndexes","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildDIEIndex","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkForCrossCURefs","comment":"","params":[{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","name":"dies","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"buildAggregateIndex","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"countAggregates","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"buildTypeRefIndex","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildHeadIndex","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Map<java.lang.Long,ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","comment":"","type_short":"Map"}},{"javadoc":"Returns the 'head'-most {@link DebugInfoEntry DIE} instance of the DIEs that\n make up the fragment chain that include the {@code die} parameter.\n <p>\n Since there can be many-to-one DIE relationships (for instance, many 'spec' DIEs pointing\n to the same decl DIE), the results can be asymmetric, and will return the last\n 'head' that references the non-head DIE.\n@param die {@link DebugInfoEntry} record\n@return never null","static":false,"name":"getHead","comment":"Returns the 'head'-most DebugInfoEntry instance of the DIEs that\n make up the fragment chain that include the  parameter.\n \n Since there can be many-to-one DIE relationships (for instance, many 'spec' DIEs pointing\n to the same decl DIE), the results can be asymmetric, and will return the last\n 'head' that references the non-head DIE.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"die","comment":"DebugInfoEntry record","type_short":"DebugInfoEntry"},{"type_long":"java.util.Map<java.lang.Long,ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","name":"offsetMap2Head","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","comment":"never null","type_short":"DebugInfoEntry"}},{"javadoc":"Iterates over all the DWARF DIE records in the program and checks for some\n pre-known issues, throwing an exception if there is a problem that would\n prevent a successful run.\n@param monitor {@link TaskMonitor} to check for cancel and upate with status.\n@throws DWARFException if DWARF structure error.\n@throws CancelledException if user cancels.\n@throws IOException if error reading data.","static":false,"name":"checkPreconditions","comment":"Iterates over all the DWARF DIE records in the program and checks for some\n pre-known issues, throwing an exception if there is a problem that would\n prevent a successful run.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to check for cancel and upate with status.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFPreconditionException","comment":"","type_short":"DWARFPreconditionException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFException","comment":"if DWARF structure error.","type_short":"DWARFException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if error reading data.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the maximum length of symbols and datatypes created during import.\n@param nameLenCutoff int, should not be more than {@link SymbolUtilities#MAX_SYMBOL_NAME_LENGTH}.","static":false,"name":"setNameLengthCutoff","comment":"Sets the maximum length of symbols and datatypes created during import.","params":[{"type_long":"int","name":"nameLenCutoff","comment":"int, should not be more than SymbolUtilities#MAX_SYMBOL_NAME_LENGTH.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A fixup value that needs to be applied to static addresses of the program.\n <p>\n This value is necessary if the program's built-in base address is overridden at import time.\n <p>\n@return long value to add to static addresses discovered in DWARF to make it agree with\n Ghidra's imported program.","static":false,"name":"getProgramBaseAddressFixup","comment":"A fixup value that needs to be applied to static addresses of the program.\n \n This value is necessary if the program's built-in base address is overridden at import time.\n ","params":[],"throws":[],"return":{"type_long":"long","comment":"long value to add to static addresses discovered in DWARF to make it agree with\n Ghidra's imported program.","type_short":"long"}}],"name":"DWARFProgram","comment":"DWARFProgram encapsulates a Program with DWARF specific reference data\n used by DWARFDataTypeImporter and DWARFFunctionImporter, along with some\n helper functions.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DWARF_ROOT_NAME","comment":"","type_short":"String","constant_value":"\"DWARF\""},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_NAME_LENGTH_CUTOFF","comment":"","type_short":"int","constant_value":"2000"},{"type_long":"int","javadoc":"","static":true,"name":"MAX_NAME_LENGTH_CUTOFF","comment":"","type_short":"int","constant_value":"2000"},{"type_long":"int","javadoc":"","static":true,"name":"MIN_NAME_LENGTH_CUTOFF","comment":"","type_short":"int","constant_value":"20"},{"type_long":"int","javadoc":"","static":true,"name":"NAME_HASH_REPLACEMENT_SIZE","comment":"","type_short":"int","constant_value":"12"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ELLIPSES_STR","comment":"","type_short":"String","constant_value":"\"...\""},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","javadoc":"","static":false,"name":"importOptions","comment":"","type_short":"DWARFImportOptions","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","javadoc":"","static":false,"name":"rootDNI","comment":"","type_short":"DWARFNameInfo","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","javadoc":"","static":false,"name":"unCatDataTypeRoot","comment":"","type_short":"DWARFNameInfo","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProvider","javadoc":"","static":false,"name":"sectionProvider","comment":"","type_short":"DWARFSectionProvider","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.StringTable","javadoc":"","static":false,"name":"debugStrings","comment":"","type_short":"StringTable","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit>","javadoc":"","static":false,"name":"compUnits","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit","javadoc":"","static":false,"name":"currentCompUnit","comment":"","type_short":"DWARFCompilationUnit","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFAttributeFactory","javadoc":"","static":false,"name":"attributeFactory","comment":"","type_short":"DWARFAttributeFactory","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"totalDIECount","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"totalAggregateCount","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"foundCrossCURefs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"programBaseAddressFixup","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxDNICacheSize","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.util.datastruct.FixedSizeHashMap<java.lang.Long,ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo>","javadoc":"","static":false,"name":"dniCache","comment":"","type_short":"FixedSizeHashMap","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"nameLengthCutoffSize","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.Map<ghidra.app.util.bin.format.dwarf4.DWARFAttributeSpecification,ghidra.app.util.bin.format.dwarf4.DWARFAttributeSpecification>","javadoc":"","static":false,"name":"attributeSpecIntern","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.app.util.bin.BinaryReader","javadoc":"","static":false,"name":"debugLocation","comment":"","type_short":"BinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.ByteProvider","javadoc":"","static":false,"name":"debugRanges","comment":"","type_short":"ByteProvider","constant_value":null},{"type_long":"ghidra.app.util.bin.BinaryReader","javadoc":"","static":false,"name":"debugInfoBR","comment":"","type_short":"BinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.BinaryReader","javadoc":"","static":false,"name":"debugLineBR","comment":"","type_short":"BinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.BinaryReader","javadoc":"","static":false,"name":"debugAbbrBR","comment":"","type_short":"BinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFRegisterMappings","javadoc":"","static":false,"name":"dwarfRegisterMappings","comment":"","type_short":"DWARFRegisterMappings","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","javadoc":"List of all the currently loaded DIE records.","static":false,"name":"currentDIEs","comment":"List of all the currently loaded DIE records.","type_short":"List","constant_value":null},{"type_long":"java.util.Map<java.lang.Long,ghidra.app.util.bin.format.dwarf4.DebugInfoEntry>","javadoc":"Map of DIE offsets to DIE instances of the elements in {@link #currentDIEs}.","static":false,"name":"offsetMap","comment":"Map of DIE offsets to DIE instances of the elements in #currentDIEs.","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.Long,ghidra.app.util.bin.format.dwarf4.DIEAggregate>","javadoc":"Map of DIE offsets to {@link DIEAggregate} instances.","static":false,"name":"aggregatesByOffset","comment":"Map of DIE offsets to DIEAggregate instances.","type_short":"Map","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DIEAggregate>","javadoc":"List of current {@link DIEAggregate} instances.","static":false,"name":"aggregates","comment":"List of current DIEAggregate instances.","type_short":"List","constant_value":null},{"type_long":"org.apache.commons.collections4.ListValuedMap<java.lang.Long,ghidra.app.util.bin.format.dwarf4.DIEAggregate>","javadoc":"Map of DIE offsets of {@link DIEAggregate}s that are being pointed to by\n other {@link DIEAggregate}s with a DW_AT_type property.\n <p>\n In other words, a map of inbound links to a DIEA.","static":false,"name":"typeReferers","comment":"Map of DIE offsets of DIEAggregates that are being pointed to by\n other DIEAggregates with a DW_AT_type property.\n \n In other words, a map of inbound links to a DIEA.","type_short":"ListValuedMap","constant_value":null}]}
