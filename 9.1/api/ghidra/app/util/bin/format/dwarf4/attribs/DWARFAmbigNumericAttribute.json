{"implements":[],"javadoc":"Stores a integer value (with ambiguous signedness) in a long, with a mask that will\n allow the consumer at a later time to treat the value as signed or unsigned.\n <p>\n When supplied with a long value that was originally a smaller integer with its high-bit\n set, java will sign-extend the value to 64 bits.  To treat this as an unsigned\n value, the mask needs to match the bitwidth of the supplied value, and is used to return \n the relevant number of bits from the value. (See NumberUtil.UNSIGNED_BYTE_MASK, etc)\n <p>\n This allows us to simplify the storage of a variable sized int value \n (1 byte, 2 byte, 4 byte, 8 byte) using just a 8 byte long and an 8 byte mask.","static":false,"extends":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFNumericAttribute","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"},{"type_long":"long","name":"mask","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getUnsignedValue","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"DWARFAmbigNumericAttribute","comment":"Stores a integer value (with ambiguous signedness) in a long, with a mask that will\n allow the consumer at a later time to treat the value as signed or unsigned.\n \n When supplied with a long value that was originally a smaller integer with its high-bit\n set, java will sign-extend the value to 64 bits.  To treat this as an unsigned\n value, the mask needs to match the bitwidth of the supplied value, and is used to return \n the relevant number of bits from the value. (See NumberUtil.UNSIGNED_BYTE_MASK, etc)\n \n This allows us to simplify the storage of a variable sized int value \n (1 byte, 2 byte, 4 byte, 8 byte) using just a 8 byte long and an 8 byte mask.","fields":[{"type_long":"long","javadoc":"","static":false,"name":"mask","comment":"","type_short":"long","constant_value":null}]}
