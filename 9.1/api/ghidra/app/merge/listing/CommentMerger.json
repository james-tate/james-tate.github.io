{"implements":[],"javadoc":"Class for merging comment changes. This class can merge non-conflicting\n comment changes that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then manually merge the conflicting comments.\n <br>Important: This class is intended to be used only for a single program \n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each address with a conflict should have mergeConflicts() called on it.","static":false,"extends":"ghidra.app.merge.listing.AbstractListingMerger","methods":[{"javadoc":"Constructs a comments merger.\n@param listingMergeMgr the listing merge manager that owns this merger.","static":false,"name":"<init>","comment":"Constructs a comments merger.","params":[{"type_long":"ghidra.app.merge.listing.ListingMergeManager","name":"listingMergeMgr","comment":"the listing merge manager that owns this merger.","type_short":"ListingMergeManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getConflictType","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"autoMerge","comment":"","params":[{"type_long":"int","name":"progressMin","comment":"","type_short":"int"},{"type_long":"int","name":"progressMax","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"autoMerge","comment":"","params":[{"type_long":"int","name":"diffType","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressSet","name":"conflictSet","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines if there is a conflict for the indicated type of comment\n at the specified address.\n@param addr\n@param programMergeCommentType\n@return ","static":false,"name":"hasConflict","comment":"Determines if there is a conflict for the indicated type of comment\n at the specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasConflict","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getConflictCount","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setupConflictsPanel","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"programMergeType","comment":"","type_short":"int"},{"type_long":"javax.swing.event.ChangeListener","name":"changeListener","comment":"","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeConflicts","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeConflicts","comment":"","params":[{"type_long":"int","name":"programMergeFilterCommentType","comment":"","type_short":"int"},{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"merge","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"programMergeFilterCommentType","comment":"","type_short":"int"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCodeUnitCommentType","comment":"","params":[{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getMergeCommentType","comment":"","params":[{"type_long":"int","name":"diffCommentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getChoiceForCommentType","comment":"","params":[{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setChoiceForCommentType","comment":"","params":[{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"},{"type_long":"int","name":"choiceForCommentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showMergePanel","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createCheckBoxText","comment":"","params":[{"type_long":"java.lang.String","name":"version","comment":"","type_short":"String"},{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"createButtonText","comment":"","params":[{"type_long":"java.lang.String","name":"version","comment":"","type_short":"String"},{"type_long":"int","name":"programMergeCommentType","comment":"","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the name for the specified comment type.\n@param programMergeCommentType the comment type\n@return the associated name","static":false,"name":"getTypeName","comment":"Returns the name for the specified comment type.","params":[{"type_long":"int","name":"programMergeCommentType","comment":"the comment type","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the associated name","type_short":"String"}},{"javadoc":"","static":false,"name":"getConflicts","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}}],"name":"CommentMerger","comment":"Class for merging comment changes. This class can merge non-conflicting\n comment changes that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then manually merge the conflicting comments.\n Important: This class is intended to be used only for a single program \n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each address with a conflict should have mergeConflicts() called on it.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"COMMENTS_PHASE","comment":"","type_short":"String","constant_value":"\"Comments\""},{"type_long":"int","javadoc":"","static":false,"name":"programMergeType","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictPlate","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictPre","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictEol","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictRepeat","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictPost","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"plateCommentChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"preCommentChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"eolCommentChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"repeatCommentChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"postCommentChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.merge.listing.VerticalChoicesPanel","javadoc":"","static":false,"name":"conflictPanel","comment":"","type_short":"VerticalChoicesPanel","constant_value":null}]}
