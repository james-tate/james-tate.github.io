{"implements":[],"javadoc":"<CODE>VerticalChoicesPanel<\/CODE> is a conflict panel for the Listing Merge.\n It lays out rows of information vertically in a table format. \n Each row can be a header row, an information row, a single choice row, \n or a multiple choice row.\n <BR>Single choice rows provide a radio button and are used when a single \n choice must be made from multiple rows of choices.\n <BR>Multiple choice rows provide a check box and are used when more than one \n choice can be made from multiple rows of choices.\n <BR>Note: Single choice and multiple choice rows are not intended to be \n intermixed on the same panel.\n <BR>A header label can be set. This appears above the row table. The text\n for the header label should be HTML.","static":false,"extends":"ghidra.app.merge.listing.ConflictPanel","methods":[{"javadoc":"Creates an empty <CODE>VerticalChoicesPanel<\/CODE>","static":false,"name":"<init>","comment":"Creates an empty VerticalChoicesPanel","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@param isDoubleBuffered","static":false,"name":"<init>","comment":"","params":[{"type_long":"boolean","name":"isDoubleBuffered","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This sets the text that appears as the border title of this panel.\n@param conflictType the type of conflict being resolved.","static":false,"name":"setTitle","comment":"This sets the text that appears as the border title of this panel.","params":[{"type_long":"java.lang.String","name":"conflictType","comment":"the type of conflict being resolved.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This sets the header text that appears above the table.\n@param text the text","static":false,"name":"setHeader","comment":"This sets the header text that appears above the table.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setRowHeader","comment":"","params":[{"type_long":"java.lang.String[]","name":"items","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"adjustColumnCount","comment":"","params":[{"type_long":"int","name":"numberOfColumns","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the GUI components in order from left to right for the indicated row of the display table.\n@param row the row index (0 based).\n@return the components.","static":false,"name":"getRowComponents","comment":"Gets the GUI components in order from left to right for the indicated row of the display table.","params":[{"type_long":"int","name":"row","comment":"the row index (0 based).","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.JComponent[]","comment":"the components.","type_short":"javax.swing.JComponent[]"}},{"javadoc":"","static":false,"name":"setRowComponent","comment":"","params":[{"type_long":"javax.swing.JComponent","name":"comp","comment":"","type_short":"JComponent"},{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"},{"type_long":"java.awt.Insets","name":"insets","comment":"","type_short":"Insets"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a row with the items in each column. The first item's component is a radio button.\n@param items the text for each column.\n@param name the name for the radio button component.\n@param conflictOption the conflict option value associated with selecting this row's radio button.\n@param listener listener to be notified when the radio button is selected.","static":false,"name":"addRadioButtonRow","comment":"Adds a row with the items in each column. The first item's component is a radio button.","params":[{"type_long":"java.lang.String[]","name":"items","comment":"the text for each column.","type_short":"java.lang.String[]"},{"type_long":"java.lang.String","name":"name","comment":"the name for the radio button component.","type_short":"String"},{"type_long":"int","name":"conflictOption","comment":"the conflict option value associated with selecting this row's radio button.","type_short":"int"},{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"listener to be notified when the radio button is selected.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a row with the items in each column. The first item's component is a check box.\n@param items the text for each column.\n@param name the name for the check box component.\n@param conflictOption the conflict option value associated with selecting this row's check box.\n@param listener listener to be notified when the check box is selected or not selected.","static":false,"name":"addCheckBoxRow","comment":"Adds a row with the items in each column. The first item's component is a check box.","params":[{"type_long":"java.lang.String[]","name":"items","comment":"the text for each column.","type_short":"java.lang.String[]"},{"type_long":"java.lang.String","name":"name","comment":"the name for the check box component.","type_short":"String"},{"type_long":"int","name":"conflictOption","comment":"the conflict option value associated with selecting this row's check box.","type_short":"int"},{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"listener to be notified when the check box is selected or not selected.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a row to the table that doesn't provide any choices. \n Instead this row just provides information.\n@param items the text for each column.","static":false,"name":"addInfoRow","comment":"Adds a row to the table that doesn't provide any choices. \n Instead this row just provides information.","params":[{"type_long":"java.lang.String[]","name":"items","comment":"the text for each column.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes header text for this panel and all table\/row information.\n It also sets the columnCount back to 1.","static":false,"name":"clear","comment":"Removes header text for this panel and all table\/row information.\n It also sets the columnCount back to 1.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets a generic name for a component in the table.\n@param row the row of the table\n@param column the column of the table\n@return the default name of the indicated component in the table.","static":false,"name":"getComponentName","comment":"Gets a generic name for a component in the table.","params":[{"type_long":"int","name":"row","comment":"the row of the table","type_short":"int"},{"type_long":"int","name":"column","comment":"the column of the table","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the default name of the indicated component in the table.","type_short":"String"}},{"javadoc":"Returns true if the user made a selection for every conflict in the table.","static":false,"name":"allChoicesAreResolved","comment":"Returns true if the user made a selection for every conflict in the table.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getNumConflictsResolved","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@return ","static":false,"name":"getSelectedOptions","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param row\n@param i\n@return ","static":false,"name":"getComponent","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.","static":false,"name":"allChoicesAreSame","comment":"Returns true if the user made a selection for every conflict in the table and \n made the same choice for every row.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getUseForAllChoice","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"removeAllListeners","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasChoice","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"VerticalChoicesPanel","comment":"VerticalChoicesPanel is a conflict panel for the Listing Merge.\n It lays out rows of information vertically in a table format. \n Each row can be a header row, an information row, a single choice row, \n or a multiple choice row.\n Single choice rows provide a radio button and are used when a single \n choice must be made from multiple rows of choices.\n Multiple choice rows provide a check box and are used when more than one \n choice can be made from multiple rows of choices.\n Note: Single choice and multiple choice rows are not intended to be \n intermixed on the same panel.\n A header label can be set. This appears above the row table. The text\n for the header label should be HTML.","fields":[{"type_long":"long","javadoc":"","static":true,"name":"serialVersionUID","comment":"","type_short":"long","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"HEADER","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"INFORMATION","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"RADIO_BUTTON","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"CHECK_BOX","comment":"","type_short":"int","constant_value":"3"},{"type_long":"docking.widgets.label.GDHtmlLabel","javadoc":"","static":false,"name":"headerLabel","comment":"","type_short":"GDHtmlLabel","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"rowPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"java.util.ArrayList<java.util.ArrayList<javax.swing.JComponent>>","javadoc":"","static":false,"name":"rowComps","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.ArrayList<java.lang.String[]>","javadoc":"","static":false,"name":"rows","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"ghidra.util.datastruct.LongArrayList","javadoc":"","static":false,"name":"rowTypes","comment":"","type_short":"LongArrayList","constant_value":null},{"type_long":"javax.swing.ButtonGroup","javadoc":"","static":false,"name":"group","comment":"","type_short":"ButtonGroup","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"columnCount","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.util.layout.MaximizeSpecificColumnGridLayout","javadoc":"","static":false,"name":"layout","comment":"","type_short":"MaximizeSpecificColumnGridLayout","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"indent","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_TOP","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_LEFT","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_BOTTOM","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_RIGHT","comment":"","type_short":"int","constant_value":"4"},{"type_long":"java.awt.Insets","javadoc":"","static":false,"name":"defaultInsets","comment":"","type_short":"Insets","constant_value":null},{"type_long":"java.awt.Insets","javadoc":"","static":false,"name":"textVsButtonInsets","comment":"","type_short":"Insets","constant_value":null},{"type_long":"java.awt.Insets","javadoc":"","static":false,"name":"textVsCheckBoxInsets","comment":"","type_short":"Insets","constant_value":null}]}
