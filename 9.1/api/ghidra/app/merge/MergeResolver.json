{"implements":[],"javadoc":"Interface for resolving domain object merge conflicts.","static":false,"methods":[{"javadoc":"Get the name of this MergeResolver.","static":false,"name":"getName","comment":"Get the name of this MergeResolver.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the description of what this MergeResolver does.","static":false,"name":"getDescription","comment":"Get the description of what this MergeResolver does.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Notification that the apply button was hit.","static":false,"name":"apply","comment":"Notification that the apply button was hit.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the merge process was canceled.","static":false,"name":"cancel","comment":"Notification that the merge process was canceled.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Perform the merge process.\n@param monitor monitor that allows the user to cancel the merge\n operation\n@throws Exception if the merge encounters an error and the merge process\n should not continue.","static":false,"name":"merge","comment":"Perform the merge process.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor that allows the user to cancel the merge\n operation","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.lang.Exception","comment":"if the merge encounters an error and the merge process\n should not continue.","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets identifiers for the merge phases handled by this MergeResolver.\n If the merge has no sub-phases then return an array with a single string array. \n Each inner String array indicates a path for a single merge phase.\n Each outer array element represents a phase whose progress we wish to indicate.\n <br>Examples:\n <br>So for a simple phase which has no sub-phases return \n <code>\n new String[][] {new String[] {\"Phase A\"}}\n <\/code>\n <br>So for a phase with 2 sub-phases return \n <code>\n new String[][] { new String[] {\"Phase A\"}, \n                  new String[] {\"Phase A\", \"Sub-Phase 1},\n                  new String[] {\"Phase A\", \"Sub-Phase 2} }\n <\/code>.\n@return an array of phases.","static":false,"name":"getPhases","comment":"Gets identifiers for the merge phases handled by this MergeResolver.\n If the merge has no sub-phases then return an array with a single string array. \n Each inner String array indicates a path for a single merge phase.\n Each outer array element represents a phase whose progress we wish to indicate.\n Examples:\n So for a simple phase which has no sub-phases return \n \n new String[][] {new String[] {\"Phase A\"}}\n \n So for a phase with 2 sub-phases return \n \n new String[][] { new String[] {\"Phase A\"}, \n                  new String[] {\"Phase A\", \"Sub-Phase 1},\n                  new String[] {\"Phase A\", \"Sub-Phase 2} }\n .","params":[],"throws":[],"return":{"type_long":"java.lang.String[][]","comment":"an array of phases.","type_short":"java.lang.String[][]"}}],"name":"MergeResolver","comment":"Interface for resolving domain object merge conflicts.","fields":[]}
