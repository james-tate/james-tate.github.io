{"implements":["ghidra.framework.data.DomainObjectMergeManager"],"javadoc":"Top level object that manages each step of the merge\/resolve conflicts\n process.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"resultDomainObject","comment":"","type_short":"UndoableDomainObject"},{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"myDomainObject","comment":"","type_short":"UndoableDomainObject"},{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"originalDomainObject","comment":"","type_short":"UndoableDomainObject"},{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"latestDomainObject","comment":"","type_short":"UndoableDomainObject"},{"type_long":"ghidra.program.model.listing.DomainObjectChangeSet","name":"latestChangeSet","comment":"","type_short":"DomainObjectChangeSet"},{"type_long":"ghidra.program.model.listing.DomainObjectChangeSet","name":"myChangeSet","comment":"","type_short":"DomainObjectChangeSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createMergeResolvers","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns one of the four programs involved in the merge as indicated by the version.\n@param version the program version to return. (LATEST, MY, ORIGINAL, or RESULT).\n@return the indicated program version or null if a valid version isn't specified.\n@see MergeConstants","static":false,"name":"getDomainObject","comment":"Returns one of the four programs involved in the merge as indicated by the version.","params":[{"type_long":"int","name":"version","comment":"the program version to return. (LATEST, MY, ORIGINAL, or RESULT).","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.framework.model.UndoableDomainObject","comment":"the indicated program version or null if a valid version isn't specified.","type_short":"UndoableDomainObject"}},{"javadoc":"","static":false,"name":"merge","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"taskMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createMergeManagerPlugin","comment":"","params":[{"type_long":"ghidra.framework.plugintool.ModalPluginTool","name":"mergePluginTool","comment":"","type_short":"ModalPluginTool"},{"type_long":"ghidra.app.merge.MergeManager","name":"multiUserMergeManager","comment":"","type_short":"MergeManager"},{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"modifiableDomainObject","comment":"","type_short":"UndoableDomainObject"}],"throws":[],"return":{"type_long":"ghidra.app.merge.MergeManagerPlugin","comment":"","type_short":"MergeManagerPlugin"}},{"javadoc":"","static":false,"name":"initializeMerge","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cleanupMerge","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPreferredMergeToolSize","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"Convenience method for Junit tests.","static":false,"name":"merge","comment":"Convenience method for Junit tests.","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Enable the apply button according to the \"enabled\" parameter.","static":false,"name":"setApplyEnabled","comment":"Enable the apply button according to the \"enabled\" parameter.","params":[{"type_long":"boolean","name":"enabled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear the status text on the merge dialog.","static":false,"name":"clearStatusText","comment":"Clear the status text on the merge dialog.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the status text on the merge dialog.","static":false,"name":"setStatusText","comment":"Set the status text on the merge dialog.","params":[{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Show the default merge panel. The default merge panel now shows the status of each phase\n of the merge and also the progress in the current phase.\n@param description description of current merge process near the top of the merge tool.","static":false,"name":"showDefaultMergePanel","comment":"Show the default merge panel. The default merge panel now shows the status of each phase\n of the merge and also the progress in the current phase.","params":[{"type_long":"java.lang.String","name":"description","comment":"description of current merge process near the top of the merge tool.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Show the component that is used to resolve conflicts. This method\n is called by the MergeResolvers when user input is required. If the\n component is not null, this method blocks until the user either \n cancels the merge process or resolves a conflict. If comp is null,\n then the default component is displayed, and the method does not\n wait for user input.\n@param comp component to show; if component is null, show the \n default component and do not block\n@param componentID id or name for the component","static":false,"name":"showComponent","comment":"Show the component that is used to resolve conflicts. This method\n is called by the MergeResolvers when user input is required. If the\n component is not null, this method blocks until the user either \n cancels the merge process or resolves a conflict. If comp is null,\n then the default component is displayed, and the method does not\n wait for user input.","params":[{"type_long":"javax.swing.JComponent","name":"comp","comment":"component to show; if component is null, show the \n default component and do not block","type_short":"JComponent"},{"type_long":"java.lang.String","name":"componentID","comment":"id or name for the component","type_short":"String"},{"type_long":"ghidra.util.HelpLocation","name":"helpLoc","comment":"","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the component that is used to resolve conflicts. This method\n is called by the MergeResolvers when user input is no longer required\n using the specified component.\n@param comp component to show; if component is null, show the \n default component and do not block","static":false,"name":"removeComponent","comment":"Removes the component that is used to resolve conflicts. This method\n is called by the MergeResolvers when user input is no longer required\n using the specified component.","params":[{"type_long":"javax.swing.JComponent","name":"comp","comment":"component to show; if component is null, show the \n default component and do not block","type_short":"JComponent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showMergeTool","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows\/hides the monitor component at the bottom of the merge tool.\n@param show true means to show the task monitor at the bottom of the merge tool.","static":false,"name":"showMonitorComponent","comment":"Shows\/hides the monitor component at the bottom of the merge tool.","params":[{"type_long":"boolean","name":"show","comment":"true means to show the task monitor at the bottom of the merge tool.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows\/hides the progress icon (spinning globe) at the bottom of the merge tool.\n@param show true means to show the icon.","static":false,"name":"showProgressIcon","comment":"Shows\/hides the progress icon (spinning globe) at the bottom of the merge tool.","params":[{"type_long":"boolean","name":"show","comment":"true means to show the icon.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines whether or not the user is being prompted to resolve a conflict.\n@return true if the user is being prompted for input.","static":false,"name":"isPromptingUser","comment":"Determines whether or not the user is being prompted to resolve a conflict.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the user is being prompted for input.","type_short":"boolean"}},{"javadoc":"Return whether the merge process has completed. (Needed for Junit testing\n only.)","static":false,"name":"processingCompleted","comment":"Return whether the merge process has completed. (Needed for Junit testing\n only.)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Called from the dialog when the \"Apply\" button is hit; call the \n current MergeResolver's apply() method, and wake up the merge\n thread waiting on user input.","static":false,"name":"apply","comment":"Called from the dialog when the \"Apply\" button is hit; call the \n current MergeResolver's apply() method, and wake up the merge\n thread waiting on user input.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called from the dialog when the \"Cancel\" button is hit; call the \n current MergeResolver's cancel() method, and wake up the merge\n thread waiting on user input.","static":false,"name":"cancel","comment":"Called from the dialog when the \"Cancel\" button is hit; call the \n current MergeResolver's cancel() method, and wake up the merge\n thread waiting on user input.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedule the next MergeResolver thread to run.","static":false,"name":"scheduleMerge","comment":"Schedule the next MergeResolver thread to run.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Block until the user completes the current merge operation, or \n cancels the merge process.","static":false,"name":"waitForInput","comment":"Block until the user completes the current merge operation, or \n cancels the merge process.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called when all conflicts have been resolved, or the merge\n process was canceled; dismisses the merge tool which\n unblocks the initial merge thread.","static":false,"name":"conflictsResolveCompleted","comment":"Called when all conflicts have been resolved, or the merge\n process was canceled; dismisses the merge tool which\n unblocks the initial merge thread.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the resolve information object for the indicated standardized name.\n This is how information is passed between merge managers.\n <br>For example:\n <br>the data type merger knows what data type in the result is equivalent \n to a given data type from my checked out program. The code unit and\n function mergers need to be able to get this information so they\n don't unknowingly re-introduce a data type that was already eliminated\n by a data type conflict.\n@param infoType the string indicating the type of resolve information\n@return the object for the named string or null","static":false,"name":"getResolveInformation","comment":"Gets the resolve information object for the indicated standardized name.\n This is how information is passed between merge managers.\n For example:\n the data type merger knows what data type in the result is equivalent \n to a given data type from my checked out program. The code unit and\n function mergers need to be able to get this information so they\n don't unknowingly re-introduce a data type that was already eliminated\n by a data type conflict.","params":[{"type_long":"java.lang.String","name":"infoType","comment":"the string indicating the type of resolve information","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the object for the named string or null","type_short":"Object"}},{"javadoc":"Sets the resolve information object for the indicated standardized name.\n This is how information is passed between merge managers.\n@param infoType the string indicating the type of resolve information\n@param infoObject the object for the named string. This information is\n determined by the merge manager that creates it.\n@see getResolveInformation(String)","static":false,"name":"setResolveInformation","comment":"Sets the resolve information object for the indicated standardized name.\n This is how information is passed between merge managers.","params":[{"type_long":"java.lang.String","name":"infoType","comment":"the string indicating the type of resolve information","type_short":"String"},{"type_long":"java.lang.Object","name":"infoObject","comment":"the object for the named string. This information is\n determined by the merge manager that creates it.","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the named merge resolver from the ones used directly by the MergeManager.\n@param name the name of the desired merge resolver\n@return the merge resolver or null.","static":false,"name":"getMergeResolverByName","comment":"Returns the named merge resolver from the ones used directly by the MergeManager.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the desired merge resolver","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.merge.MergeResolver","comment":"the merge resolver or null.","type_short":"MergeResolver"}},{"javadoc":"For Junit tests\n@return the merge tool","static":false,"name":"getMergeTool","comment":"For Junit tests","params":[],"throws":[],"return":{"type_long":"ghidra.framework.plugintool.PluginTool","comment":"the merge tool","type_short":"PluginTool"}},{"javadoc":"Determines if the modal merge tool is currently displayed on the screen.\n@return true if the merge tool is displayed.","static":false,"name":"isMergeToolVisible","comment":"Determines if the modal merge tool is currently displayed on the screen.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the merge tool is displayed.","type_short":"boolean"}},{"javadoc":"gets the default merge progress panel that indicates all the phases and their current status.\n@return the merge panel that indicates progress.","static":false,"name":"getMergeProgressPanel","comment":"gets the default merge progress panel that indicates all the phases and their current status.","params":[],"throws":[],"return":{"type_long":"ghidra.app.merge.MergeProgressPanel","comment":"the merge panel that indicates progress.","type_short":"MergeProgressPanel"}},{"javadoc":"Gets the TaskMonitor component that is displayed at the bottom of the merge tool.\n@return the task monitor component.","static":false,"name":"getMonitorComponent","comment":"Gets the TaskMonitor component that is displayed at the bottom of the merge tool.","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"the task monitor component.","type_short":"JComponent"}},{"javadoc":"Updates the current phase progress area in the default merge panel.\n@param currentProgressPercentage the progress percentage completed for the current phase.\n This should be a value from 0 to 100.\n@param progressMessage a message indicating what is currently occurring in this phase.\n Null indicates to use the default message.","static":false,"name":"updateProgress","comment":"Updates the current phase progress area in the default merge panel.","params":[{"type_long":"java.lang.String","name":"description","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the current phase progress area in the default merge panel.\n@param currentProgressPercentage the progress percentage completed for the current phase.\n This should be a value from 0 to 100.","static":false,"name":"updateProgress","comment":"Updates the current phase progress area in the default merge panel.","params":[{"type_long":"int","name":"currentProgressPercentage","comment":"the progress percentage completed for the current phase.\n This should be a value from 0 to 100.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the current phase progress area in the default merge panel.\n@param currentProgressPercentage the progress percentage completed for the current phase.\n This should be a value from 0 to 100.\n@param progressMessage a message indicating what is currently occurring in this phase.","static":false,"name":"updateProgress","comment":"Updates the current phase progress area in the default merge panel.","params":[{"type_long":"int","name":"currentProgressPercentage","comment":"the progress percentage completed for the current phase.\n This should be a value from 0 to 100.","type_short":"int"},{"type_long":"java.lang.String","name":"progressMessage","comment":"a message indicating what is currently occurring in this phase.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The manager (MergeResolver) for a particular merge phase should call this when its phase or sub-phase begins.\n The string array should match one that the returned by MergeResolver.getPhases().\n@param mergePhase identifier for the merge phase to change to in progress status.\n@see MergeResolver","static":false,"name":"setInProgress","comment":"The manager (MergeResolver) for a particular merge phase should call this when its phase or sub-phase begins.\n The string array should match one that the returned by MergeResolver.getPhases().","params":[{"type_long":"java.lang.String[]","name":"mergePhase","comment":"identifier for the merge phase to change to in progress status.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The manager (MergeResolver) for a particular merge phase should call this when its phase or sub-phase completes.\n The string array should match one that the returned by MergeResolver.getPhases().\n@param mergePhase identifier for the merge phase to change to completed status.\n@see MergeResolver","static":false,"name":"setCompleted","comment":"The manager (MergeResolver) for a particular merge phase should call this when its phase or sub-phase completes.\n The string array should match one that the returned by MergeResolver.getPhases().","params":[{"type_long":"java.lang.String[]","name":"mergePhase","comment":"identifier for the merge phase to change to completed status.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MergeManager","comment":"Top level object that manages each step of the merge\/resolve conflicts\n process.","fields":[{"type_long":"ghidra.app.merge.MergeResolver[]","javadoc":"","static":false,"name":"mergeResolvers","comment":"","type_short":"ghidra.app.merge.MergeResolver[]","constant_value":null},{"type_long":"ghidra.framework.model.UndoableDomainObject","javadoc":"","static":false,"name":"resultDomainObject","comment":"","type_short":"UndoableDomainObject","constant_value":null},{"type_long":"ghidra.framework.model.UndoableDomainObject","javadoc":"","static":false,"name":"myDomainObject","comment":"","type_short":"UndoableDomainObject","constant_value":null},{"type_long":"ghidra.framework.model.UndoableDomainObject","javadoc":"","static":false,"name":"originalDomainObject","comment":"","type_short":"UndoableDomainObject","constant_value":null},{"type_long":"ghidra.framework.model.UndoableDomainObject","javadoc":"","static":false,"name":"latestDomainObject","comment":"","type_short":"UndoableDomainObject","constant_value":null},{"type_long":"ghidra.program.model.listing.DomainObjectChangeSet","javadoc":"","static":false,"name":"latestChangeSet","comment":"","type_short":"DomainObjectChangeSet","constant_value":null},{"type_long":"ghidra.program.model.listing.DomainObjectChangeSet","javadoc":"","static":false,"name":"myChangeSet","comment":"","type_short":"DomainObjectChangeSet","constant_value":null},{"type_long":"ghidra.app.merge.MergeManagerPlugin","javadoc":"","static":false,"name":"mergePlugin","comment":"","type_short":"MergeManagerPlugin","constant_value":null},{"type_long":"ghidra.util.task.RunManager","javadoc":"","static":false,"name":"runManager","comment":"","type_short":"RunManager","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"mergeMonitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isCancelled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"currentIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"inputReceived","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"mergeStatus","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"prompting","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"mergeCompleted","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"mergeToolIsVisible","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.framework.plugintool.ModalPluginTool","javadoc":"","static":false,"name":"mergeTool","comment":"","type_short":"ModalPluginTool","constant_value":null},{"type_long":"java.util.Hashtable<java.lang.String,java.lang.Object>","javadoc":"","static":false,"name":"resolveMap","comment":"","type_short":"Hashtable","constant_value":null},{"type_long":"ghidra.app.merge.MergeProgressPanel","javadoc":"","static":false,"name":"mergeProgressPanel","comment":"","type_short":"MergeProgressPanel","constant_value":null}]}
