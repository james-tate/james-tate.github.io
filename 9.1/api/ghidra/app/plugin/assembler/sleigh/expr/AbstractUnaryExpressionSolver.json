{"implements":[],"javadoc":"A solver that handles expressions of the form [OP]A\n@param <T> the type of expression solved (the operator)","static":false,"extends":"ghidra.app.plugin.assembler.sleigh.expr.AbstractExpressionSolver","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.Class<T>","name":"tcls","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"solve","comment":"","params":[{"type_long":"T","name":"exp","comment":"","type_short":"T"},{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","name":"goal","comment":"","type_short":"MaskedLong"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"vals","comment":"","type_short":"Map"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"","type_short":"Map"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"cur","comment":"","type_short":"AssemblyResolvedConstructor"},{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.expr.SolverHint>","name":"hints","comment":"","type_short":"Set"},{"type_long":"java.lang.String","name":"description","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException","comment":"","type_short":"NeedsBackfillException"}],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution","comment":"","type_short":"AssemblyResolution"}},{"javadoc":"","static":false,"name":"getValue","comment":"","params":[{"type_long":"T","name":"exp","comment":"","type_short":"T"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"vals","comment":"","type_short":"Map"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"","type_short":"Map"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"cur","comment":"","type_short":"AssemblyResolvedConstructor"}],"throws":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException","comment":"","type_short":"NeedsBackfillException"}],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"","type_short":"MaskedLong"}},{"javadoc":"Compute the input value given that the result is known\n@note Assumes an involution by default\n@param goal the result\n@return the input value solution","static":false,"name":"computeInverse","comment":"Compute the input value given that the result is known","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","name":"goal","comment":"the result","type_short":"MaskedLong"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"the input value solution","type_short":"MaskedLong"}},{"javadoc":"Compute the result of applying the operator to the given value\n@param val the input value\n@return the result","static":false,"name":"compute","comment":"Compute the result of applying the operator to the given value","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","name":"val","comment":"the input value","type_short":"MaskedLong"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"the result","type_short":"MaskedLong"}},{"javadoc":"","static":false,"name":"getInstructionLength","comment":"","params":[{"type_long":"T","name":"exp","comment":"","type_short":"T"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"valueForResolution","comment":"","params":[{"type_long":"T","name":"exp","comment":"","type_short":"T"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"rc","comment":"","type_short":"AssemblyResolvedConstructor"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"","type_short":"MaskedLong"}}],"name":"AbstractUnaryExpressionSolver","comment":"A solver that handles expressions of the form [OP]A","fields":[]}
