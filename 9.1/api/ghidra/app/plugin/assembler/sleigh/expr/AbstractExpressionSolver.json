{"implements":[],"javadoc":"The root type of an expression solver\n@param <T> the type of expression solved (the operator)","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a solver that can solve expression of the given type\n@param tcls the type of expressions it can solve","static":false,"name":"<init>","comment":"Construct a solver that can solve expression of the given type","params":[{"type_long":"java.lang.Class<T>","name":"tcls","comment":"the type of expressions it can solve","type_short":"Class"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempt to solve an expression for a given value\n@param exp the expression to solve\n@param goal the desired value of the expression\n@param vals values of defined symbols\n@param res the results of subconstructor resolutions (used for lengths)\n@param hints describes techniques applied by calling solvers\n@param description the description to give to resolved solutions\n@return the resolution\n@throws NeedsBackfillException if the expression refers to an undefined symbol","static":false,"name":"solve","comment":"Attempt to solve an expression for a given value","params":[{"type_long":"T","name":"exp","comment":"the expression to solve","type_short":"T"},{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","name":"goal","comment":"the desired value of the expression","type_short":"MaskedLong"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"vals","comment":"values of defined symbols","type_short":"Map"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"the results of subconstructor resolutions (used for lengths)","type_short":"Map"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"cur","comment":"","type_short":"AssemblyResolvedConstructor"},{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.expr.SolverHint>","name":"hints","comment":"describes techniques applied by calling solvers","type_short":"Set"},{"type_long":"java.lang.String","name":"description","comment":"the description to give to resolved solutions","type_short":"String"}],"throws":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException","comment":"if the expression refers to an undefined symbol","type_short":"NeedsBackfillException"}],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution","comment":"the resolution","type_short":"AssemblyResolution"}},{"javadoc":"Attempt to get a constant value for the expression\n@param exp the expression\n@param vals values of defined symbols\n@param res the results of subconstructor resolutions (used for lengths)\n@return the constant value, or null if it depends on a variable\n@throws NeedsBackfillException if the expression refers to an undefined symbol","static":false,"name":"getValue","comment":"Attempt to get a constant value for the expression","params":[{"type_long":"T","name":"exp","comment":"the expression","type_short":"T"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"vals","comment":"values of defined symbols","type_short":"Map"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"the results of subconstructor resolutions (used for lengths)","type_short":"Map"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"cur","comment":"","type_short":"AssemblyResolvedConstructor"}],"throws":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException","comment":"if the expression refers to an undefined symbol","type_short":"NeedsBackfillException"}],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"the constant value, or null if it depends on a variable","type_short":"MaskedLong"}},{"javadoc":"Determines the length of the subconstructor that would be returned had the expression not\n depended on an undefined symbol.\n \n This is used by the backfilling process to ensure values are written to the correct offset\n@param exp the expression\n@param res the results of subconstructor resolutions (used for lengths)\n@return the length of filled in token field(s).","static":false,"name":"getInstructionLength","comment":"Determines the length of the subconstructor that would be returned had the expression not\n depended on an undefined symbol.\n \n This is used by the backfilling process to ensure values are written to the correct offset","params":[{"type_long":"T","name":"exp","comment":"the expression","type_short":"T"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"the results of subconstructor resolutions (used for lengths)","type_short":"Map"}],"throws":[],"return":{"type_long":"int","comment":"the length of filled in token field(s).","type_short":"int"}},{"javadoc":"Compute the value of the expression given the (possibly-intermediate) resolution\n@param exp the expression to evaluate\n@param rc the resolution on which to evaluate it\n@return the result","static":false,"name":"valueForResolution","comment":"Compute the value of the expression given the (possibly-intermediate) resolution","params":[{"type_long":"T","name":"exp","comment":"the expression to evaluate","type_short":"T"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"rc","comment":"the resolution on which to evaluate it","type_short":"AssemblyResolvedConstructor"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"the result","type_short":"MaskedLong"}},{"javadoc":"Register this particular solver with the general expression solver\n@param general the general solver","static":false,"name":"register","comment":"Register this particular solver with the general expression solver","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver","name":"general","comment":"the general solver","type_short":"RecursiveDescentSolver"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AbstractExpressionSolver","comment":"The root type of an expression solver","fields":[{"type_long":"java.lang.Class<T>","javadoc":"","static":false,"name":"tcls","comment":"","type_short":"Class","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver","javadoc":"","static":false,"name":"solver","comment":"","type_short":"RecursiveDescentSolver","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.util.DbgTimer","javadoc":"","static":false,"name":"dbg","comment":"","type_short":"DbgTimer","constant_value":null}]}
