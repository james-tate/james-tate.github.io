{"implements":["java.lang.AutoCloseable"],"javadoc":"A convenience context for transaction IDs on a Ghidra program database\n \n This is meant to be used idiomatically, as in a try-with-resources block:\n \n <pre>\n {@code\n try (GhidraDBTransaction t = new GhidraDBTransaction(program, \"Demo\")) {\n     program.getMemory().....\n     t.commit();\n }\n }\n <\/pre>\n \n This idiom is very useful if there is complex logic in your transaction, it's very easy to\n forget to close the transaction, especially if an error occurs, leaving the database in an open\n transaction indefinitely. Try try-with-resources block will ensure that the transaction is\n closed in all circumstances. Note, however, that in order for the transaction to be committed,\n you must call {@link #commit()}.\n \n Any exceptions within the block will cause {@code t.commit()} to be skipped, thus aborting the\n transaction.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Start a transaction on the given program with the given description\n@param program the program to modify\n@param description a description of the transaction","static":false,"name":"<init>","comment":"Start a transaction on the given program with the given description","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to modify","type_short":"Program"},{"type_long":"java.lang.String","name":"description","comment":"a description of the transaction","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Finish the transaction\n \n If this is called before {@link #commit()}, then the transaction is aborted. This is called\n automatically at the close of a try-with-resources block.","static":false,"name":"close","comment":"Finish the transaction\n \n If this is called before #commit(), then the transaction is aborted. This is called\n automatically at the close of a try-with-resources block.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Finish the transaction, and commit\n \n This MUST be called in order to commit the transaction. The transaction is immediately\n closed, and any further modifications to the database will likely result in an error.","static":false,"name":"commit","comment":"Finish the transaction, and commit\n \n This MUST be called in order to commit the transaction. The transaction is immediately\n closed, and any further modifications to the database will likely result in an error.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GhidraDBTransaction","comment":"A convenience context for transaction IDs on a Ghidra program database\n \n This is meant to be used idiomatically, as in a try-with-resources block:\n \n \n \n \n \n This idiom is very useful if there is complex logic in your transaction, it's very easy to\n forget to close the transaction, especially if an error occurs, leaving the database in an open\n transaction indefinitely. Try try-with-resources block will ensure that the transaction is\n closed in all circumstances. Note, however, that in order for the transaction to be committed,\n you must call #commit().\n \n Any exceptions within the block will cause  to be skipped, thus aborting the\n transaction.","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"tid","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"open","comment":"","type_short":"boolean","constant_value":null}]}
