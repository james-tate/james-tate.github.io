{"implements":[],"javadoc":"Defines a context free grammar, used to parse mnemonic assembly instructions\n \n This stores the CFG and the associated semantics for each production. It also has mechanisms for\n tracking \"purely recursive\" productions. These are productions of the form I => I, and they\n necessarily create ambiguity. Thus, when constructing a parser, it is useful to identify them\n early.","static":false,"extends":"ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyGrammar","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"newProduction","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal","name":"lhs","comment":"","type_short":"AssemblyNonTerminal"},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal>","name":"rhs","comment":"","type_short":"AssemblySentential"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction","comment":"","type_short":"AssemblyProduction"}},{"javadoc":"","static":false,"name":"addProduction","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction","name":"prod","comment":"","type_short":"AssemblyProduction"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a production associated with a SLEIGH constructor semantic\n@param lhs the left-hand side\n@param rhs the right-hand side\n@param pattern the pattern associated with the constructor\n@param cons the SLEIGH constructor\n@param indices the indices of RHS non-terminals that represent an operand in the constructor","static":false,"name":"addProduction","comment":"Add a production associated with a SLEIGH constructor semantic","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal","name":"lhs","comment":"the left-hand side","type_short":"AssemblyNonTerminal"},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal>","name":"rhs","comment":"the right-hand side","type_short":"AssemblySentential"},{"type_long":"ghidra.app.plugin.processors.sleigh.pattern.DisjointPattern","name":"pattern","comment":"the pattern associated with the constructor","type_short":"DisjointPattern"},{"type_long":"ghidra.app.plugin.processors.sleigh.Constructor","name":"cons","comment":"the SLEIGH constructor","type_short":"Constructor"},{"type_long":"java.util.List<java.lang.Integer>","name":"indices","comment":"the indices of RHS non-terminals that represent an operand in the constructor","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the semantics associated with a given production\n@param prod the production\n@return all semantics associated with the given production","static":false,"name":"getSemantics","comment":"Get the semantics associated with a given production","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction","name":"prod","comment":"the production","type_short":"AssemblyProduction"}],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.app.plugin.assembler.sleigh.sem.AssemblyConstructorSemantic>","comment":"all semantics associated with the given production","type_short":"Collection"}},{"javadoc":"","static":false,"name":"combine","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyGrammar<ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal,ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction>","name":"that","comment":"","type_short":"AbstractAssemblyGrammar"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get all productions in the grammar that are purely recursive\n@return ","static":false,"name":"getPureRecursive","comment":"Get all productions in the grammar that are purely recursive","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction>","comment":"","type_short":"Collection"}},{"javadoc":"Obtain, if present, the purely recursive production having the given LHS\n@param lhs the left-hand side\n@return the desired production, or null","static":false,"name":"getPureRecursion","comment":"Obtain, if present, the purely recursive production having the given LHS","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyNonTerminal","name":"lhs","comment":"the left-hand side","type_short":"AssemblyNonTerminal"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction","comment":"the desired production, or null","type_short":"AssemblyProduction"}}],"name":"AssemblyGrammar","comment":"Defines a context free grammar, used to parse mnemonic assembly instructions\n \n This stores the CFG and the associated semantics for each production. It also has mechanisms for\n tracking \"purely recursive\" productions. These are productions of the form I = I, and they\n necessarily create ambiguity. Thus, when constructing a parser, it is useful to identify them\n early.","fields":[{"type_long":"java.util.Map<ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction,java.util.Map<ghidra.app.plugin.processors.sleigh.Constructor,ghidra.app.plugin.assembler.sleigh.sem.AssemblyConstructorSemantic>>","javadoc":"","static":false,"name":"semantics","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.app.plugin.assembler.sleigh.grammars.AssemblyProduction>","javadoc":"","static":false,"name":"pureRecursive","comment":"","type_short":"Map","constant_value":null}]}
