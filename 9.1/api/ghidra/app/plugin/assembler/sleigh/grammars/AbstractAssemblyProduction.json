{"implements":["java.lang.Comparable"],"javadoc":"Defines a production in a context-free grammar, usually for parsing mnemonic assembly\n@see AbstractAssemblyGrammar\n@param <NT> the type of non-terminals\n@param <T> the type of terminals","static":false,"extends":"org.apache.commons.collections4.list.AbstractListDecorator","methods":[{"javadoc":"Construct a production with the given LHS and RHS\n@param lhs the left-hand side\n@param rhs the right-hand side","static":false,"name":"<init>","comment":"Construct a production with the given LHS and RHS","params":[{"type_long":"NT","name":"lhs","comment":"the left-hand side","type_short":"NT"},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","name":"rhs","comment":"the right-hand side","type_short":"AssemblySentential"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"decorated","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol>","comment":"","type_short":"List"}},{"javadoc":"Get the index of the production\n \n Instead of using deep comparison, the index is often used as the identify of the production\n within a grammar.\n@return the index","static":false,"name":"getIndex","comment":"Get the index of the production\n \n Instead of using deep comparison, the index is often used as the identify of the production\n within a grammar.","params":[],"throws":[],"return":{"type_long":"int","comment":"the index","type_short":"int"}},{"javadoc":"Get the left-hand side\n@return the LHS","static":false,"name":"getLHS","comment":"Get the left-hand side","params":[],"throws":[],"return":{"type_long":"NT","comment":"the LHS","type_short":"NT"}},{"javadoc":"Get the right-hand side\n@return the RHS","static":false,"name":"getRHS","comment":"Get the right-hand side","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","comment":"the RHS","type_short":"AssemblySentential"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"that","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AbstractAssemblyProduction<NT>","name":"that","comment":"","type_short":"AbstractAssemblyProduction"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"subList","comment":"","params":[{"type_long":"int","name":"fromIndex","comment":"","type_short":"int"},{"type_long":"int","name":"toIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","comment":"","type_short":"AssemblySentential"}},{"javadoc":"Get the \"name\" of this production\n \n This is mostly just notional and for debugging. The name is taken as the name of the LHS.\n@return the name of the LHS","static":false,"name":"getName","comment":"Get the \"name\" of this production\n \n This is mostly just notional and for debugging. The name is taken as the name of the LHS.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the LHS","type_short":"String"}}],"name":"AbstractAssemblyProduction","comment":"Defines a production in a context-free grammar, usually for parsing mnemonic assembly","fields":[{"type_long":"NT","javadoc":"","static":false,"name":"lhs","comment":"","type_short":"NT","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","javadoc":"","static":false,"name":"rhs","comment":"","type_short":"AssemblySentential","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"idx","comment":"","type_short":"int","constant_value":null}]}
