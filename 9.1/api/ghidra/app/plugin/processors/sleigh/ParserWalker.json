{"implements":[],"javadoc":"Class for walking the Sleigh Parser tree.  The nodes of the tree are the Sleigh Constructors arranged for a particular\n instruction.  This tree is walked for various purposes:\n <ul>\n     <li>SleighInstructionPrototype.resolve        - initial parsing of instruction and building the tree\n     <li>SleighInstructionPrototype.resolveHandles - filling in Varnode values for all the Constructor exports\n     <li>PcodeEmit                                 - for weaving together p-code for an instruction\n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","name":"c","comment":"","type_short":"SleighParserContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"For use with pcode cross-build\n@param c\n@param nextAddr","static":false,"name":"<init>","comment":"For use with pcode cross-build","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","name":"c","comment":"","type_short":"SleighParserContext"},{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","name":"cross","comment":"","type_short":"SleighParserContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getParserContext","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","comment":"","type_short":"SleighParserContext"}},{"javadoc":"Initialize a walk of the tree","static":false,"name":"baseState","comment":"Initialize a walk of the tree","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"subTreeState","comment":"","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.ConstructState","name":"subtree","comment":"","type_short":"ConstructState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create state suitable for parsing a just a p-code semantics snippet","static":false,"name":"snippetState","comment":"Create state suitable for parsing a just a p-code semantics snippet","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Are we at the end of the tree walk\n@return true if there is more walk to go","static":false,"name":"isState","comment":"Are we at the end of the tree walk","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there is more walk to go","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getState","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.ConstructState","comment":"","type_short":"ConstructState"}},{"javadoc":"Move down to a particular child of the current node.  Store what would be the next sibling to walk\n@param i is the index of the desired child","static":false,"name":"pushOperand","comment":"Move down to a particular child of the current node.  Store what would be the next sibling to walk","params":[{"type_long":"int","name":"i","comment":"is the index of the desired child","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"allocateOperand","comment":"","params":[],"throws":[{"type_long":"ghidra.program.model.lang.UnknownInstructionException","comment":"","type_short":"UnknownInstructionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move to the parent of the current node","static":false,"name":"popOperand","comment":"Move to the parent of the current node","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find the next child that needs to be traversed\n@return the index of the child","static":false,"name":"getOperand","comment":"Find the next child that needs to be traversed","params":[],"throws":[],"return":{"type_long":"int","comment":"the index of the child","type_short":"int"}},{"javadoc":"","static":false,"name":"getFixedHandle","comment":"","params":[{"type_long":"int","name":"i","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.FixedHandle","comment":"","type_short":"FixedHandle"}},{"javadoc":"","static":false,"name":"getParentHandle","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.FixedHandle","comment":"","type_short":"FixedHandle"}},{"javadoc":"Get the offset into the instruction for the current node (i=-1) or one of the current node's children\n@param i selects the desired child of the current node\n@return the offset (in bytes) for the selected node","static":false,"name":"getOffset","comment":"Get the offset into the instruction for the current node (i=-1) or one of the current node's children","params":[{"type_long":"int","name":"i","comment":"selects the desired child of the current node","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the offset (in bytes) for the selected node","type_short":"int"}},{"javadoc":"","static":false,"name":"setOffset","comment":"","params":[{"type_long":"int","name":"off","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCurrentLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setCurrentLength","comment":"","params":[{"type_long":"int","name":"len","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calculate the length of the current constructor state\n assuming all its operands are constructed","static":false,"name":"calcCurrentLength","comment":"Calculate the length of the current constructor state\n assuming all its operands are constructed","params":[{"type_long":"int","name":"minLength","comment":"","type_short":"int"},{"type_long":"int","name":"numopers","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return the Constructor for the current node in the walk","static":false,"name":"getConstructor","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.Constructor","comment":"the Constructor for the current node in the walk","type_short":"Constructor"}},{"javadoc":"","static":false,"name":"setConstructor","comment":"","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.Constructor","name":"ct","comment":"","type_short":"Constructor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAddr","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getNaddr","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getCurSpace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"","static":false,"name":"getConstSpace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"","static":false,"name":"getFlowRefAddr","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getFlowDestAddr","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getInstructionBytes","comment":"","params":[{"type_long":"int","name":"byteoff","comment":"","type_short":"int"},{"type_long":"int","name":"numbytes","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getContextBytes","comment":"","params":[{"type_long":"int","name":"byteoff","comment":"","type_short":"int"},{"type_long":"int","name":"numbytes","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getInstructionBits","comment":"","params":[{"type_long":"int","name":"startbit","comment":"","type_short":"int"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getContextBits","comment":"","params":[{"type_long":"int","name":"startbit","comment":"","type_short":"int"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setOutOfBandState","comment":"","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.Constructor","name":"ct","comment":"","type_short":"Constructor"},{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"ghidra.app.plugin.processors.sleigh.ConstructState","name":"tempstate","comment":"","type_short":"ConstructState"},{"type_long":"ghidra.app.plugin.processors.sleigh.ParserWalker","name":"otherwalker","comment":"","type_short":"ParserWalker"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCurrentSubtableName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"ParserWalker","comment":"Class for walking the Sleigh Parser tree.  The nodes of the tree are the Sleigh Constructors arranged for a particular\n instruction.  This tree is walked for various purposes:\n \n     SleighInstructionPrototype.resolve        - initial parsing of instruction and building the tree\n     SleighInstructionPrototype.resolveHandles - filling in Varnode values for all the Constructor exports\n     PcodeEmit                                 - for weaving together p-code for an instruction\n ","fields":[{"type_long":"int","javadoc":"","static":true,"name":"MAX_PARSE_DEPTH","comment":"","type_short":"int","constant_value":"64"},{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","javadoc":"","static":false,"name":"context","comment":"","type_short":"SleighParserContext","constant_value":null},{"type_long":"ghidra.app.plugin.processors.sleigh.SleighParserContext","javadoc":"","static":false,"name":"cross_context","comment":"","type_short":"SleighParserContext","constant_value":null},{"type_long":"ghidra.app.plugin.processors.sleigh.ConstructState","javadoc":"","static":false,"name":"point","comment":"","type_short":"ConstructState","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"depth","comment":"","type_short":"int","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"breadcrumb","comment":"","type_short":"int[]","constant_value":null}]}
