{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.emulator.EmulatorConfiguration","name":"cfg","comment":"","type_short":"EmulatorConfiguration"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the page size to use with a specific AddressSpace. The page containers (MemoryBank)\n assume page size is always power of 2. Any address space is assigned at least 8-bits of\n addressable locations, so at the very least, the size is divisible by 256. Starting with this\n minimum, this method finds the power of 2 that is closest to the preferred page size (pageSize)\n but that still divides the size of the space.\n@param space is the specific AddressSpace\n@return the page size to use","static":false,"name":"getValidPageSize","comment":"Get the page size to use with a specific AddressSpace. The page containers (MemoryBank)\n assume page size is always power of 2. Any address space is assigned at least 8-bits of\n addressable locations, so at the very least, the size is divisible by 256. Starting with this\n minimum, this method finds the power of 2 that is closest to the preferred page size (pageSize)\n but that still divides the size of the space.","params":[{"type_long":"ghidra.program.model.address.AddressSpace","name":"space","comment":"is the specific AddressSpace","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"int","comment":"the page size to use","type_short":"int"}},{"javadoc":"","static":false,"name":"initMemState","comment":"","params":[{"type_long":"ghidra.app.emulator.state.RegisterState","name":"rstate","comment":"","type_short":"RegisterState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cloneMemory","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.pcode.memstate.MemoryState","comment":"","type_short":"MemoryState"}},{"javadoc":"","static":false,"name":"getMemoryBank","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSpace","name":"space","comment":"","type_short":"AddressSpace"},{"type_long":"int","name":"ps","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.emulator.state.FilteredMemoryPageOverlay","comment":"","type_short":"FilteredMemoryPageOverlay"}},{"javadoc":"Initialize memory state using the initial register state.  If restore is true,\n only those registers within the register space which have been modified will\n be reported and restored to their initial state.\n@param restore if true restore modified registers within the register space only","static":false,"name":"initRegisters","comment":"Initialize memory state using the initial register state.  If restore is true,\n only those registers within the register space which have been modified will\n be reported and restored to their initial state.","params":[{"type_long":"boolean","name":"restore","comment":"if true restore modified registers within the register space only","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dumpBytesAsSingleValue","comment":"","params":[{"type_long":"byte[]","name":"bytes","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"genAddress","comment":"","params":[{"type_long":"java.lang.String","name":"addr","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getPC","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getPCRegisterName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getMemState","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.pcode.memstate.MemoryState","comment":"","type_short":"MemoryState"}},{"javadoc":"","static":false,"name":"getFilteredMemState","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.emulator.FilteredMemoryState","comment":"","type_short":"FilteredMemoryState"}},{"javadoc":"","static":false,"name":"addMemoryAccessFilter","comment":"","params":[{"type_long":"ghidra.app.emulator.MemoryAccessFilter","name":"filter","comment":"","type_short":"MemoryAccessFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBreakTable","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.pcode.emulate.BreakTableCallBack","comment":"","type_short":"BreakTableCallBack"}},{"javadoc":"","static":false,"name":"setExecuteAddress","comment":"","params":[{"type_long":"long","name":"addressableWordOffset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExecuteAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getLastExecuteAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getDefaultContext","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<java.lang.String>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"setHalt","comment":"","params":[{"type_long":"boolean","name":"halt","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getHalt","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"executeInstruction","comment":"","params":[{"type_long":"boolean","name":"stopAtBreakpoint","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.pcode.error.LowlevelError","comment":"","type_short":"LowlevelError"},{"type_long":"ghidra.pcode.emulate.InstructionDecodeException","comment":"","type_short":"InstructionDecodeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if halted at a breakpoint","static":false,"name":"isAtBreakpoint","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if halted at a breakpoint","type_short":"boolean"}},{"javadoc":"@return emulator execution state.  This can be useful within a memory fault handler to\n determine if a memory read was associated with instruction parsing (i.e., PCODE_EMIT) or\n normal an actual emulated read (i.e., EXECUTE).","static":false,"name":"getEmulateExecutionState","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.pcode.emulate.EmulateExecutionState","comment":"emulator execution state.  This can be useful within a memory fault handler to\n determine if a memory read was associated with instruction parsing (i.e., PCODE_EMIT) or\n normal an actual emulated read (i.e., EXECUTE).","type_short":"EmulateExecutionState"}},{"javadoc":"@return true if emulator is busy executing an instruction","static":false,"name":"isExecuting","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if emulator is busy executing an instruction","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getLanguage","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.processors.sleigh.SleighLanguage","comment":"","type_short":"SleighLanguage"}},{"javadoc":"Disassemble from the current execute address\n@param count number of contiguous instructions to disassemble\n@return list of instructions","static":false,"name":"disassemble","comment":"Disassemble from the current execute address","params":[{"type_long":"java.lang.Integer","name":"count","comment":"number of contiguous instructions to disassemble","type_short":"Integer"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"list of instructions","type_short":"List"}},{"javadoc":"","static":false,"name":"getTickCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the current context register value.  The context value returned reflects\n its state when the previously executed instruction was \n parsed\/executed.  The context value returned will feed into the next \n instruction to be parsed with its non-flowing bits cleared and\n any future context state merged in.\n@return context as a RegisterValue object","static":false,"name":"getContextRegisterValue","comment":"Returns the current context register value.  The context value returned reflects\n its state when the previously executed instruction was \n parsed\/executed.  The context value returned will feed into the next \n instruction to be parsed with its non-flowing bits cleared and\n any future context state merged in.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.RegisterValue","comment":"context as a RegisterValue object","type_short":"RegisterValue"}},{"javadoc":"Sets the context register value at the current execute address.\n The Emulator should not be running when this method is invoked.\n Only flowing context bits should be set, as non-flowing bits\n will be cleared prior to parsing on instruction.  In addition,\n any future context state set by the pcode emitter will\n take precedence over context set using this method.  This method\n is primarily intended to be used to establish the initial \n context state.\n@param regValue is the value to set context to","static":false,"name":"setContextRegisterValue","comment":"Sets the context register value at the current execute address.\n The Emulator should not be running when this method is invoked.\n Only flowing context bits should be set, as non-flowing bits\n will be cleared prior to parsing on instruction.  In addition,\n any future context state set by the pcode emitter will\n take precedence over context set using this method.  This method\n is primarily intended to be used to establish the initial \n context state.","params":[{"type_long":"ghidra.program.model.lang.RegisterValue","name":"regValue","comment":"is the value to set context to","type_short":"RegisterValue"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add memory load image provider\n@param provider memory load image provider\n@param view memory region which corresponds to provider","static":false,"name":"addProvider","comment":"Add memory load image provider","params":[{"type_long":"ghidra.app.emulator.memory.MemoryLoadImage","name":"provider","comment":"memory load image provider","type_short":"MemoryLoadImage"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"view","comment":"memory region which corresponds to provider","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"Emulator","comment":"","fields":[{"type_long":"ghidra.pcode.memstate.MemoryFaultHandler","javadoc":"","static":false,"name":"faultHandler","comment":"","type_short":"MemoryFaultHandler","constant_value":null},{"type_long":"ghidra.app.plugin.processors.sleigh.SleighLanguage","javadoc":"","static":false,"name":"language","comment":"","type_short":"SleighLanguage","constant_value":null},{"type_long":"ghidra.program.model.address.AddressFactory","javadoc":"","static":false,"name":"addrFactory","comment":"","type_short":"AddressFactory","constant_value":null},{"type_long":"ghidra.app.emulator.memory.CompositeLoadImage","javadoc":"","static":false,"name":"loadImage","comment":"","type_short":"CompositeLoadImage","constant_value":null},{"type_long":"ghidra.app.emulator.state.RegisterState","javadoc":"","static":false,"name":"mstate","comment":"","type_short":"RegisterState","constant_value":null},{"type_long":"ghidra.pcode.memstate.MemoryPageBank","javadoc":"","static":false,"name":"registerState","comment":"","type_short":"MemoryPageBank","constant_value":null},{"type_long":"ghidra.app.emulator.FilteredMemoryState","javadoc":"","static":false,"name":"memState","comment":"","type_short":"FilteredMemoryState","constant_value":null},{"type_long":"ghidra.pcode.emulate.BreakTableCallBack","javadoc":"","static":false,"name":"breakTable","comment":"","type_short":"BreakTableCallBack","constant_value":null},{"type_long":"ghidra.pcode.emulate.Emulate","javadoc":"","static":false,"name":"emulator","comment":"","type_short":"Emulate","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"emuHalt","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isExecuting","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"writeBack","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pageSize","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"pcName","comment":"","type_short":"String","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"initialPC","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"instExecuted","comment":"","type_short":"int","constant_value":null}]}
