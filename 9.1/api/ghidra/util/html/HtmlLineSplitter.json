{"implements":[],"javadoc":"Splits into lines a given String that is meant to be rendered as HTML.\n \n <P>Really, this class exists simply to remove hundreds of lines of code from \n {@link HTMLUtilities}, which is what this code supports.  The methods in here could easily\n be in {@link StringUtils}, but to keep dependencies low on code that has such a specific use, \n it lives here, with a name that implies you shouldn't use it unless you are working with \n HTML.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Splits the given line into multiple lines based upon the given max length.  This method\n will first split on each newline and then wrap each of the lines returned from that split.\n \n <P>The wrapping routine will attempt to wrap at word boundaries.\n \n <P>This method does not retain leading whitespace.\n@param text the text to wrap\n@param maxLineLength the max desired length of each output line; 0 or less signals not\n        to wrap the line based upon length\n@return the new lines\n@see #wrap(String, int)\n@see #split(String, int, boolean)","static":true,"name":"split","comment":"Splits the given line into multiple lines based upon the given max length.  This method\n will first split on each newline and then wrap each of the lines returned from that split.\n \n The wrapping routine will attempt to wrap at word boundaries.\n \n This method does not retain leading whitespace.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to wrap","type_short":"String"},{"type_long":"int","name":"maxLineLength","comment":"the max desired length of each output line; 0 or less signals not\n        to wrap the line based upon length","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"the new lines","type_short":"List"}},{"javadoc":"Splits the given line into multiple lines based upon the given max length.  This method\n will first split on each newline and then wrap each of the lines returned from that split.\n \n <P>The wrapping routine will attempt to wrap at word boundaries.\n@param text the text to wrap\n@param maxLineLength the max desired length of each output line; 0 or less signals not\n        to wrap the line based upon length\n@param retainSpacing true signals to keep whitespace on line breaks; false discards \n        leading whitespace\n@return the new lines\n@see #wrap(String, int)","static":true,"name":"split","comment":"Splits the given line into multiple lines based upon the given max length.  This method\n will first split on each newline and then wrap each of the lines returned from that split.\n \n The wrapping routine will attempt to wrap at word boundaries.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to wrap","type_short":"String"},{"type_long":"int","name":"maxLineLength","comment":"the max desired length of each output line; 0 or less signals not\n        to wrap the line based upon length","type_short":"int"},{"type_long":"boolean","name":"retainSpacing","comment":"true signals to keep whitespace on line breaks; false discards \n        leading whitespace","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"the new lines","type_short":"List"}},{"javadoc":"Splits the given line into multiple lines based upon the given max length.\n \n <P>Once the maximum provided length is passed, the algorithm attempts to split on a word\n boundary by first looking backwards in the given line (since the last split value) to\n find a space.  If no space is found in that direction, then the the algorithm will\n keep walking forward until either a space is found or {@link #MAX_WORD_LENGTH} is\n passed, at which point the line will be ended, splitting any word that surrounds \n that index.\n@param text the text to wrap\n@param maxLineLength the max desired length of each output line\n@param whitespacer the object that knows how to manipulate whitespace depending \n        upon client preferences\n@return the new lines","static":true,"name":"wrap","comment":"Splits the given line into multiple lines based upon the given max length.\n \n Once the maximum provided length is passed, the algorithm attempts to split on a word\n boundary by first looking backwards in the given line (since the last split value) to\n find a space.  If no space is found in that direction, then the the algorithm will\n keep walking forward until either a space is found or #MAX_WORD_LENGTH is\n passed, at which point the line will be ended, splitting any word that surrounds \n that index.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to wrap","type_short":"String"},{"type_long":"int","name":"maxLineLength","comment":"the max desired length of each output line","type_short":"int"},{"type_long":"ghidra.util.html.WhitespaceHandler","name":"whitespacer","comment":"the object that knows how to manipulate whitespace depending \n        upon client preferences","type_short":"WhitespaceHandler"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"the new lines","type_short":"List"}},{"javadoc":"","static":true,"name":"forceSplitOn","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}}],"name":"HtmlLineSplitter","comment":"Splits into lines a given String that is meant to be rendered as HTML.\n \n Really, this class exists simply to remove hundreds of lines of code from \n HTMLUtilities, which is what this code supports.  The methods in here could easily\n be in StringUtils, but to keep dependencies low on code that has such a specific use, \n it lives here, with a name that implies you shouldn't use it unless you are working with \n HTML.","fields":[{"type_long":"int","javadoc":"Used when trying to split on word boundaries; the value past which to give up","static":true,"name":"MAX_WORD_LENGTH","comment":"Used when trying to split on word boundaries; the value past which to give up","type_short":"int","constant_value":"10"}]}
