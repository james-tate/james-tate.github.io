{"implements":[],"javadoc":"Base implementation of a directed graph. A directed graph consists\n of a set of vertices (implemented as a VertexSet) and a set of edges\n (implemented as an EdgeSet) joining ordered pairs of vertices in the\n graph. Both vertices and edges can belong to more than one DirectedGraph.\n Attributes for both vertices and edges may be defined for a DirectedGraph.\n Parallel edges (more than one edge with the same from and to vertices)\n are allowed in DirectedGraph. Loops are also allowed.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates an empty DirectedGraph with room for \n vertexCapacity vertices and edgeCapacity edges.","static":false,"name":"<init>","comment":"Creates an empty DirectedGraph with room for \n vertexCapacity vertices and edgeCapacity edges.","params":[{"type_long":"int","name":"vertexCapacity","comment":"","type_short":"int"},{"type_long":"int","name":"edgeCapacity","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Default constructor","static":false,"name":"<init>","comment":"Default constructor","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The number of edges having v as their terminal or\n  \"to\" vertex.","static":false,"name":"inValence","comment":"The number of edges having v as their terminal or\n  \"to\" vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"The number of edges having v as their initial or\n  \"from\" vertex.","static":false,"name":"outValence","comment":"The number of edges having v as their initial or\n  \"from\" vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"The number of edges having v as both their terminal and\n  terminal vertex.","static":false,"name":"numLoops","comment":"The number of edges having v as both their terminal and\n  terminal vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"The number of edges incident with v. For unweighted\n   graphs valence and degree are the same, except valence is an int\n  while degree is a double.","static":false,"name":"valence","comment":"The number of edges incident with v. For unweighted\n   graphs valence and degree are the same, except valence is an int\n  while degree is a double.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the EdgeSet of this graph.","static":false,"name":"edges","comment":"Returns the EdgeSet of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.EdgeSet","comment":"","type_short":"EdgeSet"}},{"javadoc":"@param key\n@return the edge in the graph with the specified key or null\n if the graph does not contain an edge with the key.","static":false,"name":"getEdgeWithKey","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge","comment":"the edge in the graph with the specified key or null\n if the graph does not contain an edge with the key.","type_short":"Edge"}},{"javadoc":"Returns the VertexSet of this graph.","static":false,"name":"vertices","comment":"Returns the VertexSet of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.VertexSet","comment":"","type_short":"VertexSet"}},{"javadoc":"@param key\n@return the vertex in the graph with the specified key or null\n if the graph does not contain an vertex with the key.","static":false,"name":"getVertexWithKey","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex","comment":"the vertex in the graph with the specified key or null\n if the graph does not contain an vertex with the key.","type_short":"Vertex"}},{"javadoc":"Returns a Set (HashSet) containing all vertices that are the tos\n   of outgoing edges of the given vertex. Note in the case of multiple\n  edges, the number of children and outvalence need not be the same.","static":false,"name":"getChildren","comment":"Returns a Set (HashSet) containing all vertices that are the tos\n   of outgoing edges of the given vertex. Note in the case of multiple\n  edges, the number of children and outvalence need not be the same.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns the outgoing edges from the given vertex.","static":false,"name":"getOutgoingEdges","comment":"Returns the outgoing edges from the given vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Edge>","comment":"","type_short":"Set"}},{"javadoc":"Returns a Set containg all of the vertices from which an edge comes\n  into the given vertex.","static":false,"name":"getParents","comment":"Returns a Set containg all of the vertices from which an edge comes\n  into the given vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns a Set containing all of the edges to the given vertex.","static":false,"name":"getIncomingEdges","comment":"Returns a Set containing all of the edges to the given vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Edge>","comment":"","type_short":"Set"}},{"javadoc":"Returns all children of the vertices in the given set.","static":false,"name":"getChildren","comment":"Returns all children of the vertices in the given set.","params":[{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","name":"vs","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns all parents of the vertices in the given set.","static":false,"name":"getParents","comment":"Returns all parents of the vertices in the given set.","params":[{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","name":"vs","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns a Set (HashSet) containing all descendants of the given vertex.\n  Note: The vertex is defined to be a descendant of itself.","static":false,"name":"getDescendants","comment":"Returns a Set (HashSet) containing all descendants of the given vertex.\n  Note: The vertex is defined to be a descendant of itself.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns an array of all incoming edges.","static":false,"name":"incomingEdges","comment":"Returns an array of all incoming edges.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Returns an array of all outgoing edges.","static":false,"name":"outgoingEdges","comment":"Returns an array of all outgoing edges.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Returns an array of all edges with the given vertex as both the from\n   and to.","static":false,"name":"selfEdges","comment":"Returns an array of all edges with the given vertex as both the from\n   and to.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Returns array of all vertices unreachable from a source. These are the\n   vertices descending only from a non-trivial strongly connected component.","static":false,"name":"verticesUnreachableFromSources","comment":"Returns array of all vertices unreachable from a source. These are the\n   vertices descending only from a non-trivial strongly connected component.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"Returns a Set (HashSet) of all vertices descended from a vertex in the\n  given array.","static":false,"name":"getDescendants","comment":"Returns a Set (HashSet) of all vertices descended from a vertex in the\n  given array.","params":[{"type_long":"ghidra.util.graph.Vertex[]","name":"seedVertices","comment":"","type_short":"ghidra.util.graph.Vertex[]"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns a set of all the vertices which are ancestors of the given vertex.\n   Note: By definition a vertex is one of its own ancestors.","static":false,"name":"getAncestors","comment":"Returns a set of all the vertices which are ancestors of the given vertex.\n   Note: By definition a vertex is one of its own ancestors.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns an iterator for the EdgeSet of this graph.","static":false,"name":"edgeIterator","comment":"Returns an iterator for the EdgeSet of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.GraphIterator<ghidra.util.graph.Edge>","comment":"","type_short":"GraphIterator"}},{"javadoc":"Returns an iterator for the VertexSet of this graph.","static":false,"name":"vertexIterator","comment":"Returns an iterator for the VertexSet of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.GraphIterator<ghidra.util.graph.Vertex>","comment":"","type_short":"GraphIterator"}},{"javadoc":"Returns inValence as a double. Should be overridden extending classes.","static":false,"name":"inDegree","comment":"Returns inValence as a double. Should be overridden extending classes.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"Returns outValence as a double. Should be overridden extending classes.","static":false,"name":"outDegree","comment":"Returns outValence as a double. Should be overridden extending classes.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"Returns numLoops as a double. Should be overridden extending classes.","static":false,"name":"loopDegree","comment":"Returns numLoops as a double. Should be overridden extending classes.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"Returns valence as a double. Should be overridden extending classes.","static":false,"name":"degree","comment":"Returns valence as a double. Should be overridden extending classes.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"Returns true iff all nodes and edges of the given graph are in the current graph","static":false,"name":"containsAsSubgraph","comment":"Returns true iff all nodes and edges of the given graph are in the current graph","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"g","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns an array of Sets (HashSet). Each set contains the vertices\n  within a single strongly connected component of the DirectedGraph.\n \n A strongly connected component of a directed graph is a subgraph \n in which it is possible to find a directed path from any vertex to any \n other vertex in the graph. A cycle is a simple example of strongly \n connected graph.","static":false,"name":"assignVerticesToStrongComponents","comment":"Returns an array of Sets (HashSet). Each set contains the vertices\n  within a single strongly connected component of the DirectedGraph.\n \n A strongly connected component of a directed graph is a subgraph \n in which it is possible to find a directed path from any vertex to any \n other vertex in the graph. A cycle is a simple example of strongly \n connected graph.","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>[]","comment":"","type_short":"java.util.Set<ghidra.util.graph.Vertex>[]"}},{"javadoc":"Returns a vector containing the entry points to a directed graph. An entry\n  point is either a source (in valence zero) or the least vertex in a strongly\n  connected component unreachable from any vertex outside the strongly\n  connected component. Least is defined here to be the vertex with the smallest\n  key.","static":false,"name":"getEntryPoints","comment":"Returns a vector containing the entry points to a directed graph. An entry\n  point is either a source (in valence zero) or the least vertex in a strongly\n  connected component unreachable from any vertex outside the strongly\n  connected component. Least is defined here to be the vertex with the smallest\n  key.","params":[],"throws":[],"return":{"type_long":"java.util.Vector<ghidra.util.graph.Vertex>","comment":"","type_short":"Vector"}},{"javadoc":"returns a java.util.Set containing the vertices in this graph.","static":false,"name":"getVertices","comment":"returns a java.util.Set containing the vertices in this graph.","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"returns an array containing the vertices in the graph","static":false,"name":"getVertexArray","comment":"returns an array containing the vertices in the graph","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"returns a java.util.Set containing the edges in this graph.","static":false,"name":"getEdges","comment":"returns a java.util.Set containing the edges in this graph.","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Edge>","comment":"","type_short":"Set"}},{"javadoc":"returns an array containing the edges in the graph","static":false,"name":"getEdgeArray","comment":"returns an array containing the edges in the graph","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Returns the number of vertices in the graph","static":false,"name":"numVertices","comment":"Returns the number of vertices in the graph","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of edges in the graph","static":false,"name":"numEdges","comment":"Returns the number of edges in the graph","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Adds the specified vertex to the graph.","static":false,"name":"add","comment":"Adds the specified vertex to the graph.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Adds the specified edge to the graph. If either endpoint of the\n edge is not in the graph that vertex is also added to the graph.","static":false,"name":"add","comment":"Adds the specified edge to the graph. If either endpoint of the\n edge is not in the graph that vertex is also added to the graph.","params":[{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes the vertex v from the graph. Also removes all edges incident with\n v. Does nothing if the vertex is not in the graph.","static":false,"name":"remove","comment":"Removes the vertex v from the graph. Also removes all edges incident with\n v. Does nothing if the vertex is not in the graph.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes Edge e from the graph. No effect if the edge is not in the graph.","static":false,"name":"remove","comment":"Removes Edge e from the graph. No effect if the edge is not in the graph.","params":[{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true iff the vertex is in the graph.","static":false,"name":"contains","comment":"Returns true iff the vertex is in the graph.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true iff the graph contains the edge e.","static":false,"name":"contains","comment":"Returns true iff the graph contains the edge e.","params":[{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"returns the number of vertices with outValence zero.","static":false,"name":"numSinks","comment":"returns the number of vertices with outValence zero.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"returns the number of vertices with inValence zero.","static":false,"name":"numSources","comment":"returns the number of vertices with inValence zero.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns a Vertex[] containing the sources. A vertex is a source if\n it has no incoming edges.","static":false,"name":"getSources","comment":"Returns a Vertex[] containing the sources. A vertex is a source if\n it has no incoming edges.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"Returns a Vertex[] containing the sinks. A vertex is a sink if it \n has no outgoing edges.","static":false,"name":"getSinks","comment":"Returns a Vertex[] containing the sinks. A vertex is a sink if it \n has no outgoing edges.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"Returns a java.util.Set containing all of the vertices within the\n  same component a the given vertex.","static":false,"name":"getVerticesInContainingComponent","comment":"Returns a java.util.Set containing all of the vertices within the\n  same component a the given vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns the subgraph of this graph which is the component containing v.","static":false,"name":"getComponentContaining","comment":"Returns the subgraph of this graph which is the component containing v.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"","type_short":"DirectedGraph"}},{"javadoc":"Returns an array of directed graphs. Each array element is a \n DirectedGraph consisting of a single\n connected component of this graph.","static":false,"name":"getComponents","comment":"Returns an array of directed graphs. Each array element is a \n DirectedGraph consisting of a single\n connected component of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph[]","comment":"","type_short":"ghidra.util.graph.DirectedGraph[]"}},{"javadoc":"Creates intersection of graphs in place by adding all vertices and edges of\n other graph to this graph. This method used to return a different graph\n as the intersection but now does not.","static":false,"name":"intersectionWith","comment":"Creates intersection of graphs in place by adding all vertices and edges of\n other graph to this graph. This method used to return a different graph\n as the intersection but now does not.","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"otherGraph","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates union of graphs in place by adding all vertices and edges of\n other graph to this graph. This method used to return a different graph\n as the union but now does not.","static":false,"name":"unionWith","comment":"Creates union of graphs in place by adding all vertices and edges of\n other graph to this graph. This method used to return a different graph\n as the union but now does not.","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"otherGraph","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the graph induced by the seed vertices and their descendants","static":false,"name":"descendantsGraph","comment":"Get the graph induced by the seed vertices and their descendants","params":[{"type_long":"ghidra.util.graph.Vertex[]","name":"seeds","comment":"","type_short":"ghidra.util.graph.Vertex[]"}],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"","type_short":"DirectedGraph"}},{"javadoc":"Returns the directed graph which is subgraph induced by the given\n  set of vertices. The vertex set of the returned graph contains the\n  given vertices which belong to this graph. An edge of this graph\n  is in the returned graph iff both endpoints belong to the given vertices.","static":false,"name":"inducedSubgraph","comment":"Returns the directed graph which is subgraph induced by the given\n  set of vertices. The vertex set of the returned graph contains the\n  given vertices which belong to this graph. An edge of this graph\n  is in the returned graph iff both endpoints belong to the given vertices.","params":[{"type_long":"ghidra.util.graph.Vertex[]","name":"vertexSet","comment":"","type_short":"ghidra.util.graph.Vertex[]"}],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"","type_short":"DirectedGraph"}},{"javadoc":"Returns a java.util.Set containing the vertex v and its neighbors.","static":false,"name":"getNeighborhood","comment":"Returns a java.util.Set containing the vertex v and its neighbors.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns a java.util.Set containing the vertices in the given Set and their\n  neighbors.","static":false,"name":"getNeighborhood","comment":"Returns a java.util.Set containing the vertices in the given Set and their\n  neighbors.","params":[{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","name":"vs","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","comment":"","type_short":"Set"}},{"javadoc":"Returns the referent of the object used to create v if it exists. If the\n  vertex was created with a null referent this method returns null.","static":false,"name":"getReferent","comment":"Returns the referent of the object used to create v if it exists. If the\n  vertex was created with a null referent this method returns null.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"This method assigns levels in a top-down manner. Sources are on level 0.","static":false,"name":"getLevels","comment":"This method assigns levels in a top-down manner. Sources are on level 0.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.IntegerAttribute<ghidra.util.graph.Vertex>","comment":"","type_short":"IntegerAttribute"}},{"javadoc":"Assigns levels to the graph in a bottom up fashion. All sinks have the\n  same level.","static":false,"name":"complexityDepth","comment":"Assigns levels to the graph in a bottom up fashion. All sinks have the\n  same level.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.IntegerAttribute<ghidra.util.graph.Vertex>","comment":"","type_short":"IntegerAttribute"}},{"javadoc":"Returns all edges joing the from and to vertices. Recall DirectedGraph\n uses a multigraph model where parallel edges are allowed.","static":false,"name":"getEdges","comment":"Returns all edges joing the from and to vertices. Recall DirectedGraph\n uses a multigraph model where parallel edges are allowed.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"from","comment":"","type_short":"Vertex"},{"type_long":"ghidra.util.graph.Vertex","name":"to","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Returns true iff the graph contains and edge from the parent vertex\n to the child vertex.","static":false,"name":"areRelatedAs","comment":"Returns true iff the graph contains and edge from the parent vertex\n to the child vertex.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"parent","comment":"","type_short":"Vertex"},{"type_long":"ghidra.util.graph.Vertex","name":"child","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes all vertices and edges from the graph without changing \n the space allocated.","static":false,"name":"clear","comment":"Removes all vertices and edges from the graph without changing \n the space allocated.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the AttributeManager for the vertices of this graph.","static":false,"name":"vertexAttributes","comment":"Returns the AttributeManager for the vertices of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.AttributeManager<ghidra.util.graph.Vertex>","comment":"","type_short":"AttributeManager"}},{"javadoc":"Returns the AttributeManager for the edges of this graph.","static":false,"name":"edgeAttributes","comment":"Returns the AttributeManager for the edges of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.AttributeManager<ghidra.util.graph.Edge>","comment":"","type_short":"AttributeManager"}},{"javadoc":"Returns Vertex[] containing all vertices having the given object as\n  a referent. Any number of vertices in the graph may refer back to \n the same object.","static":false,"name":"getVerticesHavingReferent","comment":"Returns Vertex[] containing all vertices having the given object as\n  a referent. Any number of vertices in the graph may refer back to \n the same object.","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"@return A directed graph with the same vertices, edges, and attributes.","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"A directed graph with the same vertices, edges, and attributes.","type_short":"DirectedGraph"}},{"javadoc":"Copies all attributes from the indicated directed graph to this one.\n@param copy the directed graph to copy from.","static":false,"name":"copyAll","comment":"Copies all attributes from the indicated directed graph to this one.","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"copy","comment":"the directed graph to copy from.","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"CopyEdgeAttributes","comment":"","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"copy","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"CopyVertexAttributes","comment":"","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"copy","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method copies a vertex and all object attributes from graph \n 'other' into this graph.\n@param node\n@param other","static":false,"name":"copyVertex","comment":"This method copies a vertex and all object attributes from graph \n 'other' into this graph.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"node","comment":"","type_short":"Vertex"},{"type_long":"ghidra.util.graph.DirectedGraph","name":"other","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method copies an edge and all object attributes from graph \n 'other' into this graph.  Any implicictly created Verticies do not \n get their attribute values copied -- you must use copyVertex.\n@param e\n@param other","static":false,"name":"copyEdge","comment":"This method copies an edge and all object attributes from graph \n 'other' into this graph.  Any implicictly created Verticies do not \n get their attribute values copied -- you must use copyVertex.","params":[{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"},{"type_long":"ghidra.util.graph.DirectedGraph","name":"other","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method copies the attributes from an edge 'e' from DirectedGraph\n 'other' into this graph associated with edge 'newe'\n@param newe\n@param e\n@param other","static":false,"name":"copyEdgeAttributeValues","comment":"This method copies the attributes from an edge 'e' from DirectedGraph\n 'other' into this graph associated with edge 'newe'","params":[{"type_long":"ghidra.util.graph.Edge","name":"newe","comment":"","type_short":"Edge"},{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"},{"type_long":"ghidra.util.graph.DirectedGraph","name":"other","comment":"","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method joins nodes from a directed graph into this.  This \n allows DirectedGraph subclasses to copy nodes and attributes, \n a shortcomings with the unionWith method.\n@param other the other directed graph that is to be joined into this one.\n@return this directed graph","static":false,"name":"join","comment":"This method joins nodes from a directed graph into this.  This \n allows DirectedGraph subclasses to copy nodes and attributes, \n a shortcomings with the unionWith method.","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"other","comment":"the other directed graph that is to be joined into this one.","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"this directed graph","type_short":"DirectedGraph"}},{"javadoc":"This method copies vertex attributes for vertex 'vert' from graph\n 'other' to this graph.\n@param vert the vertex whose attributes should be copied.\n@param other the other graph to copy vertex attributes from","static":false,"name":"copyVertexAttributeValues","comment":"This method copies vertex attributes for vertex 'vert' from graph\n 'other' to this graph.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"vert","comment":"the vertex whose attributes should be copied.","type_short":"Vertex"},{"type_long":"ghidra.util.graph.DirectedGraph","name":"other","comment":"the other graph to copy vertex attributes from","type_short":"DirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is a helper method that sets a object property named propName \n to edge e.","static":false,"name":"setEdgeProperty","comment":"This is a helper method that sets a object property named propName \n to edge e.","params":[{"type_long":"java.lang.String","name":"propName","comment":"","type_short":"String"},{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"","type_short":"Edge"},{"type_long":"java.lang.Object","name":"prop","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is a helper method that gets a property named propName to\n from edge e.\n@param propName the property name\n@param e the edge\n@return the attribute for the indicated edge","static":false,"name":"getEdgeProperty","comment":"This is a helper method that gets a property named propName to\n from edge e.","params":[{"type_long":"java.lang.String","name":"propName","comment":"the property name","type_short":"String"},{"type_long":"ghidra.util.graph.Edge","name":"e","comment":"the edge","type_short":"Edge"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the attribute for the indicated edge","type_short":"Object"}},{"javadoc":"This is a helper method that sets an object property named propName\n for Vertex v.\n@param propName the property name\n@param v the vertex\n@param prop the property value","static":false,"name":"setVertexProperty","comment":"This is a helper method that sets an object property named propName\n for Vertex v.","params":[{"type_long":"java.lang.String","name":"propName","comment":"the property name","type_short":"String"},{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"the vertex","type_short":"Vertex"},{"type_long":"java.lang.Object","name":"prop","comment":"the property value","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is a helper method that gets a property named propName\n for vertex v.\n@param propName the property name\n@param v the vertex\n@return the property value","static":false,"name":"getVertexProperty","comment":"This is a helper method that gets a property named propName\n for vertex v.","params":[{"type_long":"java.lang.String","name":"propName","comment":"the property name","type_short":"String"},{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"the vertex","type_short":"Vertex"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the property value","type_short":"Object"}},{"javadoc":"This method gets and ObjectAttribute method give an attribute name.\n If it is not found in the attribute manager, the attribute is \n created automatically.\n@param attribName the name of the attribute\n@return the attribute","static":false,"name":"getEdgeAttribute","comment":"This method gets and ObjectAttribute method give an attribute name.\n If it is not found in the attribute manager, the attribute is \n created automatically.","params":[{"type_long":"java.lang.String","name":"attribName","comment":"the name of the attribute","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.ObjectAttribute<ghidra.util.graph.Edge>","comment":"the attribute","type_short":"ObjectAttribute"}},{"javadoc":"This method gets and ObjectAttribute method give an attribute name.\n If it is not found in the attribute manager, the attribute is \n created automatically.\n@param attribName the attribute name\n@return the attribute","static":false,"name":"getVertexAttribute","comment":"This method gets and ObjectAttribute method give an attribute name.\n If it is not found in the attribute manager, the attribute is \n created automatically.","params":[{"type_long":"java.lang.String","name":"attribName","comment":"the attribute name","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.util.graph.attributes.ObjectAttribute<ghidra.util.graph.Vertex>","comment":"the attribute","type_short":"ObjectAttribute"}},{"javadoc":"This method converts a collection of verticies into a set of its\n referent objects.  It is up to the methods using the created set \n to properly type cast the set's elements.\n@param verts the vertices\n@return the set of referent objects","static":true,"name":"verts2referentSet","comment":"This method converts a collection of verticies into a set of its\n referent objects.  It is up to the methods using the created set \n to properly type cast the set's elements.","params":[{"type_long":"java.util.Collection<ghidra.util.graph.Vertex>","name":"verts","comment":"the vertices","type_short":"Collection"}],"throws":[],"return":{"type_long":"java.util.Set<?>","comment":"the set of referent objects","type_short":"Set"}}],"name":"DirectedGraph","comment":"Base implementation of a directed graph. A directed graph consists\n of a set of vertices (implemented as a VertexSet) and a set of edges\n (implemented as an EdgeSet) joining ordered pairs of vertices in the\n graph. Both vertices and edges can belong to more than one DirectedGraph.\n Attributes for both vertices and edges may be defined for a DirectedGraph.\n Parallel edges (more than one edge with the same from and to vertices)\n are allowed in DirectedGraph. Loops are also allowed.","fields":[{"type_long":"ghidra.util.graph.VertexSet","javadoc":"","static":false,"name":"vertices","comment":"","type_short":"VertexSet","constant_value":null},{"type_long":"ghidra.util.graph.EdgeSet","javadoc":"","static":false,"name":"edges","comment":"","type_short":"EdgeSet","constant_value":null},{"type_long":"ghidra.util.graph.attributes.AttributeManager<ghidra.util.graph.Vertex>","javadoc":"","static":false,"name":"vertexAttributes","comment":"","type_short":"AttributeManager","constant_value":null},{"type_long":"ghidra.util.graph.attributes.AttributeManager<ghidra.util.graph.Edge>","javadoc":"","static":false,"name":"edgeAttributes","comment":"","type_short":"AttributeManager","constant_value":null}]}
