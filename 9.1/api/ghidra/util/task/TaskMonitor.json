{"implements":[],"javadoc":"<CODE>TaskMonitor<\/CODE> provides an interface by means of which a\n potentially long running task can show its progress and also check if the user\n has cancelled the operation. \n <p>\n Operations that support a task monitor should periodically\n check to see if the operation has been cancelled and abort. If possible, the \n operation should also provide periodic progress information. If it can estimate a \n percentage done, then it should use the <code>setProgress(int)<\/code> method, \n otherwise it should just call the <code>setMessage(String)<\/code> method.","static":false,"methods":[{"javadoc":"Returns true if the user has cancelled the operation\n@return true if the user has cancelled the operation","static":false,"name":"isCancelled","comment":"Returns true if the user has cancelled the operation","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the user has cancelled the operation","type_short":"boolean"}},{"javadoc":"True (the default) signals to paint the progress information inside of the progress bar\n@param showProgressValue true to paint the progress value; false to not","static":false,"name":"setShowProgressValue","comment":"True (the default) signals to paint the progress information inside of the progress bar","params":[{"type_long":"boolean","name":"showProgressValue","comment":"true to paint the progress value; false to not","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the message displayed on the task monitor\n@param message the message to display","static":false,"name":"setMessage","comment":"Sets the message displayed on the task monitor","params":[{"type_long":"java.lang.String","name":"message","comment":"the message to display","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the last set message of this monitor\n@return the message","static":false,"name":"getMessage","comment":"Gets the last set message of this monitor","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the message","type_short":"String"}},{"javadoc":"Sets the current progress value\n@param value progress value","static":false,"name":"setProgress","comment":"Sets the current progress value","params":[{"type_long":"long","name":"value","comment":"progress value","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Initialized this TaskMonitor to the given max values.  The current value of this monitor\n will be set to zero.\n@param max maximum value for progress","static":false,"name":"initialize","comment":"Initialized this TaskMonitor to the given max values.  The current value of this monitor\n will be set to zero.","params":[{"type_long":"long","name":"max","comment":"maximum value for progress","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the progress maximum value\n <p><b>\n Note: setting this value will reset the progress to be the max if the progress is currently\n greater than the new new max value.\n@param max maximum value for progress","static":false,"name":"setMaximum","comment":"Set the progress maximum value\n \n Note: setting this value will reset the progress to be the max if the progress is currently\n greater than the new new max value.","params":[{"type_long":"long","name":"max","comment":"maximum value for progress","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current maximum value for progress\n@return the maximum progress value","static":false,"name":"getMaximum","comment":"Returns the current maximum value for progress","params":[],"throws":[],"return":{"type_long":"long","comment":"the maximum progress value","type_short":"long"}},{"javadoc":"An indeterminate task monitor may choose to show an animation instead of updating progress\n@param indeterminate true if indeterminate","static":false,"name":"setIndeterminate","comment":"An indeterminate task monitor may choose to show an animation instead of updating progress","params":[{"type_long":"boolean","name":"indeterminate","comment":"true if indeterminate","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this monitor shows no progress\n@return true if this monitor shows no progress","static":false,"name":"isIndeterminate","comment":"Returns true if this monitor shows no progress","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this monitor shows no progress","type_short":"boolean"}},{"javadoc":"Check to see if this monitor has been canceled\n@throws CancelledException if monitor has been cancelled","static":false,"name":"checkCanceled","comment":"Check to see if this monitor has been canceled","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if monitor has been cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to increment the current progress by the given value\n@param incrementAmount The amount by which to increment the progress","static":false,"name":"incrementProgress","comment":"A convenience method to increment the current progress by the given value","params":[{"type_long":"long","name":"incrementAmount","comment":"The amount by which to increment the progress","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current progress value or {@link #NO_PROGRESS_VALUE} if there is no value\n set\n@return the current progress value or {@link #NO_PROGRESS_VALUE} if there is no value\n set","static":false,"name":"getProgress","comment":"Returns the current progress value or #NO_PROGRESS_VALUE if there is no value\n set","params":[],"throws":[],"return":{"type_long":"long","comment":"the current progress value or #NO_PROGRESS_VALUE if there is no value\n set","type_short":"long"}},{"javadoc":"Cancel the task","static":false,"name":"cancel","comment":"Cancel the task","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add cancelled listener\n@param listener the cancel listener","static":false,"name":"addCancelledListener","comment":"Add cancelled listener","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"the cancel listener","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove cancelled listener\n@param listener the cancel listener","static":false,"name":"removeCancelledListener","comment":"Remove cancelled listener","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"the cancel listener","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the enablement of the Cancel button\n@param enable true means to enable the cancel button","static":false,"name":"setCancelEnabled","comment":"Set the enablement of the Cancel button","params":[{"type_long":"boolean","name":"enable","comment":"true means to enable the cancel button","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if cancel ability is enabled\n@return true if cancel ability is enabled","static":false,"name":"isCancelEnabled","comment":"Returns true if cancel ability is enabled","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if cancel ability is enabled","type_short":"boolean"}},{"javadoc":"Clear the cancellation so that this TaskMonitor may be reused","static":false,"name":"clearCanceled","comment":"Clear the cancellation so that this TaskMonitor may be reused","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"TaskMonitor","comment":"TaskMonitor provides an interface by means of which a\n potentially long running task can show its progress and also check if the user\n has cancelled the operation. \n \n Operations that support a task monitor should periodically\n check to see if the operation has been cancelled and abort. If possible, the \n operation should also provide periodic progress information. If it can estimate a \n percentage done, then it should use the setProgress(int) method, \n otherwise it should just call the setMessage(String) method.","fields":[{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":true,"name":"DUMMY","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"int","javadoc":"A value to indicate that this monitor has no progress value set","static":true,"name":"NO_PROGRESS_VALUE","comment":"A value to indicate that this monitor has no progress value set","type_short":"int","constant_value":"-1"}]}
