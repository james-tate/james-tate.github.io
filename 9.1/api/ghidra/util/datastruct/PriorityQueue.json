{"implements":[],"javadoc":"Maintains a list of objects in priority order where priority is just \n an integer value.  The object with the lowest\n priority number can be retrieved using getFirst() and the object with the highest\n priority number can be retrieved using getLast().","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given object to the queue at the appropriate insertion point based\n on the given priority.\n@param obj the object to be added.\n@param priority the priority assigned to the object.","static":false,"name":"add","comment":"Adds the given object to the queue at the appropriate insertion point based\n on the given priority.","params":[{"type_long":"T","name":"obj","comment":"the object to be added.","type_short":"T"},{"type_long":"int","name":"priority","comment":"the priority assigned to the object.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of objects in the queue.","static":false,"name":"size","comment":"Returns the number of objects in the queue.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns true if the queue is empty.","static":false,"name":"isEmpty","comment":"Returns true if the queue is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the object with the lowest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue first is considered to have the lower priority value.\n Null is returned if the queue is empty.","static":false,"name":"getFirst","comment":"Returns the object with the lowest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue first is considered to have the lower priority value.\n Null is returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"Returns the priority of the object with the lowest priority in the queue.\n Null returned if the queue is empty.","static":false,"name":"getFirstPriority","comment":"Returns the priority of the object with the lowest priority in the queue.\n Null returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"java.lang.Integer","comment":"","type_short":"Integer"}},{"javadoc":"Returns the object with the highest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue last is considered to have the higher priority value.\n Null is returned if the queue is empty.","static":false,"name":"getLast","comment":"Returns the object with the highest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue last is considered to have the higher priority value.\n Null is returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"Returns the priority of the object with the highest priority in the queue.\n Null returned if the queue is empty.","static":false,"name":"getLastPriority","comment":"Returns the priority of the object with the highest priority in the queue.\n Null returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"java.lang.Integer","comment":"","type_short":"Integer"}},{"javadoc":"Removes and returns the object with the lowest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue first is considered to have the lower priority value.\n Null is returned if the queue is empty.\n@return the object with the lowest priority number or null if the list is empty.","static":false,"name":"removeFirst","comment":"Removes and returns the object with the lowest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue first is considered to have the lower priority value.\n Null is returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"T","comment":"the object with the lowest priority number or null if the list is empty.","type_short":"T"}},{"javadoc":"Removes and returns the object with the highest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue last is considered to have the higher priority value.\n Null is returned if the queue is empty.\n@return the object with the highest priority number or null if the list is empty.","static":false,"name":"removeLast","comment":"Removes and returns the object with the highest priority number in the queue.\n If more than one object has the same priority, then the object that\n was added to the queue last is considered to have the higher priority value.\n Null is returned if the queue is empty.","params":[],"throws":[],"return":{"type_long":"T","comment":"the object with the highest priority number or null if the list is empty.","type_short":"T"}},{"javadoc":"Removes all objects from the queue.","static":false,"name":"clear","comment":"Removes all objects from the queue.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"PriorityQueue","comment":"Maintains a list of objects in priority order where priority is just \n an integer value.  The object with the lowest\n priority number can be retrieved using getFirst() and the object with the highest\n priority number can be retrieved using getLast().","fields":[{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.TreeMap<java.lang.Integer,java.util.LinkedList<T>>","javadoc":"","static":false,"name":"tree","comment":"","type_short":"TreeMap","constant_value":null}]}
