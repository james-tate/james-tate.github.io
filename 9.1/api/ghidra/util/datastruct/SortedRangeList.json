{"implements":["java.lang.Iterable"],"javadoc":"Provides a list of integer ranges that are maintained in sorted order. \n When a range is added any ranges that overlap or are adjacent to one another \n will coalesce into a single range.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new empty sorted range list.","static":false,"name":"<init>","comment":"Creates a new empty sorted range list.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new sorted range list with ranges equivalent to those in the \n specified list.\n@param list the sorted range list to make an equivalent copy of.","static":false,"name":"<init>","comment":"Creates a new sorted range list with ranges equivalent to those in the \n specified list.","params":[{"type_long":"ghidra.util.datastruct.SortedRangeList","name":"list","comment":"the sorted range list to make an equivalent copy of.","type_short":"SortedRangeList"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the range from min to max to this sorted range list.\n If the range is adjacent to or overlaps any other existing ranges,\n then those ranges will coalesce.\n@param min the range minimum\n@param max the range maximum (inclusive)","static":false,"name":"addRange","comment":"Adds the range from min to max to this sorted range list.\n If the range is adjacent to or overlaps any other existing ranges,\n then those ranges will coalesce.","params":[{"type_long":"int","name":"min","comment":"the range minimum","type_short":"int"},{"type_long":"int","name":"max","comment":"the range maximum (inclusive)","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an iterator over all the ranges in this list.","static":false,"name":"getRanges","comment":"Returns an iterator over all the ranges in this list.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.util.datastruct.Range>","comment":"","type_short":"Iterator"}},{"javadoc":"Returns an iterator over all the ranges in this list that iterates in the direction specified.\n@param forward true indicates to iterate forward from minimum to maximum range. \n false indicates backward iteration form maximum to minimum.","static":false,"name":"getRanges","comment":"Returns an iterator over all the ranges in this list that iterates in the direction specified.","params":[{"type_long":"boolean","name":"forward","comment":"true indicates to iterate forward from minimum to maximum range. \n false indicates backward iteration form maximum to minimum.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.util.datastruct.Range>","comment":"","type_short":"Iterator"}},{"javadoc":"Returns the minimum int value in this sorted range list.\n@throws NoSuchElementException if the list is empty.","static":false,"name":"getMin","comment":"Returns the minimum int value in this sorted range list.","params":[],"throws":[{"type_long":"java.util.NoSuchElementException","comment":"if the list is empty.","type_short":"NoSuchElementException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the maximum int value in this sorted range list.\n@throws NoSuchElementException if the list is empty.","static":false,"name":"getMax","comment":"Returns the maximum int value in this sorted range list.","params":[],"throws":[{"type_long":"java.util.NoSuchElementException","comment":"if the list is empty.","type_short":"NoSuchElementException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of ranges in the list.","static":false,"name":"getNumRanges","comment":"Returns the number of ranges in the list.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Removes the indicated range of values from the list. This will remove \n any ranges or portion of ranges that overlap the indicated range.\n@param min the minimum value for the range to remove.\n@param max the maximum value for the range to remove.","static":false,"name":"removeRange","comment":"Removes the indicated range of values from the list. This will remove \n any ranges or portion of ranges that overlap the indicated range.","params":[{"type_long":"int","name":"min","comment":"the minimum value for the range to remove.","type_short":"int"},{"type_long":"int","name":"max","comment":"the maximum value for the range to remove.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Coalesces any ranges that are adjacent to or overlap the indicated range.\n@param range the range to check for coalescing.\n@param it the iterator to use for coalescing.","static":false,"name":"coalesce","comment":"Coalesces any ranges that are adjacent to or overlap the indicated range.","params":[{"type_long":"ghidra.util.datastruct.Range","name":"range","comment":"the range to check for coalescing.","type_short":"Range"},{"type_long":"java.util.Iterator<ghidra.util.datastruct.Range>","name":"it","comment":"the iterator to use for coalescing.","type_short":"Iterator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the value is contained in any ranges within this list.\n@param value the value to check for.","static":false,"name":"contains","comment":"Returns true if the value is contained in any ranges within this list.","params":[{"type_long":"int","name":"value","comment":"the value to check for.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getRangeContaining","comment":"","params":[{"type_long":"int","name":"value","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.Range","comment":"","type_short":"Range"}},{"javadoc":"Returns true if a single range contains all the values from min to max.\n@param min the minimum value\n@param max the maximum value","static":false,"name":"contains","comment":"Returns true if a single range contains all the values from min to max.","params":[{"type_long":"int","name":"min","comment":"the minimum value","type_short":"int"},{"type_long":"int","name":"max","comment":"the maximum value","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the range index for the range containing the specified value.\n@param value the value to look for.\n@return the range index or a negative value if the range list doesn't contain the value.","static":false,"name":"getRangeIndex","comment":"Gets the range index for the range containing the specified value.","params":[{"type_long":"int","name":"value","comment":"the value to look for.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the range index or a negative value if the range list doesn't contain the value.","type_short":"int"}},{"javadoc":"Gets the nth range in this list as indicated by the value of index.\n@param index value indicating which nth range to get.\n@return the range or null if there is no such range in this list.","static":false,"name":"getRange","comment":"Gets the nth range in this list as indicated by the value of index.","params":[{"type_long":"int","name":"index","comment":"value indicating which nth range to get.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.Range","comment":"the range or null if there is no such range in this list.","type_short":"Range"}},{"javadoc":"Gets the total number of int values in this range.\n@return the number of int values.","static":false,"name":"getNumValues","comment":"Gets the total number of int values in this range.","params":[],"throws":[],"return":{"type_long":"long","comment":"the number of int values.","type_short":"long"}},{"javadoc":"Returns true if the range from min to max intersects (overlaps) any ranges in this sorted range list.\n@param min the range minimum value.\n@param max the range maximum value","static":false,"name":"intersects","comment":"Returns true if the range from min to max intersects (overlaps) any ranges in this sorted range list.","params":[{"type_long":"int","name":"min","comment":"the range minimum value.","type_short":"int"},{"type_long":"int","name":"max","comment":"the range maximum value","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the range list is empty.","static":false,"name":"isEmpty","comment":"Returns true if the range list is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes all the ranges that are in the specified other list from this list.\n@param other the other sorted range list.","static":false,"name":"remove","comment":"Removes all the ranges that are in the specified other list from this list.","params":[{"type_long":"ghidra.util.datastruct.SortedRangeList","name":"other","comment":"the other sorted range list.","type_short":"SortedRangeList"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new SortedRangeList that is the intersection of this range list and the other range list specified.\n@param other the other range list\n@return the new SortedRangeList representing the intersection.","static":false,"name":"intersect","comment":"Creates a new SortedRangeList that is the intersection of this range list and the other range list specified.","params":[{"type_long":"ghidra.util.datastruct.SortedRangeList","name":"other","comment":"the other range list","type_short":"SortedRangeList"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.SortedRangeList","comment":"the new SortedRangeList representing the intersection.","type_short":"SortedRangeList"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.util.datastruct.Range>","comment":"","type_short":"Iterator"}}],"name":"SortedRangeList","comment":"Provides a list of integer ranges that are maintained in sorted order. \n When a range is added any ranges that overlap or are adjacent to one another \n will coalesce into a single range.","fields":[{"type_long":"java.util.TreeSet<ghidra.util.datastruct.Range>","javadoc":"","static":false,"name":"set","comment":"","type_short":"TreeSet","constant_value":null}]}
