{"implements":[],"javadoc":"Data table that keeps track of rows that are occupied.","static":false,"extends":"ghidra.util.datastruct.DataTable","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"returns true if the given row contains an object\n@param row the row in the table\n@return true if the given row contains an object","static":false,"name":"hasRow","comment":"returns true if the given row contains an object","params":[{"type_long":"int","name":"row","comment":"the row in the table","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given row contains an object","type_short":"boolean"}},{"javadoc":"Returns the max row that contains data.","static":false,"name":"getMaxRow","comment":"Returns the max row that contains data.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Removes the given row from the table.\n@param row The row to be removed","static":false,"name":"removeRow","comment":"Removes the given row from the table.","params":[{"type_long":"int","name":"row","comment":"The row to be removed","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a boolean value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putBoolean","comment":"Stores a boolean value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"boolean","name":"value","comment":"The value to store.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a byte value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putByte","comment":"Stores a byte value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"byte","name":"value","comment":"The value to store.","type_short":"byte"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a short value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putShort","comment":"Stores a short value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"short","name":"value","comment":"The value to store.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an int value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putInt","comment":"Stores an int value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"int","name":"value","comment":"The value to store.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a long value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putLong","comment":"Stores a long value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"long","name":"value","comment":"The value to store.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a double value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putDouble","comment":"Stores a double value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"double","name":"value","comment":"The value to store.","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a float value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putFloat","comment":"Stores a float value in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"float","name":"value","comment":"The value to store.","type_short":"float"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an String in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putString","comment":"Stores an String in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"java.lang.String","name":"value","comment":"The value to store.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an byte array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putByteArray","comment":"Stores an byte array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"byte[]","name":"value","comment":"The value to store.","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an short array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putShortArray","comment":"Stores an short array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"short[]","name":"value","comment":"The value to store.","type_short":"short[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an int array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putIntArray","comment":"Stores an int array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"int[]","name":"value","comment":"The value to store.","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a float array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putFloatArray","comment":"Stores a float array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"float[]","name":"value","comment":"The value to store.","type_short":"float[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores a double array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putDoubleArray","comment":"Stores a double array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"double[]","name":"value","comment":"The value to store.","type_short":"double[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores an long array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.\n@param row The row into the table (specifies which object)\n@param col The column of the table.  (specifies which field)\n@param value The value to store.","static":false,"name":"putLongArray","comment":"Stores an long array in the table at the given row\n and column.  Note - all values in a given column must be\n of the same type.","params":[{"type_long":"int","name":"row","comment":"The row into the table (specifies which object)","type_short":"int"},{"type_long":"int","name":"col","comment":"The column of the table.  (specifies which field)","type_short":"int"},{"type_long":"long[]","name":"value","comment":"The value to store.","type_short":"long[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ManagedDataTable","comment":"Data table that keeps track of rows that are occupied.","fields":[{"type_long":"long","javadoc":"","static":true,"name":"serialVersionUID","comment":"","type_short":"long","constant_value":"1"},{"type_long":"ghidra.util.datastruct.BooleanArray","javadoc":"","static":false,"name":"occupied","comment":"","type_short":"BooleanArray","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxRow","comment":"","type_short":"int","constant_value":null}]}
