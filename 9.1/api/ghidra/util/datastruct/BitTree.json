{"implements":["ghidra.util.datastruct.ShortKeySet","java.io.Serializable"],"javadoc":"The BitTree class maintains a set of ordered keys between the values of\n 0 and N.  It can quickly (O(log(n))) add keys, remove keys, find the next key\n greater than some value , and find the prev key less than some value.  It can\n determine if a key is in the set in O(1) time. This implementation has been\n limited to short keys so that it can implement the ShortKeySet interface.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.\n@param maxKey the maximum key that will ever be put into this BitTree.","static":false,"name":"<init>","comment":"The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.","params":[{"type_long":"short","name":"maxKey","comment":"the maximum key that will ever be put into this BitTree.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.\n@param maxKey the maximum key value.\n@param isFull if true, then the set is initilized to contain all legal keys.","static":false,"name":"<init>","comment":"The BitTree constructor takes the maximum key value. The legal\n keys for this set range from 0 to maxKey.","params":[{"type_long":"short","name":"maxKey","comment":"the maximum key value.","type_short":"short"},{"type_long":"boolean","name":"isFull","comment":"if true, then the set is initilized to contain all legal keys.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes all keys from the set.","static":false,"name":"removeAll","comment":"Removes all keys from the set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of keys currently in the set.","static":false,"name":"size","comment":"Returns the number of keys currently in the set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Adds a key to the set.\n@param key to be added.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].","static":false,"name":"put","comment":"Adds a key to the set.","params":[{"type_long":"short","name":"key","comment":"to be added.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the key from the set.\n@param key The key to remove.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].","static":false,"name":"remove","comment":"Removes the key from the set.","params":[{"type_long":"short","name":"key","comment":"The key to remove.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determines if a given key is in the set.\n@param key the key to check if it is in this set.\n@return true if the key is in the set.","static":false,"name":"containsKey","comment":"Determines if a given key is in the set.","params":[{"type_long":"short","name":"key","comment":"the key to check if it is in this set.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the key is in the set.","type_short":"boolean"}},{"javadoc":"finds the next key that is in the set that is greater than the given key.\n@param key from which to search forward.\n@return the next key greater than the given key or -1 if there is no key\n greater than the given key.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].","static":false,"name":"getNext","comment":"finds the next key that is in the set that is greater than the given key.","params":[{"type_long":"short","name":"key","comment":"from which to search forward.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"the next key greater than the given key or -1 if there is no key\n greater than the given key.","type_short":"short"}},{"javadoc":"Finds the next key that is in the set that is less than the given key.\n@param key the key to search before.\n@return the next key less than the given key or -1 if there is no key\n less than the given key.\n@exception IndexOutOfBoundsException if the given key is not\n in the range [0, size-1].","static":false,"name":"getPrevious","comment":"Finds the next key that is in the set that is less than the given key.","params":[{"type_long":"short","name":"key","comment":"the key to search before.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"the next key less than the given key or -1 if there is no key\n less than the given key.","type_short":"short"}},{"javadoc":"Checks if the set is empty.\n@return true if the set is empty.","static":false,"name":"isEmpty","comment":"Checks if the set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set is empty.","type_short":"boolean"}},{"javadoc":"Returns the first (lowest) key in the set.","static":false,"name":"getFirst","comment":"Returns the first (lowest) key in the set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the last (highest) key in the set.","static":false,"name":"getLast","comment":"Returns the last (highest) key in the set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Sets the nth bit on.","static":false,"name":"setBit","comment":"Sets the nth bit on.","params":[{"type_long":"int","name":"n","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the nth bit to off.","static":false,"name":"clearBit","comment":"Sets the nth bit to off.","params":[{"type_long":"int","name":"n","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Tests if the the nth bit is on.","static":false,"name":"isBitSet","comment":"Tests if the the nth bit is on.","params":[{"type_long":"int","name":"n","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"BitTree","comment":"The BitTree class maintains a set of ordered keys between the values of\n 0 and N.  It can quickly (O(log(n))) add keys, remove keys, find the next key\n greater than some value , and find the prev key less than some value.  It can\n determine if a key is in the set in O(1) time. This implementation has been\n limited to short keys so that it can implement the ShortKeySet interface.","fields":[{"type_long":"long","javadoc":"","static":true,"name":"serialVersionUID","comment":"","type_short":"long","constant_value":"1"},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"power2","comment":"","type_short":"int","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"bits","comment":"","type_short":"int[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"numKeys","comment":"","type_short":"int","constant_value":null},{"type_long":"int[]","javadoc":"","static":true,"name":"setMask","comment":"","type_short":"int[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":true,"name":"clearMask","comment":"","type_short":"int[]","constant_value":null}]}
