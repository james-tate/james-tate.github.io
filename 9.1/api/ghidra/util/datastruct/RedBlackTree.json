{"implements":["java.lang.Iterable"],"javadoc":"A RedBlack Tree implementation with K type keys and place to store V type values.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new RedBlackKeySet that can store keys between 0 and n.\n@param n the maximum key for this set.","static":false,"name":"<init>","comment":"Creates a new RedBlackKeySet that can store keys between 0 and n.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number keys in this set.","static":false,"name":"size","comment":"Returns the number keys in this set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns true if the key is in the set.\n@param key the key whose presence is to be tested.","static":false,"name":"containsKey","comment":"Returns true if the key is in the set.","params":[{"type_long":"K","name":"key","comment":"the key whose presence is to be tested.","type_short":"K"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the first entry in this set.","static":false,"name":"getFirst","comment":"Returns the first entry in this set.","params":[],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Returns the last entry in this set.","static":false,"name":"getLast","comment":"Returns the last entry in this set.","params":[],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Returns the node with largest key in the set that is less or equal to the given key.\n Returns null if there are no keys less than or equal to the given key.\n@param key the search key","static":false,"name":"getEntryLessThanEqual","comment":"Returns the node with largest key in the set that is less or equal to the given key.\n Returns null if there are no keys less than or equal to the given key.","params":[{"type_long":"K","name":"key","comment":"the search key","type_short":"K"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Returns the node with largest key in the set that is less or equal to the given key.\n Returns null if there are no keys less than or equal to the given key.\n@param key the search key","static":false,"name":"getEntryGreaterThanEqual","comment":"Returns the node with largest key in the set that is less or equal to the given key.\n Returns null if there are no keys less than or equal to the given key.","params":[{"type_long":"K","name":"key","comment":"the search key","type_short":"K"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Adds the given key,value to the map. If the map does not allow duplicate keys and a key\n already exists, the old value will be replaced by the new value and the old value will be\n returned.\n@param key the key to add to the set.\n@return the old value associated with the key, or null if the key was not previously in the map.","static":false,"name":"put","comment":"Adds the given key,value to the map. If the map does not allow duplicate keys and a key\n already exists, the old value will be replaced by the new value and the old value will be\n returned.","params":[{"type_long":"K","name":"key","comment":"the key to add to the set.","type_short":"K"},{"type_long":"V","name":"value","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"V","comment":"the old value associated with the key, or null if the key was not previously in the map.","type_short":"V"}},{"javadoc":"","static":false,"name":"getOrCreateEntry","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"","static":false,"name":"getEntry","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"","static":false,"name":"getNode","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Removes the given key (first if duplicates are allowed) from the set.\n@param key the key to remove from the set.\n@return the value associated with the key removed or null if the key not found.","static":false,"name":"remove","comment":"Removes the given key (first if duplicates are allowed) from the set.","params":[{"type_long":"K","name":"key","comment":"the key to remove from the set.","type_short":"K"}],"throws":[],"return":{"type_long":"V","comment":"the value associated with the key removed or null if the key not found.","type_short":"V"}},{"javadoc":"","static":false,"name":"removeNode","comment":"","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"node","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes all entries from the set.","static":false,"name":"removeAll","comment":"Removes all entries from the set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test if the set is empty.\n@return true if the set is empty.","static":false,"name":"isEmpty","comment":"Test if the set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set is empty.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.ListIterator<ghidra.util.datastruct.RedBlackEntry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.ListIterator<ghidra.util.datastruct.RedBlackEntry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"firstEntry","comment":"","type_short":"RedBlackEntry"},{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.ListIterator<ghidra.util.datastruct.RedBlackEntry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"},{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.ListIterator<ghidra.util.datastruct.RedBlackEntry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"Returns the color of the given node.","static":true,"name":"colorOf","comment":"Returns the color of the given node.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry.NodeColor","comment":"","type_short":"NodeColor"}},{"javadoc":"Returns the parent of the given node.","static":true,"name":"parentOf","comment":"Returns the parent of the given node.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Sets the color of the given node to the given color.","static":true,"name":"setColor","comment":"Sets the color of the given node to the given color.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"},{"type_long":"ghidra.util.datastruct.RedBlackEntry.NodeColor","name":"c","comment":"","type_short":"NodeColor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the left child of the given node.","static":true,"name":"leftOf","comment":"Returns the left child of the given node.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"Returns the right child of the given node.","static":true,"name":"rightOf","comment":"Returns the right child of the given node.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","comment":"","type_short":"RedBlackEntry"}},{"javadoc":"From CLR","static":false,"name":"rotateLeft","comment":"From CLR","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"From CLR","static":false,"name":"rotateRight","comment":"From CLR","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"From CLR","static":false,"name":"fixAfterInsertion","comment":"From CLR","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"x","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete node p, and then rebalance the tree.","static":false,"name":"deleteEntry","comment":"Delete node p, and then rebalance the tree.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"p","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"From CLR","static":false,"name":"fixAfterDeletion","comment":"From CLR","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"x","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Swap the linkages of two nodes in a tree.","static":false,"name":"swapPosition","comment":"Swap the linkages of two nodes in a tree.","params":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"x","comment":"","type_short":"RedBlackEntry"},{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","name":"y","comment":"","type_short":"RedBlackEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RedBlackTree","comment":"A RedBlack Tree implementation with K type keys and place to store V type values.","fields":[{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","javadoc":"","static":false,"name":"root","comment":"","type_short":"RedBlackEntry","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"modCount","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","javadoc":"","static":false,"name":"maxEntry","comment":"","type_short":"RedBlackEntry","constant_value":null},{"type_long":"ghidra.util.datastruct.RedBlackEntry<K,V>","javadoc":"","static":false,"name":"minEntry","comment":"","type_short":"RedBlackEntry","constant_value":null}]}
