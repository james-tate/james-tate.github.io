{"implements":[],"javadoc":"Class that implements a hashtable with int keys and int values.\n     Because this class uses array of primitives\n     to store the information, it serializes very fast.  This implementation uses\n     seperate chaining to resolve collisions.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Default constructor creates a table with an initial default capacity.","static":false,"name":"<init>","comment":"Default constructor creates a table with an initial default capacity.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor creates a table with an initial given capacity.  The capacity\n will be adjusted to the next highest prime in the PRIMES table.\n@param capacity the initial capacity.","static":false,"name":"<init>","comment":"Constructor creates a table with an initial given capacity.  The capacity\n will be adjusted to the next highest prime in the PRIMES table.","params":[{"type_long":"int","name":"capacity","comment":"the initial capacity.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a key\/value pair to the hashtable. If the key is already in the table,\n the old value is replaced with the new value.  If the hashtable is already\n full, the hashtable will attempt to approximately double in size\n (it will use a prime number), and all the current entries will\n be rehashed.\n@param key the key for the new entry.\n@param value the value for the new entry.\n@exception ArrayIndexOutOfBoundsException thrown if the maximum capacity is\n reached.","static":false,"name":"put","comment":"Adds a key\/value pair to the hashtable. If the key is already in the table,\n the old value is replaced with the new value.  If the hashtable is already\n full, the hashtable will attempt to approximately double in size\n (it will use a prime number), and all the current entries will\n be rehashed.","params":[{"type_long":"int","name":"key","comment":"the key for the new entry.","type_short":"int"},{"type_long":"int","name":"value","comment":"the value for the new entry.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value for the given key.\n@param key the key for which to retrieve a value.\n@exception NoValueException thrown if there is no value for the given key.","static":false,"name":"get","comment":"Returns the value for the given key.","params":[{"type_long":"int","name":"key","comment":"the key for which to retrieve a value.","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.NoValueException","comment":"","type_short":"NoValueException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Removes a key\/value from the hashtable\n@param key the key to remove from the hashtable.\n@return true if key is found and removed, false otherwise.\n@throws NoValueException\n@exception NoValueException thrown if there is no value for the given key.","static":false,"name":"remove","comment":"Removes a key\/value from the hashtable","params":[{"type_long":"int","name":"key","comment":"the key to remove from the hashtable.","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.NoValueException","comment":"","type_short":"NoValueException"}],"return":{"type_long":"int","comment":"true if key is found and removed, false otherwise.","type_short":"int"}},{"javadoc":"Remove all entries from the hashtable.","static":false,"name":"removeAll","comment":"Remove all entries from the hashtable.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return true if the given key is in the hashtable.\n@param key the key to be tested for existence in the hashtable.","static":false,"name":"contains","comment":"Return true if the given key is in the hashtable.","params":[{"type_long":"int","name":"key","comment":"the key to be tested for existence in the hashtable.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return the number of key\/value pairs stored in the hashtable.","static":false,"name":"size","comment":"Return the number of key\/value pairs stored in the hashtable.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns an array containing all the int keys.","static":false,"name":"getKeys","comment":"Returns an array containing all the int keys.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"resizes the hashtable to allow more entries.","static":false,"name":"grow","comment":"resizes the hashtable to allow more entries.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"IntIntHashtable","comment":"Class that implements a hashtable with int keys and int values.\n     Because this class uses array of primitives\n     to store the information, it serializes very fast.  This implementation uses\n     seperate chaining to resolve collisions.","fields":[{"type_long":"ghidra.util.datastruct.IntKeyIndexer","javadoc":"","static":false,"name":"indexer","comment":"","type_short":"IntKeyIndexer","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"values","comment":"","type_short":"int[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"capacity","comment":"","type_short":"int","constant_value":null}]}
