{"implements":["java.lang.Iterable"],"javadoc":"An ordered set-like data structure.   \n <P>\n Use this when you need a collection of unique items (hence set) that are also ordered by \n insertion time.\n@param <T> the type of items in the set","static":false,"extends":"ghidra.util.datastruct.LRUMap","methods":[{"javadoc":"Constructs this set with the given size.  As elements are added, the oldest elements \n (by access time) will fall off the bottom of the set.\n <p>\n If you do not wish to have a set bounded by size, then you can override \n {@link #removeEldestEntry(java.util.Map.Entry)} to do nothing.\n@param size The size to which this set will be restricted.","static":false,"name":"<init>","comment":"Constructs this set with the given size.  As elements are added, the oldest elements \n (by access time) will fall off the bottom of the set.\n \n If you do not wish to have a set bounded by size, then you can override \n #removeEldestEntry(java.util.Map.Entry) to do nothing.","params":[{"type_long":"int","name":"size","comment":"The size to which this set will be restricted.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"add","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<T>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"LRUSet","comment":"An ordered set-like data structure.   \n \n Use this when you need a collection of unique items (hence set) that are also ordered by \n insertion time.","fields":[]}
