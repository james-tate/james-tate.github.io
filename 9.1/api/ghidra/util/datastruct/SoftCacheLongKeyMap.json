{"implements":[],"javadoc":"Soft reference cache class that caches objects for long keys. This cache will\n store at most \"cacheSize\" number of entries, but since it uses soft references\n for the cached values, those object may be reclaimed.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new SoftCacheLongKeyMap that caches at most cacheSize number of entries\n@param cacheSize the max number of entries to cache.","static":false,"name":"<init>","comment":"Construct a new SoftCacheLongKeyMap that caches at most cacheSize number of entries","params":[{"type_long":"int","name":"cacheSize","comment":"the max number of entries to cache.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Caches the given value for the given key\n@param key the key\n@param value the cached value for the given key\n@return any previous object that is cached for the given key.","static":false,"name":"put","comment":"Caches the given value for the given key","params":[{"type_long":"long","name":"key","comment":"the key","type_short":"long"},{"type_long":"java.lang.Object","name":"value","comment":"the cached value for the given key","type_short":"Object"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"any previous object that is cached for the given key.","type_short":"Object"}},{"javadoc":"Returns the cached value for the given key, if it exists.\n@param key the key for which to get a cached value.\n@return the object that was cached for that key, or null if none exists.","static":false,"name":"get","comment":"Returns the cached value for the given key, if it exists.","params":[{"type_long":"long","name":"key","comment":"the key for which to get a cached value.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the object that was cached for that key, or null if none exists.","type_short":"Object"}},{"javadoc":"Returns the number of items in the cache.  Can change from one call to \n the next even if no entries were added or deleted.","static":false,"name":"size","comment":"Returns the number of items in the cache.  Can change from one call to \n the next even if no entries were added or deleted.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Removes all entries from the cache","static":false,"name":"clear","comment":"Removes all entries from the cache","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the cache is empty. If true, it will remain empty until a new\n entry is added. However if false, it may return true even if nothing was removed","static":false,"name":"isEmpty","comment":"Returns true if the cache is empty. If true, it will remain empty until a new\n entry is added. However if false, it may return true even if nothing was removed","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the cache currently contains the given key. Not useful since even\n if it returns true, there is no guarentee that a get will work after containsKey\n returns true.\n@param key the Key to check","static":false,"name":"containsKey","comment":"Returns true if the cache currently contains the given key. Not useful since even\n if it returns true, there is no guarentee that a get will work after containsKey\n returns true.","params":[{"type_long":"long","name":"key","comment":"the Key to check","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes any cached value for the given key.\n@param key the key for which to remove cached values.\n@return the cached object that was stored for the given key, or null","static":false,"name":"remove","comment":"Removes any cached value for the given key.","params":[{"type_long":"long","name":"key","comment":"the key for which to remove cached values.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the cached object that was stored for the given key, or null","type_short":"Object"}},{"javadoc":"Returns a list of all current keys.","static":false,"name":"getKeys","comment":"Returns a list of all current keys.","params":[],"throws":[],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"","static":false,"name":"processQueue","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"SoftCacheLongKeyMap","comment":"Soft reference cache class that caches objects for long keys. This cache will\n store at most \"cacheSize\" number of entries, but since it uses soft references\n for the cached values, those object may be reclaimed.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"cacheSize","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.ref.ReferenceQueue<java.lang.Object>","javadoc":"","static":false,"name":"refQueue","comment":"","type_short":"ReferenceQueue","constant_value":null},{"type_long":"ghidra.util.datastruct.SoftCacheLongKeyMap.Entry","javadoc":"","static":false,"name":"head","comment":"","type_short":"Entry","constant_value":null},{"type_long":"ghidra.util.datastruct.LongObjectHashtable<java.lang.Object>","javadoc":"","static":false,"name":"map","comment":"","type_short":"LongObjectHashtable","constant_value":null}]}
