{"implements":[],"javadoc":"The ShortKeySet provides an interface for managing a set of ordered short keys\n between the values of 0 and N.  It can add keys, remove keys, find the next key\n greater than some value , and find the previous key less than some value.","static":false,"methods":[{"javadoc":"Returns the number of keys currently in the set.","static":false,"name":"size","comment":"Returns the number of keys currently in the set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Determines if a given key is in the set.\n@param key the key whose presence is to be tested.\n@return true if the key is in the set.","static":false,"name":"containsKey","comment":"Determines if a given key is in the set.","params":[{"type_long":"short","name":"key","comment":"the key whose presence is to be tested.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the key is in the set.","type_short":"boolean"}},{"javadoc":"Returns the first (lowest) key in the set.","static":false,"name":"getFirst","comment":"Returns the first (lowest) key in the set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the last (highest) key in the set.","static":false,"name":"getLast","comment":"Returns the last (highest) key in the set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Adds a key to the set.\n@param key the key to add to the set.","static":false,"name":"put","comment":"Adds a key to the set.","params":[{"type_long":"short","name":"key","comment":"the key to add to the set.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the key from the set.\n@param key the key to remove from the set.","static":false,"name":"remove","comment":"Removes the key from the set.","params":[{"type_long":"short","name":"key","comment":"the key to remove from the set.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes all keys from the set.","static":false,"name":"removeAll","comment":"Removes all keys from the set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"finds the next key that is in the set that is greater than the given key.\n@param key the key for which to find the next key after.","static":false,"name":"getNext","comment":"finds the next key that is in the set that is greater than the given key.","params":[{"type_long":"short","name":"key","comment":"the key for which to find the next key after.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"finds the previous key that is in the set that is less than the given key.\n@param key the key for which to find the previous key.","static":false,"name":"getPrevious","comment":"finds the previous key that is in the set that is less than the given key.","params":[{"type_long":"short","name":"key","comment":"the key for which to find the previous key.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Checks if the set is empty.\n@return true if the set is empty.","static":false,"name":"isEmpty","comment":"Checks if the set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set is empty.","type_short":"boolean"}}],"name":"ShortKeySet","comment":"The ShortKeySet provides an interface for managing a set of ordered short keys\n between the values of 0 and N.  It can add keys, remove keys, find the next key\n greater than some value , and find the previous key less than some value.","fields":[]}
