{"implements":[],"javadoc":"<code>ObjectClass<\/code> provides a fixed-size long-key-based object cache.\n Both a hard and weak cache are maintained, where the weak cache is only \n limited by available memory.  This cache mechanism is useful in ensuring that \n only a single object instance for a given key exists.\n <p>\n The weak cache is keyed, while the hard cache simply maintains the presence of\n an object in the weak cache.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a keyed-object cache of size hardCacheSize.\n@param hardCacheSize hard cache size.","static":false,"name":"<init>","comment":"Construct a keyed-object cache of size hardCacheSize.","params":[{"type_long":"int","name":"hardCacheSize","comment":"hard cache size.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if the keyed-object exists in the cache.\n@param key object key\n@return true if object is cached","static":false,"name":"contains","comment":"Determine if the keyed-object exists in the cache.","params":[{"type_long":"long","name":"key","comment":"object key","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"true if object is cached","type_short":"boolean"}},{"javadoc":"Get the object from cache which corresponds to the specified key.\n@param key object key\n@return cached object","static":false,"name":"get","comment":"Get the object from cache which corresponds to the specified key.","params":[{"type_long":"long","name":"key","comment":"object key","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"cached object","type_short":"Object"}},{"javadoc":"Return the hard cache size","static":false,"name":"size","comment":"Return the hard cache size","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Adjust the hard cache size\n@param size new hard cache size","static":false,"name":"setHardCacheSize","comment":"Adjust the hard cache size","params":[{"type_long":"int","name":"size","comment":"new hard cache size","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add an object to the cache\n@param key object key\n@param obj the object","static":false,"name":"put","comment":"Add an object to the cache","params":[{"type_long":"long","name":"key","comment":"object key","type_short":"long"},{"type_long":"java.lang.Object","name":"obj","comment":"the object","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear both hard and weak caches.\n The cache should be cleared when all cached objects have become invalid.","static":false,"name":"clear","comment":"Clear both hard and weak caches.\n The cache should be cleared when all cached objects have become invalid.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the specified range of keyed objects from both hard and weak caches.\n A cache range should be cleared when the corresponding objects have become invalid.\n@param startKey minimum object key value\n@param endKey maximum object key value","static":false,"name":"remove","comment":"Remove the specified range of keyed objects from both hard and weak caches.\n A cache range should be cleared when the corresponding objects have become invalid.","params":[{"type_long":"long","name":"startKey","comment":"minimum object key value","type_short":"long"},{"type_long":"long","name":"endKey","comment":"maximum object key value","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the specified keyed object from both hard and weak caches.\n An object should be removed from the cache when it becomes invalid.\n@param key object key","static":false,"name":"remove","comment":"Remove the specified keyed object from both hard and weak caches.\n An object should be removed from the cache when it becomes invalid.","params":[{"type_long":"long","name":"key","comment":"object key","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add the specified object to the hard cache.\n@param obj object","static":false,"name":"addToHardCache","comment":"Add the specified object to the hard cache.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"object","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cleanup weak cache","static":false,"name":"processQueue","comment":"Cleanup weak cache","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ObjectCache","comment":"ObjectClass provides a fixed-size long-key-based object cache.\n Both a hard and weak cache are maintained, where the weak cache is only \n limited by available memory.  This cache mechanism is useful in ensuring that \n only a single object instance for a given key exists.\n \n The weak cache is keyed, while the hard cache simply maintains the presence of\n an object in the weak cache.","fields":[{"type_long":"ghidra.util.datastruct.LongObjectHashtable<java.lang.Object>","javadoc":"","static":false,"name":"hashTable","comment":"","type_short":"LongObjectHashtable","constant_value":null},{"type_long":"java.lang.ref.ReferenceQueue<java.lang.Object>","javadoc":"","static":false,"name":"refQueue","comment":"","type_short":"ReferenceQueue","constant_value":null},{"type_long":"java.util.LinkedList<java.lang.Object>","javadoc":"","static":false,"name":"hardCache","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"hardCacheSize","comment":"","type_short":"int","constant_value":null}]}
