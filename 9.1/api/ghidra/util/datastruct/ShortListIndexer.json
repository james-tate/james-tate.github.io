{"implements":["java.io.Serializable"],"javadoc":"Class to manage multiple linked lists of short indexes. Users can add indexes\n to a list, remove indexes from a list, remove all indexes from a list, and\n retrieve all indexes within a given list.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"The constructor\n@param numLists - The initial number of lists to be managed.\n@param capacity - The current size of the pool of possible indexes.  All indexes\n  begin on the free list.","static":false,"name":"<init>","comment":"The constructor","params":[{"type_long":"short","name":"numLists","comment":"- The initial number of lists to be managed.","type_short":"short"},{"type_long":"short","name":"capacity","comment":"- The current size of the pool of possible indexes.  All indexes\n  begin on the free list.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allocates a new index resource and adds it to the front of the linked list\n indexed by listID.\n@param listID the id of the list to add to.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).","static":false,"name":"add","comment":"Allocates a new index resource and adds it to the front of the linked list\n indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"the id of the list to add to.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Allocates a new index resource and adds it to the end of the linked list\n indexed by listID.\n@param listID the id of the list to add to.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).","static":false,"name":"append","comment":"Allocates a new index resource and adds it to the end of the linked list\n indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"the id of the list to add to.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Remove the index resource from the linked list indexed by listID.\n@param listID the id of the list from which to removed the value at index.\n@param index the index of the value to be removed from the specified list.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).","static":false,"name":"remove","comment":"Remove the index resource from the linked list indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"the id of the list from which to removed the value at index.","type_short":"short"},{"type_long":"short","name":"index","comment":"the index of the value to be removed from the specified list.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes all indexes from the specified list.\n@param listID the list to be emptied.","static":false,"name":"removeAll","comment":"Removes all indexes from the specified list.","params":[{"type_long":"short","name":"listID","comment":"the list to be emptied.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Computes the next size that should be used to grow the index capacity.","static":false,"name":"getNewCapacity","comment":"Computes the next size that should be used to grow the index capacity.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the current number of used index resources.","static":false,"name":"getSize","comment":"Returns the current number of used index resources.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the current index capacity.","static":false,"name":"getCapacity","comment":"Returns the current index capacity.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the number of linked list being managed.","static":false,"name":"getNumLists","comment":"Returns the number of linked list being managed.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the next index resource that follows the given index in a linked list.\n The index should be an index that is in some linked list.  Otherwise, the\n results are undefined( probably give you the next index on the free list )\n@param index to search after to find the next index.\n@exception IndexOutOfBoundsException thrown if the index is not in the\n the range [0, capacity].","static":false,"name":"next","comment":"Returns the next index resource that follows the given index in a linked list.\n The index should be an index that is in some linked list.  Otherwise, the\n results are undefined( probably give you the next index on the free list )","params":[{"type_long":"short","name":"index","comment":"to search after to find the next index.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the first index resource on the linked list indexed by listID.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists].","static":false,"name":"first","comment":"Returns the first index resource on the linked list indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Increases the index resource pool.\n@param newCapacity the new number of resource indexes to manage.  if this number\n is smaller than the current number of resource indexes, then nothing changes.","static":false,"name":"growCapacity","comment":"Increases the index resource pool.","params":[{"type_long":"short","name":"newCapacity","comment":"the new number of resource indexes to manage.  if this number\n is smaller than the current number of resource indexes, then nothing changes.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Increases the number of managed linked lists.\n@param newListSize the new number of linked lists.  If this number is\n smaller than the current number of linked lists, then nothing changes.","static":false,"name":"growNumLists","comment":"Increases the number of managed linked lists.","params":[{"type_long":"short","name":"newListSize","comment":"the new number of linked lists.  If this number is\n smaller than the current number of linked lists, then nothing changes.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes all indexes from all lists.","static":false,"name":"clear","comment":"Removes all indexes from all lists.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of indexes in the specified list.\n@exception IndexOutOfBoundsException thrown if the listID is not in the\n the range [0, numLists).","static":false,"name":"getListSize","comment":"Returns the number of indexes in the specified list.","params":[{"type_long":"short","name":"listID","comment":"","type_short":"short"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns a free index resource from the free list.  If there are no\n free index values, then this method will attempt to grow the index\n resource pool.","static":false,"name":"allocate","comment":"Returns a free index resource from the free list.  If there are no\n free index values, then this method will attempt to grow the index\n resource pool.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the given index resource to the free list.","static":false,"name":"free","comment":"Returns the given index resource to the free list.","params":[{"type_long":"short","name":"p","comment":"","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ShortListIndexer","comment":"Class to manage multiple linked lists of short indexes. Users can add indexes\n to a list, remove indexes from a list, remove all indexes from a list, and\n retrieve all indexes within a given list.","fields":[{"type_long":"short","javadoc":"","static":true,"name":"END_OF_LIST","comment":"","type_short":"short","constant_value":"-1"},{"type_long":"short[]","javadoc":"","static":false,"name":"heads","comment":"","type_short":"short[]","constant_value":null},{"type_long":"short[]","javadoc":"","static":false,"name":"links","comment":"","type_short":"short[]","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"freePtr","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"size","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"capacity","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"numLists","comment":"","type_short":"short","constant_value":null}]}
