{"implements":[],"javadoc":"An OutputStream which utilizes a TaskMonitor to indicate output progress and\n allows the operation to be cancelled via the TaskMonitor.","static":false,"extends":"java.io.OutputStream","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.io.OutputStream","name":"out","comment":"","type_short":"OutputStream"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reset the current progress count to the specified value.","static":false,"name":"setProgress","comment":"Reset the current progress count to the specified value.","params":[{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes the specified <code>byte<\/code> to this output stream. \n <p>\n The <code>write<\/code> method of <code>FilterOutputStream<\/code> \n calls the <code>write<\/code> method of its underlying output stream, \n that is, it performs <tt>out.write(b)<\/tt>.\n <p>\n Implements the abstract <tt>write<\/tt> method of <tt>OutputStream<\/tt>.\n@param b the <code>byte<\/code>.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes the specified byte to this output stream. \n \n The write method of FilterOutputStream \n calls the write method of its underlying output stream, \n that is, it performs out.write(b).\n \n Implements the abstract write method of OutputStream.","params":[{"type_long":"int","name":"b","comment":"the byte.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes <code>b.length<\/code> bytes to this output stream. \n <p>\n The <code>write<\/code> method of <code>FilterOutputStream<\/code> \n calls its <code>write<\/code> method of three arguments with the \n arguments <code>b<\/code>, <code>0<\/code>, and \n <code>b.length<\/code>. \n <p>\n Note that this method does not call the one-argument \n <code>write<\/code> method of its underlying stream with the single \n argument <code>b<\/code>.\n@param b the data to be written.\n@exception IOException if an I\/O error occurs.\n@see java.io.FilterOutputStream#write(byte[], int, int)","static":false,"name":"write","comment":"Writes b.length bytes to this output stream. \n \n The write method of FilterOutputStream \n calls its write method of three arguments with the \n arguments b, 0, and \n b.length. \n \n Note that this method does not call the one-argument \n write method of its underlying stream with the single \n argument b.","params":[{"type_long":"byte[]","name":"b","comment":"the data to be written.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes <code>len<\/code> bytes from the specified \n <code>byte<\/code> array starting at offset <code>off<\/code> to \n this output stream. \n <p>\n The <code>write<\/code> method of <code>FilterOutputStream<\/code> \n calls the <code>write<\/code> method of one argument on each \n <code>byte<\/code> to output. \n <p>\n Note that this method does not call the <code>write<\/code> method \n of its underlying input stream with the same arguments. Subclasses \n of <code>FilterOutputStream<\/code> should provide a more efficient \n implementation of this method.\n@param b the data.\n@param off the start offset in the data.\n@param len the number of bytes to write.\n@exception IOException if an I\/O error occurs.\n@see java.io.FilterOutputStream#write(int)","static":false,"name":"write","comment":"Writes len bytes from the specified \n byte array starting at offset off to \n this output stream. \n \n The write method of FilterOutputStream \n calls the write method of one argument on each \n byte to output. \n \n Note that this method does not call the write method \n of its underlying input stream with the same arguments. Subclasses \n of FilterOutputStream should provide a more efficient \n implementation of this method.","params":[{"type_long":"byte[]","name":"b","comment":"the data.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the start offset in the data.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to write.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Flushes this output stream and forces any buffered output bytes \n to be written out to the stream. \n <p>\n The <code>flush<\/code> method of <code>FilterOutputStream<\/code> \n calls the <code>flush<\/code> method of its underlying output stream.\n@exception IOException if an I\/O error occurs.","static":false,"name":"flush","comment":"Flushes this output stream and forces any buffered output bytes \n to be written out to the stream. \n \n The flush method of FilterOutputStream \n calls the flush method of its underlying output stream.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Closes this output stream and releases any system resources \n associated with the stream. \n <p>\n The <code>close<\/code> method of <code>FilterOutputStream<\/code> \n calls its <code>flush<\/code> method, and then calls the \n <code>close<\/code> method of its underlying output stream.\n@exception IOException if an I\/O error occurs.\n@see java.io.FilterOutputStream#flush()","static":false,"name":"close","comment":"Closes this output stream and releases any system resources \n associated with the stream. \n \n The close method of FilterOutputStream \n calls its flush method, and then calls the \n close method of its underlying output stream.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MonitoredOutputStream","comment":"An OutputStream which utilizes a TaskMonitor to indicate output progress and\n allows the operation to be cancelled via the TaskMonitor.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"PROGRESS_INCREMENT","comment":"","type_short":"int","constant_value":"32768"},{"type_long":"java.io.OutputStream","javadoc":"","static":false,"name":"out","comment":"","type_short":"OutputStream","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"smallCount","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"count","comment":"","type_short":"int","constant_value":null}]}
