{"implements":["java.util.List","java.util.Deque"],"javadoc":"A set where the ordering of elements may change over time, based on an alternative comparator\n \n This is an implementation of {@link Set} where elements may be sorted by an alternative\n comparator (usually by \"cost\"), rather than by the natural ordering. It may seem odd, but the\n natural ordering is still used to determine the uniqueness of keys. That is, two elements that\n are unequal -- but are considered equal by the alternative comparator -- may co-exist in the\n set. (Note: in such cases, the two elements are ordered first-in first-out). Additionally, if\n the elements are mutable, then their ordering may change over time. This mode of operation is\n enabled by the {@link #update(Object)} method, which must be called to notify the set of any\n change to an element that may affect its order. This set also implements the {@link List} and\n {@link Deque} interfaces. Since the set is ordered, it makes sense to treat it as a list. It\n provides fairly efficient implementations of {@link #get(int)} and {@link #indexOf(Object)}.\n Sequential access is best performed via {@link #iterator()}, since this will use a linked list.\n \n The underlying implementation is backed by {@link DynamicValueSortedTreeMap}. Currently, it is\n not thread safe.\n@param <E> the type of the elements","static":false,"extends":"java.util.AbstractSet","methods":[{"javadoc":"Construct a dynamic sorted tree set using the elements' natural ordering\n \n Other than, perhaps, a more convenient interface, this offers few if any benefits over the\n stock {@link Set}.","static":false,"name":"<init>","comment":"Construct a dynamic sorted tree set using the elements' natural ordering\n \n Other than, perhaps, a more convenient interface, this offers few if any benefits over the\n stock Set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a dynamic sorted tree set using a custom comparator to order the elements\n@param comparator the comparator, providing a total ordering of the values","static":false,"name":"<init>","comment":"Construct a dynamic sorted tree set using a custom comparator to order the elements","params":[{"type_long":"java.util.Comparator<E>","name":"comparator","comment":"the comparator, providing a total ordering of the values","type_short":"Comparator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"add","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts the element, ignoring index\n@param index ignore since the set is sorted","static":false,"name":"add","comment":"Inserts the element, ignoring index","params":[{"type_long":"int","name":"index","comment":"ignore since the set is sorted","type_short":"int"},{"type_long":"E","name":"element","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts all elements from the given collection, ignoring index\n@param index ignore since the set is sorted","static":false,"name":"addAll","comment":"Inserts all elements from the given collection, ignoring index","params":[{"type_long":"int","name":"index","comment":"ignore since the set is sorted","type_short":"int"},{"type_long":"java.util.Collection<? extends E>","name":"c","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts the element, not necessarily first","static":false,"name":"addFirst","comment":"Inserts the element, not necessarily first","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts the element, not necessarily last","static":false,"name":"addLast","comment":"Inserts the element, not necessarily last","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clear","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"contains","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"descendingIterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<E>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"element","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"getFirst","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"getLast","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"indexOf","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<E>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"lastIndexOf","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"listIterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.ListIterator<E>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"listIterator","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.ListIterator<E>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"offer","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts the element, not necessarily first","static":false,"name":"offerFirst","comment":"Inserts the element, not necessarily first","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts the element, not necessarily last","static":false,"name":"offerLast","comment":"Inserts the element, not necessarily last","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"peek","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"peekFirst","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"peekLast","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"poll","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"pollFirst","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"pollLast","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"pop","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"push","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeAll","comment":"","params":[{"type_long":"java.util.Collection<?>","name":"c","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeFirst","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"removeFirstOccurrence","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeLast","comment":"","params":[],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"removeLastOccurrence","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"retainAll","comment":"","params":[{"type_long":"java.util.Collection<?>","name":"c","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Replace the element at the given index with the given element\n \n Because the set is sorted, the index of the given element may not be the same as\n {@code index}. In fact, this is equivalent to removing the element at the given index, and\n then inserting the given element at its sorted position.","static":false,"name":"set","comment":"Replace the element at the given index with the given element\n \n Because the set is sorted, the index of the given element may not be the same as\n . In fact, this is equivalent to removing the element at the given index, and\n then inserting the given element at its sorted position.","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"E","name":"element","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"size","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"spliterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Spliterator<E>","comment":"","type_short":"Spliterator"}},{"javadoc":"This operation is not supported","static":false,"name":"subList","comment":"This operation is not supported","params":[{"type_long":"int","name":"fromIndex","comment":"","type_short":"int"},{"type_long":"int","name":"toIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<E>","comment":"","type_short":"List"}},{"javadoc":"Notify the queue of a change to an elements cost.\n \n This may cause the element's index to change.\n@param e the element whose cost may have changed\n@return true if the index changed","static":false,"name":"update","comment":"Notify the queue of a change to an elements cost.\n \n This may cause the element's index to change.","params":[{"type_long":"E","name":"e","comment":"the element whose cost may have changed","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the index changed","type_short":"boolean"}}],"name":"DynamicSortedTreeSet","comment":"A set where the ordering of elements may change over time, based on an alternative comparator\n \n This is an implementation of Set where elements may be sorted by an alternative\n comparator (usually by \"cost\"), rather than by the natural ordering. It may seem odd, but the\n natural ordering is still used to determine the uniqueness of keys. That is, two elements that\n are unequal -- but are considered equal by the alternative comparator -- may co-exist in the\n set. (Note: in such cases, the two elements are ordered first-in first-out). Additionally, if\n the elements are mutable, then their ordering may change over time. This mode of operation is\n enabled by the #update(Object) method, which must be called to notify the set of any\n change to an element that may affect its order. This set also implements the List and\n Deque interfaces. Since the set is ordered, it makes sense to treat it as a list. It\n provides fairly efficient implementations of #get(int) and #indexOf(Object).\n Sequential access is best performed via #iterator(), since this will use a linked list.\n \n The underlying implementation is backed by DynamicValueSortedTreeMap. Currently, it is\n not thread safe.","fields":[{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<E,E>.ValueSortedTreeMapKeySet","javadoc":"","static":false,"name":"keys","comment":"","type_short":"ValueSortedTreeMapKeySet","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<E,E>","javadoc":"","static":false,"name":"map","comment":"","type_short":"DynamicValueSortedTreeMap","constant_value":null}]}
