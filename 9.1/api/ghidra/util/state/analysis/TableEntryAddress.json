{"implements":[],"javadoc":"","static":false,"extends":"ghidra.util.state.analysis.Switch","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"tableBase","comment":"","type_short":"Address"},{"type_long":"ghidra.util.state.analysis.ComputedTableOffset","name":"tableOffset","comment":"","type_short":"ComputedTableOffset"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns base address of table","static":false,"name":"getTableBaseAddress","comment":"Returns base address of table","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the address of the table entry which corresponds to the specified indexValue.\n@param caseIndexValue index value for specific case\n@return table entry address","static":false,"name":"getCaseAddress","comment":"Get the address of the table entry which corresponds to the specified indexValue.","params":[{"type_long":"int","name":"caseIndexValue","comment":"index value for specific case","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"table entry address","type_short":"Address"}},{"javadoc":"Returns table entry size in bytes","static":false,"name":"getTableEntrySize","comment":"Returns table entry size in bytes","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns Varnode or VarnodeOperation which corresponds to \n the index value which identifies the switch case.","static":false,"name":"getIndexValue","comment":"Returns Varnode or VarnodeOperation which corresponds to \n the index value which identifies the switch case.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"Qualify VarnodeOperation as INT_ADD(constant-table-address, computed-table-offset)\n and return TableEntryAddress if qualified or null if not.\n@param addrFactory\n@param v potential input value which corresponds to a switch table entry address\n@return TableEntryAddress object or null if v failed qualification","static":true,"name":"getTableEntryAddress","comment":"Qualify VarnodeOperation as INT_ADD(constant-table-address, computed-table-offset)\n and return TableEntryAddress if qualified or null if not.","params":[{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"v","comment":"potential input value which corresponds to a switch table entry address","type_short":"Varnode"}],"throws":[],"return":{"type_long":"ghidra.util.state.analysis.TableEntryAddress","comment":"TableEntryAddress object or null if v failed qualification","type_short":"TableEntryAddress"}},{"javadoc":"","static":true,"name":"getAddress","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}}],"name":"TableEntryAddress","comment":"","fields":[{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"tableBase","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.util.state.analysis.ComputedTableOffset","javadoc":"","static":false,"name":"tableOffset","comment":"","type_short":"ComputedTableOffset","constant_value":null}]}
