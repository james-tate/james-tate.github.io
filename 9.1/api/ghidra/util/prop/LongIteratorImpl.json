{"implements":["ghidra.util.LongIterator"],"javadoc":"Class to iterate over indexes of a PropertyMap.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.util.prop.PropertySet","name":"pm","comment":"","type_short":"PropertySet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for creating a LongIterator that iterates\n over the entire range of properties.\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param before If before is true, start will be the first index returned\n from a call to next(); If before is false, start will be the first index returned\n from a call to previous().","static":false,"name":"<init>","comment":"Constructor for creating a LongIterator that iterates\n over the entire range of properties.","params":[{"type_long":"ghidra.util.prop.PropertySet","name":"pm","comment":"the property map to be iterated","type_short":"PropertySet"},{"type_long":"long","name":"start","comment":"the initial property map index position of the iterator","type_short":"long"},{"type_long":"boolean","name":"before","comment":"If before is true, start will be the first index returned\n from a call to next(); If before is false, start will be the first index returned\n from a call to previous().","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param end the last property map index position of the iterator","static":false,"name":"<init>","comment":"Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).","params":[{"type_long":"ghidra.util.prop.PropertySet","name":"pm","comment":"the property map to be iterated","type_short":"PropertySet"},{"type_long":"long","name":"start","comment":"the initial property map index position of the iterator","type_short":"long"},{"type_long":"long","name":"end","comment":"the last property map index position of the iterator","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).\n@param pm the property map to be iterated\n@param start the initial property map index position of the iterator\n@param end the last property map index position of the iterator\n@param atStart If true, the iterator goes from start to end. \n Otherwise, from end to start.","static":false,"name":"<init>","comment":"Constructor for creating a LongIterator that iterates\n over a range of property indexes. This iterator will only\n return property indexes within the given range (inclusive).","params":[{"type_long":"ghidra.util.prop.PropertySet","name":"pm","comment":"the property map to be iterated","type_short":"PropertySet"},{"type_long":"long","name":"start","comment":"the initial property map index position of the iterator","type_short":"long"},{"type_long":"long","name":"end","comment":"the last property map index position of the iterator","type_short":"long"},{"type_long":"boolean","name":"atStart","comment":"If true, the iterator goes from start to end. \n Otherwise, from end to start.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the iterator has more indexes.","static":false,"name":"hasNext","comment":"Returns true if the iterator has more indexes.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the next index in the iterator.","static":false,"name":"next","comment":"Returns the next index in the iterator.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Return true if the iterator has a previous index.","static":false,"name":"hasPrevious","comment":"Return true if the iterator has a previous index.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the previous index in the iterator.","static":false,"name":"previous","comment":"Returns the previous index in the iterator.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Return whether there is a next index; if there is,\n \"currentNext\" has the value.","static":false,"name":"findNext","comment":"Return whether there is a next index; if there is,\n \"currentNext\" has the value.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return whether there is a previous index; if there is,\n \"currentPrevious\" has the value.","static":false,"name":"findPrevious","comment":"Return whether there is a previous index; if there is,\n \"currentPrevious\" has the value.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"checks to see if the start index has a property so that the first\n call to next() will return that index.","static":false,"name":"init","comment":"checks to see if the start index has a property so that the first\n call to next() will return that index.","params":[{"type_long":"boolean","name":"atStart","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LongIteratorImpl","comment":"Class to iterate over indexes of a PropertyMap.","fields":[{"type_long":"ghidra.util.prop.PropertySet","javadoc":"","static":false,"name":"pm","comment":"","type_short":"PropertySet","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"start","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"end","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"current","comment":"","type_short":"long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasBoundaries","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doesHaveNext","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doesHavePrevious","comment":"","type_short":"boolean","constant_value":null}]}
