{"implements":["ghidra.util.table.field.ProgramLocationTableColumn"],"javadoc":"A convenience class that allows subclasses to signal that they implement \n {@link ProgramLocationTableColumn} and that they are {@link ExtensionPoint}s.\n <p>\n If you do not wish to be an extension point, but do wish to provide ProgramLocation objects,\n then you can just implement {@link ProgramLocationTableColumn} or extend \n {@link AbstractProgramLocationTableColumn}.\n@see ProgramLocationTableColumn\n@see AbstractProgramLocationTableColumn\n@param <ROW_TYPE> The row object class supported by this column\n@param <COLUMN_TYPE> The column object class supported by this column","static":false,"extends":"docking.widgets.table.DynamicTableColumnExtensionPoint","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ProgramLocationTableColumnExtensionPoint","comment":"A convenience class that allows subclasses to signal that they implement \n ProgramLocationTableColumn and that they are ExtensionPoints.\n \n If you do not wish to be an extension point, but do wish to provide ProgramLocation objects,\n then you can just implement ProgramLocationTableColumn or extend \n AbstractProgramLocationTableColumn.","fields":[]}
