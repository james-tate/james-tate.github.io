{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getRandomLetterOrDigit","comment":"","params":[],"throws":[],"return":{"type_long":"char","comment":"","type_short":"char"}},{"javadoc":"Generate hash in a hex character representation\n@param algorithm message digest algorithm\n@param msg message text\n@return hex hash value in text format\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported algorithms","static":true,"name":"getHash","comment":"Generate hash in a hex character representation","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"char[]","name":"msg","comment":"message text","type_short":"char[]"}],"throws":[],"return":{"type_long":"char[]","comment":"hex hash value in text format","type_short":"char[]"}},{"javadoc":"Generate salted hash for specified message.  Supplied salt is \n returned as prefix to returned hash.\n@param algorithm message digest algorithm\n@param salt digest salt (use empty string for no salt)\n@param msg message text\n@return salted hash using specified salt which is\n returned as a prefix to the hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms","static":true,"name":"getSaltedHash","comment":"Generate salted hash for specified message.  Supplied salt is \n returned as prefix to returned hash.","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"char[]","name":"salt","comment":"digest salt (use empty string for no salt)","type_short":"char[]"},{"type_long":"char[]","name":"msg","comment":"message text","type_short":"char[]"}],"throws":[],"return":{"type_long":"char[]","comment":"salted hash using specified salt which is\n returned as a prefix to the hash","type_short":"char[]"}},{"javadoc":"Generate salted hash for specified message using random salt.  \n First 4-characters of returned hash correspond to the salt data.\n@param algorithm message digest algorithm\n@param msg message text\n@return salted hash using randomly generated salt which is\n returned as a prefix to the hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms","static":true,"name":"getSaltedHash","comment":"Generate salted hash for specified message using random salt.  \n First 4-characters of returned hash correspond to the salt data.","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"char[]","name":"msg","comment":"message text","type_short":"char[]"}],"throws":[],"return":{"type_long":"char[]","comment":"salted hash using randomly generated salt which is\n returned as a prefix to the hash","type_short":"char[]"}},{"javadoc":"Generate message digest hash for specified input stream.  Stream will be read\n until EOF is reached.\n@param algorithm message digest algorithm\n@param in input stream\n@return message digest hash\n@throws IOException if reading input stream produces an error\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms","static":true,"name":"getHash","comment":"Generate message digest hash for specified input stream.  Stream will be read\n until EOF is reached.","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"java.io.InputStream","name":"in","comment":"input stream","type_short":"InputStream"}],"throws":[{"type_long":"java.io.IOException","comment":"if reading input stream produces an error","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"message digest hash","type_short":"String"}},{"javadoc":"Generate message digest hash for specified file contents.\n@param algorithm message digest algorithm\n@param file file to be read\n@return message digest hash\n@throws IOException if opening or reading file produces an error\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms","static":true,"name":"getHash","comment":"Generate message digest hash for specified file contents.","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"java.io.File","name":"file","comment":"file to be read","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if opening or reading file produces an error","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"message digest hash","type_short":"String"}},{"javadoc":"Generate combined message digest hash for all values in the \n specified values list.\n@param algorithm message digest algorithm\n@param values list of text strings\n@return message digest hash\n@throws IllegalArgumentException if specified algorithm is not supported\n@see MessageDigest for supported hash algorithms","static":true,"name":"getHash","comment":"Generate combined message digest hash for all values in the \n specified values list.","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"message digest algorithm","type_short":"String"},{"type_long":"java.util.List<java.lang.String>","name":"values","comment":"list of text strings","type_short":"List"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"message digest hash","type_short":"String"}},{"javadoc":"","static":true,"name":"getMessageDigest","comment":"","params":[{"type_long":"java.lang.String","name":"algorithm","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.security.MessageDigest","comment":"","type_short":"MessageDigest"}},{"javadoc":"Convert binary data to a sequence of hex characters.\n@param data binary data\n@return hex character representation of data","static":true,"name":"hexDump","comment":"Convert binary data to a sequence of hex characters.","params":[{"type_long":"byte[]","name":"data","comment":"binary data","type_short":"byte[]"}],"throws":[],"return":{"type_long":"char[]","comment":"hex character representation of data","type_short":"char[]"}}],"name":"HashUtilities","comment":"","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MD5_ALGORITHM","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SHA256_ALGORITHM","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"SALT_LENGTH","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"MD5_UNSALTED_HASH_LENGTH","comment":"","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"","static":true,"name":"MD5_SALTED_HASH_LENGTH","comment":"","type_short":"int","constant_value":"36"},{"type_long":"int","javadoc":"","static":true,"name":"SHA256_UNSALTED_HASH_LENGTH","comment":"","type_short":"int","constant_value":"64"},{"type_long":"int","javadoc":"","static":true,"name":"SHA256_SALTED_HASH_LENGTH","comment":"","type_short":"int","constant_value":"68"},{"type_long":"java.util.Random","javadoc":"","static":true,"name":"random","comment":"","type_short":"Random","constant_value":null}]}
