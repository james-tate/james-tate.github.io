{"implements":[],"javadoc":"This class converts user inputted strings and creates {@link Pattern}s from them\n that can be used to create {@link Matcher} objects.  Some methods create patterns that\n are meant to be used with {@link Matcher#matches()}, while others create patterns\n meant to be used with {@link Matcher#find()}.  Please see each method javadoc for clarification.\n <p>\n Note: methods in the class will escape regex characters, which means that normal regex\n queries will not work, but will be instead interpreted as literal string searches.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<b>\n Note: this is the default model of how to let users search for things in Ghidra.  This\n is NOT a tool to allow regex searching, but instead allows users to perform searches while\n using familiar globbing characters such as '*' and '?'.\n <\/b>\n <p>\n This method can be used with {@link Matcher#matches()} or {@link Matcher#find()}.\n <p>\n Create a regular expression from the given input. <b>Note:<\/b> the regular expression\n created by this method is not a pure regular expression.  More specifically, many\n regular expression characters passed to this method will be escaped\n (see {@link #escapeRegexCharacters(String, boolean, boolean)}.\n <p>\n Also, globbing characters\n <b><u>will<\/u><\/b> be changed from a regular expression meaning to a\n command-line style glob meaning.\n\n <p>\n <b>Note: <\/b>This method <b>will<\/b> escape regular expression\n characters, such as:\n <ul>\n <li>?\n <li>.\n <li>$\n <li>...and many others\n <\/ul>\n Thus, this method is not meant to <b>accept<\/b> regular expressions, but\n rather <b>generates<\/b> regular expressions.\n@param input string to create a regular expression from\n@param caseSensitive true if the regular expression is case sensitive\n@return Pattern the compiled regular expression\n@throws PatternSyntaxExpression if the input could be compiled","static":true,"name":"createSearchPattern","comment":"\n Note: this is the default model of how to let users search for things in Ghidra.  This\n is NOT a tool to allow regex searching, but instead allows users to perform searches while\n using familiar globbing characters such as '*' and '?'.\n \n \n This method can be used with Matcher#matches() or Matcher#find().\n \n Create a regular expression from the given input. Note: the regular expression\n created by this method is not a pure regular expression.  More specifically, many\n regular expression characters passed to this method will be escaped\n (see #escapeRegexCharacters(String, boolean, boolean).\n \n Also, globbing characters\n will be changed from a regular expression meaning to a\n command-line style glob meaning.\n\n \n Note: This method will escape regular expression\n characters, such as:\n \n ?\n .\n $\n ...and many others\n \n Thus, this method is not meant to accept regular expressions, but\n rather generates regular expressions.","params":[{"type_long":"java.lang.String","name":"input","comment":"string to create a regular expression from","type_short":"String"},{"type_long":"boolean","name":"caseSensitive","comment":"true if the regular expression is case sensitive","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"Pattern the compiled regular expression","type_short":"Pattern"}},{"javadoc":"Generate a compiled representation of a regular expression, ignoring regex special\n characters  . The resulting pattern will match the literal text string.\n <p>\n This method can be used with {@link Matcher#matches()} or {@link Matcher#find()}.\n <p>\n This method will <b><u>not<\/u><\/b> turn globbing characters into regex characters.\n If you need that, then see the other methods of this class.\n@param text search string\n@return Pattern the compiled regular expression\n@throws PatternSyntaxExpression if the input could be compiled","static":true,"name":"createLiteralSearchPattern","comment":"Generate a compiled representation of a regular expression, ignoring regex special\n characters  . The resulting pattern will match the literal text string.\n \n This method can be used with Matcher#matches() or Matcher#find().\n \n This method will not turn globbing characters into regex characters.\n If you need that, then see the other methods of this class.","params":[{"type_long":"java.lang.String","name":"text","comment":"search string","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"Pattern the compiled regular expression","type_short":"Pattern"}},{"javadoc":"Creates a regular expression Pattern that will <b>match<\/b>\n all strings that <b>start with<\/b> the given input string.\n <p>\n This method should only be used with {@link Matcher#matches()}.\n <p>\n The returned regular expression Pattern should be used\n with the \"matches\" method on a Matcher.  (As opposed to \"find\").\n@param input the string that you want to your matched strings to start with.\n@param allowGlobbing if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.\n@param options any {@link Pattern} options desired.  For example, you can pass\n \t\t\t{@link Pattern#CASE_INSENSITIVE} to get case insensitivity.\n@return a regular expression Pattern that will <b>match<\/b>\n \t\t   \tall strings that start with the given input string.","static":true,"name":"createStartsWithPattern","comment":"Creates a regular expression Pattern that will match\n all strings that start with the given input string.\n \n This method should only be used with Matcher#matches().\n \n The returned regular expression Pattern should be used\n with the \"matches\" method on a Matcher.  (As opposed to \"find\").","params":[{"type_long":"java.lang.String","name":"input","comment":"the string that you want to your matched strings to start with.","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.","type_short":"boolean"},{"type_long":"int","name":"options","comment":"any Pattern options desired.  For example, you can pass\n \t\t\tPattern#CASE_INSENSITIVE to get case insensitivity.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"a regular expression Pattern that will match\n \t\t   \tall strings that start with the given input string.","type_short":"Pattern"}},{"javadoc":"Creates a regular expression Pattern that will <b>match<\/b>\n all strings that <b>end with<\/b> the given input string.\n <p>\n This method should only be used with {@link Matcher#matches()}.\n <p>\n The returned regular expression Pattern should be used\n with the \"matches\" method on a Matcher.  (As opposed to \"find\").\n@param input the string that you want to your matched strings to end with.\n@param allowGlobbing if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.\n@param options any {@link Pattern} options desired.  For example, you can pass\n \t\t\t{@link Pattern#CASE_INSENSITIVE} to get case insensitivity.\n@return a regular expression Pattern that will <b>match<\/b>\n \t\t   \tall strings that end with the given input string.","static":true,"name":"createEndsWithPattern","comment":"Creates a regular expression Pattern that will match\n all strings that end with the given input string.\n \n This method should only be used with Matcher#matches().\n \n The returned regular expression Pattern should be used\n with the \"matches\" method on a Matcher.  (As opposed to \"find\").","params":[{"type_long":"java.lang.String","name":"input","comment":"the string that you want to your matched strings to end with.","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.","type_short":"boolean"},{"type_long":"int","name":"options","comment":"any Pattern options desired.  For example, you can pass\n \t\t\tPattern#CASE_INSENSITIVE to get case insensitivity.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"a regular expression Pattern that will match\n \t\t   \tall strings that end with the given input string.","type_short":"Pattern"}},{"javadoc":"Creates a regular expression Pattern that will <b>match<\/b>\n all strings that <b>contain<\/b> the given input string.\n <p>\n This method should only be used with {@link Matcher#matches()}.\n@param input the string that you want to your matched strings to contain.\n@param allowGlobbing if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.\n@param options any {@link Pattern} options desired.  For example, you can pass\n \t\t\t{@link Pattern#CASE_INSENSITIVE} to get case insensitivity.\n@return a regular expression Pattern that will <b>match<\/b>\n all strings that contain the given input string.","static":true,"name":"createContainsPattern","comment":"Creates a regular expression Pattern that will match\n all strings that contain the given input string.\n \n This method should only be used with Matcher#matches().","params":[{"type_long":"java.lang.String","name":"input","comment":"the string that you want to your matched strings to contain.","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.","type_short":"boolean"},{"type_long":"int","name":"options","comment":"any Pattern options desired.  For example, you can pass\n \t\t\tPattern#CASE_INSENSITIVE to get case insensitivity.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"a regular expression Pattern that will match\n all strings that contain the given input string.","type_short":"Pattern"}},{"javadoc":"Creates a regular expression Pattern that will match all strings that\n <b>match exactly<\/b> the given input string.\n <p>\n This method can be used with {@link Matcher#matches()} or {@link Matcher#find()}.\n <p>\n@param input the string that you want to your matched strings to exactly match.\n@param allowGlobbing if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.\n@param options any {@link Pattern} options desired.  For example, you can pass\n \t\t\t{@link Pattern#CASE_INSENSITIVE} to get case insensitivity.\n@return a regular expression Pattern that will <b>match<\/b>\n \t\t\tall strings that exactly match with the given input string.","static":true,"name":"createPattern","comment":"Creates a regular expression Pattern that will match all strings that\n match exactly the given input string.\n \n This method can be used with Matcher#matches() or Matcher#find().\n ","params":[{"type_long":"java.lang.String","name":"input","comment":"the string that you want to your matched strings to exactly match.","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.","type_short":"boolean"},{"type_long":"int","name":"options","comment":"any Pattern options desired.  For example, you can pass\n \t\t\tPattern#CASE_INSENSITIVE to get case insensitivity.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"a regular expression Pattern that will match\n \t\t\tall strings that exactly match with the given input string.","type_short":"Pattern"}},{"javadoc":"Creates a regular expression that can be used to create a Pattern that will <b>match<\/b>\n all strings that match the given input string.\n <p>\n This method can be used with {@link Matcher#matches()} or {@link Matcher#find()}.\n <p>\n@param input the string that you want to your matched strings to exactly match.\n@param allowGlobbing if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.\n@return a regular expression Pattern String that will <b>match<\/b>\n \t\t\tall strings that exactly match with the given input string.","static":true,"name":"createPatternString","comment":"Creates a regular expression that can be used to create a Pattern that will match\n all strings that match the given input string.\n \n This method can be used with Matcher#matches() or Matcher#find().\n ","params":[{"type_long":"java.lang.String","name":"input","comment":"the string that you want to your matched strings to exactly match.","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"if true, globing characters (* and ?) will converted to regex wildcard patterns;\n          otherwise, they will be escaped and searched as literals.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a regular expression Pattern String that will match\n \t\t\tall strings that exactly match with the given input string.","type_short":"String"}},{"javadoc":"","static":true,"name":"createSingleStarPattern","comment":"","params":[{"type_long":"java.lang.String","name":"input","comment":"","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"","type_short":"boolean"},{"type_long":"int","name":"options","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.regex.Pattern","comment":"","type_short":"Pattern"}},{"javadoc":"","static":true,"name":"createSingleStarPatternString","comment":"","params":[{"type_long":"java.lang.String","name":"input","comment":"","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Escapes regex characters, optionally turning globbing characters into valid regex syntax.","static":true,"name":"convertUserInputToRegex","comment":"Escapes regex characters, optionally turning globbing characters into valid regex syntax.","params":[{"type_long":"java.lang.String","name":"input","comment":"","type_short":"String"},{"type_long":"boolean","name":"allowGlobbing","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Will change globbing characters to work as expected in Ghidra, unless the\n special characters are escaped with a backslash.\n@param input The string containing potential globbing characters.\n@return The fixed string","static":true,"name":"convertGlobbingCharactersToRegex","comment":"Will change globbing characters to work as expected in Ghidra, unless the\n special characters are escaped with a backslash.","params":[{"type_long":"java.lang.String","name":"input","comment":"The string containing potential globbing characters.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The fixed string","type_short":"String"}},{"javadoc":"Replaces all escape characters ('\\') by escaping that character ('\\\\').\n <p>\n Note: this method will not escape characters that are escaping a globbing character\n (see {@link #NON_GLOB_BACKSLASH_PATTERN}.\n@param input The string containing potential escape characters.\n@return The fixed string","static":true,"name":"escapeEscapeCharacters","comment":"Replaces all escape characters ('\\') by escaping that character ('\\\\').\n \n Note: this method will not escape characters that are escaping a globbing character\n (see #NON_GLOB_BACKSLASH_PATTERN.","params":[{"type_long":"java.lang.String","name":"input","comment":"The string containing potential escape characters.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The fixed string","type_short":"String"}},{"javadoc":"Escapes all special regex characters so that they are treated as literal characters\n by the regex engine.\n@param input The input string to be escaped\n@return A new regex string with special characters escaped.","static":true,"name":"escapeAllRegexCharacters","comment":"Escapes all special regex characters so that they are treated as literal characters\n by the regex engine.","params":[{"type_long":"java.lang.String","name":"input","comment":"The input string to be escaped","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"A new regex string with special characters escaped.","type_short":"String"}},{"javadoc":"Escapes all regex characters with the '\\' character, except for those in the given\n exclusion array.\n@param input The input string to be escaped\n@return A new regex string with special characters escaped.","static":true,"name":"escapeSomeRegexCharacters","comment":"Escapes all regex characters with the '\\' character, except for those in the given\n exclusion array.","params":[{"type_long":"java.lang.String","name":"input","comment":"The input string to be escaped","type_short":"String"},{"type_long":"char[]","name":"doNotEscape","comment":"","type_short":"char[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"A new regex string with special characters escaped.","type_short":"String"}},{"javadoc":"","static":true,"name":"contains","comment":"","params":[{"type_long":"char[]","name":"array","comment":"","type_short":"char[]"},{"type_long":"char","name":"c","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"UserSearchUtils","comment":"This class converts user inputted strings and creates Patterns from them\n that can be used to create Matcher objects.  Some methods create patterns that\n are meant to be used with Matcher#matches(), while others create patterns\n meant to be used with Matcher#find().  Please see each method javadoc for clarification.\n \n Note: methods in the class will escape regex characters, which means that normal regex\n queries will not work, but will be instead interpreted as literal string searches.","fields":[{"type_long":"java.lang.String","javadoc":"Wildcard string for matching 0 or more characters.","static":true,"name":"STAR","comment":"Wildcard string for matching 0 or more characters.","type_short":"String","constant_value":"\"*\""},{"type_long":"char[]","javadoc":"Characters that we handle similarly to command-line globbing expansion characters.","static":true,"name":"GLOB_CHARACTERS","comment":"Characters that we handle similarly to command-line globbing expansion characters.","type_short":"char[]","constant_value":null},{"type_long":"java.util.regex.Pattern","javadoc":"A pattern that will find all '\\' chars that are not followed by '*', '?'\n or another '\\'","static":true,"name":"NON_GLOB_BACKSLASH_PATTERN","comment":"A pattern that will find all '\\' chars that are not followed by '*', '?'\n or another '\\'","type_short":"Pattern","constant_value":null},{"type_long":"java.util.regex.Pattern","javadoc":"A pattern that will find all '*' chars that are not preceded by a '\\'","static":true,"name":"STAR_PATTERN","comment":"A pattern that will find all '*' chars that are not preceded by a '\\'","type_short":"Pattern","constant_value":null},{"type_long":"java.util.regex.Pattern","javadoc":"A pattern that will find all '?' chars that are not preceded by a '\\'","static":true,"name":"QUESTION_PATTERN","comment":"A pattern that will find all '?' chars that are not preceded by a '\\'","type_short":"Pattern","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"CASE_SENSITIVE","comment":"","type_short":"int","constant_value":"0"}]}
