{"implements":[],"javadoc":"Constructs a new XML parser. This is class is designed for reading XML files.\n It is built on top of a ContentHandler. However, instead of being a \"push\"\n pattern, it has been translated into a \"pull\" pattern. That is, the user of\n this class can process the elements as needed. As well as skipping elements\n as needed.","static":false,"extends":"ghidra.xml.AbstractXmlPullParser","methods":[{"javadoc":"Constructs a new parser using the specified XML file.\n@param file the input XML file\n@param errHandler the XML error handler\n@param validate true if the parse should validate against the DTD\n@throws SAXException if an XML parse error occurs\n@throws IOException if an i\/o error occurs","static":false,"name":"<init>","comment":"Constructs a new parser using the specified XML file.","params":[{"type_long":"java.io.File","name":"file","comment":"the input XML file","type_short":"File"},{"type_long":"org.xml.sax.ErrorHandler","name":"errHandler","comment":"the XML error handler","type_short":"ErrorHandler"},{"type_long":"boolean","name":"validate","comment":"true if the parse should validate against the DTD","type_short":"boolean"},{"type_long":"int","name":"capacity","comment":"","type_short":"int"}],"throws":[{"type_long":"org.xml.sax.SAXException","comment":"if an XML parse error occurs","type_short":"SAXException"},{"type_long":"java.io.IOException","comment":"if an i\/o error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new parser using the specified XML file.\n@param file the input XML file\n@param errHandler the XML error handler\n@param validate true if the parse should validate against the DTD\n@throws SAXException if an XML parse error occurs\n@throws IOException if an i\/o error occurs","static":false,"name":"<init>","comment":"Constructs a new parser using the specified XML file.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"the input XML file","type_short":"ResourceFile"},{"type_long":"org.xml.sax.ErrorHandler","name":"errHandler","comment":"the XML error handler","type_short":"ErrorHandler"},{"type_long":"boolean","name":"validate","comment":"true if the parse should validate against the DTD","type_short":"boolean"},{"type_long":"int","name":"capacity","comment":"","type_short":"int"}],"throws":[{"type_long":"org.xml.sax.SAXException","comment":"if an XML parse error occurs","type_short":"SAXException"},{"type_long":"java.io.IOException","comment":"if an i\/o error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new parser using the specified input stream.\n <p>\n Note: Only use this method if you know that the XML in the given stream\n contains its own internal validation (an internal dtd specification). For\n XML files that use an external dtd file you should call\n {@link #XmlParser(File, ErrorHandler, boolean)}.\n <p>\n@param input the XML input stream\n@param inputName the name of the input stream\n@param errHandler the XML error handler\n@param validate true if the parse should validate against the DTD\n@throws SAXException if an XML parse error occurs\n@throws IOException if an i\/o error occurs","static":false,"name":"<init>","comment":"Constructs a new parser using the specified input stream.\n \n Note: Only use this method if you know that the XML in the given stream\n contains its own internal validation (an internal dtd specification). For\n XML files that use an external dtd file you should call\n #XmlParser(File, ErrorHandler, boolean).\n ","params":[{"type_long":"java.io.InputStream","name":"input","comment":"the XML input stream","type_short":"InputStream"},{"type_long":"java.lang.String","name":"inputName","comment":"the name of the input stream","type_short":"String"},{"type_long":"org.xml.sax.ErrorHandler","name":"errHandler","comment":"the XML error handler","type_short":"ErrorHandler"},{"type_long":"boolean","name":"validate","comment":"true if the parse should validate against the DTD","type_short":"boolean"},{"type_long":"int","name":"capacity","comment":"","type_short":"int"}],"throws":[{"type_long":"org.xml.sax.SAXException","comment":"if an XML parse error occurs","type_short":"SAXException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkForException","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value of the attribute of the processing instruction. For\n example, <code>&lt;?program_dtd version=\"1\"?&gt;<\/code>\n@param piName the name of the processing instruction\n@param attribute the name of the attribute\n@return the value of the attribute of the processing instruction","static":false,"name":"getProcessingInstruction","comment":"Returns the value of the attribute of the processing instruction. For\n example, ?program_dtd version=\"1\"?","params":[{"type_long":"java.lang.String","name":"piName","comment":"the name of the processing instruction","type_short":"String"},{"type_long":"java.lang.String","name":"attribute","comment":"the name of the attribute","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the value of the attribute of the processing instruction","type_short":"String"}},{"javadoc":"Returns true if the parser has more elements to read.\n@return true if the parser has more elements to read","static":false,"name":"hasNext","comment":"Returns true if the parser has more elements to read.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the parser has more elements to read","type_short":"boolean"}},{"javadoc":"","static":false,"name":"waitForNextElement","comment":"","params":[{"type_long":"ghidra.xml.XmlElement","name":"element","comment":"","type_short":"XmlElement"}],"throws":[],"return":{"type_long":"ghidra.xml.XmlElement","comment":"","type_short":"XmlElement"}},{"javadoc":"Returns the next element to be read, but does not increment the iterator.\n@return the next element to be read, but does not increment the iterator","static":false,"name":"peek","comment":"Returns the next element to be read, but does not increment the iterator.","params":[],"throws":[],"return":{"type_long":"ghidra.xml.XmlElement","comment":"the next element to be read, but does not increment the iterator","type_short":"XmlElement"}},{"javadoc":"Returns the next element to be read and increments the iterator.\n@return the next element to be read and increments the iterator","static":false,"name":"next","comment":"Returns the next element to be read and increments the iterator.","params":[],"throws":[],"return":{"type_long":"ghidra.xml.XmlElement","comment":"the next element to be read and increments the iterator","type_short":"XmlElement"}},{"javadoc":"Disposes this XML parser. No more elements may be read after dispose is\n called.","static":false,"name":"dispose","comment":"Disposes this XML parser. No more elements may be read after dispose is\n called.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"closeQueue","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addElement","comment":"","params":[{"type_long":"ghidra.xml.XmlElement","name":"element","comment":"","type_short":"XmlElement"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isPullingContent","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setPullingContent","comment":"","params":[{"type_long":"boolean","name":"pullingContent","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isParsing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"ThreadedXmlPullParserImpl","comment":"Constructs a new XML parser. This is class is designed for reading XML files.\n It is built on top of a ContentHandler. However, instead of being a \"push\"\n pattern, it has been translated into a \"pull\" pattern. That is, the user of\n this class can process the elements as needed. As well as skipping elements\n as needed.","fields":[{"type_long":"ghidra.xml.XmlElement","javadoc":"","static":true,"name":"XML_END_TOKEN","comment":"","type_short":"XmlElement","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.concurrent.LinkedBlockingQueue<ghidra.xml.XmlElement>","javadoc":"","static":false,"name":"queue","comment":"","type_short":"LinkedBlockingQueue","constant_value":null},{"type_long":"org.xml.sax.Locator","javadoc":"","static":false,"name":"locator","comment":"","type_short":"Locator","constant_value":null},{"type_long":"java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>>","javadoc":"","static":false,"name":"processingInstructions","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.concurrent.Future<?>","javadoc":"","static":false,"name":"parsingTask","comment":"","type_short":"Future","constant_value":null},{"type_long":"ghidra.xml.XmlElement","javadoc":"","static":false,"name":"nextElement","comment":"","type_short":"XmlElement","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isParsing","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.Exception","javadoc":"","static":false,"name":"exception","comment":"","type_short":"Exception","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"disposed","comment":"","type_short":"boolean","constant_value":null},{"type_long":"generic.concurrent.GThreadPool","javadoc":"","static":false,"name":"threadPool","comment":"","type_short":"GThreadPool","constant_value":null}]}
