{"implements":[],"javadoc":"<code>ApplicationKeyStore<\/code> provides the ability to read X.509 certificates and \n keystores in various formats. Certificate files (e.g., cacerts) may be in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form, while keystores \n for client\/server may be in a PKCS12 form (*.p12, *.pks, *.pfx) or Java JKS (*.jks) form.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Load the specified X.509 certificate authority store in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form.\n@param cacertsPath certificate store file path\n@return KeyStore containing ingested certificates\n@throws IOException\n@throws KeyStoreException\n@throws NoSuchAlgorithmException\n@throws CertificateException","static":true,"name":"getCertificateStoreInstance","comment":"Load the specified X.509 certificate authority store in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form.","params":[{"type_long":"java.lang.String","name":"cacertsPath","comment":"certificate store file path","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.security.KeyStoreException","comment":"","type_short":"KeyStoreException"},{"type_long":"java.security.NoSuchAlgorithmException","comment":"","type_short":"NoSuchAlgorithmException"},{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"java.security.KeyStore","comment":"KeyStore containing ingested certificates","type_short":"KeyStore"}},{"javadoc":"Attempt to load a client\/server keystore in a PKCS12 form (*.p12, *.pks, *.pfx) or \n Java JKS (*.jks) form.\n@param path keystore file path\n@param pwd keystore password\n@return keystore instance\n@throws IOException\n@throws KeyStoreException\n@throws NoSuchAlgorithmException\n@throws CertificateException","static":true,"name":"getKeyStoreInstance","comment":"Attempt to load a client\/server keystore in a PKCS12 form (*.p12, *.pks, *.pfx) or \n Java JKS (*.jks) form.","params":[{"type_long":"java.lang.String","name":"keystorePath","comment":"","type_short":"String"},{"type_long":"char[]","name":"pwd","comment":"keystore password","type_short":"char[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.security.KeyStoreException","comment":"","type_short":"KeyStoreException"},{"type_long":"java.security.NoSuchAlgorithmException","comment":"","type_short":"NoSuchAlgorithmException"},{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"java.security.KeyStore","comment":"keystore instance","type_short":"KeyStore"}},{"javadoc":"Extract Common Name (CN) from specified principal subject Distinguished Name (DN)\n@param subject X.509 certificate subject\n@return Common Name or full subject name if unable to extract CN from DN","static":true,"name":"getCommonName","comment":"Extract Common Name (CN) from specified principal subject Distinguished Name (DN)","params":[{"type_long":"java.security.Principal","name":"subject","comment":"X.509 certificate subject","type_short":"Principal"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"Common Name or full subject name if unable to extract CN from DN","type_short":"String"}},{"javadoc":"Log all X509 certificates contained within keystore\n@param keyStore certificate keystore","static":true,"name":"logCerts","comment":"Log all X509 certificates contained within keystore","params":[{"type_long":"java.security.KeyStore","name":"keyStore","comment":"certificate keystore","type_short":"KeyStore"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Log all X509 certificates contained within array\n@param x509Certs array of certificates","static":true,"name":"logCerts","comment":"Log all X509 certificates contained within array","params":[{"type_long":"java.security.cert.X509Certificate[]","name":"x509Certs","comment":"array of certificates","type_short":"java.security.cert.X509Certificate[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Log specified X509 certificate details\n@param alias certificate alias or null if not applicable\n@param x509Cert X509 certificate","static":true,"name":"logCert","comment":"Log specified X509 certificate details","params":[{"type_long":"java.lang.String","name":"alias","comment":"certificate alias or null if not applicable","type_short":"String"},{"type_long":"java.security.cert.X509Certificate","name":"x509Cert","comment":"X509 certificate","type_short":"X509Certificate"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ApplicationKeyStore","comment":"ApplicationKeyStore provides the ability to read X.509 certificates and \n keystores in various formats. Certificate files (e.g., cacerts) may be in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form, while keystores \n for client\/server may be in a PKCS12 form (*.p12, *.pks, *.pfx) or Java JKS (*.jks) form.","fields":[{"type_long":"java.lang.String[]","javadoc":"","static":true,"name":"PKCS_FILE_EXTENSIONS","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"javax.swing.filechooser.FileNameExtensionFilter","javadoc":"","static":true,"name":"PKCS_FILENAME_FILTER","comment":"","type_short":"FileNameExtensionFilter","constant_value":null}]}
