{"implements":[],"javadoc":"<code>ApplicationKeyManagerFactory<\/code> provides application keystore management\n functionality and the ability to generate X509KeyManager's for use with an SSLContext\n or other PKI related operations.  Access to keystore data (other than keystore path)\n is restricted to package access.  Certain public operations are exposed via the\n {@link ApplicationKeyManagerUtils} class.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Get ApplicationKeyManager singleton\n@return application X509KeyManager","static":true,"name":"getInstance","comment":"Get ApplicationKeyManager singleton","params":[],"throws":[],"return":{"type_long":"ghidra.net.ApplicationKeyManagerFactory","comment":"application X509KeyManager","type_short":"ApplicationKeyManagerFactory"}},{"javadoc":"get the single key manager instance associated with the factory.\n@return key manager instance","static":true,"name":"getKeyManagerWrapper","comment":"get the single key manager instance associated with the factory.","params":[],"throws":[],"return":{"type_long":"ghidra.net.ApplicationKeyManagerFactory.ApplicationKeyManager","comment":"key manager instance","type_short":"ApplicationKeyManager"}},{"javadoc":"Set the active keystore password provider\n@param provider keystore password provider","static":true,"name":"setKeyStorePasswordProvider","comment":"Set the active keystore password provider","params":[{"type_long":"ghidra.security.KeyStorePasswordProvider","name":"provider","comment":"keystore password provider","type_short":"KeyStorePasswordProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Prune path to trim leading and trailing white space. A null will be\n returned if the pruned path is null or the empty string.\n@param path\n@return pruned path or null if path was null or pruned path was the empty\n         string","static":true,"name":"prunePath","comment":"Prune path to trim leading and trailing white space. A null will be\n returned if the pruned path is null or the empty string.","params":[{"type_long":"java.lang.String","name":"path","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"pruned path or null if path was null or pruned path was the empty\n         string","type_short":"String"}},{"javadoc":"Set user keystore file path (e.g., certificate file with private key).\n This method will have no effect if the keystore had been set via the system\n property and an error will be displayed.  Otherwise, the keystore will\n be updated and the key manager re-initialized.  The user preference will be\n updated unless a failure occurred while attempting to open the keystore.\n This change will take immediate effect for the current executing application,\n however, it may still be superseded by a system property setting when running\n the application in the future. See {@link #getKeyStore()}.\n@param path keystore file path\n@param savePreference if true will be saved as user preference\n@throws IOException if file or certificate error occurs","static":true,"name":"setKeyStore","comment":"Set user keystore file path (e.g., certificate file with private key).\n This method will have no effect if the keystore had been set via the system\n property and an error will be displayed.  Otherwise, the keystore will\n be updated and the key manager re-initialized.  The user preference will be\n updated unless a failure occurred while attempting to open the keystore.\n This change will take immediate effect for the current executing application,\n however, it may still be superseded by a system property setting when running\n the application in the future. See #getKeyStore().","params":[{"type_long":"java.lang.String","name":"path","comment":"keystore file path","type_short":"String"},{"type_long":"boolean","name":"savePreference","comment":"if true will be saved as user preference","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if file or certificate error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the keystore path associated with the active key manager or the\n preferred keystore path if not yet initialized.","static":true,"name":"getKeyStore","comment":"Get the keystore path associated with the active key manager or the\n preferred keystore path if not yet initialized.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"If the system property <i>ghidra.keystore<\/i> takes precedence in establishing \n the ketsore.  If using a GUI and the system property has not been set, the \n user preference with the same name will be used.\n@return active keystore path or null if currently not running with a keystore or\n one has not been set.","static":true,"name":"getPreferredKeyStore","comment":"If the system property ghidra.keystore takes precedence in establishing \n the ketsore.  If using a GUI and the system property has not been set, the \n user preference with the same name will be used.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"active keystore path or null if currently not running with a keystore or\n one has not been set.","type_short":"String"}},{"javadoc":"Determine if active key manager is utilizing a generated self-signed certificate.\n@return true if using self-signed certificate.","static":true,"name":"usingGeneratedSelfSignedCertificate","comment":"Determine if active key manager is utilizing a generated self-signed certificate.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if using self-signed certificate.","type_short":"boolean"}},{"javadoc":"Set the default self-signed principal identity to be used during initialization\n if no keystore defined.  Current application key manager will be invalidated.\n@param identity if not null and a KeyStore path has not be set, this\n identity will be used to generate a self-signed certificate and private key\n (NOTE: this is intended for server use only when client will not be performing\n CA validation).","static":true,"name":"setDefaultIdentity","comment":"Set the default self-signed principal identity to be used during initialization\n if no keystore defined.  Current application key manager will be invalidated.","params":[{"type_long":"javax.security.auth.x500.X500Principal","name":"identity","comment":"if not null and a KeyStore path has not be set, this\n identity will be used to generate a self-signed certificate and private key\n (NOTE: this is intended for server use only when client will not be performing\n CA validation).","type_short":"X500Principal"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Initialize key manager if needed.  Doing this explicitly independent of an SSL connection\n allows application to bail before initiating connection.  This will get handshake failure\n if user forgets keystore password or other keystore problem.\n@return true if key manager initialized, otherwise false","static":true,"name":"initialize","comment":"Initialize key manager if needed.  Doing this explicitly independent of an SSL connection\n allows application to bail before initiating connection.  This will get handshake failure\n if user forgets keystore password or other keystore problem.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if key manager initialized, otherwise false","type_short":"boolean"}},{"javadoc":"Invalidate the key managers associated with this factory","static":true,"name":"invalidateKeyManagers","comment":"Invalidate the key managers associated with this factory","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<code>ApplicationKeyManagerFactory<\/code> constructor","static":false,"name":"<init>","comment":"ApplicationKeyManagerFactory constructor","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get key managers\n@return key managers","static":false,"name":"getKeyManagers","comment":"Get key managers","params":[],"throws":[],"return":{"type_long":"javax.net.ssl.KeyManager[]","comment":"key managers","type_short":"javax.net.ssl.KeyManager[]"}},{"javadoc":"Get protected keystore data for specified keystorePath.  Caller is responsible for\n properly disposing returned object.\n@param keystorePath protected keystore path\n@return protected keystore data\n@throws CancelledException password entry was cancelled by user\n@throws KeyStoreException error occurred opening\/processing keystore","static":true,"name":"getProtectedKeyStoreData","comment":"Get protected keystore data for specified keystorePath.  Caller is responsible for\n properly disposing returned object.","params":[{"type_long":"java.lang.String","name":"keystorePath","comment":"protected keystore path","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"password entry was cancelled by user","type_short":"CancelledException"},{"type_long":"java.security.KeyStoreException","comment":"error occurred opening\/processing keystore","type_short":"KeyStoreException"}],"return":{"type_long":"ghidra.net.ApplicationKeyManagerFactory.ProtectedKeyStoreData","comment":"protected keystore data","type_short":"ProtectedKeyStoreData"}},{"javadoc":"","static":true,"name":"disposePassword","comment":"","params":[{"type_long":"char[]","name":"password","comment":"","type_short":"char[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getIOException","comment":"","params":[{"type_long":"java.lang.Exception","name":"e","comment":"","type_short":"Exception"}],"throws":[],"return":{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}}],"name":"ApplicationKeyManagerFactory","comment":"ApplicationKeyManagerFactory provides application keystore management\n functionality and the ability to generate X509KeyManager's for use with an SSLContext\n or other PKI related operations.  Access to keystore data (other than keystore path)\n is restricted to package access.  Certain public operations are exposed via the\n ApplicationKeyManagerUtils class.","fields":[{"type_long":"java.lang.String","javadoc":"Keystore path system property or user preference.  Setting the system\n property will take precedence over the user preference.","static":true,"name":"KEYSTORE_PATH_PROPERTY","comment":"Keystore path system property or user preference.  Setting the system\n property will take precedence over the user preference.","type_short":"String","constant_value":"\"ghidra.keystore\""},{"type_long":"java.lang.String","javadoc":"Password system property may be set.  If set, this password will be used\n when accessing the keystore before attempting to use <code>customPasswordProvider<\/code>\n if it has been set.","static":true,"name":"KEYSTORE_PASSWORD_PROPERTY","comment":"Password system property may be set.  If set, this password will be used\n when accessing the keystore before attempting to use customPasswordProvider\n if it has been set.","type_short":"String","constant_value":"\"ghidra.password\""},{"type_long":"ghidra.util.filechooser.GhidraFileFilter","javadoc":"PKCS Private Key\/Certificate File Filter","static":true,"name":"CERTIFICATE_FILE_FILTER","comment":"PKCS Private Key\/Certificate File Filter","type_short":"GhidraFileFilter","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_PASSWORD","comment":"","type_short":"String","constant_value":"\"changeme\""},{"type_long":"int","javadoc":"","static":true,"name":"SELF_SIGNED_DURATION_DAYS","comment":"","type_short":"int","constant_value":"730"},{"type_long":"ghidra.security.KeyStorePasswordProvider","javadoc":"","static":true,"name":"customPasswordProvider","comment":"","type_short":"KeyStorePasswordProvider","constant_value":null},{"type_long":"javax.security.auth.x500.X500Principal","javadoc":"","static":true,"name":"defaultIdentity","comment":"","type_short":"X500Principal","constant_value":null},{"type_long":"ghidra.net.ApplicationKeyManagerFactory","javadoc":"","static":true,"name":"instance","comment":"","type_short":"ApplicationKeyManagerFactory","constant_value":null},{"type_long":"ghidra.net.ApplicationKeyManagerFactory.ApplicationKeyManager","javadoc":"","static":false,"name":"keyManagerWrapper","comment":"","type_short":"ApplicationKeyManager","constant_value":null}]}
