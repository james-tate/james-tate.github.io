{"implements":[],"javadoc":"<code>ApplicationTrustManagerFactory<\/code> provides the ability to establish\n acceptable certificate authorities to be used with SSL connections and PKI \n authentication.  \n <p>\n The default behavior is for no trust authority to be established, in which case \n SSL peers will not be authenticated.  If CA certificates have been set, all SSL\n connections which leverage this factory will perform peer authentication.  If an error\n occurs while reading the CA certs file, all peer authentication will fail based upon the \n inability to choose a suitable client\/server certificate.\n <p>\n The application X.509 CA certificates file may be in the standard form (*.pem, *.crt, \n *.cer, *.der) or may be in a Java JKS form (*.jks). The path to this file may be \n established in one of two ways using the absolute file path:\n <ol>\n <li>setting the system property <i>ghidra.cacerts<\/i> (takes precedence)<\/i> \n <li>setting the user preference <i>ghidra.cacerts<\/i><\/li>\n <\/ol>\n <p>\n The application may choose to set the file path automatically based upon the presence of\n a <i>cacerts<\/i> file at a predetermined location.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"<code>ApplicationTrustManagerFactory<\/code> constructor","static":false,"name":"<init>","comment":"ApplicationTrustManagerFactory constructor","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Initialize trustManagers if <i>ghidra.cacerts<\/i> property or preference was specified, \n otherwise an \"open\" trust manager will be established.  If an error occurs processing\n a specified cacerts file, a \"closed\" trust policy will be adopted.","static":true,"name":"init","comment":"Initialize trustManagers if ghidra.cacerts property or preference was specified, \n otherwise an \"open\" trust manager will be established.  If an error occurs processing\n a specified cacerts file, a \"closed\" trust policy will be adopted.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if certificate authorities are in place.  If no certificate authorities\n have been specified via the \"ghidra.cacerts\" property, all certificates will be \n trusted.\n@return true if certificate authorities are in place, else false.","static":true,"name":"hasCertificateAuthorities","comment":"Determine if certificate authorities are in place.  If no certificate authorities\n have been specified via the \"ghidra.cacerts\" property, all certificates will be \n trusted.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if certificate authorities are in place, else false.","type_short":"boolean"}},{"javadoc":"Determine if a CA cert initialization error occurred\n@return true if error occurred (see {@link #getCertError()})","static":true,"name":"hasCertError","comment":"Determine if a CA cert initialization error occurred","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if error occurred (see #getCertError())","type_short":"boolean"}},{"javadoc":"Get the CA cert initialization error which occurred\n during initialization\n@return error object or null if not applicable","static":true,"name":"getCertError","comment":"Get the CA cert initialization error which occurred\n during initialization","params":[],"throws":[],"return":{"type_long":"java.lang.Exception","comment":"error object or null if not applicable","type_short":"Exception"}},{"javadoc":"Get trust managers after performing any neccessary initialization.\n@return trust managers","static":true,"name":"getTrustManagers","comment":"Get trust managers after performing any neccessary initialization.","params":[],"throws":[],"return":{"type_long":"javax.net.ssl.TrustManager[]","comment":"trust managers","type_short":"javax.net.ssl.TrustManager[]"}},{"javadoc":"Invalidate the active keystore and key manager","static":true,"name":"invalidateTrustManagers","comment":"Invalidate the active keystore and key manager","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ApplicationTrustManagerFactory","comment":"ApplicationTrustManagerFactory provides the ability to establish\n acceptable certificate authorities to be used with SSL connections and PKI \n authentication.  \n \n The default behavior is for no trust authority to be established, in which case \n SSL peers will not be authenticated.  If CA certificates have been set, all SSL\n connections which leverage this factory will perform peer authentication.  If an error\n occurs while reading the CA certs file, all peer authentication will fail based upon the \n inability to choose a suitable client\/server certificate.\n \n The application X.509 CA certificates file may be in the standard form (*.pem, *.crt, \n *.cer, *.der) or may be in a Java JKS form (*.jks). The path to this file may be \n established in one of two ways using the absolute file path:\n \n setting the system property ghidra.cacerts (takes precedence) \n setting the user preference ghidra.cacerts\n \n \n The application may choose to set the file path automatically based upon the presence of\n a cacerts file at a predetermined location.","fields":[{"type_long":"java.lang.String","javadoc":"The X509 cacerts file to be used when authenticating remote \n certificates is identified by either a system property or user\n preference <i>ghidra.cacerts<\/i>.  The system property takes precedence.","static":true,"name":"GHIDRA_CACERTS_PATH_PROPERTY","comment":"The X509 cacerts file to be used when authenticating remote \n certificates is identified by either a system property or user\n preference ghidra.cacerts.  The system property takes precedence.","type_short":"String","constant_value":"\"ghidra.cacerts\""},{"type_long":"javax.net.ssl.X509TrustManager","javadoc":"Use a singleton wrappedTrustManager so we can alter the true trustManager\n as needed.  Once the installed trust manager is consumed by the SSL Engine,\n we are unable to get it to use a new one.  Use of a wrapper solves this\n issue which occurs during testing.","static":true,"name":"trustManager","comment":"Use a singleton wrappedTrustManager so we can alter the true trustManager\n as needed.  Once the installed trust manager is consumed by the SSL Engine,\n we are unable to get it to use a new one.  Use of a wrapper solves this\n issue which occurs during testing.","type_short":"X509TrustManager","constant_value":null},{"type_long":"javax.net.ssl.TrustManager[]","javadoc":"","static":true,"name":"wrappedTrustManagers","comment":"","type_short":"javax.net.ssl.TrustManager[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":true,"name":"hasCAs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.Exception","javadoc":"","static":true,"name":"caError","comment":"","type_short":"Exception","constant_value":null},{"type_long":"java.security.cert.X509Certificate[]","javadoc":"","static":true,"name":"NO_CERTS","comment":"","type_short":"java.security.cert.X509Certificate[]","constant_value":null}]}
