{"implements":[],"javadoc":"A directed graph\n \n Unlike {@link GImplicitDirectedGraph}, this graph is constructed explicitly in memory. Edges and\n vertices are added and removed like any other collection, and these elements represent the\n entirety of the graph at any given time.\n@param <V> the type of vertices\n@param <E> the type of edges","static":false,"methods":[{"javadoc":"Add a vertex\n@param v the vertex\n@return true if the add was successful, false otherwise","static":false,"name":"addVertex","comment":"Add a vertex","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the add was successful, false otherwise","type_short":"boolean"}},{"javadoc":"Remove a vertex\n@param v the vertex\n@return true","static":false,"name":"removeVertex","comment":"Remove a vertex","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"true","type_short":"boolean"}},{"javadoc":"Removes the given vertices from the graph\n@param vertices the vertices to remove","static":false,"name":"removeVertices","comment":"Removes the given vertices from the graph","params":[{"type_long":"java.lang.Iterable<V>","name":"vertices","comment":"the vertices to remove","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add an edge\n@param e the edge","static":false,"name":"addEdge","comment":"Add an edge","params":[{"type_long":"E","name":"e","comment":"the edge","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes an edge\n@param e the edge\n@return true if the graph contained the given edge","static":false,"name":"removeEdge","comment":"Removes an edge","params":[{"type_long":"E","name":"e","comment":"the edge","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the graph contained the given edge","type_short":"boolean"}},{"javadoc":"Removes the given edges from the graph\n@param edges the edges to remove","static":false,"name":"removeEdges","comment":"Removes the given edges from the graph","params":[{"type_long":"java.lang.Iterable<E>","name":"edges","comment":"the edges to remove","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Locates the edge object for the two vertices\n@param start the start vertex\n@param end the end vertex\n@return the edge","static":false,"name":"findEdge","comment":"Locates the edge object for the two vertices","params":[{"type_long":"V","name":"start","comment":"the start vertex","type_short":"V"},{"type_long":"V","name":"end","comment":"the end vertex","type_short":"V"}],"throws":[],"return":{"type_long":"E","comment":"the edge","type_short":"E"}},{"javadoc":"Retrieve all the vertices\n@return the vertices","static":false,"name":"getVertices","comment":"Retrieve all the vertices","params":[],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"the vertices","type_short":"Collection"}},{"javadoc":"Retrieve all the edges\n@return the edges","static":false,"name":"getEdges","comment":"Retrieve all the edges","params":[],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the edges","type_short":"Collection"}},{"javadoc":"Test if the graph contains a given vertex\n@param v the vertex\n@return true if the vertex is in the graph, or false","static":false,"name":"containsVertex","comment":"Test if the graph contains a given vertex","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the vertex is in the graph, or false","type_short":"boolean"}},{"javadoc":"Test if the graph contains a given edge\n@param e the ege\n@return true if the edge is in the graph, or false","static":false,"name":"containsEdge","comment":"Test if the graph contains a given edge","params":[{"type_long":"E","name":"e","comment":"the ege","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the edge is in the graph, or false","type_short":"boolean"}},{"javadoc":"Test if the graph contains an edge from one given vertex to another\n@param from the source vertex\n@param to the destination vertex\n@return true if such an edge exists, or false","static":false,"name":"containsEdge","comment":"Test if the graph contains an edge from one given vertex to another","params":[{"type_long":"V","name":"from","comment":"the source vertex","type_short":"V"},{"type_long":"V","name":"to","comment":"the destination vertex","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"true if such an edge exists, or false","type_short":"boolean"}},{"javadoc":"Test if the graph is empty, i.e., contains no vertices or edges\n@return true if the graph is empty, or false","static":false,"name":"isEmpty","comment":"Test if the graph is empty, i.e., contains no vertices or edges","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the graph is empty, or false","type_short":"boolean"}},{"javadoc":"Count the number of vertices in the graph\n@return the count","static":false,"name":"getVertexCount","comment":"Count the number of vertices in the graph","params":[],"throws":[],"return":{"type_long":"int","comment":"the count","type_short":"int"}},{"javadoc":"Count the number of edges in the graph\n@return the count","static":false,"name":"getEdgeCount","comment":"Count the number of edges in the graph","params":[],"throws":[],"return":{"type_long":"int","comment":"the count","type_short":"int"}},{"javadoc":"Compute the incident edges that end at the given vertex\n@param v the destination vertex\n@return the in-edges to the given vertex","static":false,"name":"getInEdges","comment":"Compute the incident edges that end at the given vertex","params":[{"type_long":"V","name":"v","comment":"the destination vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the in-edges to the given vertex","type_short":"Collection"}},{"javadoc":"Compute the incident edges that start at the given vertex\n@param v the source vertex\n@return the out-edges from the given vertex","static":false,"name":"getOutEdges","comment":"Compute the incident edges that start at the given vertex","params":[{"type_long":"V","name":"v","comment":"the source vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the out-edges from the given vertex","type_short":"Collection"}},{"javadoc":"Returns all edges connected to the given vertex\n@param v the vertex\n@return the edges","static":false,"name":"getIncidentEdges","comment":"Returns all edges connected to the given vertex","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the edges","type_short":"Collection"}},{"javadoc":"Compute a vertex's predecessors\n \n <P>The default implementation computes this from the in-edges\n@param v the destination vertex\n@return the predecessors","static":false,"name":"getPredecessors","comment":"Compute a vertex's predecessors\n \n The default implementation computes this from the in-edges","params":[{"type_long":"V","name":"v","comment":"the destination vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"the predecessors","type_short":"Collection"}},{"javadoc":"Compute a vertex's successors\n \n <P>The default implementation compute this from the out-edges\n@param v the source vertex\n@return the successors","static":false,"name":"getSuccessors","comment":"Compute a vertex's successors\n \n The default implementation compute this from the out-edges","params":[{"type_long":"V","name":"v","comment":"the source vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"the successors","type_short":"Collection"}},{"javadoc":"Copy this graph.\n \n <P>Note: the vertices and edges in the copy may be the same instances in the new graph\n and not themselves copies.\n@return the new copy","static":false,"name":"copy","comment":"Copy this graph.\n \n Note: the vertices and edges in the copy may be the same instances in the new graph\n and not themselves copies.","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,E>","comment":"the new copy","type_short":"GDirectedGraph"}},{"javadoc":"Creates a new instance of this graph with no vertices or edges.  This is useful when \n you wish to build a new graph using the same type as this graph.\n@return the new copy","static":false,"name":"emptyCopy","comment":"Creates a new instance of this graph with no vertices or edges.  This is useful when \n you wish to build a new graph using the same type as this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,E>","comment":"the new copy","type_short":"GDirectedGraph"}}],"name":"GDirectedGraph","comment":"A directed graph\n \n Unlike GImplicitDirectedGraph, this graph is constructed explicitly in memory. Edges and\n vertices are added and removed like any other collection, and these elements represent the\n entirety of the graph at any given time.","fields":[]}
