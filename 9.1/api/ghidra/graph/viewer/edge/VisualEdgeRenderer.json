{"implements":[],"javadoc":"Edge render for the {@link VisualGraph} system\n \n <h3><center>Implementation Notes<\/center><\/h3>\n \n <h4>Jung Vertex\/Edge Rendering<\/h4>\n <p>Jung creates shapes for vertices (see {@link VertexShapeFactory}) that are centered.  They\n do this by getting the width\/height of the shape and then creating an x\/y value that is \n half of the width and height, respectively.  This has the effect of the vertex appearing \n centered over its connected edge.  We mimic that with our \n {@link VisualGraphVertexShapeTransformer} so that our edge rendering code is similar to \n Jung's.\n <p>If we ever decide instead to not center our shapes, then this renderer would have to be\n updated to itself center the edge shape created herein, like this:\n <pre>\n \t\tRectangle b1 = s1.getBounds();\n\t\tRectangle b2 = s2.getBounds();\n\n\t\t\/\/ translate the edge to be centered in the vertex\n\t\tint w1 = b1.width >> 1;\n\t\tint h1 = b1.height >> 1;\n\t\tint w2 = b2.width >> 1;\n\t\tint h2 = b2.height >> 1;\n\n\t\tfloat tx1 = x1 + w1;\n\t\tfloat ty1 = y1 + h1;\n\t\tfloat tx2 = x2 + w2;\n\t\tfloat ty2 = y2 + h2;\n \t\tShape edgeShape = getEdgeShape(rc, graph, e, tx1, ty1, tx2, ty2, isLoop, xs1);\n <\/pre>\n <p>Also, there are other spots in the system where we account for this center that would \n have to be changed, such as the {@link AbstractVisualGraphLayout}, which needs the centering\n offsets to handle vertex clipping.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"edu.uci.ics.jung.visualization.renderers.BasicEdgeRenderer","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the offset value for painting dashed lines.  This allows clients to animate the \n lines being drawn for edges in the edge direction.\n@param dashingPatterOffset the offset value","static":false,"name":"setDashingPatternOffset","comment":"Sets the offset value for painting dashed lines.  This allows clients to animate the \n lines being drawn for edges in the edge direction.","params":[{"type_long":"float","name":"dashingPatterOffset","comment":"the offset value","type_short":"float"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setBaseColor","comment":"","params":[{"type_long":"java.awt.Color","name":"color","comment":"","type_short":"Color"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBaseColor","comment":"","params":[{"type_long":"edu.uci.ics.jung.graph.Graph<V,E>","name":"g","comment":"","type_short":"Graph"},{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"java.awt.Color","comment":"","type_short":"Color"}},{"javadoc":"","static":false,"name":"setHighlightColor","comment":"","params":[{"type_long":"java.awt.Color","name":"highlightColor","comment":"","type_short":"Color"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getHighlightColor","comment":"","params":[{"type_long":"edu.uci.ics.jung.graph.Graph<V,E>","name":"g","comment":"","type_short":"Graph"},{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"java.awt.Color","comment":"","type_short":"Color"}},{"javadoc":"","static":false,"name":"isInHoveredVertexPath","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isInFocusedVertexPath","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isSelected","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isEmphasiszed","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"drawSimpleEdge","comment":"","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.algorithms.layout.Layout<V,E>","name":"layout","comment":"","type_short":"Layout"},{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getVertexShapeForArrow","comment":"","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.algorithms.layout.Layout<V,E>","name":"layout","comment":"","type_short":"Layout"},{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"","type_short":"Shape"}},{"javadoc":"Returns the edge shape for the given points\n@param rc the render context for the graph\n@param graph the graph\n@param e the edge to shape\n@param x1 the start vertex point x; layout space\n@param y1 the start vertex point y; layout space\n@param x2 the end vertex point x; layout space\n@param y2 the end vertex point y; layout space\n@param isLoop true if the start == end, which is a self-loop\n@param vertexShape the vertex shape (used in the case of a loop to draw a circle from the \n              shape to itself)\n@return the edge shape","static":false,"name":"getEdgeShape","comment":"Returns the edge shape for the given points","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"the render context for the graph","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.graph.Graph<V,E>","name":"graph","comment":"the graph","type_short":"Graph"},{"type_long":"E","name":"e","comment":"the edge to shape","type_short":"E"},{"type_long":"float","name":"x1","comment":"the start vertex point x; layout space","type_short":"float"},{"type_long":"float","name":"y1","comment":"the start vertex point y; layout space","type_short":"float"},{"type_long":"float","name":"x2","comment":"the end vertex point x; layout space","type_short":"float"},{"type_long":"float","name":"y2","comment":"the end vertex point y; layout space","type_short":"float"},{"type_long":"boolean","name":"isLoop","comment":"true if the start == end, which is a self-loop","type_short":"boolean"},{"type_long":"java.awt.Shape","name":"vertexShape","comment":"the vertex shape (used in the case of a loop to draw a circle from the \n              shape to itself)","type_short":"Shape"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"the edge shape","type_short":"Shape"}},{"javadoc":"","static":false,"name":"getHoveredPathStroke","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"float","name":"scale","comment":"","type_short":"float"}],"throws":[],"return":{"type_long":"java.awt.BasicStroke","comment":"","type_short":"BasicStroke"}},{"javadoc":"","static":false,"name":"getFocusedPathStroke","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"float","name":"scale","comment":"","type_short":"float"}],"throws":[],"return":{"type_long":"java.awt.BasicStroke","comment":"","type_short":"BasicStroke"}},{"javadoc":"","static":false,"name":"getSelectedStroke","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"float","name":"scale","comment":"","type_short":"float"}],"throws":[],"return":{"type_long":"java.awt.BasicStroke","comment":"","type_short":"BasicStroke"}},{"javadoc":"","static":false,"name":"getSelectedAccentStroke","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"float","name":"scale","comment":"","type_short":"float"}],"throws":[],"return":{"type_long":"java.awt.BasicStroke","comment":"","type_short":"BasicStroke"}},{"javadoc":"","static":false,"name":"getEmphasisStroke","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"float","name":"scale","comment":"","type_short":"float"}],"throws":[],"return":{"type_long":"java.awt.BasicStroke","comment":"","type_short":"BasicStroke"}},{"javadoc":"","static":false,"name":"scaleArrowForBetterVisibility","comment":"","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"","type_short":"RenderContext"},{"type_long":"java.awt.Shape","name":"arrow","comment":"","type_short":"Shape"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"","type_short":"Shape"}},{"javadoc":"Uses the render context to create a compact shape for the given vertex\n@param rc the render context\n@param layout the layout\n@param vertex the vertex\n@return the vertex shape\n@see VertexShapeProvider#getFullShape()","static":false,"name":"getFullShape","comment":"Uses the render context to create a compact shape for the given vertex","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"the render context","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.algorithms.layout.Layout<V,E>","name":"layout","comment":"the layout","type_short":"Layout"},{"type_long":"V","name":"vertex","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"the vertex shape","type_short":"Shape"}},{"javadoc":"Uses the render context to create a compact shape for the given vertex\n@param rc the render context\n@param layout the layout\n@param vertex the vertex\n@return the vertex shape\n@see VertexShapeProvider#getCompactShape()","static":false,"name":"getCompactShape","comment":"Uses the render context to create a compact shape for the given vertex","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"the render context","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.algorithms.layout.Layout<V,E>","name":"layout","comment":"the layout","type_short":"Layout"},{"type_long":"V","name":"vertex","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"the vertex shape","type_short":"Shape"}},{"javadoc":"","static":false,"name":"transformFromLayoutToView","comment":"","params":[{"type_long":"edu.uci.ics.jung.visualization.RenderContext<V,E>","name":"rc","comment":"","type_short":"RenderContext"},{"type_long":"edu.uci.ics.jung.algorithms.layout.Layout<V,E>","name":"layout","comment":"","type_short":"Layout"},{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"java.awt.Shape","name":"shape","comment":"","type_short":"Shape"}],"throws":[],"return":{"type_long":"java.awt.Shape","comment":"","type_short":"Shape"}}],"name":"VisualEdgeRenderer","comment":"Edge render for the VisualGraph system\n \n Implementation Notes\n \n Jung Vertex\/Edge Rendering\n Jung creates shapes for vertices (see VertexShapeFactory) that are centered.  They\n do this by getting the width\/height of the shape and then creating an x\/y value that is \n half of the width and height, respectively.  This has the effect of the vertex appearing \n centered over its connected edge.  We mimic that with our \n VisualGraphVertexShapeTransformer so that our edge rendering code is similar to \n Jung's.\n If we ever decide instead to not center our shapes, then this renderer would have to be\n updated to itself center the edge shape created herein, like this:\n \n \t\tRectangle b1 = s1.getBounds();\n\t\tRectangle b2 = s2.getBounds();\n\n\t\t\/\/ translate the edge to be centered in the vertex\n\t\tint w1 = b1.width  1;\n\t\tint h1 = b1.height  1;\n\t\tint w2 = b2.width  1;\n\t\tint h2 = b2.height  1;\n\n\t\tfloat tx1 = x1 + w1;\n\t\tfloat ty1 = y1 + h1;\n\t\tfloat tx2 = x2 + w2;\n\t\tfloat ty2 = y2 + h2;\n \t\tShape edgeShape = getEdgeShape(rc, graph, e, tx1, ty1, tx2, ty2, isLoop, xs1);\n \n Also, there are other spots in the system where we account for this center that would \n have to be changed, such as the AbstractVisualGraphLayout, which needs the centering\n offsets to handle vertex clipping.","fields":[{"type_long":"float","javadoc":"","static":true,"name":"HOVERED_PATH_STROKE_WIDTH","comment":"","type_short":"float","constant_value":"8.0"},{"type_long":"float","javadoc":"","static":true,"name":"FOCUSED_PATH_STROKE_WIDTH","comment":"","type_short":"float","constant_value":"4.0"},{"type_long":"float","javadoc":"","static":true,"name":"SELECTED_STROKE_WIDTH","comment":"","type_short":"float","constant_value":"6.0"},{"type_long":"float","javadoc":"","static":true,"name":"EMPHASIZED_STOKE_WIDTH","comment":"","type_short":"float","constant_value":"9.0"},{"type_long":"float","javadoc":"","static":false,"name":"dashingPatternOffset","comment":"","type_short":"float","constant_value":null},{"type_long":"java.awt.Color","javadoc":"","static":false,"name":"defaultBaseColor","comment":"","type_short":"Color","constant_value":null},{"type_long":"java.awt.Color","javadoc":"","static":false,"name":"defaultHighlightColor","comment":"","type_short":"Color","constant_value":null}]}
