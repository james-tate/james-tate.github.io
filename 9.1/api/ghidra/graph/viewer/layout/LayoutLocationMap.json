{"implements":[],"javadoc":"A class that holds row and column data for each vertex and edge.  \n \n <P> This class will take in a {@link GridLocationMap}, which is comprised of grid index \n values, not layout space points.  Then, the grid values will be used to calculate \n offsets and size for each row and column. Each row has a y location and a height; each \n column has an x location and a width. The height and width are uniform in size across \n all rows and columns, based upon the tallest and widest vertex in the graph.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","name":"gridLocations","comment":"","type_short":"GridLocationMap"},{"type_long":"com.google.common.base.Function<V,java.awt.Shape>","name":"transformer","comment":"","type_short":"Function"},{"type_long":"boolean","name":"isCondensed","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.LayoutLocationMap<V,E>","comment":"","type_short":"LayoutLocationMap"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getColumnCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"col","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"","static":false,"name":"col","comment":"","params":[{"type_long":"int","name":"gridX","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"","static":false,"name":"getColumnContaining","comment":"","params":[{"type_long":"int","name":"x","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"","static":false,"name":"doGetColumn","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"Returns the columns in this location map, sorted from lowest index to highest\n@return the columns in this location map, sorted from lowest index to highest","static":false,"name":"columns","comment":"Returns the columns in this location map, sorted from lowest index to highest","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.graph.viewer.layout.Column>","comment":"the columns in this location map, sorted from lowest index to highest","type_short":"Collection"}},{"javadoc":"Returns the rows in this location map, sorted from lowest index to highest\n@return the rows in this location map, sorted from lowest index to highest","static":false,"name":"rows","comment":"Returns the rows in this location map, sorted from lowest index to highest","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.graph.viewer.layout.Row<V>>","comment":"the rows in this location map, sorted from lowest index to highest","type_short":"Collection"}},{"javadoc":"","static":false,"name":"lastColumn","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"","static":false,"name":"nextColumn","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Column","name":"column","comment":"","type_short":"Column"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Column","comment":"","type_short":"Column"}},{"javadoc":"","static":false,"name":"articulations","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"java.util.List<java.awt.Point>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"row","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"","static":false,"name":"lastRow","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"","static":false,"name":"row","comment":"","params":[{"type_long":"int","name":"gridY","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"","static":false,"name":"doGetRow","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"","static":false,"name":"gridX","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Column","name":"col","comment":"","type_short":"Column"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"gridY","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getRowOffsets","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.Integer>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getColOffsets","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.Integer>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"isCondensed","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getMinMaxRowColumnValues","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"vertices","comment":"","type_short":"Collection"},{"type_long":"java.util.Collection<E>","name":"edges","comment":"","type_short":"Collection"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.graph.viewer.layout.MinMaxRowColumn","comment":"","type_short":"MinMaxRowColumn"}},{"javadoc":"","static":false,"name":"initializeLayoutLocations","comment":"","params":[{"type_long":"com.google.common.base.Function<V,java.awt.Shape>","name":"transformer","comment":"","type_short":"Function"},{"type_long":"java.util.Collection<V>","name":"vertices","comment":"","type_short":"Collection"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LayoutLocationMap","comment":"A class that holds row and column data for each vertex and edge.  \n \n  This class will take in a GridLocationMap, which is comprised of grid index \n values, not layout space points.  Then, the grid values will be used to calculate \n offsets and size for each row and column. Each row has a y location and a height; each \n column has an x location and a width. The height and width are uniform in size across \n all rows and columns, based upon the tallest and widest vertex in the graph.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"numRows","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"numColumns","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.TreeMap<java.lang.Integer,ghidra.graph.viewer.layout.Row<V>>","javadoc":"","static":false,"name":"rowsByIndex","comment":"","type_short":"TreeMap","constant_value":null},{"type_long":"java.util.TreeMap<java.lang.Integer,ghidra.graph.viewer.layout.Column>","javadoc":"","static":false,"name":"columnsByIndex","comment":"","type_short":"TreeMap","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isCondensed","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","javadoc":"","static":false,"name":"gridLocations","comment":"","type_short":"GridLocationMap","constant_value":null}]}
