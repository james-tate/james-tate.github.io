{"implements":[],"javadoc":"A graph implementation that allows clients to mark vertices and edges as filtered.  When\n filtered, a vertex is removed from this graph, but kept around for later unfiltering. Things\n of note:\n <UL>\n \t\t<LI>As vertices are filtered, so to will be their edges\n \t\t<\/LI>\n \t\t<LI>If additions are made to the graph while it is filtered, the new additions will\n          not be added to the current graph, but will be kept in the background for later \n          restoring\n \t\t<\/LI>\n  \t\t<LI>\n \t\t<\/LI>\n <\/UL>\n\n <P>Implementation Note: this class engages in some odd behavior when removals and additions\n are need to this graph.  A distinction is made between events that are generated from \n external clients and those that happen due to filtering and restoring.  This distinction\n allows this class to know when to update this graph, based upon whether or not data has\n been filtered.   Implementation of this is achieved by using a flag.  Currently, this flag\n is thread-safe.  If this graph is to be multi-threaded (such as if changes are to be \n made by multiple threads, then this update flag will have to be revisited to ensure thread\n visibility.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"ghidra.graph.graphs.DefaultVisualGraph","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"filterVertices","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"toFilter","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"filterEdges","comment":"","params":[{"type_long":"java.util.Collection<E>","name":"toFilter","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restores the given filtered vertices into the graph.  This will only happen if both\n endpoints are in the graph.\n@param toUnfilter the edges to restore","static":false,"name":"unfilterVertices","comment":"Restores the given filtered vertices into the graph.  This will only happen if both\n endpoints are in the graph.","params":[{"type_long":"java.util.Collection<V>","name":"toUnfilter","comment":"the edges to restore","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restores the given filtered edges into the graph.  This will only happen if both\n endpoints are in the graph.\n@param toUnfilter the edges to restore","static":false,"name":"unfilterEdges","comment":"Restores the given filtered edges into the graph.  This will only happen if both\n endpoints are in the graph.","params":[{"type_long":"java.util.Collection<E>","name":"toUnfilter","comment":"the edges to restore","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAllVertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<V>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getAllEdges","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<E>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getFilteredVertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<V>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getFilteredEdges","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<E>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getUnfilteredVertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<V>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getUnfilteredEdges","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<E>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"isFiltered","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"clearFilter","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns all vertices that are reachable by the given vertices.\n \n <P>This method is needed if you wish to find relationships that have been filtered \n out.\n@param sourceVertices the vertices for which to find the other reachable vertices\n@return the reachable vertices","static":false,"name":"getAllReachableVertices","comment":"Returns all vertices that are reachable by the given vertices.\n \n This method is needed if you wish to find relationships that have been filtered \n out.","params":[{"type_long":"java.util.Set<V>","name":"sourceVertices","comment":"the vertices for which to find the other reachable vertices","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.Set<V>","comment":"the reachable vertices","type_short":"Set"}},{"javadoc":"Returns all edges connected to the given vertices.\n \n <P>This method is needed if you wish to find relationships that have been filtered \n out.\n@param sourceVertices the vertices for which to get the edges\n@return the reachable edges","static":false,"name":"getAllEdges","comment":"Returns all edges connected to the given vertices.\n \n This method is needed if you wish to find relationships that have been filtered \n out.","params":[{"type_long":"java.util.Set<V>","name":"sourceVertices","comment":"the vertices for which to get the edges","type_short":"Set"}],"throws":[],"return":{"type_long":"java.util.Set<E>","comment":"the reachable edges","type_short":"Set"}},{"javadoc":"","static":false,"name":"restoreAllVertices","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreAllEdges","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeRestoreVertices","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"toRestore","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeRestoreEdges","comment":"","params":[{"type_long":"java.util.Collection<E>","name":"toUnfilter","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeRestoreRelatedEdges","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"toUnfilter","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method is to be called internally to remove a vertex from this graph, but not the\n underlying 'complete graph'.\n@param v the vertex","static":false,"name":"removeVertexFromView","comment":"This method is to be called internally to remove a vertex from this graph, but not the\n underlying 'complete graph'.","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method is to be called internally to remove an edge from this graph, but not the\n underlying 'complete graph'.\n@param e the edge","static":false,"name":"removeEdgeFromView","comment":"This method is to be called internally to remove an edge from this graph, but not the\n underlying 'complete graph'.","params":[{"type_long":"E","name":"e","comment":"the edge","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"performInternalUpdate","comment":"","params":[{"type_long":"utility.function.Callback","name":"c","comment":"","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Performs a remove only if this graph is not in the process of an internal update\n@param c the callback to perform the remove","static":false,"name":"maybePerformRemove","comment":"Performs a remove only if this graph is not in the process of an internal update","params":[{"type_long":"utility.function.Callback","name":"c","comment":"the callback to perform the remove","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isInternalUpdate","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"maybePerformAdd","comment":"","params":[{"type_long":"utility.function.Callback","name":"c","comment":"","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeVertices","comment":"","params":[{"type_long":"java.lang.Iterable<V>","name":"verticesToRemove","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeEdges","comment":"","params":[{"type_long":"java.lang.Iterable<E>","name":"toRemove","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"edu.uci.ics.jung.graph.util.Pair<? extends V>","name":"endpoints","comment":"","type_short":"Pair"},{"type_long":"edu.uci.ics.jung.graph.util.EdgeType","name":"type","comment":"","type_short":"EdgeType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"java.util.Collection<? extends V>","name":"edgeVertices","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"java.util.Collection<? extends V>","name":"edgeVertices","comment":"","type_short":"Collection"},{"type_long":"edu.uci.ics.jung.graph.util.EdgeType","name":"type","comment":"","type_short":"EdgeType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"V","name":"v1","comment":"","type_short":"V"},{"type_long":"V","name":"v2","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"V","name":"v1","comment":"","type_short":"V"},{"type_long":"V","name":"v2","comment":"","type_short":"V"},{"type_long":"edu.uci.ics.jung.graph.util.EdgeType","name":"edgeType","comment":"","type_short":"EdgeType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"},{"type_long":"edu.uci.ics.jung.graph.util.Pair<? extends V>","name":"endpoints","comment":"","type_short":"Pair"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FilteringVisualGraph","comment":"A graph implementation that allows clients to mark vertices and edges as filtered.  When\n filtered, a vertex is removed from this graph, but kept around for later unfiltering. Things\n of note:\n \n \t\tAs vertices are filtered, so to will be their edges\n \t\t\n \t\tIf additions are made to the graph while it is filtered, the new additions will\n          not be added to the current graph, but will be kept in the background for later \n          restoring\n \t\t\n  \t\t\n \t\t\n \n\n Implementation Note: this class engages in some odd behavior when removals and additions\n are need to this graph.  A distinction is made between events that are generated from \n external clients and those that happen due to filtering and restoring.  This distinction\n allows this class to know when to update this graph, based upon whether or not data has\n been filtered.   Implementation of this is achieved by using a flag.  Currently, this flag\n is thread-safe.  If this graph is to be multi-threaded (such as if changes are to be \n made by multiple threads, then this update flag will have to be revisited to ensure thread\n visibility.","fields":[{"type_long":"ghidra.graph.graphs.FilteringVisualGraph<V,E>.UnfilteredGraph","javadoc":"A graph that always holds the unfiltered, complete graph data.  We use this to restore\n filtered items.","static":false,"name":"completeGraph","comment":"A graph that always holds the unfiltered, complete graph data.  We use this to restore\n filtered items.","type_short":"UnfilteredGraph","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"internalCallCount","comment":"","type_short":"int","constant_value":null}]}
