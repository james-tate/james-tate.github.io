{"implements":["java.util.List","java.util.Deque"],"javadoc":"A public view of the map as a set of entries\n \n In addition to {@link Set}, this view implements {@link List} and {@link Deque}, since an\n ordered set ought to behave like a list, and since this implementation is meant to be used\n as a dynamic-cost priority queue.\n \n Generally, all of the mutation methods are supported.","static":false,"extends":"java.util.AbstractSet","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts (by copy) the entry into the owning map","static":false,"name":"add","comment":"Inserts (by copy) the entry into the owning map","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts (by copy) the entry into the owning map, ignoring index\n@param index ignored since order is determined by the entry's value","static":false,"name":"add","comment":"Inserts (by copy) the entry into the owning map, ignoring index","params":[{"type_long":"int","name":"index","comment":"ignored since order is determined by the entry's value","type_short":"int"},{"type_long":"java.util.Map.Entry<K,V>","name":"element","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts (by copy) all entries in the collection, ignoring index\n@param index ignored since order is determined by the entries' values","static":false,"name":"addAll","comment":"Inserts (by copy) all entries in the collection, ignoring index","params":[{"type_long":"int","name":"index","comment":"ignored since order is determined by the entries' values","type_short":"int"},{"type_long":"java.util.Collection<? extends java.util.Map.Entry<K,V>>","name":"c","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts (by copy) the entry at its sorted position, not necessarily first","static":false,"name":"addFirst","comment":"Inserts (by copy) the entry at its sorted position, not necessarily first","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Inserts (by copy) the entry at its sorted position, not necessarily last","static":false,"name":"addLast","comment":"Inserts (by copy) the entry at its sorted position, not necessarily last","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clear","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"contains","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"descendingIterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<java.util.Map.Entry<K,V>>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"element","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"getFirst","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"getLast","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"indexOf","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<java.util.Map.Entry<K,V>>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"lastIndexOf","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"listIterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.ListIterator<java.util.Map.Entry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"listIterator","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.ListIterator<java.util.Map.Entry<K,V>>","comment":"","type_short":"ListIterator"}},{"javadoc":"","static":false,"name":"offer","comment":"","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts (by copy) the entry at its sorted position, not necessarily first","static":false,"name":"offerFirst","comment":"Inserts (by copy) the entry at its sorted position, not necessarily first","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Inserts (by copy) the entry at its sorted position, not necessarily last","static":false,"name":"offerLast","comment":"Inserts (by copy) the entry at its sorted position, not necessarily last","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"peek","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"peekFirst","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"peekLast","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"poll","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"pollFirst","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"pollLast","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"pop","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"push","comment":"","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"e","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeFirst","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"removeFirstOccurrence","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeLast","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"removeLastOccurrence","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Modify the entry (key and value) at index\n \n Because the map is sorted by value, the index of the given entry may not remain the\n same after it is modified. In fact, this is equivalent to removing the entry at the\n given index, and then inserting the given entry at its sorted position.","static":false,"name":"set","comment":"Modify the entry (key and value) at index\n \n Because the map is sorted by value, the index of the given entry may not remain the\n same after it is modified. In fact, this is equivalent to removing the entry at the\n given index, and then inserting the given entry at its sorted position.","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"java.util.Map.Entry<K,V>","name":"element","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"","type_short":"Node"}},{"javadoc":"","static":false,"name":"size","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"spliterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Spliterator<java.util.Map.Entry<K,V>>","comment":"","type_short":"Spliterator"}},{"javadoc":"This operation is not supported","static":false,"name":"subList","comment":"This operation is not supported","params":[{"type_long":"int","name":"fromIndex","comment":"","type_short":"int"},{"type_long":"int","name":"toIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<java.util.Map.Entry<K,V>>","comment":"","type_short":"List"}}],"name":"ValueSortedTreeMapEntrySet","comment":"A public view of the map as a set of entries\n \n In addition to Set, this view implements List and Deque, since an\n ordered set ought to behave like a list, and since this implementation is meant to be used\n as a dynamic-cost priority queue.\n \n Generally, all of the mutation methods are supported.","fields":[]}
