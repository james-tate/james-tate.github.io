{"implements":[],"javadoc":"Action context is a class that contains state information that is given to \n {@link DockingActionIf}s for them to decide if they are enabled for a given user action.  User\n actions are toolbar button presses, menu bar item presses and popup menu item presses.   As\n the user changes focus in the system, all actions are queried with the current context.  Thus,\n <b>toolbar buttons and menu items will enable and disable as the user interacts with the system.\n Further, popup menu items will not be added to popup menus when they report false for \n {@link DockingActionIf#isAddToPopup(ActionContext)}; they will appear in the popup, but be \n disabled if they report <tt>true<\/tt> for the above call, but <tt>false<\/tt> for \n {@link DockingActionIf#isEnabledForContext(ActionContext)}.<\/b>\n When the user executes an action, the current context will be passed to the backing \n {@link DockingActionIf}.   Ultimately, context serves to control action enablement and to \n allow plugins to share state with actions without having to store that state information \n in class fields of the plugin.\n \n <p>ComponentProviders are required to return Objects of this type in their getActionContext()\n methods.  Generally, ComponentProviders have two ways to use this class.  They can either create\n an ActionContext instance and pass in a contextObject that will be useful to its actions or,\n subclass the ActionContext object to include specific methods to provide the information that\n actions will require. \n \n <p>The data contained by this class has meaning that can change relative to the code that\n created it.  The intended purpose for the fields of this class is as follows:\n <ul>\n \t<li><b>provider<\/b> - the component provider to which this context belongs; the provider that\n                        contains the component that is the source of the user action\n  <\/li>\n \t<li><b>contextObject<\/b> - client-defined data object.  This allows clients to save any \n                             information desired to be used when the action is performed.\n  <\/li>\n \t<li><b>sourceObject<\/b> - when checking enablement, this is the item that was clicked or \n                            activated; when performing an action this is either the active\n                            object or the component that was clicked.  This value may change\n                            between the check for  \n                            {@link DockingActionIf#isEnabledForContext(ActionContext) enablement}\n                            and {@link DockingActionIf#actionPerformed(ActionContext) execution}.\n  <\/li>\n  <li><b>sourceComponent<\/b> - this value is the component that is the source of the current \n                               context.  Whereas the <code>sourceObject<\/code> is the actual\n                               clicked item, this value is the focused\/active component and \n                               will not change between  \n                               {@link DockingActionIf#isEnabledForContext(ActionContext) enablement}\n                            \t and {@link DockingActionIf#actionPerformed(ActionContext) execution}.\n  <\/li>\n \t<li><b>mouseEvent<\/b> - the mouse event that triggered the action; null if the action was\n                          triggered by a key binding.\n  <\/li>\n <\/ul>\n \n <p>Ultimately, clients can pass any values they wish for the fields of this class, even if \n that changes the meaning of the fields outlined above.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"cp","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Basic constructor for ActionContext\n@param provider the ComponentProvider that generated this context.\n@param sourceComponent an optional source object; this is intended to be the component that\n        is the source of the context, usually the focused component","static":false,"name":"<init>","comment":"Basic constructor for ActionContext","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the ComponentProvider that generated this context.","type_short":"ComponentProvider"},{"type_long":"java.awt.Component","name":"sourceComponent","comment":"an optional source object; this is intended to be the component that\n        is the source of the context, usually the focused component","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor\n@param provider the ComponentProvider that generated this context.\n@param contextObject an optional contextObject that the ComponentProvider can provide; this \n        can be anything that actions wish to later retrieve\n@param sourceComponent an optional source object; this is intended to be the component that\n        is the source of the context, usually the focused component","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the ComponentProvider that generated this context.","type_short":"ComponentProvider"},{"type_long":"java.lang.Object","name":"contextObject","comment":"an optional contextObject that the ComponentProvider can provide; this \n        can be anything that actions wish to later retrieve","type_short":"Object"},{"type_long":"java.awt.Component","name":"sourceComponent","comment":"an optional source object; this is intended to be the component that\n        is the source of the context, usually the focused component","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"lazyDeriveSourceComponent","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the {@link ComponentProvider} that generated this ActionContext\n@return the provider","static":false,"name":"getComponentProvider","comment":"Returns the ComponentProvider that generated this ActionContext","params":[],"throws":[],"return":{"type_long":"docking.ComponentProvider","comment":"the provider","type_short":"ComponentProvider"}},{"javadoc":"Returns the object that was included by the ComponentProvider when this context was created.\n@return the object that was included by the ComponentProvider when this context was created.","static":false,"name":"getContextObject","comment":"Returns the object that was included by the ComponentProvider when this context was created.","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the object that was included by the ComponentProvider when this context was created.","type_short":"Object"}},{"javadoc":"Sets the context object for this context.  This can be any object of the creator's \n choosing that can be provided for later retrieval.\n@param contextObject Sets the context object for this context.\n@return this context","static":false,"name":"setContextObject","comment":"Sets the context object for this context.  This can be any object of the creator's \n choosing that can be provided for later retrieval.","params":[{"type_long":"java.lang.Object","name":"contextObject","comment":"Sets the context object for this context.","type_short":"Object"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"this context","type_short":"ActionContext"}},{"javadoc":"Returns the sourceObject from the actionEvent that triggered this context to be generated.\n@return the sourceObject from the actionEvent that triggered this context to be generated.","static":false,"name":"getSourceObject","comment":"Returns the sourceObject from the actionEvent that triggered this context to be generated.","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"the sourceObject from the actionEvent that triggered this context to be generated.","type_short":"Object"}},{"javadoc":"Sets the sourceObject for this ActionContext.  This method is used internally by the \n DockingWindowManager. ComponentProvider and action developers should only use this \n method for testing.\n@param sourceObject the source object\n@return this context","static":false,"name":"setSourceObject","comment":"Sets the sourceObject for this ActionContext.  This method is used internally by the \n DockingWindowManager. ComponentProvider and action developers should only use this \n method for testing.","params":[{"type_long":"java.lang.Object","name":"sourceObject","comment":"the source object","type_short":"Object"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"this context","type_short":"ActionContext"}},{"javadoc":"Updates the context's mouse event.  Contexts that are based upon key events will have no \n mouse event.   This method is really for the framework to use.  Client calls to this \n method will be overridden by the framework when menu items are clicked.\n@param e the event that triggered this context.\n@return this context","static":false,"name":"setMouseEvent","comment":"Updates the context's mouse event.  Contexts that are based upon key events will have no \n mouse event.   This method is really for the framework to use.  Client calls to this \n method will be overridden by the framework when menu items are clicked.","params":[{"type_long":"java.awt.event.MouseEvent","name":"e","comment":"the event that triggered this context.","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"this context","type_short":"ActionContext"}},{"javadoc":"Returns the context's mouse event.  Contexts that are based upon key events will have no \n mouse event.\n@return the mouse event that triggered this context; null implies a key event-based context","static":false,"name":"getMouseEvent","comment":"Returns the context's mouse event.  Contexts that are based upon key events will have no \n mouse event.","params":[],"throws":[],"return":{"type_long":"java.awt.event.MouseEvent","comment":"the mouse event that triggered this context; null implies a key event-based context","type_short":"MouseEvent"}},{"javadoc":"Returns the component that is the target of this context.   This value should not change\n whether the context is triggered by a key binding or mouse event.\n@return the component; may be null","static":false,"name":"getSourceComponent","comment":"Returns the component that is the target of this context.   This value should not change\n whether the context is triggered by a key binding or mouse event.","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the component; may be null","type_short":"Component"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"ActionContext","comment":"Action context is a class that contains state information that is given to \n DockingActionIfs for them to decide if they are enabled for a given user action.  User\n actions are toolbar button presses, menu bar item presses and popup menu item presses.   As\n the user changes focus in the system, all actions are queried with the current context.  Thus,\n toolbar buttons and menu items will enable and disable as the user interacts with the system.\n Further, popup menu items will not be added to popup menus when they report false for \n DockingActionIf#isAddToPopup(ActionContext); they will appear in the popup, but be \n disabled if they report true for the above call, but false for \n DockingActionIf#isEnabledForContext(ActionContext).\n When the user executes an action, the current context will be passed to the backing \n DockingActionIf.   Ultimately, context serves to control action enablement and to \n allow plugins to share state with actions without having to store that state information \n in class fields of the plugin.\n \n ComponentProviders are required to return Objects of this type in their getActionContext()\n methods.  Generally, ComponentProviders have two ways to use this class.  They can either create\n an ActionContext instance and pass in a contextObject that will be useful to its actions or,\n subclass the ActionContext object to include specific methods to provide the information that\n actions will require. \n \n The data contained by this class has meaning that can change relative to the code that\n created it.  The intended purpose for the fields of this class is as follows:\n \n \tprovider - the component provider to which this context belongs; the provider that\n                        contains the component that is the source of the user action\n  \n \tcontextObject - client-defined data object.  This allows clients to save any \n                             information desired to be used when the action is performed.\n  \n \tsourceObject - when checking enablement, this is the item that was clicked or \n                            activated; when performing an action this is either the active\n                            object or the component that was clicked.  This value may change\n                            between the check for  \n                            DockingActionIf#isEnabledForContext(ActionContext)\n                            and DockingActionIf#actionPerformed(ActionContext).\n  \n  sourceComponent - this value is the component that is the source of the current \n                               context.  Whereas the sourceObject is the actual\n                               clicked item, this value is the focused\/active component and \n                               will not change between  \n                               DockingActionIf#isEnabledForContext(ActionContext)\n                            \t and DockingActionIf#actionPerformed(ActionContext).\n  \n \tmouseEvent - the mouse event that triggered the action; null if the action was\n                          triggered by a key binding.\n  \n \n \n Ultimately, clients can pass any values they wish for the fields of this class, even if \n that changes the meaning of the fields outlined above.","fields":[{"type_long":"docking.ComponentProvider","javadoc":"","static":false,"name":"provider","comment":"","type_short":"ComponentProvider","constant_value":null},{"type_long":"java.awt.event.MouseEvent","javadoc":"","static":false,"name":"mouseEvent","comment":"","type_short":"MouseEvent","constant_value":null},{"type_long":"java.lang.Object","javadoc":"","static":false,"name":"contextObject","comment":"","type_short":"Object","constant_value":null},{"type_long":"java.lang.Object","javadoc":"","static":false,"name":"sourceObject","comment":"","type_short":"Object","constant_value":null},{"type_long":"java.awt.Component","javadoc":"","static":false,"name":"sourceComponent","comment":"","type_short":"Component","constant_value":null}]}
