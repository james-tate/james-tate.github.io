{"implements":["docking.action.ActionContextProvider","ghidra.util.StatusListener","ghidra.util.task.TaskListener"],"javadoc":"Base class used for creating dialogs in Ghidra. Subclass this to create a dialog provider that has\n all the gui elements to appear in the dialog, then use tool.showDialog() to display your dialog.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor for a GhidraDialogComponent that be modal and will include a status line and\n a button panel. Its title will be the same as its name.\n@param title the dialog title.","static":false,"name":"<init>","comment":"Constructor for a GhidraDialogComponent that be modal and will include a status line and\n a button panel. Its title will be the same as its name.","params":[{"type_long":"java.lang.String","name":"title","comment":"the dialog title.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for a GhidraDialogComponent that will include a status line and\n a button panel.\n@param title the title for this dialog.\n@param modal true if this dialog should be modal.","static":false,"name":"<init>","comment":"Constructor for a GhidraDialogComponent that will include a status line and\n a button panel.","params":[{"type_long":"java.lang.String","name":"title","comment":"the title for this dialog.","type_short":"String"},{"type_long":"boolean","name":"modal","comment":"true if this dialog should be modal.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new GhidraDialogComponent.\n@param title the title for this dialog.\n@param modal true if this dialog should be modal.\n@param includeStatus true if this dialog should include a status line.\n@param includeButtons true if this dialog will have a button panel at\n the bottom.\n@param canRunTasks true means this dialog can execute tasks\n        ({@link #executeProgressTask(Task, int)} and it will show a progress monitor when\n        doing so.","static":false,"name":"<init>","comment":"Constructs a new GhidraDialogComponent.","params":[{"type_long":"java.lang.String","name":"title","comment":"the title for this dialog.","type_short":"String"},{"type_long":"boolean","name":"modal","comment":"true if this dialog should be modal.","type_short":"boolean"},{"type_long":"boolean","name":"includeStatus","comment":"true if this dialog should include a status line.","type_short":"boolean"},{"type_long":"boolean","name":"includeButtons","comment":"true if this dialog will have a button panel at\n the bottom.","type_short":"boolean"},{"type_long":"boolean","name":"canRunTasks","comment":"true means this dialog can execute tasks\n        (#executeProgressTask(Task, int) and it will show a progress monitor when\n        doing so.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installEscapeAction","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"a callback mechanism for children to do work","static":false,"name":"doInitialize","comment":"a callback mechanism for children to do work","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getComponent","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"","static":false,"name":"repack","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDialogSize","comment":"","params":[{"type_long":"java.awt.Dimension","name":"d","comment":"","type_short":"Dimension"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDialogSize","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"Sets the background on this component.\n@param color The color to set.","static":false,"name":"setBackground","comment":"Sets the background on this component.","params":[{"type_long":"java.awt.Color","name":"color","comment":"The color to set.","type_short":"Color"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the background color of this component.\n@return The background color of this component.","static":false,"name":"getBackground","comment":"Gets the background color of this component.","params":[],"throws":[],"return":{"type_long":"java.awt.Color","comment":"The background color of this component.","type_short":"Color"}},{"javadoc":"Sets the preferred size of the dialog.  Note that if you set the preferred size, the\n dialog will ignore any natural preferred size of your components.\n@param width the preferred width\n@param height the preferred height;","static":false,"name":"setPreferredSize","comment":"Sets the preferred size of the dialog.  Note that if you set the preferred size, the\n dialog will ignore any natural preferred size of your components.","params":[{"type_long":"int","name":"width","comment":"the preferred width","type_short":"int"},{"type_long":"int","name":"height","comment":"the preferred height;","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDefaultSize","comment":"","params":[{"type_long":"int","name":"width","comment":"","type_short":"int"},{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDefaultSize","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"setMinimumSize","comment":"","params":[{"type_long":"int","name":"width","comment":"","type_short":"int"},{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the minimum size of the dialog\n@param minSize the min size of the dialog","static":false,"name":"setMinimumSize","comment":"Sets the minimum size of the dialog","params":[{"type_long":"java.awt.Dimension","name":"minSize","comment":"the min size of the dialog","type_short":"Dimension"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the bound of this dialog component.  This is relative the parent of this provider.\n@return the bound of this dialog component.\n@see Component#getBounds()","static":false,"name":"getBounds","comment":"Gets the bound of this dialog component.  This is relative the parent of this provider.","params":[],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"the bound of this dialog component.","type_short":"Rectangle"}},{"javadoc":"Gets the location of this provider on the screen.  Calling {@link #getBounds()} provides\n a relative location.  This method provides a location absolute on the screen.\n@return the location of this provider on the screen.\n@see Component#getLocationOnScreen()","static":false,"name":"getLocationOnScreen","comment":"Gets the location of this provider on the screen.  Calling #getBounds() provides\n a relative location.  This method provides a location absolute on the screen.","params":[],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the location of this provider on the screen.","type_short":"Point"}},{"javadoc":"Returns the preferred size of this component.\n@return the preferred size of this component.","static":false,"name":"getPreferredSize","comment":"Returns the preferred size of this component.","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"the preferred size of this component.","type_short":"Dimension"}},{"javadoc":"Sets the cursor on the root panel for the dialog component.\n@param cursor the cursor to use.","static":false,"name":"setCursor","comment":"Sets the cursor on the root panel for the dialog component.","params":[{"type_long":"java.awt.Cursor","name":"cursor","comment":"the cursor to use.","type_short":"Cursor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Used by derived classes to add dialog specific gui elements\n@param comp the Component containing the derived class's components.","static":false,"name":"addWorkPanel","comment":"Used by derived classes to add dialog specific gui elements","params":[{"type_long":"javax.swing.JComponent","name":"comp","comment":"the Component containing the derived class's components.","type_short":"JComponent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeWorkPanel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installMouseListener","comment":"","params":[{"type_long":"java.awt.Component","name":"component","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"uninstallMouseListener","comment":"","params":[{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a button to the button panel at the bottom of the dialog.\n Buttons will be added from left to right.\n <p>\n Implementation Note: Calling this method will set the given button as the default button\n on this dialog when:\n <ul>\n \t\t<li>\n \t\t\tNo button has yet been added, and\n \t\t<\/li>\n \t\t<li>\n \t\t\tNo default button has been assigned\n \t\t<\/li>\n <\/ul>\n To change this behavior, call {@link #setDefaultButton(JButton)} with the desired\n default button.\n@param button the button","static":false,"name":"addButton","comment":"Adds a button to the button panel at the bottom of the dialog.\n Buttons will be added from left to right.\n \n Implementation Note: Calling this method will set the given button as the default button\n on this dialog when:\n \n \t\t\n \t\t\tNo button has yet been added, and\n \t\t\n \t\t\n \t\t\tNo default button has been assigned\n \t\t\n \n To change this behavior, call #setDefaultButton(JButton) with the desired\n default button.","params":[{"type_long":"javax.swing.JButton","name":"button","comment":"the button","type_short":"JButton"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the given button from the dialog\n@param button the button","static":false,"name":"removeButton","comment":"Remove the given button from the dialog","params":[{"type_long":"javax.swing.JButton","name":"button","comment":"the button","type_short":"JButton"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Execute a non-modal task that has progress and can be cancelled.\n@param task task to execute; a progress bar is displayed next to the status field\n        in this dialog if the task has progress; for  indeterminate tasks, a\n        \"spinning globe\" is displayed to indicate that something is happening.\n@param delay number of milliseconds to delay until progress bar is displayed; a\n        value less than or equal to 0 means to show the progress bar immediately\n@throws IllegalArgumentException if the given task is modal","static":false,"name":"executeProgressTask","comment":"Execute a non-modal task that has progress and can be cancelled.","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"task to execute; a progress bar is displayed next to the status field\n        in this dialog if the task has progress; for  indeterminate tasks, a\n        \"spinning globe\" is displayed to indicate that something is happening.","type_short":"Task"},{"type_long":"int","name":"delay","comment":"number of milliseconds to delay until progress bar is displayed; a\n        value less than or equal to 0 means to show the progress bar immediately","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearScheduledTask","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cancel the task that is running.","static":false,"name":"cancelCurrentTask","comment":"Cancel the task that is running.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Blocks the calling thread until the current task has completed; used\n by JUnit tests.","static":false,"name":"waitForCurrentTask","comment":"Blocks the calling thread until the current task has completed; used\n by JUnit tests.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog is running a task.\n@return true if this dialog is running a task.","static":false,"name":"isRunningTask","comment":"Returns true if this dialog is running a task.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog is running a task.","type_short":"boolean"}},{"javadoc":"Adds an \"OK\" button to the button panel.  The protected method\n okCallback() will be invoked whenever the \"OK\" button is pressed.","static":false,"name":"addOKButton","comment":"Adds an \"OK\" button to the button panel.  The protected method\n okCallback() will be invoked whenever the \"OK\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a \"Cancel\" button to the button panel.  The protected method\n CancelCallback() will be invoked whenever the \"Cancel\" button is pressed.","static":false,"name":"addCancelButton","comment":"Adds a \"Cancel\" button to the button panel.  The protected method\n CancelCallback() will be invoked whenever the \"Cancel\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a \"Dismiss\" button to the button panel.  The protected method\n dismissCallback() will be invoked whenever the \"Dismiss\" button is pressed.","static":false,"name":"addDismissButton","comment":"Adds a \"Dismiss\" button to the button panel.  The protected method\n dismissCallback() will be invoked whenever the \"Dismiss\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds an \"Apply\" button to the button panel.  The protected method\n applyCallback() will be invoked whenever the \"Apply\" button is pressed.","static":false,"name":"addApplyButton","comment":"Adds an \"Apply\" button to the button panel.  The protected method\n applyCallback() will be invoked whenever the \"Apply\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the Tooltip for the Apply button\n@param tooltip the tooltip","static":false,"name":"setApplyToolTip","comment":"Sets the Tooltip for the Apply button","params":[{"type_long":"java.lang.String","name":"tooltip","comment":"the tooltip","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setOkButtonText","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the Tooltip for the OK button\n@param tooltip the tooltip","static":false,"name":"setOkToolTip","comment":"Sets the Tooltip for the OK button","params":[{"type_long":"java.lang.String","name":"tooltip","comment":"the tooltip","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the Tooltip for the Cancel button\n@param tooltip the tooltip","static":false,"name":"setCancelToolTip","comment":"Sets the Tooltip for the Cancel button","params":[{"type_long":"java.lang.String","name":"tooltip","comment":"the tooltip","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCancelButtonText","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the Tooltip for the Dismiss button\n@param tooltip the tooltip","static":false,"name":"setDismissToolTip","comment":"Sets the Tooltip for the Dismiss button","params":[{"type_long":"java.lang.String","name":"tooltip","comment":"the tooltip","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the enablement state of the \"OK\" button.\n@param state true to enable the button, false to disable the button.","static":false,"name":"setOkEnabled","comment":"Sets the enablement state of the \"OK\" button.","params":[{"type_long":"boolean","name":"state","comment":"true to enable the button, false to disable the button.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the enablement state of the \"CANCEL\" button.\n@param state true to enable the button, false to disable the button.","static":false,"name":"setCancelEnabled","comment":"Sets the enablement state of the \"CANCEL\" button.","params":[{"type_long":"boolean","name":"state","comment":"true to enable the button, false to disable the button.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the enablement state of the \"Apply\" button.\n@param state true to enable the button, false to disable the button.","static":false,"name":"setApplyEnabled","comment":"Sets the enablement state of the \"Apply\" button.","params":[{"type_long":"boolean","name":"state","comment":"true to enable the button, false to disable the button.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the cancel button is enabled\n@return true if the cancel button is enabled","static":false,"name":"isCancelEnabled","comment":"Returns true if the cancel button is enabled","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the cancel button is enabled","type_short":"boolean"}},{"javadoc":"Returns true if the OK button is enabled\n@return true if the OK button is enabled","static":false,"name":"isOKEnabled","comment":"Returns true if the OK button is enabled","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the OK button is enabled","type_short":"boolean"}},{"javadoc":"Returns true if the apply button is enabled\n@return true if the apply button is enabled","static":false,"name":"isApplyEnabled","comment":"Returns true if the apply button is enabled","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the apply button is enabled","type_short":"boolean"}},{"javadoc":"Sets the text in the dialog's status line using the default color\n@param text the text to display in the status line","static":false,"name":"setStatusText","comment":"Sets the text in the dialog's status line using the default color","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to display in the status line","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the text in the dialog's status line using the specified message type to control\n the color.\n@param message the message\n@param type the message type","static":false,"name":"setStatusText","comment":"Sets the text in the dialog's status line using the specified message type to control\n the color.","params":[{"type_long":"java.lang.String","name":"message","comment":"the message","type_short":"String"},{"type_long":"ghidra.util.MessageType","name":"type","comment":"the message type","type_short":"MessageType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setStatusText","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"ghidra.util.MessageType","name":"type","comment":"","type_short":"MessageType"},{"type_long":"boolean","name":"alert","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSetStatusText","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"},{"type_long":"ghidra.util.MessageType","name":"type","comment":"","type_short":"MessageType"},{"type_long":"boolean","name":"alert","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Signals for this dialog to visually draw the user's attention to the status text","static":false,"name":"alertMessage","comment":"Signals for this dialog to visually draw the user's attention to the status text","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Signals for this dialog to visually draw the user's attention to the status text\n@param alertFinishedCallback this will be called when the alert is finished.  This allows\n        clients to perform work, like re-enabling buttons that were disabled before\n        calling this method","static":false,"name":"alertMessage","comment":"Signals for this dialog to visually draw the user's attention to the status text","params":[{"type_long":"utility.function.Callback","name":"alertFinishedCallback","comment":"this will be called when the alert is finished.  This allows\n        clients to perform work, like re-enabling buttons that were disabled before\n        calling this method","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doAlertMessage","comment":"","params":[{"type_long":"utility.function.Callback","name":"alertFinishedCallback","comment":"","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getStatusColor","comment":"","params":[{"type_long":"ghidra.util.MessageType","name":"type","comment":"","type_short":"MessageType"}],"throws":[],"return":{"type_long":"java.awt.Color","comment":"","type_short":"Color"}},{"javadoc":"Stop the timer if one was started to delay showing the progress\n bar.","static":false,"name":"stopProgressTimer","comment":"Stop the timer if one was started to delay showing the progress\n bar.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Will hide the progress panel if it was showing.\n@see #showTaskMonitorComponent(String, boolean, boolean)","static":false,"name":"hideTaskMonitorComponent","comment":"Will hide the progress panel if it was showing.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showProgressBar","comment":"","params":[{"type_long":"java.lang.String","name":"localTitle","comment":"","type_short":"String"},{"type_long":"boolean","name":"hasProgress","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"canCancel","comment":"","type_short":"boolean"},{"type_long":"int","name":"delay","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showProgress","comment":"","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"","type_short":"Task"},{"type_long":"int","name":"delay","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"","type_short":"TaskMonitor"}},{"javadoc":"","static":false,"name":"showProgressBar","comment":"","params":[{"type_long":"java.lang.String","name":"localTitle","comment":"","type_short":"String"},{"type_long":"boolean","name":"hasProgress","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"canCancel","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearProgress","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If the status text doesn't fit in the dialog, set a tool tip\n for the status label so the user can see what it says.\n If the status message fits then there is no tool tip.","static":false,"name":"updateStatusToolTip","comment":"If the status text doesn't fit in the dialog, set a tool tip\n for the status label so the user can see what it says.\n If the status message fits then there is no tool tip.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the text from the dialog's status line.","static":false,"name":"clearStatusText","comment":"Clears the text from the dialog's status line.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current status in the dialogs status line\n@return the status text","static":false,"name":"getStatusText","comment":"Returns the current status in the dialogs status line","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the status text","type_short":"String"}},{"javadoc":"","static":false,"name":"getStatusLabel","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JLabel","comment":"","type_short":"JLabel"}},{"javadoc":"Get the task scheduler for the dialog\n@return the task scheduler","static":false,"name":"getTaskScheduler","comment":"Get the task scheduler for the dialog","params":[],"throws":[],"return":{"type_long":"docking.TaskScheduler","comment":"the task scheduler","type_short":"TaskScheduler"}},{"javadoc":"","static":false,"name":"getTaskMonitorComponent","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitorComponent","comment":"","type_short":"TaskMonitorComponent"}},{"javadoc":"Shows the progress bar for this dialog.\n@param localTitle the name of the task\n@param hasProgress true if the progress bar should show progress; false to be indeterminate\n@param canCancel true if the task can be cancelled\n@return the {@link TaskMonitor} used by to communicate progress\n@see #hideTaskMonitorComponent()","static":false,"name":"showTaskMonitorComponent","comment":"Shows the progress bar for this dialog.","params":[{"type_long":"java.lang.String","name":"localTitle","comment":"the name of the task","type_short":"String"},{"type_long":"boolean","name":"hasProgress","comment":"true if the progress bar should show progress; false to be indeterminate","type_short":"boolean"},{"type_long":"boolean","name":"canCancel","comment":"true if the task can be cancelled","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"the TaskMonitor used by to communicate progress","type_short":"TaskMonitor"}},{"javadoc":"The callback method for when the \"Apply\" button is pressed.","static":false,"name":"applyCallback","comment":"The callback method for when the \"Apply\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The callback method for when the \"OK\" button is pressed.","static":false,"name":"okCallback","comment":"The callback method for when the \"OK\" button is pressed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The callback method for when the \"Cancel\" button is pressed. The\n default behavior is to call setVisible(false) and dispose() on the\n dialog.","static":false,"name":"cancelCallback","comment":"The callback method for when the \"Cancel\" button is pressed. The\n default behavior is to call setVisible(false) and dispose() on the\n dialog.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The callback method for when the \"Dismiss\" button is pressed.\n The default behavior is to call the cancel Callback.","static":false,"name":"dismissCallback","comment":"The callback method for when the \"Dismiss\" button is pressed.\n The default behavior is to call the cancel Callback.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The callback method for when the escape key is pressed.  The default\n behavior is the call setVisible(false) on the dialog.","static":false,"name":"escapeCallback","comment":"The callback method for when the escape key is pressed.  The default\n behavior is the call setVisible(false) on the dialog.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildStatusPanel","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JPanel","comment":"","type_short":"JPanel"}},{"javadoc":"Returns true if this component should be displayed in a modal dialog\n@return true if this component should be displayed in a modal dialog","static":false,"name":"isModal","comment":"Returns true if this component should be displayed in a modal dialog","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this component should be displayed in a modal dialog","type_short":"boolean"}},{"javadoc":"Sets the horizontal position of the status label.\n@param justification One of the following constants\n           defined in <code>SwingConstants<\/code>:\n           <code>LEFT<\/code>,\n           <code>CENTER<\/code> (the default for image-only labels),\n           <code>RIGHT<\/code>,","static":false,"name":"setStatusJustification","comment":"Sets the horizontal position of the status label.","params":[{"type_long":"int","name":"justification","comment":"One of the following constants\n           defined in SwingConstants:\n           LEFT,\n           CENTER (the default for image-only labels),\n           RIGHT,","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the task was canceled; the progress panel is\n removed.\n@param task task that was canceled","static":false,"name":"taskCancelled","comment":"Notification that the task was canceled; the progress panel is\n removed.","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"task that was canceled","type_short":"Task"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the given task completed so that the progress\n panel can be removed.\n@param task task that completed","static":false,"name":"taskCompleted","comment":"Notification that the given task completed so that the progress\n panel can be removed.","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"task that completed","type_short":"Task"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the component that should be given focus when the dialog is activated.\n <p>\n Implementation Note:  If the given component is a JButton, then that component will be\n made the default button.\n@param focusComponent the component that should receive default focus.\n@see #setFocusComponent(Component)","static":false,"name":"setFocusComponent","comment":"Sets the component that should be given focus when the dialog is activated.\n \n Implementation Note:  If the given component is a JButton, then that component will be\n made the default button.","params":[{"type_long":"java.awt.Component","name":"focusComponent","comment":"the component that should receive default focus.","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the component that will receive focus when the dialog is shown\n@return the component","static":false,"name":"getFocusComponent","comment":"Returns the component that will receive focus when the dialog is shown","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the component","type_short":"Component"}},{"javadoc":"Set the help Location for this dialog.\n@param helpLocation the helpLocation for this dialog.","static":false,"name":"setHelpLocation","comment":"Set the help Location for this dialog.","params":[{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"the helpLocation for this dialog.","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the help location for this dialog\n@return the help location","static":false,"name":"getHelpLocatdion","comment":"Returns the help location for this dialog","params":[],"throws":[],"return":{"type_long":"ghidra.util.HelpLocation","comment":"the help location","type_short":"HelpLocation"}},{"javadoc":"Sets the button to make \"Default\" when the dialog is shown.  If no default button is\n desired, then pass <tt>null<\/tt> as the <tt>button<\/tt> value.\n@param button the button to make default enabled.","static":false,"name":"setDefaultButton","comment":"Sets the button to make \"Default\" when the dialog is shown.  If no default button is\n desired, then pass null as the button value.","params":[{"type_long":"javax.swing.JButton","name":"button","comment":"the button to make default enabled.","type_short":"JButton"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the default button for the dialog.\n@return the button","static":false,"name":"getDefaultButton","comment":"Returns the default button for the dialog.","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"the button","type_short":"JButton"}},{"javadoc":"Sets the title to be displayed in the dialogs title bar\n@param title the title","static":false,"name":"setTitle","comment":"Sets the title to be displayed in the dialogs title bar","params":[{"type_long":"java.lang.String","name":"title","comment":"the title","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getGlassPane","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"setGlassPane","comment":"","params":[{"type_long":"java.awt.Component","name":"component","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the title for this component\n@return the title","static":false,"name":"getTitle","comment":"Returns the title for this component","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the title","type_short":"String"}},{"javadoc":"Moves the dialog associated with this provider to the front.","static":false,"name":"toFront","comment":"Moves the dialog associated with this provider to the front.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDialog","comment":"","params":[{"type_long":"docking.DockingDialog","name":"dialog","comment":"","type_short":"DockingDialog"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDialog","comment":"","params":[],"throws":[],"return":{"type_long":"docking.DockingDialog","comment":"","type_short":"DockingDialog"}},{"javadoc":"","static":false,"name":"getParent","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"isVisible","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isShowing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Override this method if you want to do something when the dialog is made visible","static":false,"name":"dialogShown","comment":"Override this method if you want to do something when the dialog is made visible","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Override this method if you want to do something when the dialog is made invisible","static":false,"name":"dialogClosed","comment":"Override this method if you want to do something when the dialog is made invisible","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the initial location for the dialog\n@param x the x coordinate\n@param y the y coordinate","static":false,"name":"setInitialLocation","comment":"Sets the initial location for the dialog","params":[{"type_long":"int","name":"x","comment":"the x coordinate","type_short":"int"},{"type_long":"int","name":"y","comment":"the y coordinate","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the initial location for the dialog or null if none was set\n@return the point","static":false,"name":"getIntialLocation","comment":"Returns the initial location for the dialog or null if none was set","params":[],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the point","type_short":"Point"}},{"javadoc":"Sets the resizable property for the corresponding dialog.\n@param resizeable if false the user will not be able to resize the dialog.","static":false,"name":"setResizable","comment":"Sets the resizable property for the corresponding dialog.","params":[{"type_long":"boolean","name":"resizeable","comment":"if false the user will not be able to resize the dialog.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isResizeable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"An optional extension point for subclasses to provider action context for the actions used by\n this provider.\n@param event The mouse event used (may be null) to generate a popup menu","static":false,"name":"getActionContext","comment":"An optional extension point for subclasses to provider action context for the actions used by\n this provider.","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"The mouse event used (may be null) to generate a popup menu","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"","type_short":"ActionContext"}},{"javadoc":"Signals to this provider that it needs to updated the enabled state of its managed\n actions.","static":false,"name":"notifyContextChanged","comment":"Signals to this provider that it needs to updated the enabled state of its managed\n actions.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add an action to this dialog.  Only actions with icons are added to the toolbar.\n@param action popup menu action","static":false,"name":"addAction","comment":"Add an action to this dialog.  Only actions with icons are added to the toolbar.","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"popup menu action","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActions","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<docking.action.DockingActionIf>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"addToolbarAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"registerActionKeyBinding","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"dockingAction","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this dialog to remember its location from one invocation to the next. The default is to\n remember location.\n@param rememberLocation true to remember, false otherwise.","static":false,"name":"setRememberLocation","comment":"Sets this dialog to remember its location from one invocation to the next. The default is to\n remember location.","params":[{"type_long":"boolean","name":"rememberLocation","comment":"true to remember, false otherwise.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog remembers its location from one invocation to the next.\n@return true if this dialog remembers its location from one invocation to the next.","static":false,"name":"getRememberLocation","comment":"Returns true if this dialog remembers its location from one invocation to the next.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog remembers its location from one invocation to the next.","type_short":"boolean"}},{"javadoc":"Sets this dialog to remember its size from one invocation to the next. The default is to\n remember size.\n@param rememberSize true to remember, false otherwise.","static":false,"name":"setRememberSize","comment":"Sets this dialog to remember its size from one invocation to the next. The default is to\n remember size.","params":[{"type_long":"boolean","name":"rememberSize","comment":"true to remember, false otherwise.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog remembers its size from one invocation to the next.\n@return true if this dialog remembers its size from one invocation to the next.","static":false,"name":"getRemberSize","comment":"Returns true if this dialog remembers its size from one invocation to the next.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog remembers its size from one invocation to the next.","type_short":"boolean"}},{"javadoc":"Returns true if this dialog uses shared location and size information.\n@return true if this dialog uses shared location and size information.\n@see #setUseSharedLocation(boolean)","static":false,"name":"getUseSharedLocation","comment":"Returns true if this dialog uses shared location and size information.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog uses shared location and size information.","type_short":"boolean"}},{"javadoc":"Specifies whether or not this dialog component should use the same remembered location (and\n size) no matter which window this dialog is launched from.  The default is not to use\n shared location and size, which means that there is a remembered location and size for this\n dialog for each window that has launched it (i.e. the window is the parent of the dialog).\n@param useSharedLocation true to share locations","static":false,"name":"setUseSharedLocation","comment":"Specifies whether or not this dialog component should use the same remembered location (and\n size) no matter which window this dialog is launched from.  The default is not to use\n shared location and size, which means that there is a remembered location and size for this\n dialog for each window that has launched it (i.e. the window is the parent of the dialog).","params":[{"type_long":"boolean","name":"useSharedLocation","comment":"true to share locations","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog is intended to be shown and hidden relatively quickly.  This\n is used to determine if this dialog should be allowed to parent other components.   The\n default is false.\n@return true if this dialog is transient","static":false,"name":"isTransient","comment":"Returns true if this dialog is intended to be shown and hidden relatively quickly.  This\n is used to determine if this dialog should be allowed to parent other components.   The\n default is false.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog is transient","type_short":"boolean"}},{"javadoc":"Sets this dialog to be transient (see {@link #isTransient()}\n@param isTransient true for transient; false is the default","static":false,"name":"setTransient","comment":"Sets this dialog to be transient (see #isTransient()","params":[{"type_long":"boolean","name":"isTransient","comment":"true for transient; false is the default","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"main","comment":"","params":[{"type_long":"java.lang.String[]","name":"args","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DialogComponentProvider","comment":"Base class used for creating dialogs in Ghidra. Subclass this to create a dialog provider that has\n all the gui elements to appear in the dialog, then use tool.showDialog() to display your dialog.","fields":[{"type_long":"java.awt.Color","javadoc":"","static":true,"name":"WARNING_COLOR","comment":"","type_short":"Color","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_DELAY","comment":"","type_short":"int","constant_value":"750"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PROGRESS","comment":"","type_short":"String","constant_value":"\"Progress\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT","comment":"","type_short":"String","constant_value":"\"No Progress\""},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"rootPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"modal","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"title","comment":"","type_short":"String","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"mainPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"javax.swing.JComponent","javadoc":"","static":false,"name":"workPanel","comment":"","type_short":"JComponent","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"buttonPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"statusPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"javax.swing.JButton","javadoc":"","static":false,"name":"okButton","comment":"","type_short":"JButton","constant_value":null},{"type_long":"javax.swing.JButton","javadoc":"","static":false,"name":"applyButton","comment":"","type_short":"JButton","constant_value":null},{"type_long":"javax.swing.JButton","javadoc":"","static":false,"name":"cancelButton","comment":"","type_short":"JButton","constant_value":null},{"type_long":"javax.swing.JButton","javadoc":"","static":false,"name":"dismissButton","comment":"","type_short":"JButton","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isAlerting","comment":"","type_short":"boolean","constant_value":null},{"type_long":"javax.swing.JLabel","javadoc":"","static":false,"name":"statusLabel","comment":"","type_short":"JLabel","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"statusProgPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"javax.swing.Timer","javadoc":"","static":false,"name":"showTimer","comment":"","type_short":"Timer","constant_value":null},{"type_long":"docking.TaskScheduler","javadoc":"","static":false,"name":"taskScheduler","comment":"","type_short":"TaskScheduler","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitorComponent","javadoc":"","static":false,"name":"taskMonitorComponent","comment":"","type_short":"TaskMonitorComponent","constant_value":null},{"type_long":"javax.swing.KeyStroke","javadoc":"","static":true,"name":"ESC_KEYSTROKE","comment":"","type_short":"KeyStroke","constant_value":null},{"type_long":"java.awt.CardLayout","javadoc":"","static":false,"name":"progressCardLayout","comment":"","type_short":"CardLayout","constant_value":null},{"type_long":"javax.swing.JButton","javadoc":"","static":false,"name":"defaultButton","comment":"","type_short":"JButton","constant_value":null},{"type_long":"docking.DockingDialog","javadoc":"","static":false,"name":"dialog","comment":"","type_short":"DockingDialog","constant_value":null},{"type_long":"java.awt.Component","javadoc":"","static":false,"name":"focusComponent","comment":"","type_short":"Component","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"toolbar","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"java.util.Map<docking.action.DockingActionIf,docking.menu.DockingToolbarButton>","javadoc":"","static":false,"name":"actionMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"docking.DialogComponentProviderPopupActionManager","javadoc":"","static":false,"name":"popupManager","comment":"","type_short":"DialogComponentProviderPopupActionManager","constant_value":null},{"type_long":"docking.DialogComponentProvider.PopupHandler","javadoc":"","static":false,"name":"popupHandler","comment":"","type_short":"PopupHandler","constant_value":null},{"type_long":"java.util.Set<docking.action.DockingActionIf>","javadoc":"","static":false,"name":"dialogActions","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.awt.Point","javadoc":"","static":false,"name":"initialLocation","comment":"","type_short":"Point","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"resizeable","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"rememberLocation","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"rememberSize","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"useSharedLocation","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isTransient","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.awt.Dimension","javadoc":"","static":false,"name":"defaultSize","comment":"","type_short":"Dimension","constant_value":null}]}
