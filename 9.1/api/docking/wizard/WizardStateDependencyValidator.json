{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Registers a dependency from one property state to another.  If the predecessor is null, then\n the dependent is registered such that a call to {@link #findAffectedDependants(WizardState)}\n will include that property key only if its cached value is null.  (i.e. the first time it \n is called.)\n@param dependant the property key that depends on a previous property being set.\n@param predecessor the property key of the property that affects the dependent property.","static":false,"name":"addDependency","comment":"Registers a dependency from one property state to another.  If the predecessor is null, then\n the dependent is registered such that a call to #findAffectedDependants(WizardState)\n will include that property key only if its cached value is null.  (i.e. the first time it \n is called.)","params":[{"type_long":"T","name":"dependent","comment":"","type_short":"T"},{"type_long":"T","name":"predecessor","comment":"the property key of the property that affects the dependent property.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a set of all property keys that need to have their values set because a predecessor \n property has been changed that may affect the valid values for this property.  Also, any\n property keys that don't have a value in the local cache will be returned.\n@param globalState the global WizardState that is passed from one wizard panel to the next.\n@return the set of property keys whose values should be (re)computed.","static":false,"name":"findAffectedDependants","comment":"Returns a set of all property keys that need to have their values set because a predecessor \n property has been changed that may affect the valid values for this property.  Also, any\n property keys that don't have a value in the local cache will be returned.","params":[{"type_long":"docking.wizard.WizardState<T>","name":"globalState","comment":"the global WizardState that is passed from one wizard panel to the next.","type_short":"WizardState"}],"throws":[],"return":{"type_long":"java.util.Set<T>","comment":"the set of property keys whose values should be (re)computed.","type_short":"Set"}},{"javadoc":"Updates the local cache values for all the relevant properties.  This method should be\n called from a wizard panel when the \"next\" action is invoked (i.e. the user values have been\n accepted).\n@param globalState The WizardState containing all the property values.","static":false,"name":"updatePropertyValues","comment":"Updates the local cache values for all the relevant properties.  This method should be\n called from a wizard panel when the \"next\" action is invoked (i.e. the user values have been\n accepted).","params":[{"type_long":"docking.wizard.WizardState<T>","name":"globalState","comment":"The WizardState containing all the property values.","type_short":"WizardState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"WizardStateDependencyValidator","comment":"","fields":[{"type_long":"java.util.Set<T>","javadoc":"","static":false,"name":"dependentSet","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Map<T,java.util.Set<T>>","javadoc":"","static":false,"name":"dependentMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<T,java.lang.Object>","javadoc":"","static":false,"name":"valueMap","comment":"","type_short":"Map","constant_value":null}]}
