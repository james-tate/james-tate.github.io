{"implements":[],"javadoc":"Generic data flavor class to override the equals(DataFlavor) method\n in order to have data flavors support the same general class types\n such as an ArrayList.","static":false,"extends":"java.awt.datatransfer.DataFlavor","methods":[{"javadoc":"Construct a new GenericDataFlavor.","static":false,"name":"<init>","comment":"Construct a new GenericDataFlavor.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a GenericDataFlavor that represents a Java class\n@param representationClass the class used to transfer data in this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor. If this parameter is null then the value of \n the the MIME Content Type is used.","static":false,"name":"<init>","comment":"Construct a GenericDataFlavor that represents a Java class","params":[{"type_long":"java.lang.Class<?>","name":"representationClass","comment":"the class used to transfer data in this flavor","type_short":"Class"},{"type_long":"java.lang.String","name":"humanPresentableName","comment":"the human-readable string used to \n identify this flavor. If this parameter is null then the value of \n the the MIME Content Type is used.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"construct a GenericDataFlavor from a Mime Type string.\n@param mimeType he string used to identify the MIME type for this flavor\n The string must specify a \"class=\"\n  parameter in order to succeed in constructing a DataFlavor.\n@exception ClassNotFoundException if the class could not be loaded\n@exception IllegalArgumentException thrown if mimeType does not\n specify a \"class=\" parameter","static":false,"name":"<init>","comment":"construct a GenericDataFlavor from a Mime Type string.","params":[{"type_long":"java.lang.String","name":"mimeType","comment":"he string used to identify the MIME type for this flavor\n The string must specify a \"class=\"\n  parameter in order to succeed in constructing a DataFlavor.","type_short":"String"}],"throws":[{"type_long":"java.lang.ClassNotFoundException","comment":"","type_short":"ClassNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n \"application\/x-java-serialized-object; class=<representation class>\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName(<representation class>)\n@param mimeType the string used to identify the MIME type for \n this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor\n@exception IllegalArgumentException thrown if the mimeType does not \n specify a \"class=\" parameter, or if the class is not\n successfully loaded","static":false,"name":"<init>","comment":"Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n \"application\/x-java-serialized-object; class=\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName()","params":[{"type_long":"java.lang.String","name":"mimeType","comment":"the string used to identify the MIME type for \n this flavor","type_short":"String"},{"type_long":"java.lang.String","name":"humanPresentableName","comment":"the human-readable string used to \n identify this flavor","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n \"application\/x-java-serialized-object; class=<representation class>\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName(<representation class>).\n@param mimeType the string used to identify the MIME type for this flavor\n@param humanPresentableName the human-readable string used to \n identify this flavor.\n@param classLoader class loader to load the class\n@exception ClassNotFoundException is thrown if class could not be loaded","static":false,"name":"<init>","comment":"Construct a GenericDataFlavor that represents a MimeType \n If the mimeType is \n \"application\/x-java-serialized-object; class=\",\n the result is the same as calling \n new GenericDataFlavor(Class:forName().","params":[{"type_long":"java.lang.String","name":"mimeType","comment":"the string used to identify the MIME type for this flavor","type_short":"String"},{"type_long":"java.lang.String","name":"humanPresentableName","comment":"the human-readable string used to \n identify this flavor.","type_short":"String"},{"type_long":"java.lang.ClassLoader","name":"classLoader","comment":"class loader to load the class","type_short":"ClassLoader"}],"throws":[{"type_long":"java.lang.ClassNotFoundException","comment":"","type_short":"ClassNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return true if dataFlavor equals this generic data flavor.","static":false,"name":"equals","comment":"Return true if dataFlavor equals this generic data flavor.","params":[{"type_long":"java.awt.datatransfer.DataFlavor","name":"dataFlavor","comment":"","type_short":"DataFlavor"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return true if obj is equal this generic data flavor.","static":false,"name":"equals","comment":"Return true if obj is equal this generic data flavor.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"GenericDataFlavor","comment":"Generic data flavor class to override the equals(DataFlavor) method\n in order to have data flavors support the same general class types\n such as an ArrayList.","fields":[]}
