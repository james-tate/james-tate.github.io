{"implements":[],"javadoc":"An interface for objects (really Components) to implement that signals they provide actions \n for the Docking environment.  This interface will be called when the implementor is the source\n of a Java event, like a MouseEvent.\n <p>\n As an example, a JTable that wishes to provide popup menu actions can implement this interface.\n When the user right-clicks on said table, then Docking system will ask this object for its\n actions.  Further, in this example, the actions given will be inserted into the popup menu\n that is shown.\n@deprecated use {@link DockingTool}","static":false,"methods":[{"javadoc":"Returns actions that are compatible with the given context.\n@return the actions","static":false,"name":"getDockingActions","comment":"Returns actions that are compatible with the given context.","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.action.DockingActionIf>","comment":"the actions","type_short":"List"}}],"name":"DockingActionProviderIf","comment":"An interface for objects (really Components) to implement that signals they provide actions \n for the Docking environment.  This interface will be called when the implementor is the source\n of a Java event, like a MouseEvent.\n \n As an example, a JTable that wishes to provide popup menu actions can implement this interface.\n When the user right-clicks on said table, then Docking system will ask this object for its\n actions.  Further, in this example, the actions given will be inserted into the popup menu\n that is shown.","fields":[]}
