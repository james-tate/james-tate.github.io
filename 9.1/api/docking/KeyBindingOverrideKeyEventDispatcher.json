{"implements":["java.awt.KeyEventDispatcher"],"javadoc":"Allows Ghidra to give preference to its key event processing over the default Java key event\n processing.  See {@link #dispatchKeyEvent(KeyEvent)} for a more detailed explanation of how\n Ghidra processes key events.\n <p>\n {@link #install()} must be called in order to install this <tt>Singleton<\/tt> into Java's \n key event processing system.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Installs this key event dispatcher into Java's key event processing system.  Calling this\n method more than once has no effect.","static":true,"name":"install","comment":"Installs this key event dispatcher into Java's key event processing system.  Calling this\n method more than once has no effect.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Overridden to change the Java's key event processing to insert Ghidra's top level tool\n key bindings into the event processing.  Java's normal key event processing is:\n <ol>\n     <li>KeyListeners on the focused Component<\/li>\n     <li>InputMap and ActionMap actions for the Component<\/li>\n     <li>InputMap and ActionMap actions for the Component's parent, and so on up the\n         Swing hierarchy<\/li>\n <\/ol>\n Ghidra has altered this flow to be:\n <ol>\n     <li><b>Reserved keybinding actions<\/b>\n     <li>KeyListeners on the focused Component<\/li>\n     <li>InputMap and ActionMap actions for the Component<\/li>\n     <b><li>Ghidra tool-level actions<\/li><\/b>\n     <li>InputMap and ActionMap actions for the Component's parent, and so on up the\n         Swing hierarchy<\/li>\n <\/ol>\n This updated key event processing allows individual components to handle key events first,\n but then allows global Ghidra key bindings to be processed, allowing normal Java processing\n after Ghidra has had its chance to process the event.\n <P>\n There are some exceptions to this processing chain:\n <ol>\n      <li>We don't do any processing when the focused component is an instance of \n          <tt>JTextComponent<\/tt>.<\/li>\n      <li>We don't do any processing if the active window is an instance of \n          <tt>DockingDialog<\/tt>.<\/li>\n <\/ol>\n@see java.awt.KeyEventDispatcher#dispatchKeyEvent(java.awt.event.KeyEvent)","static":false,"name":"dispatchKeyEvent","comment":"Overridden to change the Java's key event processing to insert Ghidra's top level tool\n key bindings into the event processing.  Java's normal key event processing is:\n \n     KeyListeners on the focused Component\n     InputMap and ActionMap actions for the Component\n     InputMap and ActionMap actions for the Component's parent, and so on up the\n         Swing hierarchy\n \n Ghidra has altered this flow to be:\n \n     Reserved keybinding actions\n     KeyListeners on the focused Component\n     InputMap and ActionMap actions for the Component\n     Ghidra tool-level actions\n     InputMap and ActionMap actions for the Component's parent, and so on up the\n         Swing hierarchy\n \n This updated key event processing allows individual components to handle key events first,\n but then allows global Ghidra key bindings to be processed, allowing normal Java processing\n after Ghidra has had its chance to process the event.\n \n There are some exceptions to this processing chain:\n \n      We don't do any processing when the focused component is an instance of \n          JTextComponent.\n      We don't do any processing if the active window is an instance of \n          DockingDialog.\n ","params":[{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the given key event should be blocked (i.e., not processed by us or Java).","static":false,"name":"blockKeyInput","comment":"Returns true if the given key event should be blocked (i.e., not processed by us or Java).","params":[{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Used to clear the flag that signals we are in the middle of processing a Ghidra action.","static":false,"name":"actionInProgress","comment":"Used to clear the flag that signals we are in the middle of processing a Ghidra action.","params":[{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"A check to see if a given keystroke is something that should not be processed, depending \n upon the current state of the system.\n@param keyStroke The keystroke to check.\n@return true if the caller of this method should handle the keystroke; false if the\n         keystroke should be ignored.","static":false,"name":"isValidContextForKeyStroke","comment":"A check to see if a given keystroke is something that should not be processed, depending \n upon the current state of the system.","params":[{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"The keystroke to check.","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the caller of this method should handle the keystroke; false if the\n         keystroke should be ignored.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"willBeHandledByTextComponent","comment":"","params":[{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"A test to see if the given event is modified in such a way as a text component would not\n handle the event\n@param e the event\n@return true if modified","static":false,"name":"isModified","comment":"A test to see if the given event is modified in such a way as a text component would not\n handle the event","params":[{"type_long":"java.awt.event.KeyEvent","name":"e","comment":"the event","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"true if modified","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasRegisteredKeyBinding","comment":"","params":[{"type_long":"javax.swing.JComponent","name":"c","comment":"","type_short":"JComponent"},{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"This method should only be called if a programmer adds a new precedence to \n {@link KeyBindingPrecedence} and does not update the algorithm of \n {@link #dispatchKeyEvent(KeyEvent)} to take into account the new precedence.","static":false,"name":"throwAssertException","comment":"This method should only be called if a programmer adds a new precedence to \n KeyBindingPrecedence and does not update the algorithm of \n #dispatchKeyEvent(KeyEvent) to take into account the new precedence.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processReservedKeyActionsPrecedence","comment":"","params":[{"type_long":"docking.DockingKeyBindingAction","name":"action","comment":"","type_short":"DockingKeyBindingAction"},{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processKeyListenerPrecedence","comment":"","params":[{"type_long":"docking.DockingKeyBindingAction","name":"action","comment":"","type_short":"DockingKeyBindingAction"},{"type_long":"docking.KeyBindingPrecedence","name":"keyBindingPrecedence","comment":"","type_short":"KeyBindingPrecedence"},{"type_long":"java.awt.event.KeyEvent","name":"e","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processComponentActionMapPrecedence","comment":"","params":[{"type_long":"docking.DockingKeyBindingAction","name":"action","comment":"","type_short":"DockingKeyBindingAction"},{"type_long":"docking.KeyBindingPrecedence","name":"keyBindingPrecedence","comment":"","type_short":"KeyBindingPrecedence"},{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processActionAtPrecedence","comment":"","params":[{"type_long":"docking.KeyBindingPrecedence","name":"precedence","comment":"","type_short":"KeyBindingPrecedence"},{"type_long":"docking.KeyBindingPrecedence","name":"keyBindingPrecedence","comment":"","type_short":"KeyBindingPrecedence"},{"type_long":"docking.DockingKeyBindingAction","name":"action","comment":"","type_short":"DockingKeyBindingAction"},{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processComponentKeyListeners","comment":"","params":[{"type_long":"java.awt.event.KeyEvent","name":"keyEvent","comment":"","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"processInputAndActionMaps","comment":"","params":[{"type_long":"java.awt.event.KeyEvent","name":"keyEvent","comment":"","type_short":"KeyEvent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getJavaActionForComponent","comment":"","params":[{"type_long":"javax.swing.JComponent","name":"jComponent","comment":"","type_short":"JComponent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"javax.swing.Action","comment":"","type_short":"Action"}},{"javadoc":"Gets a {@link DockingKeyBindingAction} that is registered for the given key event.  This\n method is aware of context for things like {@link DockingWindowManager} and active windows.\n@param event The key event to check.\n@return An action, if one is available for the given key event, in the current context.","static":false,"name":"getDockingKeyBindingActionForEvent","comment":"Gets a DockingKeyBindingAction that is registered for the given key event.  This\n method is aware of context for things like DockingWindowManager and active windows.","params":[{"type_long":"java.awt.event.KeyEvent","name":"event","comment":"The key event to check.","type_short":"KeyEvent"}],"throws":[],"return":{"type_long":"docking.DockingKeyBindingAction","comment":"An action, if one is available for the given key event, in the current context.","type_short":"DockingKeyBindingAction"}},{"javadoc":"","static":false,"name":"getActiveDockingWindowManager","comment":"","params":[],"throws":[],"return":{"type_long":"docking.DockingWindowManager","comment":"","type_short":"DockingWindowManager"}},{"javadoc":"","static":true,"name":"getDockingWindowManagerForWindow","comment":"","params":[{"type_long":"java.awt.Window","name":"activeWindow","comment":"","type_short":"Window"}],"throws":[],"return":{"type_long":"docking.DockingWindowManager","comment":"","type_short":"DockingWindowManager"}},{"javadoc":"","static":false,"name":"setFocusOwnerProvider","comment":"","params":[{"type_long":"docking.FocusOwnerProvider","name":"focusProvider","comment":"","type_short":"FocusOwnerProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"KeyBindingOverrideKeyEventDispatcher","comment":"Allows Ghidra to give preference to its key event processing over the default Java key event\n processing.  See #dispatchKeyEvent(KeyEvent) for a more detailed explanation of how\n Ghidra processes key events.\n \n #install() must be called in order to install this Singleton into Java's \n key event processing system.","fields":[{"type_long":"docking.KeyBindingOverrideKeyEventDispatcher","javadoc":"","static":true,"name":"instance","comment":"","type_short":"KeyBindingOverrideKeyEventDispatcher","constant_value":null},{"type_long":"docking.DockingKeyBindingAction","javadoc":"We use this action as a signal that we intend to process a key\n binding and that no other Java component should try to handle it (sometimes Java processes\n bindings on key typed, after we have processed a binding on key pressed, which is not\n what we want).  \n <p>\n This action is one that is triggered by a key pressed, but will be processed on a \n key released.  We need to do this for because on some systems, when we perform the \n action on a key pressed, we do not get the follow-on key events, which we need to reset \n our state (SCR 7040).\n <p>\n <b>Posterity Note:<\/b> While debugging we will not get a KeyEvent.KEY_RELEASED event if \n the focus changes from the application to the debugger tool.","static":false,"name":"inProgressAction","comment":"We use this action as a signal that we intend to process a key\n binding and that no other Java component should try to handle it (sometimes Java processes\n bindings on key typed, after we have processed a binding on key pressed, which is not\n what we want).  \n \n This action is one that is triggered by a key pressed, but will be processed on a \n key released.  We need to do this for because on some systems, when we perform the \n action on a key pressed, we do not get the follow-on key events, which we need to reset \n our state (SCR 7040).\n \n Posterity Note: While debugging we will not get a KeyEvent.KEY_RELEASED event if \n the focus changes from the application to the debugger tool.","type_short":"DockingKeyBindingAction","constant_value":null},{"type_long":"docking.FocusOwnerProvider","javadoc":"Provides the current focus owner.  This allows for dependency injection.","static":false,"name":"focusProvider","comment":"Provides the current focus owner.  This allows for dependency injection.","type_short":"FocusOwnerProvider","constant_value":null}]}
