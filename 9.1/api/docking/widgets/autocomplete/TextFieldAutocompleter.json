{"implements":[],"javadoc":"An autocompleter that may be attached to one or more {@link JTextField}.\n \n Each autocompleter instance has one associated window (displaying the list of suggestions) and\n one associated model (generating the list of suggestions). Thus, the list can only be active on\n one of the attached text fields at a time. This is usually the desired behavior, and it allows\n for one autocompleter to be reused on many fields. Behavior is undefined when multiple\n autocompleters are attached to the same text field. More likely, you should implement a\n composite model if you wish to present completions from multiple models on a single text field.\n \n By default, the autocompleter is activated when the user presses CTRL-SPACE, at which point, the\n model is queried for possible suggestions. The completer gives the model all the text preceding\n the current field's caret. This behavior can be changed by overriding the\n {@link #getPrefix(JTextField)} method. This may be useful, e.g., to obtain a prefix for\n the current word, rather than the full field contents, preceding the caret. The list is\n displayed such that its top-left corner is placed directly under the current field's caret. As\n the user continues typing, the suggestions are re-computed, and the list tracks with the caret.\n This positioning behavior can be modified by overriding the\n {@link #getCompletionWindowPosition()} method. As a convenience, the\n {@link #getCaretPositionOnScreen(JTextField)} method is available to compute the default\n position.\n \n Whether or not the list is currently displayed, when the user presses CTRL-SPACE, if only one\n completion is possible, it is automatically activated. This logic is applied again and again,\n until either no suggestions are given, or more than one suggestion is given (or until the\n autocompleter detects an infinite loop). This behavior can by modified on an item-by-item basis\n by overriding the {@link #getCompletionCanDefault(T)} method. This same behavior can be\n activated by calling the {@link #startCompletion(JTextField)} method, which may be useful, e.g.,\n to bind a different key sequence to start autocompletion.\n \n The appearance of each item in the suggestion list can be modified by overriding the various\n {@code getCompletion...} methods. Note that it's possible for an item to be displayed one way,\n but cause the insertion of different text. In any case, it is best to ensure any modification\n produces an intuitive behavior.\n \n The simplest use case is to create a text field, create an autocompleter with a custom model,\n and then attach and show.\n \n {@code\n <pre>\n JTextField field = new JTextField();\n \n AutocompletionModel<String> model = new AutocompletionModel<String>() {\n@Override public Collection<String> computeCompletions(String text) {\n         ... \/\/ Populate the completion list based on the given prefix.\n     }\n }\n TextFieldAutocompleter<String> completer = new TextFieldAutocompleter<String>(model);\n completer.attachTo(field);\n ... \/\/ Add the field to, e.g., a dialog, and show.\n <\/pre>\n }\n@param <T> the type of suggestions presented by this autocompleter.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addContent","comment":"","params":[{"type_long":"javax.swing.JPanel","name":"contentPanel","comment":"","type_short":"JPanel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new autocompleter associated with the given model.\n@param model the model giving the suggestions.","static":false,"name":"<init>","comment":"Create a new autocompleter associated with the given model.","params":[{"type_long":"docking.widgets.autocomplete.AutocompletionModel<T>","name":"model","comment":"the model giving the suggestions.","type_short":"AutocompletionModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Recompute the display location and move with list window.\n \n This is useful, e.g., when the window containing the associated text field(s) moves.","static":false,"name":"updateDisplayLocation","comment":"Recompute the display location and move with list window.\n \n This is useful, e.g., when the window containing the associated text field(s) moves.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the contents of the suggestion list.\n \n This entails taking the prefix, querying the model, and rendering the list.","static":false,"name":"updateDisplayContents","comment":"Update the contents of the suggestion list.\n \n This entails taking the prefix, querying the model, and rendering the list.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doUpdateDisplayContents","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Dispose of the completion window resources.","static":false,"name":"destroyCompletionWindow","comment":"Dispose of the completion window resources.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Build the completion window, parented to the attached field that last had focus.","static":false,"name":"buildCompletionWindow","comment":"Build the completion window, parented to the attached field that last had focus.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Show or hide the completion list window\n@param visible true to show, false to hide","static":false,"name":"setCompletionListVisible","comment":"Show or hide the completion list window","params":[{"type_long":"boolean","name":"visible","comment":"true to show, false to hide","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check if the completion list window is visible.\n \n If it is visible, this implies that the user is actively using the autocompleter.\n@return true if shown, false if hidden.","static":false,"name":"isCompletionListVisible","comment":"Check if the completion list window is visible.\n \n If it is visible, this implies that the user is actively using the autocompleter.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if shown, false if hidden.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"doUpdateDisplayLocation","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the prefix from the given text field, used to query the model.\n@param field an attached field, usually the one with focus.\n@return the prefix to use as the query.","static":false,"name":"getPrefix","comment":"Gets the prefix from the given text field, used to query the model.","params":[{"type_long":"javax.swing.JTextField","name":"field","comment":"an attached field, usually the one with focus.","type_short":"JTextField"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the prefix to use as the query.","type_short":"String"}},{"javadoc":"Get the preferred location (on screen) of the completion list window.\n \n Typically, this is a location near the focused field. Ideally, it is positioned such that\n the displayed suggestions coincide with the applicable text in the focused field. For\n example, if the suggestions display some portion of the prefix, the window could be\n positioned such that the portion in the suggestion appears directly below the same portion\n in the field.\n@return the point giving the top-left corner of the completion window","static":false,"name":"getCompletionWindowPosition","comment":"Get the preferred location (on screen) of the completion list window.\n \n Typically, this is a location near the focused field. Ideally, it is positioned such that\n the displayed suggestions coincide with the applicable text in the focused field. For\n example, if the suggestions display some portion of the prefix, the window could be\n positioned such that the portion in the suggestion appears directly below the same portion\n in the field.","params":[],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the point giving the top-left corner of the completion window","type_short":"Point"}},{"javadoc":"Get the preferred dimensions of the completion list window.\n \n Typically, this is the width of the focused field.\n@return the dimension giving the preferred height and width. A value can be -1 to indicate\n         no preference.","static":false,"name":"getDefaultCompletionWindowDimension","comment":"Get the preferred dimensions of the completion list window.\n \n Typically, this is the width of the focused field.","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"the dimension giving the preferred height and width. A value can be -1 to indicate\n         no preference.","type_short":"Dimension"}},{"javadoc":"A convenience function that returns the bottom on-screen position of the given field's\n caret.\n@param field the field, typically the one having focus\n@return the on-screen position of the caret's bottom.","static":false,"name":"getCaretPositionOnScreen","comment":"A convenience function that returns the bottom on-screen position of the given field's\n caret.","params":[{"type_long":"javax.swing.JTextField","name":"field","comment":"the field, typically the one having focus","type_short":"JTextField"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the on-screen position of the caret's bottom.","type_short":"Point"}},{"javadoc":"Builds the list cell renderer for the autocompletion list.\n \n A programmer may override this if the various {@code getCompletion...} methods prove\n insufficient for customizing the display of the suggestions. Please remember that\n {@link JLabels} can render HTML, so {@link #getCompletionDisplay(T)} is quite powerful\n with the default {@link AutocompletionCellRenderer}.\n@return a list cell renderer for the completion list.","static":false,"name":"buildListCellRenderer","comment":"Builds the list cell renderer for the autocompletion list.\n \n A programmer may override this if the various  methods prove\n insufficient for customizing the display of the suggestions. Please remember that\n JLabels can render HTML, so #getCompletionDisplay(T) is quite powerful\n with the default AutocompletionCellRenderer.","params":[],"throws":[],"return":{"type_long":"javax.swing.ListCellRenderer<? super T>","comment":"a list cell renderer for the completion list.","type_short":"ListCellRenderer"}},{"javadoc":"Attach the autocompleter to the given text field.\n \n If this method is never called, then the autocompleter can never appear.\n@param field the field that will gain this autocompletion feature\n@return true, if this field is not already attached","static":false,"name":"attachTo","comment":"Attach the autocompleter to the given text field.\n \n If this method is never called, then the autocompleter can never appear.","params":[{"type_long":"javax.swing.JTextField","name":"field","comment":"the field that will gain this autocompletion feature","type_short":"JTextField"}],"throws":[],"return":{"type_long":"boolean","comment":"true, if this field is not already attached","type_short":"boolean"}},{"javadoc":"Deprive the given field of this autocompleter.\n@param field the field that will lose this autocompletion feature\n@return true, if this field was actually attached","static":false,"name":"detachFrom","comment":"Deprive the given field of this autocompleter.","params":[{"type_long":"javax.swing.JTextField","name":"field","comment":"the field that will lose this autocompletion feature","type_short":"JTextField"}],"throws":[],"return":{"type_long":"boolean","comment":"true, if this field was actually attached","type_short":"boolean"}},{"javadoc":"Cause the currently-selected suggestion to be activated.\n \n By default, this is called when the user presses ENTER or clicks a suggestion.","static":false,"name":"activateCurrentCompletion","comment":"Cause the currently-selected suggestion to be activated.\n \n By default, this is called when the user presses ENTER or clicks a suggestion.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Fire the registered autocompletion listeners on the given event.\n \n Each registered listener is invoked in order of registration. If any listener consumes the\n event, then later-registered listeners will not be notified of the event. If any listener\n cancels the event, then the suggested text will not be inserted.\n@param ev the event\n@return true, if no listener cancelled the event","static":false,"name":"fireAutocompletionListeners","comment":"Fire the registered autocompletion listeners on the given event.\n \n Each registered listener is invoked in order of registration. If any listener consumes the\n event, then later-registered listeners will not be notified of the event. If any listener\n cancels the event, then the suggested text will not be inserted.","params":[{"type_long":"docking.widgets.autocomplete.AutocompletionEvent<T>","name":"ev","comment":"the event","type_short":"AutocompletionEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"true, if no listener cancelled the event","type_short":"boolean"}},{"javadoc":"","static":false,"name":"completionActivated","comment":"","params":[{"type_long":"T","name":"sel","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Register the given auto-completion listener\n@param l the listener to register","static":false,"name":"addAutocompletionListener","comment":"Register the given auto-completion listener","params":[{"type_long":"docking.widgets.autocomplete.AutocompletionListener<T>","name":"l","comment":"the listener to register","type_short":"AutocompletionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Unregister the given auto-completion listener\n@param l the listener to unregister","static":false,"name":"removeAutocompletionListener","comment":"Unregister the given auto-completion listener","params":[{"type_long":"docking.widgets.autocomplete.AutocompletionListener<T>","name":"l","comment":"the listener to unregister","type_short":"AutocompletionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get all the registered auto-completion listeners\n@return an array of registered listeners","static":false,"name":"getAutocompletionListeners","comment":"Get all the registered auto-completion listeners","params":[],"throws":[],"return":{"type_long":"docking.widgets.autocomplete.AutocompletionListener<T>[]","comment":"an array of registered listeners","type_short":"docking.widgets.autocomplete.AutocompletionListener<T>[]"}},{"javadoc":"Get all registered listeners of the given type\n@param listenerType the type of listeners to get\n@return an array of registered listeners","static":false,"name":"getListeners","comment":"Get all registered listeners of the given type","params":[{"type_long":"java.lang.Class<T>","name":"listenerType","comment":"the type of listeners to get","type_short":"Class"}],"throws":[],"return":{"type_long":"T[]","comment":"an array of registered listeners","type_short":"T[]"}},{"javadoc":"Get the text to insert when the given suggestion is activated\n@param sel the activated suggestion\n@return the text to insert","static":false,"name":"getCompletionText","comment":"Get the text to insert when the given suggestion is activated","params":[{"type_long":"T","name":"sel","comment":"the activated suggestion","type_short":"T"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the text to insert","type_short":"String"}},{"javadoc":"Get the (possibly HTML) text to display for the given suggestion in the list\n@param sel the suggestion to display\n@return the text or HTML representing the suggestion","static":false,"name":"getCompletionDisplay","comment":"Get the (possibly HTML) text to display for the given suggestion in the list","params":[{"type_long":"T","name":"sel","comment":"the suggestion to display","type_short":"T"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the text or HTML representing the suggestion","type_short":"String"}},{"javadoc":"Get the foreground color to display for the given suggestion in the list\n@param sel the suggestion to display\n@param isSelected true if the suggestion is currently selected\n@param cellHasFocus true if the suggestion currently has focus\n@return the foreground color for the suggestion","static":false,"name":"getCompletionForeground","comment":"Get the foreground color to display for the given suggestion in the list","params":[{"type_long":"T","name":"sel","comment":"the suggestion to display","type_short":"T"},{"type_long":"boolean","name":"isSelected","comment":"true if the suggestion is currently selected","type_short":"boolean"},{"type_long":"boolean","name":"cellHasFocus","comment":"true if the suggestion currently has focus","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.awt.Color","comment":"the foreground color for the suggestion","type_short":"Color"}},{"javadoc":"Get the background color to display for the given suggestion in the list\n@param sel the suggestion to display\n@param isSelected true if the suggestion is currently selected\n@param cellHasFocus true if the suggestion currently has focus\n@return the background color for the suggestion","static":false,"name":"getCompletionBackground","comment":"Get the background color to display for the given suggestion in the list","params":[{"type_long":"T","name":"sel","comment":"the suggestion to display","type_short":"T"},{"type_long":"boolean","name":"isSelected","comment":"true if the suggestion is currently selected","type_short":"boolean"},{"type_long":"boolean","name":"cellHasFocus","comment":"true if the suggestion currently has focus","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.awt.Color","comment":"the background color for the suggestion","type_short":"Color"}},{"javadoc":"Get the icon to display with the given suggestion in the list\n@param sel the suggestion to display\n@param isSelected true if the suggestion is currently selected\n@param cellHasFocus true if the suggestion currently has focus\n@return the icon to display with the suggestion","static":false,"name":"getCompletionIcon","comment":"Get the icon to display with the given suggestion in the list","params":[{"type_long":"T","name":"sel","comment":"the suggestion to display","type_short":"T"},{"type_long":"boolean","name":"isSelected","comment":"true if the suggestion is currently selected","type_short":"boolean"},{"type_long":"boolean","name":"cellHasFocus","comment":"true if the suggestion currently has focus","type_short":"boolean"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"the icon to display with the suggestion","type_short":"Icon"}},{"javadoc":"Get the font for the given suggestion in the list\n@param sel the suggestion to display\n@param isSelected true if the suggestion is currently selected\n@param cellHasFocus true if the suggestion currently has focus\n@return the font to use","static":false,"name":"getCompletionFont","comment":"Get the font for the given suggestion in the list","params":[{"type_long":"T","name":"sel","comment":"the suggestion to display","type_short":"T"},{"type_long":"boolean","name":"isSelected","comment":"true if the suggestion is currently selected","type_short":"boolean"},{"type_long":"boolean","name":"cellHasFocus","comment":"true if the suggestion currently has focus","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.awt.Font","comment":"the font to use","type_short":"Font"}},{"javadoc":"Decide whether the given suggestion can be automatically activated.\n \n When autocompletion is started (via {@link #startCompletion(JTextField)}) or when the user\n presses CTRL-SPACE, if there is only a single suggestion, it is taken automatically, and the\n process repeats until there is not a sole suggestion. Before the suggestion is taken,\n though, it calls this method. If it returns false, the single suggestion is displayed in a\n 1-long list instead. This is useful to prevent consequential actions from being\n automatically activated by the autocompleter.\n@param sel the potentially auto-activated suggestion.\n@return true to permit auto-activation, false to prevent it.","static":false,"name":"getCompletionCanDefault","comment":"Decide whether the given suggestion can be automatically activated.\n \n When autocompletion is started (via #startCompletion(JTextField)) or when the user\n presses CTRL-SPACE, if there is only a single suggestion, it is taken automatically, and the\n process repeats until there is not a sole suggestion. Before the suggestion is taken,\n though, it calls this method. If it returns false, the single suggestion is displayed in a\n 1-long list instead. This is useful to prevent consequential actions from being\n automatically activated by the autocompleter.","params":[{"type_long":"T","name":"sel","comment":"the potentially auto-activated suggestion.","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"true to permit auto-activation, false to prevent it.","type_short":"boolean"}},{"javadoc":"Starts the autocompleter on the given text field.\n \n First, this repeatedly attempts auto-activation. When there are many suggestions, or when\n auto-activation is prevented (see {@link #getCompletionCanDefault(T)}), a list is displayed\n (usually below the caret) containing the suggestions given the fields current contents. The\n list remains open until either the user cancels it (usually via ESC) or the user activates\n a suggestion.\n@note The text field must already be attached.\n@param field the field on which to start autocompletion.","static":false,"name":"startCompletion","comment":"Starts the autocompleter on the given text field.\n \n First, this repeatedly attempts auto-activation. When there are many suggestions, or when\n auto-activation is prevented (see #getCompletionCanDefault(T)), a list is displayed\n (usually below the caret) containing the suggestions given the fields current contents. The\n list remains open until either the user cancels it (usually via ESC) or the user activates\n a suggestion.","params":[{"type_long":"javax.swing.JTextField","name":"field","comment":"the field on which to start autocompletion.","type_short":"JTextField"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cause the suggestion at the given index to be selected\n@param index the index of the selection","static":false,"name":"select","comment":"Cause the suggestion at the given index to be selected","params":[{"type_long":"int","name":"index","comment":"the index of the selection","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cause the next suggestion to be selected, wrapping if applicable","static":false,"name":"selectNext","comment":"Cause the next suggestion to be selected, wrapping if applicable","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cause the previous suggestion to be selected, wrapping if applicable","static":false,"name":"selectPrev","comment":"Cause the previous suggestion to be selected, wrapping if applicable","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Advance the selection down a page","static":false,"name":"selectNextPage","comment":"Advance the selection down a page","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Advance the selection up a page","static":false,"name":"selectPrevPage","comment":"Advance the selection up a page","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Select the first suggestion","static":false,"name":"selectFirst","comment":"Select the first suggestion","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Select the last suggestion","static":false,"name":"selectLast","comment":"Select the last suggestion","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"TextFieldAutocompleter","comment":"An autocompleter that may be attached to one or more JTextField.\n \n Each autocompleter instance has one associated window (displaying the list of suggestions) and\n one associated model (generating the list of suggestions). Thus, the list can only be active on\n one of the attached text fields at a time. This is usually the desired behavior, and it allows\n for one autocompleter to be reused on many fields. Behavior is undefined when multiple\n autocompleters are attached to the same text field. More likely, you should implement a\n composite model if you wish to present completions from multiple models on a single text field.\n \n By default, the autocompleter is activated when the user presses CTRL-SPACE, at which point, the\n model is queried for possible suggestions. The completer gives the model all the text preceding\n the current field's caret. This behavior can be changed by overriding the\n #getPrefix(JTextField) method. This may be useful, e.g., to obtain a prefix for\n the current word, rather than the full field contents, preceding the caret. The list is\n displayed such that its top-left corner is placed directly under the current field's caret. As\n the user continues typing, the suggestions are re-computed, and the list tracks with the caret.\n This positioning behavior can be modified by overriding the\n #getCompletionWindowPosition() method. As a convenience, the\n #getCaretPositionOnScreen(JTextField) method is available to compute the default\n position.\n \n Whether or not the list is currently displayed, when the user presses CTRL-SPACE, if only one\n completion is possible, it is automatically activated. This logic is applied again and again,\n until either no suggestions are given, or more than one suggestion is given (or until the\n autocompleter detects an infinite loop). This behavior can by modified on an item-by-item basis\n by overriding the #getCompletionCanDefault(T) method. This same behavior can be\n activated by calling the #startCompletion(JTextField) method, which may be useful, e.g.,\n to bind a different key sequence to start autocompletion.\n \n The appearance of each item in the suggestion list can be modified by overriding the various\n  methods. Note that it's possible for an item to be displayed one way,\n but cause the insertion of different text. In any case, it is best to ensure any modification\n produces an intuitive behavior.\n \n The simplest use case is to create a text field, create an autocompleter with a custom model,\n and then attach and show.\n \n ","fields":[{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_UPDATE_DELAY","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_MAX_UPDATE_DELAY","comment":"","type_short":"int","constant_value":"2000"},{"type_long":"int","javadoc":"","static":true,"name":"MIN_HEIGHT","comment":"","type_short":"int","constant_value":"100"},{"type_long":"int","javadoc":"","static":true,"name":"MIN_WIDTH","comment":"","type_short":"int","constant_value":"200"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_HEIGHT","comment":"","type_short":"int","constant_value":"300"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_WIDTH","comment":"","type_short":"int","constant_value":"200"},{"type_long":"docking.widgets.autocomplete.AutocompletionModel<T>","javadoc":"","static":false,"name":"model","comment":"","type_short":"AutocompletionModel","constant_value":null},{"type_long":"java.util.Set<javax.swing.JTextField>","javadoc":"","static":false,"name":"attachees","comment":"","type_short":"Set","constant_value":null},{"type_long":"javax.swing.JTextField","javadoc":"","static":false,"name":"focus","comment":"","type_short":"JTextField","constant_value":null},{"type_long":"java.util.List<docking.widgets.autocomplete.AutocompletionListener<T>>","javadoc":"","static":false,"name":"autocompletionListeners","comment":"","type_short":"List","constant_value":null},{"type_long":"javax.swing.JWindow","javadoc":"","static":false,"name":"completionWindow","comment":"","type_short":"JWindow","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"content","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"javax.swing.JScrollPane","javadoc":"","static":false,"name":"scrollPane","comment":"","type_short":"JScrollPane","constant_value":null},{"type_long":"javax.swing.DefaultListModel<T>","javadoc":"","static":false,"name":"listModel","comment":"","type_short":"DefaultListModel","constant_value":null},{"type_long":"javax.swing.DefaultListModel<T>","javadoc":"","static":false,"name":"blankModel","comment":"","type_short":"DefaultListModel","constant_value":null},{"type_long":"javax.swing.JList<T>","javadoc":"","static":false,"name":"list","comment":"","type_short":"JList","constant_value":null},{"type_long":"docking.widgets.autocomplete.TextFieldAutocompleter<T>.MyListener","javadoc":"","static":false,"name":"listener","comment":"","type_short":"MyListener","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"pendingTextUpdate","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"updateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null}]}
