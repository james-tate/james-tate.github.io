{"implements":["docking.widgets.table.constrainteditor.ColumnConstraintEditor"],"javadoc":"A constraint editor that supports object type conversions, wrapping the editor for the\n converted-to type. This is used to convert one column type to another that we already have\n editors for. For example, suppose there is a Foo type where the column is returning Foo objects\n but the rendering is just displaying Foo.getName().  In this case you would create a FooEditor\n that wraps the various string editors. So even though the column uses Foo objects, the user\n filters on just strings.\n@param <T> The column (mapped from) type.\n@param <M> the mapped to type.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor.\n@param constraint Type-converting constraint for which this component is an editor.\n@param delegateEditor Editor for the converted-to type.","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"docking.widgets.table.constraint.MappedColumnConstraint<T,M>","name":"constraint","comment":"Type-converting constraint for which this component is an editor.","type_short":"MappedColumnConstraint"},{"type_long":"docking.widgets.table.constrainteditor.ColumnConstraintEditor<M>","name":"delegateEditor","comment":"Editor for the converted-to type.","type_short":"ColumnConstraintEditor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getInlineComponent","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"getDetailComponent","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"getValue","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.constraint.ColumnConstraint<T>","comment":"","type_short":"ColumnConstraint"}},{"javadoc":"Sets the <tt>T<\/tt>-converted-to-<tt>W<\/tt> type in the delegate editor\n <p>\n {@inheritDoc}\n@param value the new value to set","static":false,"name":"setValue","comment":"Sets the T-converted-to-W type in the delegate editor\n \n ","params":[{"type_long":"docking.widgets.table.constraint.ColumnConstraint<T>","name":"value","comment":"the new value to set","type_short":"ColumnConstraint"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"reset","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasValidValue","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getErrorMessage","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addChangeListener","comment":"","params":[{"type_long":"javax.swing.event.ChangeListener","name":"constraintEditorChangeListener","comment":"","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeChangeListener","comment":"","params":[{"type_long":"javax.swing.event.ChangeListener","name":"constraintEditorChangeListener","comment":"","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MappedColumnConstraintEditor","comment":"A constraint editor that supports object type conversions, wrapping the editor for the\n converted-to type. This is used to convert one column type to another that we already have\n editors for. For example, suppose there is a Foo type where the column is returning Foo objects\n but the rendering is just displaying Foo.getName().  In this case you would create a FooEditor\n that wraps the various string editors. So even though the column uses Foo objects, the user\n filters on just strings.","fields":[{"type_long":"docking.widgets.table.constrainteditor.ColumnConstraintEditor<M>","javadoc":"","static":false,"name":"delegateEditor","comment":"","type_short":"ColumnConstraintEditor","constant_value":null},{"type_long":"docking.widgets.table.constraint.MappedColumnConstraint<T,M>","javadoc":"","static":false,"name":"constraint","comment":"","type_short":"MappedColumnConstraint","constant_value":null}]}
