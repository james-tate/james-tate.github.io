{"implements":[],"javadoc":"Defines the contract for building user-interface elements for manipulating\n constraint configuration.\n@param <T> the column type","static":false,"methods":[{"javadoc":"The <i>inline<\/i> component resides in the configuration interface on the same\n visual line as the column and constraint selection widgets. It is intended to be\n a relatively small and simple interface for configuring the constraints' values.\n@return the inline editor component","static":false,"name":"getInlineComponent","comment":"The inline component resides in the configuration interface on the same\n visual line as the column and constraint selection widgets. It is intended to be\n a relatively small and simple interface for configuring the constraints' values.","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the inline editor component","type_short":"Component"}},{"javadoc":"The <i>detail<\/i> component resides in the configuration interface below\n the column and constraint selection widgets, and is afforded greater space.\n It is intended to be a more feature-rich editor that provides greater\n insight or control of the constraints value definition.\n@return the detail editor component","static":false,"name":"getDetailComponent","comment":"The detail component resides in the configuration interface below\n the column and constraint selection widgets, and is afforded greater space.\n It is intended to be a more feature-rich editor that provides greater\n insight or control of the constraints value definition.","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the detail editor component","type_short":"Component"}},{"javadoc":"Get the current value from the editor, in the form of a constraint.\n@return the editors' current value","static":false,"name":"getValue","comment":"Get the current value from the editor, in the form of a constraint.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.constraint.ColumnConstraint<T>","comment":"the editors' current value","type_short":"ColumnConstraint"}},{"javadoc":"Set the current value within the editor\n@param value the new value to set","static":false,"name":"setValue","comment":"Set the current value within the editor","params":[{"type_long":"docking.widgets.table.constraint.ColumnConstraint<T>","name":"value","comment":"the new value to set","type_short":"ColumnConstraint"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reset the editor to a known-good state.","static":false,"name":"reset","comment":"Reset the editor to a known-good state.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if the editor contains a valid value; do the UI widgets and state\n match, is the state sensible for the constraint.\n@return true if the configuration is valid, false otherwise","static":false,"name":"hasValidValue","comment":"Determine if the editor contains a valid value; do the UI widgets and state\n match, is the state sensible for the constraint.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the configuration is valid, false otherwise","type_short":"boolean"}},{"javadoc":"If the editor contains and invalid value, this message should indicate\n why the value is invalid. Only called if <tt>hasValidValue()<\/tt> returns false.\n@return an error message, or an empty string if no error","static":false,"name":"getErrorMessage","comment":"If the editor contains and invalid value, this message should indicate\n why the value is invalid. Only called if hasValidValue() returns false.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"an error message, or an empty string if no error","type_short":"String"}},{"javadoc":"Register a callback handler for responding to changes made within the editor\n@param constraintEditorChangeListener listener callback","static":false,"name":"addChangeListener","comment":"Register a callback handler for responding to changes made within the editor","params":[{"type_long":"javax.swing.event.ChangeListener","name":"constraintEditorChangeListener","comment":"listener callback","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a callback handler that was responding changes made within the editor\n@param constraintEditorChangeListener listener callback","static":false,"name":"removeChangeListener","comment":"Remove a callback handler that was responding changes made within the editor","params":[{"type_long":"javax.swing.event.ChangeListener","name":"constraintEditorChangeListener","comment":"listener callback","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ColumnConstraintEditor","comment":"Defines the contract for building user-interface elements for manipulating\n constraint configuration.","fields":[]}
