{"implements":["docking.widgets.table.constraint.ColumnConstraint"],"javadoc":"Abstract base class for range constraints.\n@param <T> the column type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param name the name of the constraint.\n@param minValue the min value of the range.\n@param maxValue the max value of the range.\n@param editorProvider the editor provider that generates the appropriate editors for\n constraints of this type.\n@param group the group of the constraint for visual grouping when presenting to the user.","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the constraint.","type_short":"String"},{"type_long":"T","name":"minValue","comment":"the min value of the range.","type_short":"T"},{"type_long":"T","name":"maxValue","comment":"the max value of the range.","type_short":"T"},{"type_long":"docking.widgets.table.constraint.provider.EditorProvider<T>","name":"editorProvider","comment":"the editor provider that generates the appropriate editors for\n constraints of this type.","type_short":"EditorProvider"},{"type_long":"java.lang.String","name":"group","comment":"the group of the constraint for visual grouping when presenting to the user.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getGroup","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the min value of the range used by this constraint.\n@return the min value of the range used by this constraint.","static":false,"name":"getMinValue","comment":"Returns the min value of the range used by this constraint.","params":[],"throws":[],"return":{"type_long":"T","comment":"the min value of the range used by this constraint.","type_short":"T"}},{"javadoc":"Returns the max value of the range used by this constraint.\n@return the max value of the range used by this constraint.","static":false,"name":"getMaxValue","comment":"Returns the max value of the range used by this constraint.","params":[],"throws":[],"return":{"type_long":"T","comment":"the max value of the range used by this constraint.","type_short":"T"}},{"javadoc":"","static":false,"name":"getColumnType","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Class<T>","comment":"","type_short":"Class"}},{"javadoc":"","static":false,"name":"getEditor","comment":"","params":[{"type_long":"docking.widgets.table.constraint.ColumnData<T>","name":"columnDataSource","comment":"","type_short":"ColumnData"}],"throws":[],"return":{"type_long":"docking.widgets.table.constrainteditor.ColumnConstraintEditor<T>","comment":"","type_short":"ColumnConstraintEditor"}},{"javadoc":"","static":false,"name":"getConstraintValueString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"parseConstraintValue","comment":"","params":[{"type_long":"java.lang.String","name":"newValue","comment":"","type_short":"String"},{"type_long":"java.lang.Object","name":"dataSource","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"docking.widgets.table.constraint.ColumnConstraint<T>","comment":"","type_short":"ColumnConstraint"}},{"javadoc":"subclasses must override to generate new versions of themselves but with new range values.\n@param min the min value of the range.\n@param max the max value of the range.\n@return a new ColumnConstraint that is the same type as this constraint but with a new range defined.","static":false,"name":"copy","comment":"subclasses must override to generate new versions of themselves but with new range values.","params":[{"type_long":"T","name":"min","comment":"the min value of the range.","type_short":"T"},{"type_long":"T","name":"max","comment":"the max value of the range.","type_short":"T"}],"throws":[],"return":{"type_long":"docking.widgets.table.constraint.RangeColumnConstraint<T>","comment":"a new ColumnConstraint that is the same type as this constraint but with a new range defined.","type_short":"RangeColumnConstraint"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"RangeColumnConstraint","comment":"Abstract base class for range constraints.","fields":[{"type_long":"java.util.regex.Pattern","javadoc":"This pattern is used to extract the minimum and maximum values from a range specification.\n\n <P> A range specification adheres to this format:\n <code>'[' (whitespace)? (minimum value) (whitespace)? ',' (whitespace)? (maximum value) (whitespace)? ']'<\/code>\n\n <P> For example, matching values would be [ 10 , 20 ],  [10,20]\n <p>\n <ul>\n <li>The minimum and maximum value-strings must not contain commas or closing square brackets.<\/li>\n <li>Leading and trailing whitespace is removed from the value-string.<\/li>\n <\/ul>","static":true,"name":"RANGE_SPEC_PATTERN","comment":"This pattern is used to extract the minimum and maximum values from a range specification.\n\n  A range specification adheres to this format:\n '[' (whitespace)? (minimum value) (whitespace)? ',' (whitespace)? (maximum value) (whitespace)? ']'\n\n  For example, matching values would be [ 10 , 20 ],  [10,20]\n \n \n The minimum and maximum value-strings must not contain commas or closing square brackets.\n Leading and trailing whitespace is removed from the value-string.\n ","type_short":"Pattern","constant_value":null},{"type_long":"java.lang.String","javadoc":"This constraints' name\n <p>\n It sometimes makes grammatical sense to set a more useful name than the default;\n while 'at least' makes sense for a number-based constraint, 'after' reads better for\n date-based constraints.","static":false,"name":"name","comment":"This constraints' name\n \n It sometimes makes grammatical sense to set a more useful name than the default;\n while 'at least' makes sense for a number-based constraint, 'after' reads better for\n date-based constraints.","type_short":"String","constant_value":null},{"type_long":"T","javadoc":"","static":false,"name":"minValue","comment":"","type_short":"T","constant_value":null},{"type_long":"T","javadoc":"","static":false,"name":"maxValue","comment":"","type_short":"T","constant_value":null},{"type_long":"docking.widgets.table.constraint.provider.EditorProvider<T>","javadoc":"","static":false,"name":"editorProvider","comment":"","type_short":"EditorProvider","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"group","comment":"","type_short":"String","constant_value":null}]}
