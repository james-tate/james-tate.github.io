{"implements":["docking.KeyStrokeConsumer"],"javadoc":"A sub-class of <code>JTable<\/code> that provides navigation and auto-lookup.\n By default, both of these features are disabled.\n <p>\n Auto-lookup is only supported on one column and must be specified\n using the <code>setAutoLookupColumn()<\/code> method.\n <p>\n Auto-lookup allows a user to begin typing the first few letters\n of a desired row. The table will attempt to locate the first row\n that contains the letters typed up to that point. There is an\n 800ms timeout between typed letters, at which point the list of\n typed letters will be flushed.\n <p>\n Auto-lookup is much faster if the underlying table model implements\n <code>SortedTableModel<\/code>, because a binary search can used\n to locate the desired row. A linear search is used if the model is not sorted.\n <p>\n Other features provided:\n <ul>\n \t<li>Column hiding\/showing<\/li>\n  <li>Multi-column sorting<\/li>\n  <li>Column settings<\/li>\n  <li>Column state saving (visibility, size, positioning, sort values)<\/li>\n  <li>Selection management (saving\/restoring selection when used with a filter panel)<\/li>\n <\/ul>\n@see GTableFilterPanel","static":false,"extends":"javax.swing.JTable","methods":[{"javadoc":"Constructs a new GTable","static":false,"name":"<init>","comment":"Constructs a new GTable","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new GTable using the specified table model.\n@param dm the table model","static":false,"name":"<init>","comment":"Constructs a new GTable using the specified table model.","params":[{"type_long":"javax.swing.table.TableModel","name":"dm","comment":"the table model","type_short":"TableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setVisibleRowCount","comment":"","params":[{"type_long":"int","name":"visibleRowCount","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPreferredScrollableViewportSize","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"tableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Selects the given row.  This is a convenience method for\n {@link #setRowSelectionInterval(int, int)}.\n@param row The row to select","static":false,"name":"selectRow","comment":"Selects the given row.  This is a convenience method for\n #setRowSelectionInterval(int, int).","params":[{"type_long":"int","name":"row","comment":"The row to select","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Selects the row under the given mouse point.  This method is useful when the user\n triggers a popup mouse action and you would like to have the table select that row if it\n is not already selected.  This allows you to guarantee that there is always a selection\n when the user triggers a popup menu.\n@param event The event that triggered the popup menu\n@return true if the row is selected or was already selected.","static":false,"name":"selectRow","comment":"Selects the row under the given mouse point.  This method is useful when the user\n triggers a popup mouse action and you would like to have the table select that row if it\n is not already selected.  This allows you to guarantee that there is always a selection\n when the user triggers a popup menu.","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"The event that triggered the popup menu","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the row is selected or was already selected.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createDefaultColumnModel","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.table.TableColumnModel","comment":"","type_short":"TableColumnModel"}},{"javadoc":"","static":false,"name":"setColumnModel","comment":"","params":[{"type_long":"javax.swing.table.TableColumnModel","name":"columnModel","comment":"","type_short":"TableColumnModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectionModel","comment":"","params":[{"type_long":"javax.swing.ListSelectionModel","name":"newModel","comment":"","type_short":"ListSelectionModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setModel","comment":"","params":[{"type_long":"javax.swing.table.TableModel","name":"dataModel","comment":"","type_short":"TableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createSelectionManager","comment":"","params":[{"type_long":"javax.swing.table.TableModel","name":"model","comment":"","type_short":"TableModel"}],"throws":[],"return":{"type_long":"docking.widgets.table.SelectionManager","comment":"","type_short":"SelectionManager"}},{"javadoc":"Returns the {@link SelectionManager} in use by this GTable.  <tt>null<\/tt> is returned\n if the user has installed their own {@link ListSelectionModel}.\n@return the selection manager","static":false,"name":"getSelectionManager","comment":"Returns the SelectionManager in use by this GTable.  null is returned\n if the user has installed their own ListSelectionModel.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.SelectionManager","comment":"the selection manager","type_short":"SelectionManager"}},{"javadoc":"A method that allows clients to signal to this GTable and its internals that the table\n model has changed.  Usually, {@link #tableChanged(TableModelEvent)} is called, but clients\n alter the table, but do not do so through the model.  In this case, they need a way to\n signal to the table that the model has been updated.\n@param event the event for the change","static":false,"name":"notifyTableChanged","comment":"A method that allows clients to signal to this GTable and its internals that the table\n model has changed.  Usually, #tableChanged(TableModelEvent) is called, but clients\n alter the table, but do not do so through the model.  In this case, they need a way to\n signal to the table that the model has been updated.","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"event","comment":"the event for the change","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Call this when the table will no longer be used","static":false,"name":"dispose","comment":"Call this when the table will no longer be used","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRow","comment":"","params":[{"type_long":"javax.swing.table.TableModel","name":"model","comment":"","type_short":"TableModel"},{"type_long":"java.lang.String","name":"keyString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"autoLookupLinear","comment":"","params":[{"type_long":"java.lang.String","name":"keyString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"autoLookupBinary","comment":"","params":[{"type_long":"docking.widgets.table.SortedTableModel","name":"model","comment":"","type_short":"SortedTableModel"},{"type_long":"java.lang.String","name":"keyString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Sets the column in which auto-lookup will be enabled.\n@param lookupColumn the column in which auto-lookup will be enabled","static":false,"name":"setAutoLookupColumn","comment":"Sets the column in which auto-lookup will be enabled.","params":[{"type_long":"int","name":"lookupColumn","comment":"the column in which auto-lookup will be enabled","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Enables the keyboard actions to pass through this table and up the component hierarchy.\n Specifically, passing true to this method allows unmodified keystrokes to work\n in the tool when this table is focused.  Modified keystrokes, like <code>\n Ctrl-C<\/code>, will work at all times.   Finally, if true is passed to this\n method, then the {@link #setAutoLookupColumn(int) auto lookup} feature is\n disabled.\n \n <p>The default state is for actions to be disabled.\n@param b true allows keyboard actions to pass up the component hierarchy.","static":false,"name":"setActionsEnabled","comment":"Enables the keyboard actions to pass through this table and up the component hierarchy.\n Specifically, passing true to this method allows unmodified keystrokes to work\n in the tool when this table is focused.  Modified keystrokes, like \n Ctrl-C, will work at all times.   Finally, if true is passed to this\n method, then the #setAutoLookupColumn(int) feature is\n disabled.\n \n The default state is for actions to be disabled.","params":[{"type_long":"boolean","name":"b","comment":"true allows keyboard actions to pass up the component hierarchy.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method is implemented to signal interest in any typed text that may help the user\n change the row in the table.  For example, if the user types 'a', then the table will move\n to the first symbol that begins with the letter 'a'.  This method also wants to handle\n text when the 'shift' key is down.  This method will return false if the control key is\n pressed.\n@see docking.KeyStrokeConsumer#isKeyConsumed(javax.swing.KeyStroke)","static":false,"name":"isKeyConsumed","comment":"This method is implemented to signal interest in any typed text that may help the user\n change the row in the table.  For example, if the user types 'a', then the table will move\n to the first symbol that begins with the letter 'a'.  This method also wants to handle\n text when the 'shift' key is down.  This method will return false if the control key is\n pressed.","params":[{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Enables or disables auto-edit.  When enabled, the user can start typing to trigger an\n edit of an editable table cell.\n@param allowAutoEdit true for auto-editing","static":false,"name":"setAutoEditEnabled","comment":"Enables or disables auto-edit.  When enabled, the user can start typing to trigger an\n edit of an editable table cell.","params":[{"type_long":"boolean","name":"allowAutoEdit","comment":"true for auto-editing","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installEditKeyBinding","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeActionKeyStrokes","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initializeHeader","comment":"","params":[{"type_long":"javax.swing.table.JTableHeader","name":"header","comment":"","type_short":"JTableHeader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initializeRowHeight","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"adjustRowHeight","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"calculatePreferredRowHeight","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLinesPerRow","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setRowHeight","comment":"","params":[{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSetRowHeight","comment":"","params":[{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"columnAdded","comment":"","params":[{"type_long":"javax.swing.event.TableColumnModelEvent","name":"e","comment":"","type_short":"TableColumnModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"columnRemoved","comment":"","params":[{"type_long":"javax.swing.event.TableColumnModelEvent","name":"e","comment":"","type_short":"TableColumnModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the underlying ConfigurableColumnTableModel if one is in-use\n@return the underlying ConfigurableColumnTableModel if one is in-use","static":false,"name":"getConfigurableColumnTableModel","comment":"Returns the underlying ConfigurableColumnTableModel if one is in-use","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.ConfigurableColumnTableModel","comment":"the underlying ConfigurableColumnTableModel if one is in-use","type_short":"ConfigurableColumnTableModel"}},{"javadoc":"Unrolls the current model by checking if the current model is inside of a wrapper table\n model.\n@return this class's table model, unwrapped as needed","static":false,"name":"getUnwrappedTableModel","comment":"Unrolls the current model by checking if the current model is inside of a wrapper table\n model.","params":[],"throws":[],"return":{"type_long":"javax.swing.table.TableModel","comment":"this class's table model, unwrapped as needed","type_short":"TableModel"}},{"javadoc":"","static":false,"name":"processKeyBinding","comment":"","params":[{"type_long":"javax.swing.KeyStroke","name":"ks","comment":"","type_short":"KeyStroke"},{"type_long":"java.awt.event.KeyEvent","name":"e","comment":"","type_short":"KeyEvent"},{"type_long":"int","name":"condition","comment":"","type_short":"int"},{"type_long":"boolean","name":"pressed","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see javax.swing.JTable#getDefaultRenderer(java.lang.Class)","static":false,"name":"getDefaultRenderer","comment":"","params":[{"type_long":"java.lang.Class<?>","name":"columnClass","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"","type_short":"TableCellRenderer"}},{"javadoc":"","static":false,"name":"wrapDefaultTableCellRenderer","comment":"","params":[{"type_long":"javax.swing.table.TableCellRenderer","name":"renderer","comment":"","type_short":"TableCellRenderer"},{"type_long":"java.lang.Class<?>","name":"columnClass","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"","type_short":"TableCellRenderer"}},{"javadoc":"Installs the default {@link TableCellRenderer}s for known Ghidra table cell data classes.\n Subclasses can override this method to add additional types or to change the default\n associations.","static":false,"name":"initDefaultRenderers","comment":"Installs the default TableCellRenderers for known Ghidra table cell data classes.\n Subclasses can override this method to add additional types or to change the default\n associations.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"disableGridLines","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Overridden in order to set the column header renderer on newly created columns.\n@see javax.swing.JTable#createDefaultColumnsFromModel()","static":false,"name":"createDefaultColumnsFromModel","comment":"Overridden in order to set the column header renderer on newly created columns.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeAllColumns","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initialTableColumnSize","comment":"","params":[{"type_long":"javax.swing.table.TableColumn","name":"column","comment":"","type_short":"TableColumn"},{"type_long":"javax.swing.table.TableModel","name":"tableModel","comment":"","type_short":"TableModel"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.JComponent#getToolTipText(java.awt.event.MouseEvent)","static":false,"name":"getToolTipText","comment":"","params":[{"type_long":"java.awt.event.MouseEvent","name":"e","comment":"","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Enables and disables the rendering of HTML content in this table.  If enabled, this table\n will:\n <ul>\n     <li>Wrap tooltip text content with an &lt;html&gt; tag so that it is possible for\n         the content to be formatted in a manner that is easier for the user read, and<\/li>\n     <li>Enable any <tt>default<\/tt> {@link GTableCellRenderer} instances to render\n         HTML content, which they do not do by default.<\/li>\n <\/ul>\n <p>\n As mentioned above, this class only enables\/disables the HTML rendering on\n {@link GTableCellRenderer} instances that were created by this class (or subclasses)\n during initialization in {@link #initDefaultRenderers()} and that have been added to the\n {@link #defaultGTableRendererList}.  If users of this class have changed or added new\n renderers, then those renderers will not be changed by calling this method.  Typically,\n this method should be called just after created an instance of this class, which will work\n as described by this method.\n <p>\n HTML rendering is disabled by default.\n@param enable true to enable HTML rendering; false to disable it","static":false,"name":"setHTMLRenderingEnabled","comment":"Enables and disables the rendering of HTML content in this table.  If enabled, this table\n will:\n \n     Wrap tooltip text content with an html tag so that it is possible for\n         the content to be formatted in a manner that is easier for the user read, and\n     Enable any default GTableCellRenderer instances to render\n         HTML content, which they do not do by default.\n \n \n As mentioned above, this class only enables\/disables the HTML rendering on\n GTableCellRenderer instances that were created by this class (or subclasses)\n during initialization in #initDefaultRenderers() and that have been added to the\n #defaultGTableRendererList.  If users of this class have changed or added new\n renderers, then those renderers will not be changed by calling this method.  Typically,\n this method should be called just after created an instance of this class, which will work\n as described by this method.\n \n HTML rendering is disabled by default.","params":[{"type_long":"boolean","name":"enable","comment":"true to enable HTML rendering; false to disable it","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the key for saving and restoring column configuration state.  Use this if you have\n multiple instances of a table and you want different column settings for each instance.\n@param preferenceKey the unique string to use a key for this instance.","static":false,"name":"setPreferenceKey","comment":"Sets the key for saving and restoring column configuration state.  Use this if you have\n multiple instances of a table and you want different column settings for each instance.","params":[{"type_long":"java.lang.String","name":"preferenceKey","comment":"the unique string to use a key for this instance.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see #setPreferenceKey(String)\n@return the preference key","static":false,"name":"getPreferenceKey","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the preference key","type_short":"String"}},{"javadoc":"Signals that the preferences of this table (visible columns, sort order, etc.) should be\n saved.  Most clients never need to call this method, as changes are saved for free when\n the user manipulates columns.  However, sometimes the client can change the state of the\n columns programmatically, which is not guaranteed to get saved; for example, setting\n the sort state of a sorted table model programmatically will not get saved.","static":false,"name":"savePreferences","comment":"Signals that the preferences of this table (visible columns, sort order, etc.) should be\n saved.  Most clients never need to call this method, as changes are saved for free when\n the user manipulates columns.  However, sometimes the client can change the state of the\n columns programmatically, which is not guaranteed to get saved; for example, setting\n the sort state of a sorted table model programmatically will not get saved.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows for the disabling of the user's ability to sort an instance of\n {@link AbstractSortedTableModel} by clicking the table's headers.  The default setting is\n enabled.\n@param enabled true to enable; false to disable","static":false,"name":"setUserSortingEnabled","comment":"Allows for the disabling of the user's ability to sort an instance of\n AbstractSortedTableModel by clicking the table's headers.  The default setting is\n enabled.","params":[{"type_long":"boolean","name":"enabled","comment":"true to enable; false to disable","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setColumnHeaderPopupEnabled","comment":"","params":[{"type_long":"boolean","name":"enabled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isColumnHeaderPopupEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getTableColumnPopupMenu","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.JPopupMenu","comment":"","type_short":"JPopupMenu"}},{"javadoc":"","static":false,"name":"getCellRenderer","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"col","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"","type_short":"TableCellRenderer"}},{"javadoc":"Performs custom work to locate renderers for special table model types.  This method\n allows clients to bypass the {@link #getCellRenderer(int, int)}, which is sometimes\n overridden by subclasses to return a hard-coded renderer.  In that case, some clients\n still want a way to perform normal cell renderer lookup.\n@param row the row\n@param col the column\n@return the cell renderer","static":false,"name":"getCellRendererOverride","comment":"Performs custom work to locate renderers for special table model types.  This method\n allows clients to bypass the #getCellRenderer(int, int), which is sometimes\n overridden by subclasses to return a hard-coded renderer.  In that case, some clients\n still want a way to perform normal cell renderer lookup.","params":[{"type_long":"int","name":"row","comment":"the row","type_short":"int"},{"type_long":"int","name":"col","comment":"the column","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"the cell renderer","type_short":"TableCellRenderer"}},{"javadoc":"If you just begin typing into an editable cell in\n a JTable, then the cell editor will be displayed. However,\n the editor component will not have a focus. This\n method has been overridden to request\n focus on the editor component.\n@see javax.swing.JTable#editCellAt(int, int)","static":false,"name":"editCellAt","comment":"If you just begin typing into an editable cell in\n a JTable, then the cell editor will be displayed. However,\n the editor component will not have a focus. This\n method has been overridden to request\n focus on the editor component.","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"scrollToSelectedRow","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getHeaderPopupMenu","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.JPopupMenu","comment":"","type_short":"JPopupMenu"}},{"javadoc":"","static":false,"name":"buildTableHeaderPopupMenu","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JPopupMenu","comment":"","type_short":"JPopupMenu"}},{"javadoc":"","static":false,"name":"createAddRemoveColumnsMenuItem","comment":"","params":[{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"javax.swing.JMenuItem","comment":"","type_short":"JMenuItem"}},{"javadoc":"","static":false,"name":"createColumnSettingsMenuItem","comment":"","params":[{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"javax.swing.JMenuItem","comment":"","type_short":"JMenuItem"}},{"javadoc":"","static":false,"name":"getValueAt","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":false,"name":"maybeConvertValue","comment":"","params":[{"type_long":"java.lang.Object","name":"value","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Maintain a {@link docking.widgets.table.GTableCellRenderingData} object\n associated with each column that maintains some state and references to\n useful data. These objects are created as needed, stored by the table for\n convenient re-use and to prevent per-cell creation, and cleared when columns\n are removed from the table.\n <p>\n Row and cell state is cleared before returning to the caller to ensure\n consistent state; when the client is done rendering a cell, row and cell\n state should also be cleared to minimize references.\n@param viewColumn The columns' view index\n@return Data specific to the column. Row state is cleared before returning.","static":false,"name":"getRenderingData","comment":"Maintain a docking.widgets.table.GTableCellRenderingData object\n associated with each column that maintains some state and references to\n useful data. These objects are created as needed, stored by the table for\n convenient re-use and to prevent per-cell creation, and cleared when columns\n are removed from the table.\n \n Row and cell state is cleared before returning to the caller to ensure\n consistent state; when the client is done rendering a cell, row and cell\n state should also be cleared to minimize references.","params":[{"type_long":"int","name":"viewColumn","comment":"The columns' view index","type_short":"int"}],"throws":[],"return":{"type_long":"docking.widgets.table.GTableCellRenderingData","comment":"Data specific to the column. Row state is cleared before returning.","type_short":"GTableCellRenderingData"}},{"javadoc":"A method that subclasses can override to signal that they wish not to have this table's \n built-in popup actions.   Subclasses will almost never need to override this method.\n@return true if popup actions are supported","static":false,"name":"supportsPopupActions","comment":"A method that subclasses can override to signal that they wish not to have this table's \n built-in popup actions.   Subclasses will almost never need to override this method.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if popup actions are supported","type_short":"boolean"}},{"javadoc":"","static":false,"name":"copyColumns","comment":"","params":[{"type_long":"int[]","name":"copyColumns","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectedColumns","comment":"","params":[{"type_long":"int[]","name":"columns","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"promptUserForColumns","comment":"","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"createExportFileChooser","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.filechooser.GhidraFileChooser","comment":"","type_short":"GhidraFileChooser"}},{"javadoc":"","static":false,"name":"chooseExportFile","comment":"","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"","static":false,"name":"storeLastExportDirectory","comment":"","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doCopy","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doCopyCurrentColumn","comment":"","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doCopyColumns","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doExport","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doExportColumns","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"createSharedActions","comment":"","params":[{"type_long":"docking.DockingTool","name":"tool","comment":"","type_short":"DockingTool"},{"type_long":"docking.actions.ToolActions","name":"toolActions","comment":"","type_short":"ToolActions"},{"type_long":"java.lang.String","name":"owner","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GTable","comment":"A sub-class of JTable that provides navigation and auto-lookup.\n By default, both of these features are disabled.\n \n Auto-lookup is only supported on one column and must be specified\n using the setAutoLookupColumn() method.\n \n Auto-lookup allows a user to begin typing the first few letters\n of a desired row. The table will attempt to locate the first row\n that contains the letters typed up to that point. There is an\n 800ms timeout between typed letters, at which point the list of\n typed letters will be flushed.\n \n Auto-lookup is much faster if the underlying table model implements\n SortedTableModel, because a binary search can used\n to locate the desired row. A linear search is used if the model is not sorted.\n \n Other features provided:\n \n \tColumn hiding\/showing\n  Multi-column sorting\n  Column settings\n  Column state saving (visibility, size, positioning, sort values)\n  Selection management (saving\/restoring selection when used with a filter panel)\n ","fields":[{"type_long":"javax.swing.KeyStroke","javadoc":"","static":true,"name":"COPY_KEY_STROKE","comment":"","type_short":"KeyStroke","constant_value":null},{"type_long":"javax.swing.KeyStroke","javadoc":"","static":true,"name":"COPY_COLUMN_KEY_STROKE","comment":"","type_short":"KeyStroke","constant_value":null},{"type_long":"javax.swing.KeyStroke","javadoc":"","static":true,"name":"SELECT_ALL_KEY_STROKE","comment":"","type_short":"KeyStroke","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LAST_EXPORT_FILE","comment":"","type_short":"String","constant_value":"\"LAST_EXPORT_DIR\""},{"type_long":"int","javadoc":"","static":false,"name":"userDefinedRowHeight","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isInitialized","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowActions","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.awt.event.KeyListener","javadoc":"","static":false,"name":"autoLookupListener","comment":"","type_short":"KeyListener","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"lastLookupTime","comment":"","type_short":"long","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"lookupString","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"lookupColumn","comment":"","type_short":"int","constant_value":null},{"type_long":"docking.AutoLookupKeyStrokeConsumer","javadoc":"","static":false,"name":"autoLookupKeyStrokeConsumer","comment":"","type_short":"AutoLookupKeyStrokeConsumer","constant_value":null},{"type_long":"java.util.List<javax.swing.table.TableCellRenderer>","javadoc":"A list of default renderers created by this table","static":false,"name":"defaultGTableRendererList","comment":"A list of default renderers created by this table","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"htmlRenderingEnabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"preferenceKey","comment":"","type_short":"String","constant_value":null},{"type_long":"docking.widgets.table.GTableMouseListener","javadoc":"","static":false,"name":"headerMouseListener","comment":"","type_short":"GTableMouseListener","constant_value":null},{"type_long":"javax.swing.JPopupMenu","javadoc":"","static":false,"name":"tableHeaderPopupMenu","comment":"","type_short":"JPopupMenu","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"columnHeaderPopupEnabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"lastPopupColumnIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"A flag to signal that a copy operation is being performed.","static":false,"name":"copying","comment":"A flag to signal that a copy operation is being performed.","type_short":"boolean","constant_value":null},{"type_long":"docking.widgets.table.SelectionManager","javadoc":"","static":false,"name":"selectionManager","comment":"","type_short":"SelectionManager","constant_value":null},{"type_long":"java.lang.Integer","javadoc":"","static":false,"name":"visibleRowCount","comment":"","type_short":"Integer","constant_value":null},{"type_long":"long","javadoc":"","static":true,"name":"KEY_TIMEOUT","comment":"","type_short":"long","constant_value":"800"},{"type_long":"javax.swing.KeyStroke","javadoc":"","static":true,"name":"ESCAPE","comment":"","type_short":"KeyStroke","constant_value":null},{"type_long":"javax.swing.event.TableModelListener","javadoc":"","static":false,"name":"rowHeightListener","comment":"","type_short":"TableModelListener","constant_value":null},{"type_long":"javax.swing.event.TableColumnModelListener","javadoc":"","static":false,"name":"tableColumnModelListener","comment":"","type_short":"TableColumnModelListener","constant_value":null},{"type_long":"java.util.Map<java.lang.Integer,docking.widgets.table.GTableCellRenderingData>","javadoc":"","static":false,"name":"columnRenderingDataMap","comment":"","type_short":"Map","constant_value":null}]}
