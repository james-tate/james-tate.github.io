{"implements":["docking.widgets.table.SortListener"],"javadoc":"A class to keep track of and persist state for column models, including size, ordering and\n visibility.\n <p>\n This class performs a bit of magic to accomplish its goals.  Resultingly, some of the code\n herein may seem a bit odd or of poor quality.  These rough spots are documented as best as\n possible.\n <p>\n The basic outline of how this class works:<br>\n \n This class loads and save table column state via requests made by clients like the {@link GTable} or\n the {@link GTableColumnModel}.  These requests are in response to direct users actions (like\n showing a new column) or to table changes (like column resizing).  There are few things that \n make this code tricky.  Namely, when a change notification comes from the subsystem and not \n direct user intervention, we do not know if the change was motived by the user directly or \n by programmatic table configuration.  We would prefer to only save data when the user makes \n changes, but we can not always know the source of the change.  For example, column resizing\n can happen due to user dragging or due to the table subsystem performing a column layout.\n <p>\n To facilitate this magic, we listen to all changes, attempting to: 1) ignore those that we know\n are not from the user, and 2) buffer the changes so that they are not excessive and so they\n happen in the correct order.\n <p>\n For 1, we ignore all changes until the table has been shown for the first time.  For 2, we use\n SwingUpdate managers.\n <p>\n The complicated part is that we allow clients to add columns at any time.  If they do so \n after the table has been made visible, then we cannot ignore the event like we do when the\n table has not yet been realized.  In our world view, the uniqueness of a table is based upon\n it's class and its columns.  Thus, when a column is added or removed, it becomes a different\n table and thus, saved settings must be applied.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.table.GTable","name":"table","comment":"","type_short":"GTable"},{"type_long":"docking.widgets.table.GTableColumnModel","name":"columnModel","comment":"","type_short":"GTableColumnModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installListeners","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installSortListener","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"modelSorted","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"sortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSaveState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSaveState","comment":"","params":[{"type_long":"org.jdom.Element","name":"xmlElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveToXML","comment":"","params":[],"throws":[],"return":{"type_long":"org.jdom.Element","comment":"","type_short":"Element"}},{"javadoc":"Gets the most unique identifier possible for a given column.","static":false,"name":"getColumnName","comment":"Gets the most unique identifier possible for a given column.","params":[{"type_long":"javax.swing.table.TableColumn","name":"column","comment":"","type_short":"TableColumn"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"saveSortedColumnState","comment":"","params":[{"type_long":"org.jdom.Element","name":"xmlElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveColumnSettings","comment":"","params":[{"type_long":"org.jdom.Element","name":"columnElement","comment":"","type_short":"Element"},{"type_long":"javax.swing.table.TableColumn","name":"column","comment":"","type_short":"TableColumn"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSettingElement","comment":"","params":[{"type_long":"org.jdom.Element","name":"columnElement","comment":"","type_short":"Element"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"type","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"value","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getColumnSettings","comment":"","params":[{"type_long":"org.jdom.Element","name":"columnElement","comment":"","type_short":"Element"}],"throws":[{"type_long":"org.jdom.DataConversionException","comment":"","type_short":"DataConversionException"}],"return":{"type_long":"ghidra.docking.settings.Settings","comment":"","type_short":"Settings"}},{"javadoc":"","static":false,"name":"parseSetting","comment":"","params":[{"type_long":"org.jdom.Element","name":"settingElement","comment":"","type_short":"Element"},{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"}],"throws":[{"type_long":"org.jdom.DataConversionException","comment":"","type_short":"DataConversionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setEnabled","comment":"","params":[{"type_long":"boolean","name":"enabled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"restoreState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreStateNow","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doRestoreState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreFromXML","comment":"","params":[{"type_long":"org.jdom.Element","name":"xmlElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreColumnSortState","comment":"","params":[{"type_long":"org.jdom.Element","name":"xmlElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isValidSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"tableSortState","comment":"","type_short":"TableSortState"},{"type_long":"docking.widgets.table.SortedTableModel","name":"model","comment":"","type_short":"SortedTableModel"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"This method will return a string key that uniquely describes a table model and its\n *default* columns (those initially added by the model) so that settings for column state\n can be persisted and retrieved.","static":false,"name":"getPreferenceKey","comment":"This method will return a string key that uniquely describes a table model and its\n *default* columns (those initially added by the model) so that settings for column state\n can be persisted and retrieved.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDefaultColumnCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setDefaultColumnsVisible","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Configure the columns in this model with their preferred size.","static":false,"name":"setDefaultPreferredColumnSizes","comment":"Configure the columns in this model with their preferred size.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTableModelName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getColumn","comment":"","params":[{"type_long":"java.lang.String","name":"columnName","comment":"","type_short":"String"},{"type_long":"java.util.List<javax.swing.table.TableColumn>","name":"columnList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"javax.swing.table.TableColumn","comment":"","type_short":"TableColumn"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"TableColumnModelState","comment":"A class to keep track of and persist state for column models, including size, ordering and\n visibility.\n \n This class performs a bit of magic to accomplish its goals.  Resultingly, some of the code\n herein may seem a bit odd or of poor quality.  These rough spots are documented as best as\n possible.\n \n The basic outline of how this class works:\n \n This class loads and save table column state via requests made by clients like the GTable or\n the GTableColumnModel.  These requests are in response to direct users actions (like\n showing a new column) or to table changes (like column resizing).  There are few things that \n make this code tricky.  Namely, when a change notification comes from the subsystem and not \n direct user intervention, we do not know if the change was motived by the user directly or \n by programmatic table configuration.  We would prefer to only save data when the user makes \n changes, but we can not always know the source of the change.  For example, column resizing\n can happen due to user dragging or due to the table subsystem performing a column layout.\n \n To facilitate this magic, we listen to all changes, attempting to: 1) ignore those that we know\n are not from the user, and 2) buffer the changes so that they are not excessive and so they\n happen in the correct order.\n \n For 1, we ignore all changes until the table has been shown for the first time.  For 2, we use\n SwingUpdate managers.\n \n The complicated part is that we allow clients to add columns at any time.  If they do so \n after the table has been made visible, then we cannot ignore the event like we do when the\n table has not yet been realized.  In our world view, the uniqueness of a table is based upon\n it's class and its columns.  Thus, when a column is added or removed, it becomes a different\n table and thus, saved settings must be applied.","fields":[{"type_long":"int","javadoc":"A width that is large enough to consume the extra space when columns are getting\n resized.  This value is meant to be used when a column does not specify it's\n preferred width.","static":true,"name":"LARGE_DEFAULT_COL_WIDTH","comment":"A width that is large enough to consume the extra space when columns are getting\n resized.  This value is meant to be used when a column does not specify it's\n preferred width.","type_short":"int","constant_value":"500"},{"type_long":"int","javadoc":"Longer than the restore delay so that saving does not affect the pending restore","static":true,"name":"SAVE_DELAY","comment":"Longer than the restore delay so that saving does not affect the pending restore","type_short":"int","constant_value":"1000"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN_VISIBLE","comment":"","type_short":"String","constant_value":"\"VISIBLE\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN_WIDTH","comment":"","type_short":"String","constant_value":"\"WIDTH\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN_NAME","comment":"","type_short":"String","constant_value":"\"NAME\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_SETTING_NAME","comment":"","type_short":"String","constant_value":"\"NAME\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_SETTING_VALUE","comment":"","type_short":"String","constant_value":"\"VALUE\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_SETTING_TYPE","comment":"","type_short":"String","constant_value":"\"TYPE\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN","comment":"","type_short":"String","constant_value":"\"COLUMN\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN_DATA","comment":"","type_short":"String","constant_value":"\"COLUMN_DATA\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"XML_COLUMN_SETTING","comment":"","type_short":"String","constant_value":"\"COLUMN_SETTING\""},{"type_long":"docking.widgets.table.GTableColumnModel","javadoc":"","static":false,"name":"columnModel","comment":"","type_short":"GTableColumnModel","constant_value":null},{"type_long":"docking.widgets.table.GTable","javadoc":"","static":false,"name":"table","comment":"","type_short":"GTable","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"saveUpdateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"restoreUpdateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"restoring","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"enabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"docking.widgets.table.TableSortState","javadoc":"","static":false,"name":"lastSortState","comment":"","type_short":"TableSortState","constant_value":null}]}
