{"implements":[],"javadoc":"A GUI that provides a filterable table.  You are required to provide the method names\n of <TT>T<\/TT> that should be used to create columns in the table.\n@param <T> the row object type that will be in the table","static":false,"extends":"javax.swing.JPanel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"java.lang.Class<T>","name":"tClass","comment":"","type_short":"Class"},{"type_long":"java.lang.String[]","name":"methodNames","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"java.lang.reflect.Method[]","name":"methods","comment":"","type_short":"java.lang.reflect.Method[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"java.lang.Class<T>","name":"tClass","comment":"","type_short":"Class"},{"type_long":"java.util.List<java.lang.String>","name":"methodNames","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"java.util.List<java.lang.reflect.Method>","name":"methodNames","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[{"type_long":"docking.widgets.table.AnyObjectTableModel<T>","name":"model","comment":"","type_short":"AnyObjectTableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the column preferred widths.  If you give less widths then there are columns, then\n the widths will be applied in order, with the remaining columns going untouched.\n <p>\n Note: this method needs to be called after building your columns. So, call this after\n making any calls to {@link #addColumn(AbstractDynamicTableColumn)}.\n <p>\n <b>WARNING!<\/b>  If you set the widths to a size that is smaller than the total display,\n then the table model will apply the extra space equally across your columns, resulting\n in sizes that you did not set.  So, the best way to use this method is to set the\n actual preferred size for your small columns and then set a very large size (400 or so)\n for your columns that can be any size.\n <p>\n@param widths the widths to apply","static":false,"name":"setColumnPreferredWidths","comment":"Sets the column preferred widths.  If you give less widths then there are columns, then\n the widths will be applied in order, with the remaining columns going untouched.\n \n Note: this method needs to be called after building your columns. So, call this after\n making any calls to #addColumn(AbstractDynamicTableColumn).\n \n WARNING!  If you set the widths to a size that is smaller than the total display,\n then the table model will apply the extra space equally across your columns, resulting\n in sizes that you did not set.  So, the best way to use this method is to set the\n actual preferred size for your small columns and then set a very large size (400 or so)\n for your columns that can be any size.\n ","params":[{"type_long":"int[]","name":"widths","comment":"the widths to apply","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSortColumn","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processMouseClicked","comment":"","params":[{"type_long":"java.awt.event.MouseEvent","name":"e","comment":"","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setItemPickListener","comment":"","params":[{"type_long":"docking.widgets.table.TableItemPickedListener<T>","name":"listener","comment":"","type_short":"TableItemPickedListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"setData","comment":"","params":[{"type_long":"java.util.List<T>","name":"data","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setData","comment":"","params":[{"type_long":"java.util.Collection<T>","name":"data","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSelectedRowObjects","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"addSelectionListener","comment":"","params":[{"type_long":"docking.widgets.table.ObjectSelectedListener<T>","name":"l","comment":"","type_short":"ObjectSelectedListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeSelectionListener","comment":"","params":[{"type_long":"docking.widgets.table.ObjectSelectedListener<T>","name":"l","comment":"","type_short":"ObjectSelectedListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getItemAt","comment":"","params":[{"type_long":"java.awt.Point","name":"point","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"getModel","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.AnyObjectTableModel<T>","comment":"","type_short":"AnyObjectTableModel"}},{"javadoc":"","static":false,"name":"addColumn","comment":"","params":[{"type_long":"docking.widgets.table.AbstractDynamicTableColumn<T,?,java.lang.Object>","name":"column","comment":"","type_short":"AbstractDynamicTableColumn"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addColumn","comment":"","params":[{"type_long":"docking.widgets.table.AbstractDynamicTableColumn<T,?,java.lang.Object>","name":"column","comment":"","type_short":"AbstractDynamicTableColumn"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getRowObject","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"selectRow","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"selectRowObject","comment":"","params":[{"type_long":"T","name":"rowObject","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSelectedRow","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"rowAtPoint","comment":"","params":[{"type_long":"java.awt.Point","name":"point","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isRowSelected","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getTable","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.GTable","comment":"","type_short":"GTable"}},{"javadoc":"","static":false,"name":"focusFilter","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GTableWidget","comment":"A GUI that provides a filterable table.  You are required to provide the method names\n of T that should be used to create columns in the table.","fields":[{"type_long":"docking.widgets.table.AnyObjectTableModel<T>","javadoc":"","static":false,"name":"myModel","comment":"","type_short":"AnyObjectTableModel","constant_value":null},{"type_long":"docking.widgets.table.GFilterTable<T>","javadoc":"","static":false,"name":"gFilterTable","comment":"","type_short":"GFilterTable","constant_value":null},{"type_long":"docking.widgets.table.GTable","javadoc":"","static":false,"name":"table","comment":"","type_short":"GTable","constant_value":null},{"type_long":"docking.widgets.table.TableItemPickedListener<T>","javadoc":"","static":false,"name":"listener","comment":"","type_short":"TableItemPickedListener","constant_value":null}]}
