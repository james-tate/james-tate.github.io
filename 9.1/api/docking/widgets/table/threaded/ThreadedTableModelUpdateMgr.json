{"implements":[],"javadoc":"Manages the updating of ThreadTableModels.  As requests to load, sort, filter, add\/remove item\n in a ThreadedTableModel occur, this class schedules a TableUpdateJob to do the work.  It uses\n a SwingUpdateManager to coalesce add\/remove so that the table does not constantly update when\n are large number of table changing events are incoming.\n@param <T> the row type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModel<T,?>","name":"threadedTableModel","comment":"","type_short":"ThreadedTableModel"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Ensures that the result of this call is a cancellable monitor.\n \n <P>If the monitor used by the jobs of this class is not cancellable, then the jobs cannot\n properly move from state to state, since they are reused for new requests.","static":false,"name":"validateMonitor","comment":"Ensures that the result of this call is a cancellable monitor.\n \n If the monitor used by the jobs of this class is not cancellable, then the jobs cannot\n properly move from state to state, since they are reused for new requests.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"clientMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"","type_short":"TaskMonitor"}},{"javadoc":"","static":false,"name":"getSynchronizingLock","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Processes the accumulated list of add\/remove items.\n Called when the swing update manager decides its time to run.","static":false,"name":"processAddRemoveItems","comment":"Processes the accumulated list of add\/remove items.\n Called when the swing update manager decides its time to run.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called when there is work to be done.  It creates a thread if none is running to do the\n work that is built into the pending job.","static":false,"name":"runJob","comment":"Called when there is work to be done.  It creates a thread if none is running to do the\n work that is built into the pending job.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Warning!:  This cancels the current job, pending jobs and anything waiting in the update\n  manager.  This method is meant to be used outside of normal usage.  That is, it should\n  be used when you really have to cancel everything that is going on in order to restart\n  things.","static":false,"name":"cancelAllJobs","comment":"Warning!:  This cancels the current job, pending jobs and anything waiting in the update\n  manager.  This method is meant to be used outside of normal usage.  That is, it should\n  be used when you really have to cancel everything that is going on in order to restart\n  things.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called when the table data needs to be totally reloaded.  An example is when a undo or redo\n is performed.  It also is called if too many add\/removes have been accumulated.","static":false,"name":"reload","comment":"Called when the table data needs to be totally reloaded.  An example is when a undo or redo\n is performed.  It also is called if too many add\/removes have been accumulated.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"reloadSpecificData","comment":"","params":[{"type_long":"java.util.List<T>","name":"data","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tells this update manager that the table data needs to be resorted.  If a current job\n is running, it will attempt to add the sort work directly to the running job.  If the running\n job has not gotten to the sort phase yet, the new sort will replace the currently scheduled sort.\n If the current job is sorting or has already sorted, it will be interrupted and return to\n the sorted state.\n <p>\n If a pending job is already waiting, the sort will be added to the pending job.\n <p>\n If no jobs exists, a new job will be created to do the sort and runJob will be called to\n start a thread to do the work.\n@param sortingContext the context used to sort the data\n@param forceSort True signals to re-sort the data (useful when the data changes and needs\n                  to be re-sorted.","static":false,"name":"sort","comment":"Tells this update manager that the table data needs to be resorted.  If a current job\n is running, it will attempt to add the sort work directly to the running job.  If the running\n job has not gotten to the sort phase yet, the new sort will replace the currently scheduled sort.\n If the current job is sorting or has already sorted, it will be interrupted and return to\n the sorted state.\n \n If a pending job is already waiting, the sort will be added to the pending job.\n \n If no jobs exists, a new job will be created to do the sort and runJob will be called to\n start a thread to do the work.","params":[{"type_long":"docking.widgets.table.TableSortingContext<T>","name":"sortingContext","comment":"the context used to sort the data","type_short":"TableSortingContext"},{"type_long":"boolean","name":"forceSort","comment":"True signals to re-sort the data (useful when the data changes and needs\n                  to be re-sorted.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tells this update manager that the table data needs to be re-filtered.  If a current job\n is running, it will attempt to add the filter work directly to the running job.  If the running\n job has not gotten to the filter phase yet, nothing needs to be done since the data will be\n re-filtered anyway\n If the current job is currently filtering or has already filtered, it will be \n interrupted and return to the filter state.\n <p>\n If a pending job is already waiting, the filter job will be added to the pending job.\n <p>\n if no jobs exists, a new job will be created to do the filter and runJob will be called to\n start a thread to do the work.","static":false,"name":"filter","comment":"Tells this update manager that the table data needs to be re-filtered.  If a current job\n is running, it will attempt to add the filter work directly to the running job.  If the running\n job has not gotten to the filter phase yet, nothing needs to be done since the data will be\n re-filtered anyway\n If the current job is currently filtering or has already filtered, it will be \n interrupted and return to the filter state.\n \n If a pending job is already waiting, the filter job will be added to the pending job.\n \n if no jobs exists, a new job will be created to do the filter and runJob will be called to\n start a thread to do the work.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tells this update manager that a new row item has been added or removed.  Add\/removes never\n affect any currently running job.  If a pending job exists, the add\/remove will be added\n to the pending job.\n \n if no pending jobs exists, the add\/remove item will be added to a list to be processed later\n when the swing update manager's timer expires.\n@param item the add\/remove item to process.","static":false,"name":"addRemove","comment":"Tells this update manager that a new row item has been added or removed.  Add\/removes never\n affect any currently running job.  If a pending job exists, the add\/remove will be added\n to the pending job.\n \n if no pending jobs exists, the add\/remove item will be added to a list to be processed later\n when the swing update manager's timer expires.","params":[{"type_long":"docking.widgets.table.AddRemoveListItem<T>","name":"item","comment":"the add\/remove item to process.","type_short":"AddRemoveListItem"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if there is any scheduled work that has not been completed, including any\n deferred add\/removes.\n@return true if there is work to be done.","static":false,"name":"isBusy","comment":"Returns true if there is any scheduled work that has not been completed, including any\n deferred add\/removes.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there is work to be done.","type_short":"boolean"}},{"javadoc":"Sets the delay for the swing update managers\n@param updateDelayMillis the new delay for the swing update manager\n@param maxUpdateDelayMillis the new max update delay; updates will not wait past this time","static":false,"name":"setUpdateDelay","comment":"Sets the delay for the swing update managers","params":[{"type_long":"int","name":"updateDelayMillis","comment":"the new delay for the swing update manager","type_short":"int"},{"type_long":"int","name":"maxUpdateDelayMillis","comment":"the new max update delay; updates will not wait past this time","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the task monitor for this manager.\n@param monitor the new monitor to use.","static":false,"name":"setTaskMonitor","comment":"Sets the task monitor for this manager.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the new monitor to use.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTaskMonitor","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"","type_short":"TaskMonitor"}},{"javadoc":"Sets the ThreadedTableListener.  Only one listener is supported, so setting a new listener\n will replace any existing listener.\n@param listener the new ThreadedTableListener to use.","static":false,"name":"addThreadedTableListener","comment":"Sets the ThreadedTableListener.  Only one listener is supported, so setting a new listener\n will replace any existing listener.","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"the new ThreadedTableListener to use.","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeThreadedTableListener","comment":"","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disposes the updateManager resource.","static":false,"name":"dispose","comment":"Disposes the updateManager resource.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Kicks the swing update manager to immediately process any accumulated add\/removes.","static":false,"name":"updateNow","comment":"Kicks the swing update manager to immediately process any accumulated add\/removes.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Transitions the pending job to the current job is a thread safe way.\n@return the new current job.","static":false,"name":"getNextJob","comment":"Transitions the pending job to the current job is a thread safe way.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableUpdateJob<T>","comment":"the new current job.","type_short":"TableUpdateJob"}},{"javadoc":"Called when the current jobs has been completed.  It notifies the listener, clears the\n thread variable, and checks if any add\/removes are pending, in which case it set the state\n to work pending.","static":false,"name":"jobDone","comment":"Called when the current jobs has been completed.  It notifies the listener, clears the\n thread variable, and checks if any add\/removes are pending, in which case it set the state\n to work pending.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ThreadedTableModelUpdateMgr","comment":"Manages the updating of ThreadTableModels.  As requests to load, sort, filter, add\/remove item\n in a ThreadedTableModel occur, this class schedules a TableUpdateJob to do the work.  It uses\n a SwingUpdateManager to coalesce add\/remove so that the table does not constantly update when\n are large number of table changing events are incoming.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"TOO_MANY_ADD_REMOVES","comment":"","type_short":"int","constant_value":"3000"},{"type_long":"int","javadoc":"","static":true,"name":"DELAY","comment":"","type_short":"int","constant_value":"1000"},{"type_long":"int","javadoc":"","static":true,"name":"MAX_DELAY","comment":"","type_short":"int","constant_value":"1200000"},{"type_long":"docking.widgets.table.threaded.ThreadedTableModel<T,?>","javadoc":"","static":false,"name":"model","comment":"","type_short":"ThreadedTableModel","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"addRemoveUpdater","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"generic.concurrent.ConcurrentListenerSet<docking.widgets.table.threaded.ThreadedTableModelListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"ConcurrentListenerSet","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableUpdateJob<T>","javadoc":"","static":false,"name":"pendingJob","comment":"","type_short":"TableUpdateJob","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableUpdateJob<T>","javadoc":"","static":false,"name":"currentJob","comment":"","type_short":"TableUpdateJob","constant_value":null},{"type_long":"java.lang.Thread","javadoc":"","static":false,"name":"thread","comment":"","type_short":"Thread","constant_value":null},{"type_long":"java.util.List<docking.widgets.table.AddRemoveListItem<T>>","javadoc":"","static":false,"name":"addRemoveWaitList","comment":"","type_short":"List","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxAddRemoveCount","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"notifyPending","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"notifyUpdating","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"notifyDone","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"notifyCancelled","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":false,"name":"threadRunnable","comment":"","type_short":"Runnable","constant_value":null}]}
