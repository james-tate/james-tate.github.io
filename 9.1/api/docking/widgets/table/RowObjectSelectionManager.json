{"implements":["docking.widgets.table.SelectionManager"],"javadoc":"A class to track and restore selections made in a table.  We use this in the docking\n environment primarily due to the heavy usage of filtering for most tables.  As tables are\n filtered, the contents change (and then change back when the filter is removed).  It is nice\n to be able to filter a table, select an item of interest, and then unfilter the table to see\n that item in more context.\n@param <T> the row type","static":false,"extends":"javax.swing.DefaultListSelectionModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"javax.swing.JTable","name":"table","comment":"","type_short":"JTable"},{"type_long":"docking.widgets.table.RowObjectTableModel<T>","name":"model","comment":"","type_short":"RowObjectTableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSelectionManagerListener","comment":"","params":[{"type_long":"docking.widgets.table.SelectionManagerListener","name":"listener","comment":"","type_short":"SelectionManagerListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeSelectionManagerListener","comment":"","params":[{"type_long":"docking.widgets.table.SelectionManagerListener","name":"listener","comment":"","type_short":"SelectionManagerListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installListSelectionListener","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSavedSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireValueChanged","comment":"","params":[{"type_long":"int","name":"firstIndex","comment":"","type_short":"int"},{"type_long":"int","name":"lastIndex","comment":"","type_short":"int"},{"type_long":"boolean","name":"isAdjusting","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"superFireValueChanged","comment":"","params":[{"type_long":"int","name":"firstIndex","comment":"","type_short":"int"},{"type_long":"int","name":"lastIndex","comment":"","type_short":"int"},{"type_long":"boolean","name":"isAdjusting","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"isTrackingSelectionChange","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"checks to see if we are ignoring selection changes AND will reset the ignore state","static":false,"name":"shouldTrackSelection","comment":"checks to see if we are ignoring selection changes AND will reset the ignore state","params":[{"type_long":"boolean","name":"isAdjusting","comment":"","type_short":"boolean"},{"type_long":"int","name":"firstIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"saveSelectionState","comment":"","params":[{"type_long":"int[]","name":"selectedRows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[{"type_long":"java.util.List<T>","name":"list","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"translateRowsToValues","comment":"","params":[{"type_long":"int[]","name":"viewRows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"rowsToString","comment":"","params":[{"type_long":"int[]","name":"rows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"tableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeRepairSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"repairSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"translateSavedObjectSelectionToRowIndexes","comment":"","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"translateRowObjectsToIndices","comment":"","params":[{"type_long":"java.util.List<T>","name":"rowObjects","comment":"","type_short":"List"},{"type_long":"java.util.Map<java.lang.Object,java.util.List<java.lang.Integer>>","name":"objectRowMap","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.Integer>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"mapAllTableRowObjectToIndexes","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Map<java.lang.Object,java.util.List<java.lang.Integer>>","comment":"","type_short":"Map"}},{"javadoc":"","static":false,"name":"getTimestampString","comment":"","params":[{"type_long":"long","name":"timestamp","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"selectRows","comment":"","params":[{"type_long":"int[]","name":"selectedViewRows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreSelectedRows","comment":"","params":[{"type_long":"int[]","name":"rows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyRestoringSelection","comment":"","params":[{"type_long":"boolean","name":"isPreRestore","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"trace","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"trace","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"traceRows","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"int[]","name":"rows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"selectionHistoryExpired","comment":"","params":[{"type_long":"long","name":"currentTimestamp","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"RowObjectSelectionManager","comment":"A class to track and restore selections made in a table.  We use this in the docking\n environment primarily due to the heavy usage of filtering for most tables.  As tables are\n filtered, the contents change (and then change back when the filter is removed).  It is nice\n to be able to filter a table, select an item of interest, and then unfilter the table to see\n that item in more context.","fields":[{"type_long":"int","javadoc":"How big is too big?  Some things to consider:\n <pre>\n 1) There are many tables in the tool that could be active at once\n 2) Many tables will reload during analysis or undo\/redo\n 3) Each reload will trigger a 'selection restore' *when there is a selection in the table*\n 4) Each selection restore will trigger a map to be created, where each key is a row object\n 5) Each map is built in the Swing thread\n 6) There may be many maps being built for a major domain object change\n 7) The potential memory consumption is (number of maps * size of each table)\n <\/pre>\n Each map will be immediately available for garbage collection.  But, there still seems\n to be some reasonable upper-bound that we can put in place to not fall into a degenerate\n case that consumes too much memory.  (Not to mention the work of building and collecting\n the maps).\n <P>\n This value can always be changed if it seems to restrictive (user selections do not\n persist) or too much work is being done (we haven't yet noticed this, but it could be\n happening to end-users).","static":true,"name":"ARTIFICIAL_ROW_COUNT_THRESHOLD","comment":"How big is too big?  Some things to consider:\n \n 1) There are many tables in the tool that could be active at once\n 2) Many tables will reload during analysis or undo\/redo\n 3) Each reload will trigger a 'selection restore' *when there is a selection in the table*\n 4) Each selection restore will trigger a map to be created, where each key is a row object\n 5) Each map is built in the Swing thread\n 6) There may be many maps being built for a major domain object change\n 7) The potential memory consumption is (number of maps * size of each table)\n \n Each map will be immediately available for garbage collection.  But, there still seems\n to be some reasonable upper-bound that we can put in place to not fall into a degenerate\n case that consumes too much memory.  (Not to mention the work of building and collecting\n the maps).\n \n This value can always be changed if it seems to restrictive (user selections do not\n persist) or too much work is being done (we haven't yet noticed this, but it could be\n happening to end-users).","type_short":"int","constant_value":"10000"},{"type_long":"org.apache.logging.log4j.Logger","javadoc":"","static":false,"name":"log","comment":"","type_short":"Logger","constant_value":null},{"type_long":"java.text.DateFormat","javadoc":"","static":false,"name":"DATE_FORMAT","comment":"","type_short":"DateFormat","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<docking.widgets.table.SelectionManagerListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"javax.swing.JTable","javadoc":"","static":false,"name":"table","comment":"","type_short":"JTable","constant_value":null},{"type_long":"docking.widgets.table.RowObjectSelectionManager<T>.FilterModelAdapter","javadoc":"","static":false,"name":"modelAdapter","comment":"","type_short":"FilterModelAdapter","constant_value":null},{"type_long":"long","javadoc":"A flag used to track when updates or requests to update the selection are made.  This is\n used to throw away requests to repair selections that have been superseded by new requests.","static":false,"name":"lastSelectionUpdateTimeStamp","comment":"A flag used to track when updates or requests to update the selection are made.  This is\n used to throw away requests to repair selections that have been superseded by new requests.","type_short":"long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"ignoreSelectionChange","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"restoringSelection","comment":"","type_short":"boolean","constant_value":null}]}
