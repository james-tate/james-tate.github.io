{"implements":["docking.widgets.table.SortedTableModel"],"javadoc":"Table models should extends this model when they want sorting, potentially across multiple\n columns, but do not want Threading or do not work on Program-related data (Address, \n ProgramLocations, etc...).\n <p>\n In order to define custom comparators for a column, simply override \n {@link #createSortComparator(int)}.  Otherwise, a default comparator will be created for you.\n \n <p>Note on sorting: it is possible that the user can disable sorting by de-selecting all \n sorted columns.   This can also be achieved programmatically by calling \n {@link #setTableSortState(TableSortState)} with a value of \n {@link TableSortState#createUnsortedSortState()}.\n@param <T> The row type upon which the table is based","static":false,"extends":"docking.widgets.table.AbstractGTableModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"defaultSortColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDefaultTableSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"defaultSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSortListener","comment":"","params":[{"type_long":"docking.widgets.table.SortListener","name":"l","comment":"","type_short":"SortListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the corresponding object for the given row.\n@param viewRow The row for which to get the row object.\n@return the row object.","static":false,"name":"getRowObject","comment":"Returns the corresponding object for the given row.","params":[{"type_long":"int","name":"viewRow","comment":"The row for which to get the row object.","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"the row object.","type_short":"T"}},{"javadoc":"Returns the index of the given row object in this model; -1 if the model does not contain\n the given object.  \n \n <p>Warning: if the this model has no sort applied, then performance will be O(n).  If \n sorted, then performance is O(log n).  You can call {@link #isSorted()} to know when \n this will happen.","static":false,"name":"getRowIndex","comment":"Returns the index of the given row object in this model; -1 if the model does not contain\n the given object.  \n \n Warning: if the this model has no sort applied, then performance will be O(n).  If \n sorted, then performance is O(log n).  You can call #isSorted() to know when \n this will happen.","params":[{"type_long":"T","name":"rowObject","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"fireTableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"reSort","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTableSortState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortState","comment":"","type_short":"TableSortState"}},{"javadoc":"","static":false,"name":"getPrimarySortColumnIndex","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setTableSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"newSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isValidSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"tableSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"doSetTableSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"newSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPendingSortState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortState","comment":"","type_short":"TableSortState"}},{"javadoc":"","static":false,"name":"isSortPending","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isSorted","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createSortingContext","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"newSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortingContext<T>","comment":"","type_short":"TableSortingContext"}},{"javadoc":"The default implementation of {@link TableModel#getValueAt(int, int)} that calls the \n abstract {@link #getColumnValueForRow(Object, int)}.","static":false,"name":"getValueAt","comment":"The default implementation of TableModel#getValueAt(int, int) that calls the \n abstract #getColumnValueForRow(Object, int).","params":[{"type_long":"int","name":"rowIndex","comment":"","type_short":"int"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"This method is an attempt to help models that forget to call fireTableDataChanged().  It \n is expected that tables will fire the notification when they are ready to display data, \n even if they have that data at construction time.  We put this call here so that the \n forgetful subclasses will have their data sorted for them the first time that this table\n tries to render itself.","static":false,"name":"initializeSorting","comment":"This method is an attempt to help models that forget to call fireTableDataChanged().  It \n is expected that tables will fire the notification when they are ready to display data, \n even if they have that data at construction time.  We put this call here so that the \n forgetful subclasses will have their data sorted for them the first time that this table\n tries to render itself.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method for subclasses to quickly\/efficiently search for the index of a given\n row object <b>that is visible in the GUI<\/b>.  The <i>visible<\/i> limitation is due to the\n fact that the data searched is retrieved from {@link #getModelData()}, which may be \n filtered.\n@param rowObject The object for which to search.\n@return the index of the item in the data returned by","static":false,"name":"getIndexForRowObject","comment":"A convenience method for subclasses to quickly\/efficiently search for the index of a given\n row object that is visible in the GUI.  The visible limitation is due to the\n fact that the data searched is retrieved from #getModelData(), which may be \n filtered.","params":[{"type_long":"T","name":"rowObject","comment":"The object for which to search.","type_short":"T"}],"throws":[],"return":{"type_long":"int","comment":"the index of the item in the data returned by","type_short":"int"}},{"javadoc":"Returns the index for the given object in the given list\n@param rowObject the item\n@param data the data\n@return the index","static":false,"name":"getIndexForRowObject","comment":"Returns the index for the given object in the given list","params":[{"type_long":"T","name":"rowObject","comment":"the item","type_short":"T"},{"type_long":"java.util.List<T>","name":"data","comment":"the data","type_short":"List"}],"throws":[],"return":{"type_long":"int","comment":"the index","type_short":"int"}},{"javadoc":"A default sort method that uses the {@link Collections#sort(List, Comparator)} method for\n sorting.  Implementors with reasonably sized data sets can rely on this method.  For data\n sets that can become large, the <tt>ThreadedTableModel<\/tt> is the recommended base class, \n as it handles loading\/sorting\/filtering in a threaded way.\n@param data The data to be sorted\n@param sortingContext The context required to sort (it contains the sorting columns, a \n        comparator for sorting, etc...).","static":false,"name":"sort","comment":"A default sort method that uses the Collections#sort(List, Comparator) method for\n sorting.  Implementors with reasonably sized data sets can rely on this method.  For data\n sets that can become large, the ThreadedTableModel is the recommended base class, \n as it handles loading\/sorting\/filtering in a threaded way.","params":[{"type_long":"java.util.List<T>","name":"data","comment":"The data to be sorted","type_short":"List"},{"type_long":"docking.widgets.table.TableSortingContext<T>","name":"sortingContext","comment":"The context required to sort (it contains the sorting columns, a \n        comparator for sorting, etc...).","type_short":"TableSortingContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"sortCompleted","comment":"","params":[{"type_long":"docking.widgets.table.TableSortingContext<T>","name":"sortingContext","comment":"","type_short":"TableSortingContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Fires an event to let the listeners (like JTable) know that things have been changed. \n This method exists so that subclasses have a way to call the various <tt>tableChanged()<\/tt>\n methods without triggering this class's overridden version.\n@param dataChanged True signals that the actual data has changed; false signals that the\n        data is the same, with exception that attributes of that data may be different.","static":false,"name":"notifyModelSorted","comment":"Fires an event to let the listeners (like JTable) know that things have been changed. \n This method exists so that subclasses have a way to call the various tableChanged()\n methods without triggering this class's overridden version.","params":[{"type_long":"boolean","name":"dataChanged","comment":"True signals that the actual data has changed; false signals that the\n        data is the same, with exception that attributes of that data may be different.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"An extension point for subclasses to insert their own comparator objects for their data.\n Subclasses can create comparators for a single or multiple columns, as desired.\n@param columnIndex the column index\n@return the comparator","static":false,"name":"createSortComparator","comment":"An extension point for subclasses to insert their own comparator objects for their data.\n Subclasses can create comparators for a single or multiple columns, as desired.","params":[{"type_long":"int","name":"columnIndex","comment":"the column index","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.Comparator<T>","comment":"the comparator","type_short":"Comparator"}},{"javadoc":"","static":false,"name":"createLastResortComparator","comment":"","params":[{"type_long":"docking.widgets.table.AbstractSortedTableModel<T>.ComparatorLink","name":"parentChain","comment":"","type_short":"ComparatorLink"}],"throws":[],"return":{"type_long":"java.util.Comparator<T>","comment":"","type_short":"Comparator"}},{"javadoc":"Creates a 'Chain of Responsibility' object that knows how to do comparisons in a\n waterfall fashion (this handles the case where there are multiple columns upon which the\n data is sorted).","static":false,"name":"getComparatorChain","comment":"Creates a 'Chain of Responsibility' object that knows how to do comparisons in a\n waterfall fashion (this handles the case where there are multiple columns upon which the\n data is sorted).","params":[{"type_long":"docking.widgets.table.TableSortState","name":"newSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"java.util.Comparator<T>","comment":"","type_short":"Comparator"}},{"javadoc":"Builds a comparator for the given column sort state while allowing for subclasses to \n provider their own comparators.  This method also handles directionality of sorting, so \n that the comparators used can be simple and generic.","static":false,"name":"getComparator","comment":"Builds a comparator for the given column sort state while allowing for subclasses to \n provider their own comparators.  This method also handles directionality of sorting, so \n that the comparators used can be simple and generic.","params":[{"type_long":"docking.widgets.table.ColumnSortState","name":"columnSortState","comment":"","type_short":"ColumnSortState"}],"throws":[],"return":{"type_long":"java.util.Comparator<T>","comment":"","type_short":"Comparator"}}],"name":"AbstractSortedTableModel","comment":"Table models should extends this model when they want sorting, potentially across multiple\n columns, but do not want Threading or do not work on Program-related data (Address, \n ProgramLocations, etc...).\n \n In order to define custom comparators for a column, simply override \n #createSortComparator(int).  Otherwise, a default comparator will be created for you.\n \n Note on sorting: it is possible that the user can disable sorting by de-selecting all \n sorted columns.   This can also be achieved programmatically by calling \n #setTableSortState(TableSortState) with a value of \n TableSortState#createUnsortedSortState().","fields":[{"type_long":"java.util.Comparator<T>","javadoc":"","static":false,"name":"NO_SORT_COMPARATOR","comment":"","type_short":"Comparator","constant_value":null},{"type_long":"docking.widgets.table.TableSortState","javadoc":"","static":false,"name":"pendingSortState","comment":"","type_short":"TableSortState","constant_value":null},{"type_long":"docking.widgets.table.TableSortState","javadoc":"","static":false,"name":"sortState","comment":"","type_short":"TableSortState","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isSortPending","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasEverSorted","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<docking.widgets.table.SortListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"WeakSet","constant_value":null}]}
