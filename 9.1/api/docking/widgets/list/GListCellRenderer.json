{"implements":["javax.swing.ListCellRenderer"],"javadoc":"Provides a common implementation of a list renderer, for use in both JList and JComboBox.\n <p>\n HTML rendering defaults to disabled.  See {@link #setHTMLRenderingEnabled(boolean)}.\n@param <E> the element-type this list models.","static":false,"extends":"docking.widgets.AbstractGCellRenderer","methods":[{"javadoc":"Returns a new ListCellRenderer that maps the list's data instance to a string used in the cell.\n <p>\n Use this if you only need to provide a way to get the string value from the type being shown\n in the list.\n@param cellToTextMappingFunction a function that maps your custom type to a string value\n@return new GListCellRenderer instance","static":true,"name":"createDefaultCellTextRenderer","comment":"Returns a new ListCellRenderer that maps the list's data instance to a string used in the cell.\n \n Use this if you only need to provide a way to get the string value from the type being shown\n in the list.","params":[{"type_long":"java.util.function.Function<E,java.lang.String>","name":"cellToTextMappingFunction","comment":"a function that maps your custom type to a string value","type_short":"Function"}],"throws":[],"return":{"type_long":"docking.widgets.list.GListCellRenderer<E>","comment":"new GListCellRenderer instance","type_short":"GListCellRenderer"}},{"javadoc":"Constructs a new GListCellRenderer.","static":false,"name":"<init>","comment":"Constructs a new GListCellRenderer.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new GListCellRenderer using the specified font.\n@param f the font to use when rendering text in the lists' cells","static":false,"name":"<init>","comment":"Constructs a new GListCellRenderer using the specified font.","params":[{"type_long":"java.awt.Font","name":"f","comment":"the font to use when rendering text in the lists' cells","type_short":"Font"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the cell renderer text\n@param value Cell object value\n@return A string interpretation of value; generated by calling value.toString()","static":false,"name":"getItemText","comment":"Return the cell renderer text","params":[{"type_long":"E","name":"value","comment":"Cell object value","type_short":"E"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"A string interpretation of value; generated by calling value.toString()","type_short":"String"}},{"javadoc":"","static":false,"name":"getListCellRendererComponent","comment":"","params":[{"type_long":"javax.swing.JList<? extends E>","name":"list","comment":"","type_short":"JList"},{"type_long":"E","name":"value","comment":"","type_short":"E"},{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"boolean","name":"isSelected","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"hasFocus","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"setForegroundColor","comment":"","params":[{"type_long":"javax.swing.JList<? extends E>","name":"list","comment":"","type_short":"JList"},{"type_long":"javax.swing.ListModel<? extends E>","name":"model","comment":"","type_short":"ListModel"},{"type_long":"java.lang.Object","name":"value","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"configureFont","comment":"","params":[{"type_long":"javax.swing.JList<? extends E>","name":"list","comment":"","type_short":"JList"},{"type_long":"javax.swing.ListModel<? extends E>","name":"model","comment":"","type_short":"ListModel"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the width, height necessary to display the largest element in this list.\n <p>\n Useful for setting a JList's fixed cell width and height to the actual necessary size.\n <p>\n NOTE: the items and the renderer must be in plain text mode, not HTML rendering mode.\n@param list the JList that uses this cell renderer\n@param items the items to measure\n@param minWidth the minimum width that can be returned\n@param minHeight the minimum height that can be returned\n@return a new Dimension containing a width and height value necessary to display the largest\n element in the list","static":false,"name":"computePlainTextListCellDimensions","comment":"Returns the width, height necessary to display the largest element in this list.\n \n Useful for setting a JList's fixed cell width and height to the actual necessary size.\n \n NOTE: the items and the renderer must be in plain text mode, not HTML rendering mode.","params":[{"type_long":"javax.swing.JList<? extends E>","name":"list","comment":"the JList that uses this cell renderer","type_short":"JList"},{"type_long":"java.util.List<E>","name":"items","comment":"the items to measure","type_short":"List"},{"type_long":"int","name":"minWidth","comment":"the minimum width that can be returned","type_short":"int"},{"type_long":"int","name":"minHeight","comment":"the minimum height that can be returned","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"a new Dimension containing a width and height value necessary to display the largest\n element in the list","type_short":"Dimension"}}],"name":"GListCellRenderer","comment":"Provides a common implementation of a list renderer, for use in both JList and JComboBox.\n \n HTML rendering defaults to disabled.  See #setHTMLRenderingEnabled(boolean).","fields":[]}
