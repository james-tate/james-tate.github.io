{"implements":[],"javadoc":"A class to track the internal state gathered from the text fields","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Copy the state\n@return the copy","static":false,"name":"copy","comment":"Copy the state","params":[],"throws":[],"return":{"type_long":"docking.widgets.textfield.TextFieldLinker.LinkerState","comment":"the copy","type_short":"LinkerState"}},{"javadoc":"Erase the state\n \n Blank all the fields, and put the caret at the front of the first field.","static":false,"name":"reset","comment":"Erase the state\n \n Blank all the fields, and put the caret at the front of the first field.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the whole composite string\n@return the text","static":false,"name":"getText","comment":"Get the whole composite string","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the text","type_short":"String"}},{"javadoc":"Get the composite string, omitting the given separator.\n \n This is used as a helper to delete the separator when backspace\/delete is pressed at a\n boundary.\n@param omitSep the separator to omit, or -1 to omit nothing\n@return the text","static":false,"name":"getText","comment":"Get the composite string, omitting the given separator.\n \n This is used as a helper to delete the separator when backspace\/delete is pressed at a\n boundary.","params":[{"type_long":"int","name":"omitSep","comment":"the separator to omit, or -1 to omit nothing","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the text","type_short":"String"}},{"javadoc":"Get the composite caret location\n@return the location (including separators)","static":false,"name":"getGlobalCaret","comment":"Get the composite caret location","params":[],"throws":[],"return":{"type_long":"int","comment":"the location (including separators)","type_short":"int"}},{"javadoc":"Get the composite caret location, omitting the given separator.\n@param omitSep the separator to omit, or -1 to omit nothing\n@return the location","static":false,"name":"getGlobalCaret","comment":"Get the composite caret location, omitting the given separator.","params":[{"type_long":"int","name":"omitSep","comment":"the separator to omit, or -1 to omit nothing","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the location","type_short":"int"}},{"javadoc":"Get the composite text preceding the caret in the given field\n@param field the field whose caret to use\n@return the text","static":false,"name":"getTextBeforeCursor","comment":"Get the composite text preceding the caret in the given field","params":[{"type_long":"int","name":"field","comment":"the field whose caret to use","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the text","type_short":"String"}},{"javadoc":"Figure out whether the caret in the given field immediately proceeds a separator.\n \n In other words, the caret must be to the far left (position 0), and the given field must\n not be the first field. If true, the caret immediately follows separator index\n {@code field - 1}.\n@param field the field index to check\n@return true if the caret immediately follows a separator.","static":false,"name":"isAfterSep","comment":"Figure out whether the caret in the given field immediately proceeds a separator.\n \n In other words, the caret must be to the far left (position 0), and the given field must\n not be the first field. If true, the caret immediately follows separator index\n .","params":[{"type_long":"int","name":"field","comment":"the field index to check","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the caret immediately follows a separator.","type_short":"boolean"}},{"javadoc":"Figure out whether the caret in the given field immediately precedes a separator.\n \n In other words, the caret must be to the far right, and the given field must not be the\n last field. If true, the caret immediately precedes separator index {@code field}.\n@param field the field index to check\n@return true if the caret immediately precedes a separator.","static":false,"name":"isBeforeSep","comment":"Figure out whether the caret in the given field immediately precedes a separator.\n \n In other words, the caret must be to the far right, and the given field must not be the\n last field. If true, the caret immediately precedes separator index .","params":[{"type_long":"int","name":"field","comment":"the field index to check","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the caret immediately precedes a separator.","type_short":"boolean"}},{"javadoc":"Change focus to the given field as if navigating left.\n \n The caret will be moved to the rightmost position, because we're moving left from the\n leftmost position of the field to the right.\n@param field the field index to be given focus.","static":false,"name":"navigateFieldLeft","comment":"Change focus to the given field as if navigating left.\n \n The caret will be moved to the rightmost position, because we're moving left from the\n leftmost position of the field to the right.","params":[{"type_long":"int","name":"field","comment":"the field index to be given focus.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Change focus to the given field as if navigating right.\n \n The caret will be moved to the leftmost position, because we're moving right from the\n rightmost position of the field to the left.\n@param field the field index to be given focus.","static":false,"name":"navigateFieldRight","comment":"Change focus to the given field as if navigating right.\n \n The caret will be moved to the leftmost position, because we're moving right from the\n rightmost position of the field to the left.","params":[{"type_long":"int","name":"field","comment":"the field index to be given focus.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the given separator from the composite text.\n@param sep the separator to remove, by index","static":false,"name":"removeSep","comment":"Remove the given separator from the composite text.","params":[{"type_long":"int","name":"sep","comment":"the separator to remove, by index","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the composite text\n@param text the new text","static":false,"name":"setText","comment":"Set the composite text","params":[{"type_long":"java.lang.String","name":"text","comment":"the new text","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Set the composite caret location\n@param caret the new caret location\n@throws BadLocationException if the location exceeds the text length","static":false,"name":"setGlobalCaret","comment":"Set the composite caret location","params":[{"type_long":"int","name":"caret","comment":"the new caret location","type_short":"int"}],"throws":[{"type_long":"javax.swing.text.BadLocationException","comment":"if the location exceeds the text length","type_short":"BadLocationException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Re-parse the composite string and place the components into their proper fields","static":false,"name":"reformat","comment":"Re-parse the composite string and place the components into their proper fields","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LinkerState","comment":"A class to track the internal state gathered from the text fields","fields":[{"type_long":"int","javadoc":"","static":false,"name":"whichFocus","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<docking.widgets.textfield.TextFieldLinker.FieldState>","javadoc":"","static":false,"name":"fieldStates","comment":"","type_short":"List","constant_value":null},{"type_long":"docking.widgets.textfield.TextFieldLinker.FieldState","javadoc":"","static":false,"name":"lastState","comment":"","type_short":"FieldState","constant_value":null}]}
