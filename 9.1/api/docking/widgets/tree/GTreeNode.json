{"implements":["java.lang.Comparable","java.lang.Iterable"],"javadoc":"","static":false,"methods":[{"javadoc":"Returns the name of the node to be displayed in the tree\n@return the name of the node.","static":false,"name":"getName","comment":"Returns the name of the node to be displayed in the tree","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the node.","type_short":"String"}},{"javadoc":"Returns the Icon to be displayed for this node in the tree.\n@param expanded true if the node is expanded.\n@return the icon to be displayed for this node in the tree.","static":false,"name":"getIcon","comment":"Returns the Icon to be displayed for this node in the tree.","params":[{"type_long":"boolean","name":"expanded","comment":"true if the node is expanded.","type_short":"boolean"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"the icon to be displayed for this node in the tree.","type_short":"Icon"}},{"javadoc":"Returns the string to be displayed as a tooltip when the user \n hovers the mouse on this node in the tree.\n@return the tooltip to be displayed.","static":false,"name":"getToolTip","comment":"Returns the string to be displayed as a tooltip when the user \n hovers the mouse on this node in the tree.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the tooltip to be displayed.","type_short":"String"}},{"javadoc":"Returns true if this node never has children.\n@return true if this node is a leaf.","static":false,"name":"isLeaf","comment":"Returns true if this node never has children.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this node is a leaf.","type_short":"boolean"}},{"javadoc":"Adds the given node as a child to this node.\n@param node the node to add as a child.","static":false,"name":"addNode","comment":"Adds the given node as a child to this node.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the node to add as a child.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given node at the given index as a child to this node.\n@param index the index to place the node.\n@param node the node to add as a child of this node.","static":false,"name":"addNode","comment":"Adds the given node at the given index as a child to this node.","params":[{"type_long":"int","name":"index","comment":"the index to place the node.","type_short":"int"},{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the node to add as a child of this node.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the list of children including those that have been filtered out.\n@return the list of all children of this node including those that are filtered out.","static":false,"name":"getAllChildren","comment":"Returns the list of children including those that have been filtered out.","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.widgets.tree.GTreeNode>","comment":"the list of all children of this node including those that are filtered out.","type_short":"List"}},{"javadoc":"Returns all of the <b>visible<\/b> children of this node.  If there are filtered nodes, then\n they will not be returned.\n@return all of the <b>visible<\/b> children of this node.  If there are filtered nodes, then\n \t\t   they will not be returned.","static":false,"name":"getChildren","comment":"Returns all of the visible children of this node.  If there are filtered nodes, then\n they will not be returned.","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.widgets.tree.GTreeNode>","comment":"all of the visible children of this node.  If there are filtered nodes, then\n \t\t   they will not be returned.","type_short":"List"}},{"javadoc":"Returns the number of <b>visible<\/b> children of this node.  Does not include\n nodes that are current filtered out.\n@return the number of <b>visible<\/b> children of this node.","static":false,"name":"getChildCount","comment":"Returns the number of visible children of this node.  Does not include\n nodes that are current filtered out.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of visible children of this node.","type_short":"int"}},{"javadoc":"Returns the number of <b>all<\/b> children of this node.  Includes nodes that\n are currently filtered out.\n@return the number of <b>all<\/b? children of this node.","static":false,"name":"getAllChildCount","comment":"Returns the number of all children of this node.  Includes nodes that\n are currently filtered out.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of all\/b? children of this node.","type_short":"int"}},{"javadoc":"Returns the child node of this node with the given name.\n@param name the name of the child to be returned.\n@return the child with the given name.","static":false,"name":"getChild","comment":"Returns the child node of this node with the given name.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the child to be returned.","type_short":"String"}],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeNode","comment":"the child with the given name.","type_short":"GTreeNode"}},{"javadoc":"Returns the child node at the given index. Returns null if the index is out of\n bounds.\n@param index the index of the child to be returned.\n@return the child at the given index.","static":false,"name":"getChild","comment":"Returns the child node at the given index. Returns null if the index is out of\n bounds.","params":[{"type_long":"int","name":"index","comment":"the index of the child to be returned.","type_short":"int"}],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeNode","comment":"the child at the given index.","type_short":"GTreeNode"}},{"javadoc":"Returns the total number of nodes in the subtree rooted at this node.  Leaf\n nodes return 1.\n@return the number of nodes from this node downward.","static":false,"name":"getNodeCount","comment":"Returns the total number of nodes in the subtree rooted at this node.  Leaf\n nodes return 1.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of nodes from this node downward.","type_short":"int"}},{"javadoc":"Returns the total number of leaf nodes in the subtree from this node.\n@return the total number of leaf nodes in the subtree from this node.","static":false,"name":"getLeafCount","comment":"Returns the total number of leaf nodes in the subtree from this node.","params":[],"throws":[],"return":{"type_long":"int","comment":"the total number of leaf nodes in the subtree from this node.","type_short":"int"}},{"javadoc":"Returns the index of this node within its parent node.\n@return the index of this node within its parent node.","static":false,"name":"getIndexInParent","comment":"Returns the index of this node within its parent node.","params":[],"throws":[],"return":{"type_long":"int","comment":"the index of this node within its parent node.","type_short":"int"}},{"javadoc":"Returns the index of the given node within this node.  -1 is returned\n if the node is not a child of this node.\n@param node whose index we want.\n@return the index of the given node within this node.","static":false,"name":"getIndexOfChild","comment":"Returns the index of the given node within this node.  -1 is returned\n if the node is not a child of this node.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"whose index we want.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"int","comment":"the index of the given node within this node.","type_short":"int"}},{"javadoc":"Returns the TreePath for this node.\n@return the TreePath for this node.","static":false,"name":"getTreePath","comment":"Returns the TreePath for this node.","params":[],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath","comment":"the TreePath for this node.","type_short":"TreePath"}},{"javadoc":"Removes all children from this node.  The children nodes will be disposed.","static":false,"name":"removeAll","comment":"Removes all children from this node.  The children nodes will be disposed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the given node from this node.\n@param node the to be removed.","static":false,"name":"removeNode","comment":"Remove the given node from this node.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the to be removed.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the children on this node.  Any existing current children will be dispose.\n@param childList this list of nodes to be set as children of this node.","static":false,"name":"setChildren","comment":"Sets the children on this node.  Any existing current children will be dispose.","params":[{"type_long":"java.util.List<docking.widgets.tree.GTreeNode>","name":"childList","comment":"this list of nodes to be set as children of this node.","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given node is a child of this node or one of its children.\n@param node the potential descendant node to check","static":false,"name":"isAncestor","comment":"Returns true if the given node is a child of this node or one of its children.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the potential descendant node to check","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Applies the the given filter to the subtree of this node.  Nodes will be\n filtered out if the node and all of its descendants are not accepted by the filter. In \n other words, a node will remain if it or any of its descendants are accepted by the filter.\n@param filter the filter being applied.\n@param monitor a TaskMonitor for tracking the progress and cancelling.\n@param min the min value to use for the progress bar for this subtree.\n@param max the max value to use for the progress bar for this subtree.\n@throws CancelledException if the operation is cancelled via the TaskMonitor.","static":false,"name":"filter","comment":"Applies the the given filter to the subtree of this node.  Nodes will be\n filtered out if the node and all of its descendants are not accepted by the filter. In \n other words, a node will remain if it or any of its descendants are accepted by the filter.","params":[{"type_long":"docking.widgets.tree.support.GTreeFilter","name":"filter","comment":"the filter being applied.","type_short":"GTreeFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a TaskMonitor for tracking the progress and cancelling.","type_short":"TaskMonitor"},{"type_long":"int","name":"min","comment":"the min value to use for the progress bar for this subtree.","type_short":"int"},{"type_long":"int","name":"max","comment":"the max value to use for the progress bar for this subtree.","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation is cancelled via the TaskMonitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes any filtering on this subtree.","static":false,"name":"clearFilter","comment":"Removes any filtering on this subtree.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this node is filtered and not in the current view","static":false,"name":"isFilteredOut","comment":"Returns true if this node is filtered and not in the current view","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Notification method called when a cell editor completes editing to notify this\n node that its value has changed.  If you override this method you must also override \n {@link #isEditable()}.\n@param newValue the new value provided by the cell editor.\n@see #isEditable()","static":false,"name":"valueChanged","comment":"Notification method called when a cell editor completes editing to notify this\n node that its value has changed.  If you override this method you must also override \n #isEditable().","params":[{"type_long":"java.lang.Object","name":"newValue","comment":"the new value provided by the cell editor.","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this node is allowed to be edited in the tree.  You must override this\n method to allow a node to be edited.  You must also override {@link #valueChanged(Object)}\n to handle the result of the edit.\n@return true if this node is allowed to be edited in the tree.\n@see #valueChanged(Object)","static":false,"name":"isEditable","comment":"Returns true if this node is allowed to be edited in the tree.  You must override this\n method to allow a node to be edited.  You must also override #valueChanged(Object)\n to handle the result of the edit.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this node is allowed to be edited in the tree.","type_short":"boolean"}},{"javadoc":"Returns the rootNode for this tree or null if there is no parent path to a\n GTRootNode.\n@return the rootNode for this tree.","static":false,"name":"getRoot","comment":"Returns the rootNode for this tree or null if there is no parent path to a\n GTRootNode.","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeRootNode","comment":"the rootNode for this tree.","type_short":"GTreeRootNode"}},{"javadoc":"Returns the GTTree that contains this node.\n@return the GTTree that contains this node.","static":false,"name":"getTree","comment":"Returns the GTTree that contains this node.","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTree","comment":"the GTTree that contains this node.","type_short":"GTree"}},{"javadoc":"Disposes this node and all of its descendants.","static":false,"name":"dispose","comment":"Disposes this node and all of its descendants.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this node is currently being modified.\n@return true if this node is currently being modified.","static":false,"name":"isInProgress","comment":"Returns true if this node is currently being modified.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this node is currently being modified.","type_short":"boolean"}},{"javadoc":"Notifies the tree that the node has different children.  This method\n@param node the node that has changed.","static":false,"name":"fireNodeStructureChanged","comment":"Notifies the tree that the node has different children.  This method","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the node that has changed.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notifies the tree that a node has changed.\n@param parentNode the node that contains the node that was changed.\n@param node the that changed.","static":false,"name":"fireNodeChanged","comment":"Notifies the tree that a node has changed.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"parentNode","comment":"the node that contains the node that was changed.","type_short":"GTreeNode"},{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"the that changed.","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the parent of this node.\n@return the parent of this node.","static":false,"name":"getParent","comment":"Returns the parent of this node.","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeNode","comment":"the parent of this node.","type_short":"GTreeNode"}}],"name":"GTreeNode","comment":"","fields":[]}
