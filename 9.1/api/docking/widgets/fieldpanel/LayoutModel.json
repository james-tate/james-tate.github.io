{"implements":[],"javadoc":"The Big Layout Model interface.  Objects that implement this interface can be dispayed\n using a BigFieldPanel.","static":false,"methods":[{"javadoc":"Returns true if every index returns a non-null layout and all the layouts\n are the same height.","static":false,"name":"isUniform","comment":"Returns true if every index returns a non-null layout and all the layouts\n are the same height.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the width of the largest possible layout.","static":false,"name":"getPreferredViewSize","comment":"Returns the width of the largest possible layout.","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"Returns the total number of indexes.","static":false,"name":"getNumIndexes","comment":"Returns the total number of indexes.","params":[],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"Returns the closest larger index in the model that has a non-null layout.\n@param index for which to find the next index with a non-null layout.\n@return returns the closest larger index in the model that has a non-null layout.","static":false,"name":"getIndexAfter","comment":"Returns the closest larger index in the model that has a non-null layout.","params":[{"type_long":"java.math.BigInteger","name":"index","comment":"for which to find the next index with a non-null layout.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"returns the closest larger index in the model that has a non-null layout.","type_short":"BigInteger"}},{"javadoc":"Returns the closest smaller index in the model that has a non-null layout.\n@param index for which to find the previous index with a non-null layout.\n@return returns the closest smaller index in the model that has a non-null layout.","static":false,"name":"getIndexBefore","comment":"Returns the closest smaller index in the model that has a non-null layout.","params":[{"type_long":"java.math.BigInteger","name":"index","comment":"for which to find the previous index with a non-null layout.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"returns the closest smaller index in the model that has a non-null layout.","type_short":"BigInteger"}},{"javadoc":"Returns a layout for the given index.\n@param index the index of the layout to retrieve.","static":false,"name":"getLayout","comment":"Returns a layout for the given index.","params":[{"type_long":"java.math.BigInteger","name":"index","comment":"the index of the layout to retrieve.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"docking.widgets.fieldpanel.Layout","comment":"","type_short":"Layout"}},{"javadoc":"Returns an iterator that walks all the Layout items in this model.\n@return new iterator","static":false,"name":"iterator","comment":"Returns an iterator that walks all the Layout items in this model.","params":[],"throws":[],"return":{"type_long":"docking.widgets.fieldpanel.LayoutModelIterator","comment":"new iterator","type_short":"LayoutModelIterator"}},{"javadoc":"Returns an iterator that walks all the Layout items in this model, starting at the\n specified index.\n@param startIndex start index in the model to begining iterating\n@return new iterator","static":false,"name":"iterator","comment":"Returns an iterator that walks all the Layout items in this model, starting at the\n specified index.","params":[{"type_long":"java.math.BigInteger","name":"startIndex","comment":"start index in the model to begining iterating","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"docking.widgets.fieldpanel.LayoutModelIterator","comment":"new iterator","type_short":"LayoutModelIterator"}},{"javadoc":"Adds a LayoutModelListener to be notified when changes occur.\n@param listener the LayoutModelListener to add.","static":false,"name":"addLayoutModelListener","comment":"Adds a LayoutModelListener to be notified when changes occur.","params":[{"type_long":"docking.widgets.fieldpanel.listener.LayoutModelListener","name":"listener","comment":"the LayoutModelListener to add.","type_short":"LayoutModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes a LayoutModelListener to be notified when changes occur.\n@param listener the LayoutModelListener to remove.","static":false,"name":"removeLayoutModelListener","comment":"Removes a LayoutModelListener to be notified when changes occur.","params":[{"type_long":"docking.widgets.fieldpanel.listener.LayoutModelListener","name":"listener","comment":"the LayoutModelListener to remove.","type_short":"LayoutModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the model knows about changes that haven't yet been told to the \n LayoutModelListeners.\n@return true if changes have occurred, but no one has been notified. False if no changes\n since last listener notification.","static":false,"name":"flushChanges","comment":"Returns true if the model knows about changes that haven't yet been told to the \n LayoutModelListeners.","params":[],"throws":[],"return":{"type_long":"void","comment":"true if changes have occurred, but no one has been notified. False if no changes\n since last listener notification.","type_short":"void"}}],"name":"LayoutModel","comment":"The Big Layout Model interface.  Objects that implement this interface can be dispayed\n using a BigFieldPanel.","fields":[]}
