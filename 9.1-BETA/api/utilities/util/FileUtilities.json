{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the give file is not null, exists, is a directory and contains files.\n@param directory the directory to test\n@return true if the give file is not null, exists, is a directory and contains files.\n@see #directoryIsEmpty(File)","static":true,"name":"directoryExistsAndIsNotEmpty","comment":"Returns true if the give file is not null, exists, is a directory and contains files.","params":[{"type_long":"java.io.File","name":"directory","comment":"the directory to test","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the give file is not null, exists, is a directory and contains files.","type_short":"boolean"}},{"javadoc":"Returns true if the given file is not null, exits, is a directory and has no files.\n@param directory the directory to test for emptiness\n@return true if the given file is a directory and has not files.","static":true,"name":"directoryIsEmpty","comment":"Returns true if the given file is not null, exits, is a directory and has no files.","params":[{"type_long":"java.io.File","name":"directory","comment":"the directory to test for emptiness","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given file is a directory and has not files.","type_short":"boolean"}},{"javadoc":"Return an array of bytes read from the given file.\n@throws IOException if the file could not be accessed","static":true,"name":"getBytesFromFile","comment":"Return an array of bytes read from the given file.","params":[{"type_long":"java.io.File","name":"sourceFile","comment":"","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if the file could not be accessed","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"Return an array of bytes read from the sourceFile, starting at the\n given offset\n@param sourceFile file to read from\n@param offset offset into the file to begin reading\n@param length size of returned array of bytes\n@return array of bytes, size length\n@throws IOException thrown if there was a problem accessing the file or if there weren't\n at least {@code length} bytes read.","static":true,"name":"getBytesFromFile","comment":"Return an array of bytes read from the sourceFile, starting at the\n given offset","params":[{"type_long":"java.io.File","name":"sourceFile","comment":"file to read from","type_short":"File"},{"type_long":"long","name":"offset","comment":"offset into the file to begin reading","type_short":"long"},{"type_long":"long","name":"length","comment":"size of returned array of bytes","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the file or if there weren't\n at least  bytes read.","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"array of bytes, size length","type_short":"byte[]"}},{"javadoc":"Return an array of bytes read from the given file.\n@throws IOException if the file could not be accessed","static":true,"name":"getBytesFromFile","comment":"Return an array of bytes read from the given file.","params":[{"type_long":"generic.jar.ResourceFile","name":"sourceFile","comment":"","type_short":"ResourceFile"}],"throws":[{"type_long":"java.io.IOException","comment":"if the file could not be accessed","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"Writes an array of bytes to a file.\n@param file the file to write to\n@param bytes the array of bytes to write\n@throws FileNotFoundException thrown if the file path is invalid\n@throws IOException thrown if the file can't be written to.","static":true,"name":"writeBytes","comment":"Writes an array of bytes to a file.","params":[{"type_long":"java.io.File","name":"file","comment":"the file to write to","type_short":"File"},{"type_long":"byte[]","name":"bytes","comment":"the array of bytes to write","type_short":"byte[]"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"thrown if the file path is invalid","type_short":"FileNotFoundException"},{"type_long":"java.io.IOException","comment":"thrown if the file can't be written to.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return an array of bytes read from the sourceFile, starting at the\n given offset\n@param sourceFile file to read from\n@param offset offset into the file to begin reading\n@param length size of returned array of bytes\n@return array of bytes, size length\n@throws IOException thrown if there was a problem accessing the file or if there weren't\n at least {@code length} bytes read.","static":true,"name":"getBytesFromFile","comment":"Return an array of bytes read from the sourceFile, starting at the\n given offset","params":[{"type_long":"generic.jar.ResourceFile","name":"sourceFile","comment":"file to read from","type_short":"ResourceFile"},{"type_long":"long","name":"offset","comment":"offset into the file to begin reading","type_short":"long"},{"type_long":"long","name":"length","comment":"size of returned array of bytes","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the file or if there weren't\n at least  bytes read.","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"array of bytes, size length","type_short":"byte[]"}},{"javadoc":"","static":true,"name":"getBytes","comment":"","params":[{"type_long":"java.io.InputStream","name":"is","comment":"","type_short":"InputStream"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"Reads the number of bytes indicated by the expectedLength from the input stream and returns\n them in a byte array.\n@param inputStream the input stream\n@param expectedLength the number of bytes to be read\n@return an array of bytes, that is the expectedLength, that was read from the stream.\n@throws IOException if the \"expectedLength\" number of bytes can't be read from the input stream.","static":true,"name":"getBytesFromStream","comment":"Reads the number of bytes indicated by the expectedLength from the input stream and returns\n them in a byte array.","params":[{"type_long":"java.io.InputStream","name":"inputStream","comment":"the input stream","type_short":"InputStream"},{"type_long":"int","name":"expectedLength","comment":"the number of bytes to be read","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if the \"expectedLength\" number of bytes can't be read from the input stream.","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"an array of bytes, that is the expectedLength, that was read from the stream.","type_short":"byte[]"}},{"javadoc":"Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.\n@param fromFile source file\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@return number of bytes copied from source file to destination file\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyFile","comment":"Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.","params":[{"type_long":"java.io.File","name":"fromFile","comment":"source file","type_short":"File"},{"type_long":"java.io.File","name":"toFile","comment":"destination file","type_short":"File"},{"type_long":"boolean","name":"append","comment":"if true and the file exists, the fromFile contents will be\n appended to the toFile.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n 100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"long","comment":"number of bytes copied from source file to destination file","type_short":"long"}},{"javadoc":"Copy the fromFile contents to the toFile.\n@param fromFile source file\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n \t\t\t\t appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyFile","comment":"Copy the fromFile contents to the toFile.","params":[{"type_long":"generic.jar.ResourceFile","name":"fromFile","comment":"source file","type_short":"ResourceFile"},{"type_long":"java.io.File","name":"toFile","comment":"destination file","type_short":"File"},{"type_long":"boolean","name":"append","comment":"if true and the file exists, the fromFile contents will be\n \t\t\t\t appended to the toFile.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.\n@param fromFile source file\n@param toFile destination file\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyFile","comment":"Copy the fromFile contents to the toFile.  The toFile will be overwritten or created.","params":[{"type_long":"generic.jar.ResourceFile","name":"fromFile","comment":"source file","type_short":"ResourceFile"},{"type_long":"generic.jar.ResourceFile","name":"toFile","comment":"destination file","type_short":"ResourceFile"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n \t\t\t\t  100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Ensures the specified leaf directory exists.\n <p>\n Does not create any missing parent directories.  See {@link #mkdirs(File)} instead.\n <p>\n Takes into account race conditions with external threads\/processes\n creating the same directory at the same time.\n <p>\n@param dir The directory to create.\n@return True If the directory exists when this method completes; otherwise, false.","static":true,"name":"createDir","comment":"Ensures the specified leaf directory exists.\n \n Does not create any missing parent directories.  See #mkdirs(File) instead.\n \n Takes into account race conditions with external threads\/processes\n creating the same directory at the same time.\n ","params":[{"type_long":"java.io.File","name":"dir","comment":"The directory to create.","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"True If the directory exists when this method completes; otherwise, false.","type_short":"boolean"}},{"javadoc":"Make all directories in the full directory path specified. This is a\n replacement for the File.mkdirs() which fails due to a problem with the\n File.exists() method with remote file systems on Windows. After renaming\n a directory, the exists() method frequently reports the old directory as\n still existing. In the case of File.mkdirs() the recreation of the old\n directory would fail. The File.mkdir() method does not perform this\n check.\n@param dir directory path to be created\n@return True If the directory exists when this method completes; otherwise, false.","static":true,"name":"mkdirs","comment":"Make all directories in the full directory path specified. This is a\n replacement for the File.mkdirs() which fails due to a problem with the\n File.exists() method with remote file systems on Windows. After renaming\n a directory, the exists() method frequently reports the old directory as\n still existing. In the case of File.mkdirs() the recreation of the old\n directory would fail. The File.mkdir() method does not perform this\n check.","params":[{"type_long":"java.io.File","name":"dir","comment":"directory path to be created","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"True If the directory exists when this method completes; otherwise, false.","type_short":"boolean"}},{"javadoc":"Ensures the specified leaf directory exists.\n <p>\n Throws an {@link IOException} if there is any problem while creating the directory.\n <p>\n Does not create any missing parent directories.  See {@link #checkMkdirs(File)} instead.\n <p>\n Takes into account race conditions with external threads\/processes\n creating the same directory at the same time.\n <p>\n@param dir The directory to create.\n@return a reference to the same {@link File} instance that was passed in.\n@throws IOException if there was a failure when creating the directory (ie. the\n parent directory did not exist or other issue).","static":true,"name":"checkedMkdir","comment":"Ensures the specified leaf directory exists.\n \n Throws an IOException if there is any problem while creating the directory.\n \n Does not create any missing parent directories.  See #checkMkdirs(File) instead.\n \n Takes into account race conditions with external threads\/processes\n creating the same directory at the same time.\n ","params":[{"type_long":"java.io.File","name":"dir","comment":"The directory to create.","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a failure when creating the directory (ie. the\n parent directory did not exist or other issue).","type_short":"IOException"}],"return":{"type_long":"java.io.File","comment":"a reference to the same File instance that was passed in.","type_short":"File"}},{"javadoc":"Ensures the specified full directory path exists, creating any missing\n directories as needed.\n <p>\n Throws an {@link IOException} if there is any problem while creating the directory.\n <p>\n Uses {@link #createDir(File)} to create new directories (which handles\n race conditions if other processes are also trying to create the same directory).\n <p>\n@param dir directory path to be created\n@return a reference to the same {@link File} instance that was passed in.\n@throws IOException if there was a failure when creating a directory.","static":true,"name":"checkedMkdirs","comment":"Ensures the specified full directory path exists, creating any missing\n directories as needed.\n \n Throws an IOException if there is any problem while creating the directory.\n \n Uses #createDir(File) to create new directories (which handles\n race conditions if other processes are also trying to create the same directory).\n ","params":[{"type_long":"java.io.File","name":"dir","comment":"directory path to be created","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a failure when creating a directory.","type_short":"IOException"}],"return":{"type_long":"java.io.File","comment":"a reference to the same File instance that was passed in.","type_short":"File"}},{"javadoc":"Delete a directory and all of its contents.\n@param dir\n@return true if delete was successful. If false is returned, a partial\n         delete may have occurred.","static":true,"name":"deleteDir","comment":"Delete a directory and all of its contents.","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if delete was successful. If false is returned, a partial\n         delete may have occurred.","type_short":"boolean"}},{"javadoc":"Delete a directory and all of its contents.\n@param dir\n@return true if delete was successful. If false is returned, a partial\n         delete may have occurred.","static":true,"name":"deleteDir","comment":"Delete a directory and all of its contents.","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if delete was successful. If false is returned, a partial\n         delete may have occurred.","type_short":"boolean"}},{"javadoc":"A version of {@link #deleteDir(File,TaskMonitor)} that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.","static":true,"name":"doDeleteDir","comment":"A version of #deleteDir(File,TaskMonitor) that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"This is the same as calling {@link #copyDir(File, File, FileFilter, TaskMonitor)} with\n a {@link FileFilter} that accepts all files.","static":true,"name":"copyDir","comment":"This is the same as calling #copyDir(File, File, FileFilter, TaskMonitor) with\n a FileFilter that accepts all files.","params":[{"type_long":"java.io.File","name":"originalDir","comment":"","type_short":"File"},{"type_long":"java.io.File","name":"copyDir","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Copies the contents of <tt>originalDir<\/tt> to <tt>copyDir<\/tt>.  If the <tt>originalDir<\/tt>\n does not exist, then this method will do nothing.  If <tt>copyDir<\/tt> does not exist, then\n it will be created as necessary.\n@param originalDir The directory from which to extract contents\n@param copyDir The directory in which the extracted contents will be placed\n@param fileFilte a filter to apply against the directory's contents","static":true,"name":"copyDir","comment":"Copies the contents of originalDir to copyDir.  If the originalDir\n does not exist, then this method will do nothing.  If copyDir does not exist, then\n it will be created as necessary.","params":[{"type_long":"java.io.File","name":"originalDir","comment":"The directory from which to extract contents","type_short":"File"},{"type_long":"java.io.File","name":"copyDir","comment":"The directory in which the extracted contents will be placed","type_short":"File"},{"type_long":"java.io.FileFilter","name":"filter","comment":"","type_short":"FileFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"A version of {@link #copyDir(File, File, FileFilter, TaskMonitor)} that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.","static":true,"name":"doCopyDir","comment":"A version of #copyDir(File, File, FileFilter, TaskMonitor) that does not alter\n the progress value of the given monitor, only the status text.  This allows this recursive\n method to send status updates while the caller of this method controls the progress.","params":[{"type_long":"java.io.File","name":"originalDir","comment":"","type_short":"File"},{"type_long":"java.io.File","name":"copyDir","comment":"","type_short":"File"},{"type_long":"java.io.FileFilter","name":"filter","comment":"","type_short":"FileFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"printDebug","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copy the in stream to the toFile.  The toFile will be overwritten or created.\n@param in source input stream\n@param toFile destination file\n@param append if true and the file exists, the fromFile contents will be\n appended to the toFile.\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@return number of bytes copied from source file to destination file\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyStreamToFile","comment":"Copy the in stream to the toFile.  The toFile will be overwritten or created.","params":[{"type_long":"java.io.InputStream","name":"in","comment":"source input stream","type_short":"InputStream"},{"type_long":"java.io.File","name":"toFile","comment":"destination file","type_short":"File"},{"type_long":"boolean","name":"append","comment":"if true and the file exists, the fromFile contents will be\n appended to the toFile.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n 100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"long","comment":"number of bytes copied from source file to destination file","type_short":"long"}},{"javadoc":"Copy the contents of the specified fromFile to the out stream.\n@param fromFile file data source\n@param toFile destination stream\n@param monitor if specified the progress will be reset and will advance to\n 100% when the copy is complete.\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyFileToStream","comment":"Copy the contents of the specified fromFile to the out stream.","params":[{"type_long":"java.io.File","name":"fromFile","comment":"file data source","type_short":"File"},{"type_long":"java.io.OutputStream","name":"out","comment":"","type_short":"OutputStream"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n 100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copy the <tt>in<\/tt> stream to the <tt>out<\/tt> stream.  The output stream will\n <b>not<\/b> be closed when the copy operation is finished.\n@param in source input stream\n@param out the destination output stream\n@param monitor if specified the progress will be reset and will advance to\n \t\t\t\t 100% when the copy is complete.\n@return the number of bytes copied from the input stream to the output stream.\n@throws IOException thrown if there was a problem accessing the files","static":true,"name":"copyStreamToStream","comment":"Copy the in stream to the out stream.  The output stream will\n not be closed when the copy operation is finished.","params":[{"type_long":"java.io.InputStream","name":"in","comment":"source input stream","type_short":"InputStream"},{"type_long":"java.io.OutputStream","name":"out","comment":"the destination output stream","type_short":"OutputStream"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"if specified the progress will be reset and will advance to\n \t\t\t\t 100% when the copy is complete.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if there was a problem accessing the files","type_short":"IOException"}],"return":{"type_long":"long","comment":"the number of bytes copied from the input stream to the output stream.","type_short":"long"}},{"javadoc":"Returns all of the lines in the file without any newline characters.\n@param file The file to read in\n@return a list of file lines\n@throws IOException","static":true,"name":"getLines","comment":"Returns all of the lines in the file without any newline characters.","params":[{"type_long":"java.io.File","name":"file","comment":"The file to read in","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a list of file lines","type_short":"List"}},{"javadoc":"Returns all of the lines in the file without any newline characters.\n <p>\n The file is treated as UTF-8 encoded.\n <p>\n@param file The text file to read in\n@return a list of file lines\n@throws IOException","static":true,"name":"getLines","comment":"Returns all of the lines in the file without any newline characters.\n \n The file is treated as UTF-8 encoded.\n ","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"The text file to read in","type_short":"ResourceFile"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a list of file lines","type_short":"List"}},{"javadoc":"Returns all of the lines in the file without any newline characters.  This method\n is the same as {@link #getLines(ResourceFile)}, except that it handles the exception\n that is thrown by that method.\n@param file The file to read in\n@return a list of file lines","static":true,"name":"getLinesQuietly","comment":"Returns all of the lines in the file without any newline characters.  This method\n is the same as #getLines(ResourceFile), except that it handles the exception\n that is thrown by that method.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"The file to read in","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a list of file lines","type_short":"List"}},{"javadoc":"Returns all of the lines in the BufferedReader without any newline characters.\n <p>\n The file is treated as UTF-8 encoded.\n <p>\n@param is the input stream from which to read\n@return a list of file lines\n@throws IOException","static":true,"name":"getLines","comment":"Returns all of the lines in the BufferedReader without any newline characters.\n \n The file is treated as UTF-8 encoded.\n ","params":[{"type_long":"java.net.URL","name":"url","comment":"","type_short":"URL"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a list of file lines","type_short":"List"}},{"javadoc":"Returns all of the lines in the given {@link InputStream} without any newline characters.\n <p>\n <b>The input stream is closed as a side-effect.<\/b>\n@param is the input stream from which to read, as a side effect, it is closed\n@return a {@link List} of strings representing the text lines of the file\n@throws IOException if there are any issues reading the file","static":true,"name":"getLines","comment":"Returns all of the lines in the given InputStream without any newline characters.\n \n The input stream is closed as a side-effect.","params":[{"type_long":"java.io.InputStream","name":"is","comment":"the input stream from which to read, as a side effect, it is closed","type_short":"InputStream"}],"throws":[{"type_long":"java.io.IOException","comment":"if there are any issues reading the file","type_short":"IOException"}],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a List of strings representing the text lines of the file","type_short":"List"}},{"javadoc":"Returns all of the text in the given {@link InputStream}.\n <p>\n EOL characters are normalized to simple '\\n's.\n <p>\n <b>The input stream is closed as a side-effect.<\/b>\n <p>\n@param is the input stream from which to read, as a side effect, it is closed\n@return the content as a String\n@throws IOException if there are any issues reading the file","static":true,"name":"getText","comment":"Returns all of the text in the given InputStream.\n \n EOL characters are normalized to simple '\\n's.\n \n The input stream is closed as a side-effect.\n ","params":[{"type_long":"java.io.InputStream","name":"is","comment":"the input stream from which to read, as a side effect, it is closed","type_short":"InputStream"}],"throws":[{"type_long":"java.io.IOException","comment":"if there are any issues reading the file","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"the content as a String","type_short":"String"}},{"javadoc":"Returns all of the text in the given {@link File}.\n <p>\n See {@link #getText(InputStream)}\n <p>\n@param f the file to read\n@return the content as a String\n@throws IOException if there are any issues reading the file or file is too large.","static":true,"name":"getText","comment":"Returns all of the text in the given File.\n \n See #getText(InputStream)\n ","params":[{"type_long":"java.io.File","name":"f","comment":"the file to read","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if there are any issues reading the file or file is too large.","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"the content as a String","type_short":"String"}},{"javadoc":"Returns all of the lines in the {@link BufferedReader} without any newline characters.\n <p>\n The BufferedReader is closed before returning.\n@param in BufferedReader to read lines from, as a side effect, it is closed\n@return a {@link List} of strings representing the text lines of the file\n@throws IOException if there are any issues reading the file","static":true,"name":"getLines","comment":"Returns all of the lines in the BufferedReader without any newline characters.\n \n The BufferedReader is closed before returning.","params":[{"type_long":"java.io.BufferedReader","name":"in","comment":"BufferedReader to read lines from, as a side effect, it is closed","type_short":"BufferedReader"}],"throws":[{"type_long":"java.io.IOException","comment":"if there are any issues reading the file","type_short":"IOException"}],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a List of strings representing the text lines of the file","type_short":"List"}},{"javadoc":"Writes the given list of Strings to the file, separating each by a newline character.\n <p>\n <b>\n This will overwrite the contents of the given file!\n <\/b>\n@param file the file to which the lines will be written\n@param lines the lines to write\n@throws IOException if there are any issues writing to the file","static":true,"name":"writeLinesToFile","comment":"Writes the given list of Strings to the file, separating each by a newline character.\n \n \n This will overwrite the contents of the given file!\n ","params":[{"type_long":"java.io.File","name":"file","comment":"the file to which the lines will be written","type_short":"File"},{"type_long":"java.util.List<java.lang.String>","name":"lines","comment":"the lines to write","type_short":"List"}],"throws":[{"type_long":"java.io.IOException","comment":"if there are any issues writing to the file","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes the given String to the specified {@link File}.\n@param file {@link File} to write to.\n@param s String to write to the file.\n@throws IOException if there were any issues while writing to the file.","static":true,"name":"writeStringToFile","comment":"Writes the given String to the specified File.","params":[{"type_long":"java.io.File","name":"file","comment":"File to write to.","type_short":"File"},{"type_long":"java.lang.String","name":"s","comment":"String to write to the file.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there were any issues while writing to the file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given file:\n <ol>\n  <li> is <tt>null<\/tt>, or  <\/li>\n \t<li>{@link File#isFile()} is true, <\/li>\n  <li>and {@link File#length()} is == 0.<\/li>\n  <\/ol>\n@param f the file to check\n@return true if the file is not empty","static":true,"name":"isEmpty","comment":"Returns true if the given file:\n \n   is null, or  \n \tFile#isFile() is true, \n  and File#length() is == 0.\n  ","params":[{"type_long":"java.io.File","name":"f","comment":"the file to check","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the file is not empty","type_short":"boolean"}},{"javadoc":"Returns true if the given <code>potentialParentFile<\/code> is the parent path of\n the given <code>otherFile<\/code>, or if the two file paths point to the same path.\n@param potentialParentFile The file that may be the parent\n@param otherFile The file that may be the child\n@return boolean true if otherFile's path is within potentialParentFile's path.","static":true,"name":"isPathContainedWithin","comment":"Returns true if the given potentialParentFile is the parent path of\n the given otherFile, or if the two file paths point to the same path.","params":[{"type_long":"java.io.File","name":"potentialParentFile","comment":"The file that may be the parent","type_short":"File"},{"type_long":"java.io.File","name":"otherFile","comment":"The file that may be the child","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if otherFile's path is within potentialParentFile's path.","type_short":"boolean"}},{"javadoc":"Returns the portion of the second file that trails the full path of the first file.  If\n the paths are the same or unrelated, then null is returned.\n\n <P>For example, given, in this order, two files with these paths\n  <tt>\/a\/b<\/tt> and <tt>\/a\/b\/c<\/tt>, this method will return 'c'.\n@param f1 the parent file\n@param f2 the child file\n@return the portion of the second file that trails the full path of the first file.\n@throws IOException","static":true,"name":"relativizePath","comment":"Returns the portion of the second file that trails the full path of the first file.  If\n the paths are the same or unrelated, then null is returned.\n\n For example, given, in this order, two files with these paths\n  \/a\/b and \/a\/b\/c, this method will return 'c'.","params":[{"type_long":"java.io.File","name":"f1","comment":"the parent file","type_short":"File"},{"type_long":"java.io.File","name":"f2","comment":"the child file","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"the portion of the second file that trails the full path of the first file.","type_short":"String"}},{"javadoc":"","static":true,"name":"exists","comment":"","params":[{"type_long":"java.net.URI","name":"uri","comment":"","type_short":"URI"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"getOrCreateJarFS","comment":"","params":[{"type_long":"java.net.URI","name":"jarURI","comment":"","type_short":"URI"}],"throws":[],"return":{"type_long":"java.nio.file.FileSystem","comment":"","type_short":"FileSystem"}},{"javadoc":"Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.\n@param file the file to be tested\n@return a result object that reports the status of the file","static":true,"name":"existsAndIsCaseDependent","comment":"Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.","params":[{"type_long":"java.io.File","name":"file","comment":"the file to be tested","type_short":"File"}],"throws":[],"return":{"type_long":"utilities.util.FileResolutionResult","comment":"a result object that reports the status of the file","type_short":"FileResolutionResult"}},{"javadoc":"Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.\n@param file the file to be tested\n@return a result object that reports the status of the file","static":true,"name":"existsAndIsCaseDependent","comment":"Returns true if a file exists on disk and has a case that matches the filesystem.\n This method is handy for\n comparing file paths provided externally (like from a user or a config file) to\n determine if the case of the file path matches the case of the file on the filesystem.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"the file to be tested","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"utilities.util.FileResolutionResult","comment":"a result object that reports the status of the file","type_short":"FileResolutionResult"}},{"javadoc":"","static":true,"name":"pathIsCaseDependent","comment":"","params":[{"type_long":"java.lang.String","name":"canonicalPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"absolutePath","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"utilities.util.FileResolutionResult","comment":"","type_short":"FileResolutionResult"}},{"javadoc":"Ensures that the specified {@link File} param points to a file on the filesystem with a\n filename that has the exact same character case as the filename portion of the\n specified File.\n <p>\n This does not ensure that the path components are case-sensitive.\n <p>\n If the specified File and filesystem file do not match case a NULL is returned,\n otherwise the original File parameter is returned.\n <p>\n This method is useful on OS's that have filesystems that are case-insensitive and allow\n using File(\"A\") to open real file \"a\", and you do not wish to allow this.\n <p>\n If the specified file being queried is a symbolic link to a file with a different name,\n no case sensitivity checks are done and the original specified File param is returned\n unchanged.\n <p>\n (Put another way: symlink \"FILE1\" -> \"..\/path\/file2\", no case sensitive enforcing can be done,\n but symlink \"FILE1\" -> \"..\/path\/file1\" will be enforced by this method.)\n <p>\n Querying a filepath that does not exist will result in a 'success' and the caller will\n receive the non-existent File instance back.\n <p>\n@param caseSensitiveFile {@link File} to enforce case-sensitive-ness of the name portion\n@return the same {@link File} instance if it points to a file on the filesystem with\n the same case, or a NULL if the case does not match.","static":true,"name":"resolveFileCaseSensitive","comment":"Ensures that the specified File param points to a file on the filesystem with a\n filename that has the exact same character case as the filename portion of the\n specified File.\n \n This does not ensure that the path components are case-sensitive.\n \n If the specified File and filesystem file do not match case a NULL is returned,\n otherwise the original File parameter is returned.\n \n This method is useful on OS's that have filesystems that are case-insensitive and allow\n using File(\"A\") to open real file \"a\", and you do not wish to allow this.\n \n If the specified file being queried is a symbolic link to a file with a different name,\n no case sensitivity checks are done and the original specified File param is returned\n unchanged.\n \n (Put another way: symlink \"FILE1\" - \"..\/path\/file2\", no case sensitive enforcing can be done,\n but symlink \"FILE1\" - \"..\/path\/file1\" will be enforced by this method.)\n \n Querying a filepath that does not exist will result in a 'success' and the caller will\n receive the non-existent File instance back.\n ","params":[{"type_long":"java.io.File","name":"caseSensitiveFile","comment":"File to enforce case-sensitive-ness of the name portion","type_short":"File"}],"throws":[],"return":{"type_long":"java.io.File","comment":"the same File instance if it points to a file on the filesystem with\n the same case, or a NULL if the case does not match.","type_short":"File"}},{"javadoc":"Ensures the specified {@link File} points to a valid existing file,\n regardless of case match of the file's name.\n <p>\n Does not fixup any case-mismatching of the parent directories of the specified\n file.\n <p>\n If the exact filename already exists, it is returned unchanged, otherwise\n an all-lowercase version of the filename is probed, and then an all-uppercase\n version of the filename is probed, returning it if found.\n <p>\n Finally, the entire parent directory of the specified file is listed, and the first\n file that matches, case-insensitively to the target file, is returned.\n <p>\n If no file is found that matches, the original File instance is returned.\n <p>\n See also {@link #existsAndIsCaseDependent(ResourceFile)}.\n <p>\n@param f File instance\n@return File instance pointing to a case-insensitive match of the File parameter","static":true,"name":"resolveFileCaseInsensitive","comment":"Ensures the specified File points to a valid existing file,\n regardless of case match of the file's name.\n \n Does not fixup any case-mismatching of the parent directories of the specified\n file.\n \n If the exact filename already exists, it is returned unchanged, otherwise\n an all-lowercase version of the filename is probed, and then an all-uppercase\n version of the filename is probed, returning it if found.\n \n Finally, the entire parent directory of the specified file is listed, and the first\n file that matches, case-insensitively to the target file, is returned.\n \n If no file is found that matches, the original File instance is returned.\n \n See also #existsAndIsCaseDependent(ResourceFile).\n ","params":[{"type_long":"java.io.File","name":"f","comment":"File instance","type_short":"File"}],"throws":[],"return":{"type_long":"java.io.File","comment":"File instance pointing to a case-insensitive match of the File parameter","type_short":"File"}},{"javadoc":"","static":true,"name":"pathToParts","comment":"","params":[{"type_long":"java.lang.String","name":"path","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}},{"javadoc":"Returns the size of the given file as a human readable String.\n <p>\n See {@link #formatLength(long)}\n <p>\n@param file the file for which to get size\n@return the pretty string","static":true,"name":"getPrettySize","comment":"Returns the size of the given file as a human readable String.\n \n See #formatLength(long)\n ","params":[{"type_long":"java.io.File","name":"file","comment":"the file for which to get size","type_short":"File"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the pretty string","type_short":"String"}},{"javadoc":"Returns a human readable string representing the length of something in bytes.\n <p>\n Larger sizes are represented in rounded off kilo and mega bytes.\n <p>\n TODO: why is the method using 1000 vs. 1024 for K?\n@param length\n@return pretty string - \"1.1KB\", \"5.0MB\"","static":true,"name":"formatLength","comment":"Returns a human readable string representing the length of something in bytes.\n \n Larger sizes are represented in rounded off kilo and mega bytes.\n \n TODO: why is the method using 1000 vs. 1024 for K?","params":[{"type_long":"long","name":"length","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"pretty string - \"1.1KB\", \"5.0MB\"","type_short":"String"}},{"javadoc":"","static":true,"name":"createTempDirectory","comment":"","params":[{"type_long":"java.lang.String","name":"prefix","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"Sets the given file (or directory) to readable and writable by only the owner.\n@param f The file (or directory) to set the permissions of.","static":true,"name":"setOwnerOnlyPermissions","comment":"Sets the given file (or directory) to readable and writable by only the owner.","params":[{"type_long":"java.io.File","name":"f","comment":"The file (or directory) to set the permissions of.","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Uses the {@link Desktop} API to open the specified file using the user's operating\n system's native widgets (ie. Windows File Explorer, Mac Finder, etc).\n <p>\n If the specified file is a directory, a file explorer will tend to be opened.\n <p>\n If the specified file is a file, the operating system will decide what to do based\n on the contents or name of the file.\n <p>\n If the {@link Desktop} API isn't support in the current env (unknown when\n this will actually happen) an error dialog will be displayed.\n@param file {@link File} ref to a directory or file on the local filesystem.\n@throws IOException if the OS doesn't know what to do with the file.","static":true,"name":"openNative","comment":"Uses the Desktop API to open the specified file using the user's operating\n system's native widgets (ie. Windows File Explorer, Mac Finder, etc).\n \n If the specified file is a directory, a file explorer will tend to be opened.\n \n If the specified file is a file, the operating system will decide what to do based\n on the contents or name of the file.\n \n If the Desktop API isn't support in the current env (unknown when\n this will actually happen) an error dialog will be displayed.","params":[{"type_long":"java.io.File","name":"file","comment":"File ref to a directory or file on the local filesystem.","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if the OS doesn't know what to do with the file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Processes each text line in a text file, in a separate thread.\n <p>\n Thread exits when EOF is reached.\n@param is {@link InputStream} to read\n@param consumer code that will process each text of the text file.","static":true,"name":"asyncForEachLine","comment":"Processes each text line in a text file, in a separate thread.\n \n Thread exits when EOF is reached.","params":[{"type_long":"java.io.InputStream","name":"is","comment":"InputStream to read","type_short":"InputStream"},{"type_long":"java.util.function.Consumer<java.lang.String>","name":"consumer","comment":"code that will process each text of the text file.","type_short":"Consumer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Processes each text line in a text file, in a separate thread.\n <p>\n Thread exits when EOF is reached.\n@param reader {@link BufferedReader} to read\n@param consumer code that will process each text of the text file.","static":true,"name":"asyncForEachLine","comment":"Processes each text line in a text file, in a separate thread.\n \n Thread exits when EOF is reached.","params":[{"type_long":"java.io.BufferedReader","name":"reader","comment":"BufferedReader to read","type_short":"BufferedReader"},{"type_long":"java.util.function.Consumer<java.lang.String>","name":"consumer","comment":"code that will process each text of the text file.","type_short":"Consumer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FileUtilities","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"MAX_FILE_SIZE","comment":"","type_short":"int","constant_value":"268435456"},{"type_long":"int","javadoc":"","static":true,"name":"IO_BUFFER_SIZE","comment":"","type_short":"int","constant_value":"32768"},{"type_long":"java.lang.ThreadLocal<java.text.NumberFormat>","javadoc":"","static":true,"name":"SIZE_FORMAT_THREAD_LOCAL","comment":"","type_short":"ThreadLocal","constant_value":null},{"type_long":"java.io.FileFilter","javadoc":"","static":true,"name":"ACCEPT_ALL_FILE_FILTER","comment":"","type_short":"FileFilter","constant_value":null}]}
