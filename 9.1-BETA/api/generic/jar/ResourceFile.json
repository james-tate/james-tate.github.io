{"implements":["java.lang.Comparable"],"javadoc":"Class for representing file object regardless of whether they are actual files in the file system or\n or files stored inside of a jar file.  This class provides most all the same capabilities as the\n File class.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a ResourceFile that represents a normal file in the file system.\n@param file the file in the file system.","static":false,"name":"<init>","comment":"Construct a ResourceFile that represents a normal file in the file system.","params":[{"type_long":"java.io.File","name":"file","comment":"the file in the file system.","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new ResourceFile from a parent file and a relative child path.\n@param resourceFile the parent file\n@param path the child path.","static":false,"name":"<init>","comment":"Construct a new ResourceFile from a parent file and a relative child path.","params":[{"type_long":"generic.jar.ResourceFile","name":"resourceFile","comment":"the parent file","type_short":"ResourceFile"},{"type_long":"java.lang.String","name":"path","comment":"the child path.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"generic.jar.Resource","name":"resource","comment":"","type_short":"Resource"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a Resource file from string path that can be either a file path or a jar url.\n@param absolutePath the path to the file.","static":false,"name":"<init>","comment":"Constructs a Resource file from string path that can be either a file path or a jar url.","params":[{"type_long":"java.lang.String","name":"absolutePath","comment":"the path to the file.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a Resource file from string path that can be either a file path or a jar url.\n@param absolutePath the path to the file.\n@param filter The filter used to exclude files from being loaded","static":false,"name":"<init>","comment":"Constructs a Resource file from string path that can be either a file path or a jar url.","params":[{"type_long":"java.lang.String","name":"absolutePath","comment":"the path to the file.","type_short":"String"},{"type_long":"generic.jar.JarEntryFilter","name":"filter","comment":"The filter used to exclude files from being loaded","type_short":"JarEntryFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new Root ResourceFile for a given jar file.\n@param jarFile the jar file to open.\n@param filter JarEntryFilter that will filter out unwanted jar entries.\n@return A Resource file that represents the root of the jarfile file system.\n@throws IOException if the jar file can't be read.","static":true,"name":"openJarResourceFile","comment":"Creates a new Root ResourceFile for a given jar file.","params":[{"type_long":"java.io.File","name":"jarFile","comment":"the jar file to open.","type_short":"File"},{"type_long":"generic.jar.JarEntryFilter","name":"filter","comment":"JarEntryFilter that will filter out unwanted jar entries.","type_short":"JarEntryFilter"}],"throws":[{"type_long":"java.io.IOException","comment":"if the jar file can't be read.","type_short":"IOException"}],"return":{"type_long":"generic.jar.ResourceFile","comment":"A Resource file that represents the root of the jarfile file system.","type_short":"ResourceFile"}},{"javadoc":"Returns the absolute file path for this file.\n@return the absolute file path for this file.","static":false,"name":"getAbsolutePath","comment":"Returns the absolute file path for this file.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the absolute file path for this file.","type_short":"String"}},{"javadoc":"Returns the canonical file path for this file.\n@return the absolute file path for this file.","static":false,"name":"getCanonicalPath","comment":"Returns the canonical file path for this file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"the absolute file path for this file.","type_short":"String"}},{"javadoc":"Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.\n@return the child ResourceFiles if this is a directory, null otherwise.","static":false,"name":"listFiles","comment":"Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.","params":[],"throws":[],"return":{"type_long":"generic.jar.ResourceFile[]","comment":"the child ResourceFiles if this is a directory, null otherwise.","type_short":"generic.jar.ResourceFile[]"}},{"javadoc":"Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.\n@param filter a filter to restrict the array of files returned.\n@return the child ResourceFiles if this is a directory, null otherwise.","static":false,"name":"listFiles","comment":"Returns a array of ResourceFiles if this ResourceFile is a directory. Otherwise return null.","params":[{"type_long":"generic.jar.ResourceFileFilter","name":"filter","comment":"a filter to restrict the array of files returned.","type_short":"ResourceFileFilter"}],"throws":[],"return":{"type_long":"generic.jar.ResourceFile[]","comment":"the child ResourceFiles if this is a directory, null otherwise.","type_short":"generic.jar.ResourceFile[]"}},{"javadoc":"Returns the simple name of the file.\n@return the simple name of the file.","static":false,"name":"getName","comment":"Returns the simple name of the file.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the simple name of the file.","type_short":"String"}},{"javadoc":"Returns true if this Resource file exists and is a directory.\n@return true if this Resource file exists and is a directory.","static":false,"name":"isDirectory","comment":"Returns true if this Resource file exists and is a directory.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this Resource file exists and is a directory.","type_short":"boolean"}},{"javadoc":"Returns the parent of this ResourceFile or null if it is a root.\n@return the parent of this ResourceFile or null if it is a root.","static":false,"name":"getParentFile","comment":"Returns the parent of this ResourceFile or null if it is a root.","params":[],"throws":[],"return":{"type_long":"generic.jar.ResourceFile","comment":"the parent of this ResourceFile or null if it is a root.","type_short":"ResourceFile"}},{"javadoc":"Returns a URL that represents this file object.\n@return a URL that represents this file object.\n@throws MalformedURLException if a URL can't be formed for this file.","static":false,"name":"toURL","comment":"Returns a URL that represents this file object.","params":[],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if a URL can't be formed for this file.","type_short":"MalformedURLException"}],"return":{"type_long":"java.net.URL","comment":"a URL that represents this file object.","type_short":"URL"}},{"javadoc":"Returns the time that this file was last modified.\n@return the time that this file was last modified.","static":false,"name":"lastModified","comment":"Returns the time that this file was last modified.","params":[],"throws":[],"return":{"type_long":"long","comment":"the time that this file was last modified.","type_short":"long"}},{"javadoc":"If this file exists and is not a directory, it will return an InputStream for the file's \n contents.\n@return an InputStream for the file's contents.\n@throws FileNotFoundException if the file does not exist.\n@throws IOException","static":false,"name":"getInputStream","comment":"If this file exists and is not a directory, it will return an InputStream for the file's \n contents.","params":[],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"if the file does not exist.","type_short":"FileNotFoundException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.io.InputStream","comment":"an InputStream for the file's contents.","type_short":"InputStream"}},{"javadoc":"Attempts to delete the file.  Not supported (returns false) for files within a jar file.\n@return true if the file was deleted, false otherwise.","static":false,"name":"delete","comment":"Attempts to delete the file.  Not supported (returns false) for files within a jar file.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the file was deleted, false otherwise.","type_short":"boolean"}},{"javadoc":"Returns true if the file exists.\n@return true if the file exists.","static":false,"name":"exists","comment":"Returns true if the file exists.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the file exists.","type_short":"boolean"}},{"javadoc":"Returns an OutputStream if the file can be opened for writing.\n@return an OutputStream if the file can be opened for writing.\n@throws FileNotFoundException if the file can't be created or opened for writing.","static":false,"name":"getOutputStream","comment":"Returns an OutputStream if the file can be opened for writing.","params":[],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"if the file can't be created or opened for writing.","type_short":"FileNotFoundException"}],"return":{"type_long":"java.io.OutputStream","comment":"an OutputStream if the file can be opened for writing.","type_short":"OutputStream"}},{"javadoc":"Returns a File object.  If this ResourceFile represents a standard filesystem, then no\n copy is necessary to return a file.  If this ResourceFile represents a compressed \n filesystem, then a copy from that filesystem to the real filesystem is needed to create\n a File object.  <tt>copyIfNeeded<\/tt> allows you to dictate whether a copy should take \n place, if needed.\n <p>\n If you just want the contents of a file, then call {@link #getInputStream()}.\n@param copyIfNeeded true to copy the file when embedded in a compressed filesystem; false\n                      to return null in that case.\n@return a File object or null if not a file and copyIfNeeded was false","static":false,"name":"getFile","comment":"Returns a File object.  If this ResourceFile represents a standard filesystem, then no\n copy is necessary to return a file.  If this ResourceFile represents a compressed \n filesystem, then a copy from that filesystem to the real filesystem is needed to create\n a File object.  copyIfNeeded allows you to dictate whether a copy should take \n place, if needed.\n \n If you just want the contents of a file, then call #getInputStream().","params":[{"type_long":"boolean","name":"copyIfNeeded","comment":"true to copy the file when embedded in a compressed filesystem; false\n                      to return null in that case.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.io.File","comment":"a File object or null if not a file and copyIfNeeded was false","type_short":"File"}},{"javadoc":"Returns the size of this file.\n@return the size of the file.","static":false,"name":"length","comment":"Returns the size of this file.","params":[],"throws":[],"return":{"type_long":"long","comment":"the size of the file.","type_short":"long"}},{"javadoc":"Returns true if this file exists and is not a directory.\n@return true if this file exists and is not a directory.","static":false,"name":"isFile","comment":"Returns true if this file exists and is not a directory.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this file exists and is not a directory.","type_short":"boolean"}},{"javadoc":"Returns the canonicalFile for this file.\n@return the canonicalFile for this file.","static":false,"name":"getCanonicalFile","comment":"Returns the canonicalFile for this file.","params":[],"throws":[],"return":{"type_long":"generic.jar.ResourceFile","comment":"the canonicalFile for this file.","type_short":"ResourceFile"}},{"javadoc":"Returns true if this file can be written to.\n@return true if this file can be written to.","static":false,"name":"canWrite","comment":"Returns true if this file can be written to.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this file can be written to.","type_short":"boolean"}},{"javadoc":"Creates a directory for the path represented by this file.\n@return true if a new directory was created.","static":false,"name":"mkdir","comment":"Creates a directory for the path represented by this file.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if a new directory was created.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"generic.jar.ResourceFile","name":"o","comment":"","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the root file for this file.\n@return the root file for this file.","static":false,"name":"getFileSystemRoot","comment":"Returns the root file for this file.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the root file for this file.","type_short":"File"}},{"javadoc":"Returns a URI for this file object.\n@return a URI for this file object.","static":false,"name":"toURI","comment":"Returns a URI for this file object.","params":[],"throws":[],"return":{"type_long":"java.net.URI","comment":"a URI for this file object.","type_short":"URI"}}],"name":"ResourceFile","comment":"Class for representing file object regardless of whether they are actual files in the file system or\n or files stored inside of a jar file.  This class provides most all the same capabilities as the\n File class.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"JAR_FILE_PREFIX","comment":"","type_short":"String","constant_value":"\"jar:file:\""},{"type_long":"generic.jar.Resource","javadoc":"","static":false,"name":"resource","comment":"","type_short":"Resource","constant_value":null},{"type_long":"java.util.Map<java.lang.String,generic.jar.JarResource>","javadoc":"","static":true,"name":"jarRootsMap","comment":"","type_short":"Map","constant_value":null}]}
