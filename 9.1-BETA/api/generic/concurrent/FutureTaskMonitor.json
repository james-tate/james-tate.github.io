{"implements":["ghidra.util.task.TaskMonitor"],"javadoc":"This is the FutureTask that will be used to call the {@link QCallback} to work on\n an item from a ConcurrentQ. It has been overridden to serve as an individual\n TaskMonitor for the task as well as notifying the ConcurrentQ when a task\n has been completed or cancelled so that additional tasks can be sent to the\n thread pool.\n <P>\n If it was cancelled, then the done() callback will occur in the thread that cancelled this\n task, otherwise it will be called by the thread from the thread pool that\n executed the task.  Note that when this task is cancelled, it is up to the\n executing thread to check if it was cancelled and terminate the task execution gracefully.\n Even if the executing task never checks the cancelled and completes the task,\n the return value will be ignored as this task has already been considered done\n and any threads waiting on the return will have already been told it was cancelled.\n <P>\n On ConcurrentQs that only allow one task to run at a time, when a task is cancelled,\n the next task can begin.  Most likely, the thread that was running the cancelled\n task won't be free, and a new thread will be used to start running the next task.\n@param <I> the input type\n@param <R> the output type","static":false,"extends":"java.util.concurrent.FutureTask","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"generic.concurrent.ConcurrentQ<I,R>","name":"queue","comment":"","type_short":"ConcurrentQ"},{"type_long":"java.util.concurrent.Callable<R>","name":"callable","comment":"","type_short":"Callable"},{"type_long":"I","name":"item","comment":"","type_short":"I"},{"type_long":"long","name":"id","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getItem","comment":"","params":[],"throws":[],"return":{"type_long":"I","comment":"","type_short":"I"}},{"javadoc":"","static":false,"name":"getID","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"run","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMaximum","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"incrementProgress","comment":"","params":[{"type_long":"long","name":"incrementAmount","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setProgress","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkCanceled","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMessage","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMessage","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMaximum","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"setShowProgressValue","comment":"","params":[{"type_long":"boolean","name":"showProgressValue","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setIndeterminate","comment":"","params":[{"type_long":"boolean","name":"indeterminate","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isIndeterminate","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getProgress","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[{"type_long":"boolean","name":"mayInterruptIfRunning","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCancelEnabled","comment":"","params":[{"type_long":"boolean","name":"enable","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isCancelEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"clearCanceled","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addCancelledListener","comment":"","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeCancelledListener","comment":"","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FutureTaskMonitor","comment":"This is the FutureTask that will be used to call the QCallback to work on\n an item from a ConcurrentQ. It has been overridden to serve as an individual\n TaskMonitor for the task as well as notifying the ConcurrentQ when a task\n has been completed or cancelled so that additional tasks can be sent to the\n thread pool.\n \n If it was cancelled, then the done() callback will occur in the thread that cancelled this\n task, otherwise it will be called by the thread from the thread pool that\n executed the task.  Note that when this task is cancelled, it is up to the\n executing thread to check if it was cancelled and terminate the task execution gracefully.\n Even if the executing task never checks the cancelled and completes the task,\n the return value will be ignored as this task has already been considered done\n and any threads waiting on the return will have already been told it was cancelled.\n \n On ConcurrentQs that only allow one task to run at a time, when a task is cancelled,\n the next task can begin.  Most likely, the thread that was running the cancelled\n task won't be free, and a new thread will be used to start running the next task.","fields":[{"type_long":"generic.concurrent.ConcurrentQ<I,R>","javadoc":"","static":false,"name":"queue","comment":"","type_short":"ConcurrentQ","constant_value":null},{"type_long":"I","javadoc":"","static":false,"name":"item","comment":"","type_short":"I","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"id","comment":"","type_short":"long","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"lastMessage","comment":"","type_short":"String","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"currentProgress","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"maxProgress","comment":"","type_short":"long","constant_value":null},{"type_long":"ghidra.util.task.CancelledListener","javadoc":"","static":false,"name":"cancelledListener","comment":"","type_short":"CancelledListener","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isIndeterminate","comment":"","type_short":"boolean","constant_value":null}]}
