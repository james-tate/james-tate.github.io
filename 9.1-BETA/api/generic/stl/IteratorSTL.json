{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"Returns the current value of the iterator.\n@return the current value of the iterator.\n@throws IndexOutOfBoundsException if the iterator is positioned before the first value or\n after the last value.","static":false,"name":"get","comment":"Returns the current value of the iterator.","params":[],"throws":[],"return":{"type_long":"T","comment":"the current value of the iterator.","type_short":"T"}},{"javadoc":"Sets the current value of the iterator to the given value.\n@param value the value to set at the iterator position\n@throws IndexOutOfBoundsException if the iterator is positioned befor the first value or\n after the last value.","static":false,"name":"set","comment":"Sets the current value of the iterator to the given value.","params":[{"type_long":"T","name":"value","comment":"the value to set at the iterator position","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Advances the iterator to the next position.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the the iterator is already past the last element.","static":false,"name":"increment","comment":"Advances the iterator to the next position.","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"a reference to the iterator itself","type_short":"IteratorSTL"}},{"javadoc":"Advances the iterator n positions.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the n value pushes past the end of the collection.","static":false,"name":"increment","comment":"Advances the iterator n positions.","params":[{"type_long":"int","name":"n","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"a reference to the iterator itself","type_short":"IteratorSTL"}},{"javadoc":"Devance the iterator to the previous position.  This method is only supported in \n bidirectional iterators.\n@return a reference to the iterator itself","static":false,"name":"decrement","comment":"Devance the iterator to the previous position.  This method is only supported in \n bidirectional iterators.","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"a reference to the iterator itself","type_short":"IteratorSTL"}},{"javadoc":"Devances the iterator n positions.\n@return a reference to the iterator itself\n@throws IndexOutOfBoundsException if the n value pushes past the beginning of the collection","static":false,"name":"decrement","comment":"Devances the iterator n positions.","params":[{"type_long":"int","name":"n","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"a reference to the iterator itself","type_short":"IteratorSTL"}},{"javadoc":"Returns true if the iterator is positioned on the first first element of the collection.  If the\n collection is empty, this will always return false.\n@return true if the iterator is positioned on the first element of the collection.","static":false,"name":"isBegin","comment":"Returns true if the iterator is positioned on the first first element of the collection.  If the\n collection is empty, this will always return false.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the iterator is positioned on the first element of the collection.","type_short":"boolean"}},{"javadoc":"Returns true if the iterator is positioned past the last element of the collection.  If the\n collection is empty, this will always return true.\n@return true if the iterator is positioned past the last element of the collection.","static":false,"name":"isEnd","comment":"Returns true if the iterator is positioned past the last element of the collection.  If the\n collection is empty, this will always return true.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the iterator is positioned past the last element of the collection.","type_short":"boolean"}},{"javadoc":"Inserts the given value at the current position (the current value will be pushed to the next value).\n The iterator will be positioned on the new value.\n@param value the value to insert into the collection.\n@throws IndexOutOfBoundsException if the iterator is positioned before the first item.","static":false,"name":"insert","comment":"Inserts the given value at the current position (the current value will be pushed to the next value).\n The iterator will be positioned on the new value.","params":[{"type_long":"T","name":"value","comment":"the value to insert into the collection.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a copy of this iterator.\n@return a copy of this iterator.","static":false,"name":"copy","comment":"Creates a copy of this iterator.","params":[],"throws":[],"return":{"type_long":"generic.stl.IteratorSTL<T>","comment":"a copy of this iterator.","type_short":"IteratorSTL"}},{"javadoc":"'Assigns' this iterator to be equivalent to the given iterator.  This is equivalent to\n C++'s '=' overloading mechanism\n@param otherIterator The iterator to copy","static":false,"name":"assign","comment":"'Assigns' this iterator to be equivalent to the given iterator.  This is equivalent to\n C++'s '=' overloading mechanism","params":[{"type_long":"generic.stl.IteratorSTL<T>","name":"otherIterator","comment":"The iterator to copy","type_short":"IteratorSTL"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"IteratorSTL","comment":"","fields":[]}
