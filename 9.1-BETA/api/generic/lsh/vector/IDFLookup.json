{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"initializeTable","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"empty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getCount","comment":"","params":[{"type_long":"int","name":"hash","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getCapacity","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getRawHash","comment":"","params":[{"type_long":"int","name":"pos","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getRawCount","comment":"","params":[{"type_long":"int","name":"pos","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"insertHash","comment":"","params":[{"type_long":"int","name":"hash","comment":"","type_short":"int"},{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveXml","comment":"","params":[{"type_long":"java.io.Writer","name":"fwrite","comment":"","type_short":"Writer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreXml","comment":"","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Collapse IDFLookup into an int array, suitable for storage\n@return int[]","static":false,"name":"toArray","comment":"Collapse IDFLookup into an int array, suitable for storage","params":[],"throws":[],"return":{"type_long":"int[]","comment":"int[]","type_short":"int[]"}},{"javadoc":"Set from an array of hash\/count pairs.  Every even index is a hash, every odd index is a count\n@param hashCountPair is the pair array","static":false,"name":"set","comment":"Set from an array of hash\/count pairs.  Every even index is a hash, every odd index is a count","params":[{"type_long":"int[]","name":"hashCountPair","comment":"is the pair array","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"IDFLookup","comment":"","fields":[{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"mask","comment":"","type_short":"int","constant_value":null},{"type_long":"generic.lsh.vector.IDFLookup.IDFEntry[]","javadoc":"","static":false,"name":"hashtable","comment":"","type_short":"generic.lsh.vector.IDFLookup.IDFEntry[]","constant_value":null}]}
