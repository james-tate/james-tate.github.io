{"implements":["generic.lsh.vector.LSHVector"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Install a set of features as an int[].   Each integer is a hash.  The integers MUST already be sorted.\n The same integer can occur more than once in the array (term frequency (TF) > 1).\n Weights are determined by TF and Inverse Document Frequency (IDF) of individual features\n@param feature is the sorted array of integer hashes\n@param wfactory is the container of weighting information\n@param idflookup is the container of IDF information","static":false,"name":"<init>","comment":"Install a set of features as an int[].   Each integer is a hash.  The integers MUST already be sorted.\n The same integer can occur more than once in the array (term frequency (TF)  1).\n Weights are determined by TF and Inverse Document Frequency (IDF) of individual features","params":[{"type_long":"int[]","name":"feature","comment":"is the sorted array of integer hashes","type_short":"int[]"},{"type_long":"generic.lsh.vector.WeightFactory","name":"wfactory","comment":"is the container of weighting information","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"idflookup","comment":"is the container of IDF information","type_short":"IDFLookup"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Uses the existing {@link #calcUniqueHash()} method to determine hash value.\n@return ","static":false,"name":"hashCode","comment":"Uses the existing #calcUniqueHash() method to determine hash value.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Eclipse-generated equals method.  Only the hash attribute is necessary.\n@param obj\n@return ","static":false,"name":"equals","comment":"Eclipse-generated equals method.  Only the hash attribute is necessary.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Install hashes and weights directly.  Length is automatically calculated.\n The entries must already be sorted on the hash\n@param entries","static":false,"name":"setHashEntries","comment":"Install hashes and weights directly.  Length is automatically calculated.\n The entries must already be sorted on the hash","params":[{"type_long":"generic.lsh.vector.HashEntry[]","name":"entries","comment":"","type_short":"generic.lsh.vector.HashEntry[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"calcLength","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Assuming -feature- is sorted and -hash- is empty, count the features and populate -hash- and -tf-\n For every unique feature, look up its idf via -idflookup-\n@param feature is the list of sorted hash features\n@param wfactory is the WeightFactory used to decide feature weights\n@param idflookup is the IDFLookup used to decide relative frequency of individual features","static":false,"name":"installFeatures","comment":"Assuming -feature- is sorted and -hash- is empty, count the features and populate -hash- and -tf-\n For every unique feature, look up its idf via -idflookup-","params":[{"type_long":"int[]","name":"feature","comment":"is the list of sorted hash features","type_short":"int[]"},{"type_long":"generic.lsh.vector.WeightFactory","name":"wfactory","comment":"is the WeightFactory used to decide feature weights","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"idflookup","comment":"is the IDFLookup used to decide relative frequency of individual features","type_short":"IDFLookup"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"numEntries","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getEntry","comment":"","params":[{"type_long":"int","name":"i","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"generic.lsh.vector.HashEntry","comment":"","type_short":"HashEntry"}},{"javadoc":"","static":false,"name":"getEntries","comment":"","params":[],"throws":[],"return":{"type_long":"generic.lsh.vector.HashEntry[]","comment":"","type_short":"generic.lsh.vector.HashEntry[]"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"generic.lsh.vector.LSHVector","name":"op2","comment":"","type_short":"LSHVector"},{"type_long":"generic.lsh.vector.VectorCompare","name":"data","comment":"","type_short":"VectorCompare"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"","static":false,"name":"compareCounts","comment":"","params":[{"type_long":"generic.lsh.vector.LSHVector","name":"op2","comment":"","type_short":"LSHVector"},{"type_long":"generic.lsh.vector.VectorCompare","name":"data","comment":"","type_short":"VectorCompare"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"writeOnlyList","comment":"","params":[{"type_long":"java.util.ArrayList<generic.lsh.vector.HashEntry>","name":"only","comment":"","type_short":"ArrayList"},{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"writeBothList","comment":"","params":[{"type_long":"java.util.ArrayList<generic.lsh.vector.HashEntry>","name":"both","comment":"","type_short":"ArrayList"},{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compareDetail","comment":"","params":[{"type_long":"generic.lsh.vector.LSHVector","name":"op2","comment":"","type_short":"LSHVector"},{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"","static":false,"name":"getLength","comment":"","params":[],"throws":[],"return":{"type_long":"double","comment":"","type_short":"double"}},{"javadoc":"","static":false,"name":"restoreXml","comment":"","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"},{"type_long":"generic.lsh.vector.WeightFactory","name":"wfactory","comment":"","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"idflookup","comment":"","type_short":"IDFLookup"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreSQL","comment":"","params":[{"type_long":"java.lang.String","name":"sql","comment":"","type_short":"String"},{"type_long":"generic.lsh.vector.WeightFactory","name":"wfactory","comment":"","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"idflookup","comment":"","type_short":"IDFLookup"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreBase64","comment":"","params":[{"type_long":"java.io.Reader","name":"input","comment":"","type_short":"Reader"},{"type_long":"char[]","name":"buffer","comment":"","type_short":"char[]"},{"type_long":"generic.lsh.vector.WeightFactory","name":"wfactory","comment":"","type_short":"WeightFactory"},{"type_long":"generic.lsh.vector.IDFLookup","name":"idflookup","comment":"","type_short":"IDFLookup"},{"type_long":"int[]","name":"decode","comment":"","type_short":"int[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveXml","comment":"","params":[{"type_long":"java.io.Writer","name":"fwrite","comment":"","type_short":"Writer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveSQL","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"saveBase64","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buffer","comment":"","type_short":"StringBuilder"},{"type_long":"char[]","name":"encoder","comment":"","type_short":"char[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"calcUniqueHash","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}}],"name":"LSHCosineVector","comment":"","fields":[{"type_long":"generic.lsh.vector.HashEntry[]","javadoc":"","static":true,"name":"EMPTY","comment":"","type_short":"generic.lsh.vector.HashEntry[]","constant_value":null},{"type_long":"generic.lsh.vector.HashEntry[]","javadoc":"","static":false,"name":"hash","comment":"","type_short":"generic.lsh.vector.HashEntry[]","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"length","comment":"","type_short":"double","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"hashcount","comment":"","type_short":"int","constant_value":null}]}
