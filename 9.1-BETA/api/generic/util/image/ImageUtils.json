{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates an image of the given component\n@param c the component\n@return the image","static":true,"name":"createImage","comment":"Creates an image of the given component","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"the image","type_short":"Image"}},{"javadoc":"Pads the given image with space in the amount given.\n@param i the image to pad\n@param c the color to use for the padding background\n@param top the top padding\n@param left the left padding\n@param right the right padding\n@param bottom the bottom padding\n@return a new image with the given image centered inside of padding","static":true,"name":"padImage","comment":"Pads the given image with space in the amount given.","params":[{"type_long":"java.awt.Image","name":"i","comment":"the image to pad","type_short":"Image"},{"type_long":"java.awt.Color","name":"c","comment":"the color to use for the padding background","type_short":"Color"},{"type_long":"int","name":"top","comment":"the top padding","type_short":"int"},{"type_long":"int","name":"left","comment":"the left padding","type_short":"int"},{"type_long":"int","name":"right","comment":"the right padding","type_short":"int"},{"type_long":"int","name":"bottom","comment":"the bottom padding","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"a new image with the given image centered inside of padding","type_short":"Image"}},{"javadoc":"Crops the given image, keeping the given bounds\n@param i the image to crop\n@param bounds the new bounds\n@return a new image based on the given image, cropped to the given bounds.","static":true,"name":"crop","comment":"Crops the given image, keeping the given bounds","params":[{"type_long":"java.awt.Image","name":"i","comment":"the image to crop","type_short":"Image"},{"type_long":"java.awt.Rectangle","name":"bounds","comment":"the new bounds","type_short":"Rectangle"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"a new image based on the given image, cropped to the given bounds.","type_short":"Image"}},{"javadoc":"Creates a new image of the given size.  This image is suitable for drawing operations.\n@param width the width of the new image\n@param height the height of the new image\n@return a new image of the given size.  This image is suitable for drawing operations.","static":true,"name":"createEmptyImage","comment":"Creates a new image of the given size.  This image is suitable for drawing operations.","params":[{"type_long":"int","name":"width","comment":"the width of the new image","type_short":"int"},{"type_long":"int","name":"height","comment":"the height of the new image","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.image.BufferedImage","comment":"a new image of the given size.  This image is suitable for drawing operations.","type_short":"BufferedImage"}},{"javadoc":"Places the two given images side-by-side into a new image.\n@param left the left image\n@param right the right image\n@return a new image with the two given images side-by-side into a new image.","static":true,"name":"placeImagesSideBySide","comment":"Places the two given images side-by-side into a new image.","params":[{"type_long":"java.awt.Image","name":"left","comment":"the left image","type_short":"Image"},{"type_long":"java.awt.Image","name":"right","comment":"the right image","type_short":"Image"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"a new image with the two given images side-by-side into a new image.","type_short":"Image"}},{"javadoc":"Turns the given image into a {@link RenderedImage}\n@param image the image\n@return the rendered image","static":true,"name":"toRenderedImage","comment":"Turns the given image into a RenderedImage","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image","type_short":"Image"}],"throws":[],"return":{"type_long":"java.awt.image.RenderedImage","comment":"the rendered image","type_short":"RenderedImage"}},{"javadoc":"Copies this image into a buffered image.  If this image is already a buffered image, then\n it will be returned.\n@param image the image\n@return the buffered image","static":true,"name":"getBufferedImage","comment":"Copies this image into a buffered image.  If this image is already a buffered image, then\n it will be returned.","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image","type_short":"Image"}],"throws":[],"return":{"type_long":"java.awt.image.BufferedImage","comment":"the buffered image","type_short":"BufferedImage"}},{"javadoc":"Waits a reasonable amount of time for the given image to load\n@param imageName the name of the image\n@param image the image for which to wait\n@return true if the wait was successful","static":true,"name":"waitForImage","comment":"Waits a reasonable amount of time for the given image to load","params":[{"type_long":"java.lang.String","name":"imageName","comment":"the name of the image","type_short":"String"},{"type_long":"java.awt.Image","name":"image","comment":"the image for which to wait","type_short":"Image"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the wait was successful","type_short":"boolean"}},{"javadoc":"Write the specified image to file in PNG format\n@param i the image to save\n@param imageFile the file to save the image to\n@throws IOException","static":true,"name":"writeFile","comment":"Write the specified image to file in PNG format","params":[{"type_long":"java.awt.Image","name":"i","comment":"the image to save","type_short":"Image"},{"type_long":"java.io.File","name":"imageFile","comment":"the file to save the image to","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Write the specified image to file in PNG format\n@param i the image to save\n@param imageFile the file to save the image to\n@throws IOException","static":true,"name":"writeFile","comment":"Write the specified image to file in PNG format","params":[{"type_long":"java.awt.image.RenderedImage","name":"i","comment":"the image to save","type_short":"RenderedImage"},{"type_long":"java.io.File","name":"imageFile","comment":"the file to save the image to","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Load an image from a file\n@param imageFile image source-data file\n@return the image, decoded from bytes in specified file\n@throws IOException","static":true,"name":"readFile","comment":"Load an image from a file","params":[{"type_long":"java.io.File","name":"imageFile","comment":"image source-data file","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.awt.image.BufferedImage","comment":"the image, decoded from bytes in specified file","type_short":"BufferedImage"}},{"javadoc":"Writes the given icon out to the file denoted by <tt>filename<\/tt> <b> in the PNG format<\/b>.\n@param icon the icon to write\n@param filename the filename denoting the write destination\n@throws IOException see {@link ImageIO#write(RenderedImage, String, File)}","static":true,"name":"writeIconToPNG","comment":"Writes the given icon out to the file denoted by filename  in the PNG format.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to write","type_short":"Icon"},{"type_long":"java.lang.String","name":"filename","comment":"the filename denoting the write destination","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"see ImageIO#write(RenderedImage, String, File)","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Make the specified icon semi-transparent using the default transparency alpha\n@param icon The icon to make semi-transparent\n@return a new icon, based on the original, made semi-transparent\n@see ImageUtils#DEFAULT_TRANSPARENCY_ALPHA","static":true,"name":"makeTransparent","comment":"Make the specified icon semi-transparent using the default transparency alpha","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"The icon to make semi-transparent","type_short":"Icon"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"a new icon, based on the original, made semi-transparent","type_short":"Icon"}},{"javadoc":"Make the specified icon semi-transparent using the specified transparency alpha\n@param icon the icon to make semi-transparent\n@param alpha the alpha value to use in making the icon transparent\n@return a new icon, based on the original, made semi-transparent","static":true,"name":"makeTransparent","comment":"Make the specified icon semi-transparent using the specified transparency alpha","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to make semi-transparent","type_short":"Icon"},{"type_long":"float","name":"alpha","comment":"the alpha value to use in making the icon transparent","type_short":"float"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"a new icon, based on the original, made semi-transparent","type_short":"Icon"}},{"javadoc":"Creates a scaled image based upon the given image.\n NOTE: Avoid invocation by a static initializer.\n@param image the image to scale\n@param width the new width\n@param height the new height\n@param hints {@link RenderingHints} used by {@link Graphics2D}\n@return a scaled version of the given image","static":true,"name":"createScaledImage","comment":"Creates a scaled image based upon the given image.\n NOTE: Avoid invocation by a static initializer.","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image to scale","type_short":"Image"},{"type_long":"int","name":"width","comment":"the new width","type_short":"int"},{"type_long":"int","name":"height","comment":"the new height","type_short":"int"},{"type_long":"int","name":"hints","comment":"RenderingHints used by Graphics2D","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"a scaled version of the given image","type_short":"Image"}},{"javadoc":"Creates a disabled version of the given image.  The disabled version will be grayed\n and have the varying gray levels blended together.\n@param image the image to disable\n@param brightnessPercent the amount of brightness to apply; 0-100\n@return the new image","static":true,"name":"createDisabledImage","comment":"Creates a disabled version of the given image.  The disabled version will be grayed\n and have the varying gray levels blended together.","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image to disable","type_short":"Image"},{"type_long":"int","name":"brightnessPercent","comment":"the amount of brightness to apply; 0-100","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"the new image","type_short":"Image"}},{"javadoc":"Creates a new image that is the same as the given image but has the given colored \n pixels replaced with the given new color\n@param image the image to change\n@param oldColor the color to replace\n@param newColor the color to use\n@return the new image","static":true,"name":"changeColor","comment":"Creates a new image that is the same as the given image but has the given colored \n pixels replaced with the given new color","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image to change","type_short":"Image"},{"type_long":"java.awt.Color","name":"oldColor","comment":"the color to replace","type_short":"Color"},{"type_long":"java.awt.Color","name":"newColor","comment":"the color to use","type_short":"Color"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"the new image","type_short":"Image"}},{"javadoc":"","static":true,"name":"getMediaTrackerComponent","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"Takes in RGB pixel data and then converts the pixel into a gray color with a brightness\n based upon <tt>brightnessPercent<\/tt>.\n@param rgbPixels The RGB pixel data for a given pixel.\n@param destination The converted pixel data.\n@param brightnessPercent The amount of brightness to include in the gray value, where 100\n        percent is the brightest possible value.\n@return The <tt>destination<\/tt> array filled with the new pixel data.","static":true,"name":"filterRgbDisabledImage","comment":"Takes in RGB pixel data and then converts the pixel into a gray color with a brightness\n based upon brightnessPercent.","params":[{"type_long":"int[]","name":"rgbPixels","comment":"The RGB pixel data for a given pixel.","type_short":"int[]"},{"type_long":"int[]","name":"destination","comment":"The converted pixel data.","type_short":"int[]"},{"type_long":"int","name":"brightnessPercent","comment":"The amount of brightness to include in the gray value, where 100\n        percent is the brightest possible value.","type_short":"int"}],"throws":[],"return":{"type_long":"int[]","comment":"The destination array filled with the new pixel data.","type_short":"int[]"}},{"javadoc":"","static":true,"name":"filterRgbChangeColor","comment":"","params":[{"type_long":"int[]","name":"rgbPixels","comment":"","type_short":"int[]"},{"type_long":"int[]","name":"destination","comment":"","type_short":"int[]"},{"type_long":"int[]","name":"oldRgb","comment":"","type_short":"int[]"},{"type_long":"int[]","name":"newRgb","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}}],"name":"ImageUtils","comment":"","fields":[{"type_long":"float","javadoc":"","static":true,"name":"DEFAULT_TRANSPARENCY_ALPHA","comment":"","type_short":"float","constant_value":"0.4"},{"type_long":"javax.swing.JComponent","javadoc":"A component to pass into the media tracker, as required by the constructor of the \n MediaTracker.","static":true,"name":"mediaTrackerComponent","comment":"A component to pass into the media tracker, as required by the constructor of the \n MediaTracker.","type_short":"JComponent","constant_value":null}]}
