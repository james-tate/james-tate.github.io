{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new parser based over a given  buffer with an array of tokens \n available.","static":false,"name":"<init>","comment":"Creates a new parser based over a given  buffer with an array of tokens \n available.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allocates a fresh unused token from the token pull.","static":false,"name":"allocateToken","comment":"Allocates a fresh unused token from the token pull.","params":[{"type_long":"java.util.List<generic.json.JSONToken>","name":"tokens","comment":"","type_short":"List"},{"type_long":"generic.json.JSONType","name":"type","comment":"","type_short":"JSONType"},{"type_long":"int","name":"start","comment":"","type_short":"int"},{"type_long":"int","name":"end","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"generic.json.JSONToken","comment":"","type_short":"JSONToken"}},{"javadoc":"Fills next available token with JSON primitive.","static":false,"name":"parsePrimitive","comment":"Fills next available token with JSON primitive.","params":[{"type_long":"char[]","name":"js","comment":"","type_short":"char[]"},{"type_long":"java.util.List<generic.json.JSONToken>","name":"tokens","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"generic.json.JSONError","comment":"","type_short":"JSONError"}},{"javadoc":"Filsl next token with JSON string.","static":false,"name":"parseString","comment":"Filsl next token with JSON string.","params":[{"type_long":"char[]","name":"js","comment":"","type_short":"char[]"},{"type_long":"java.util.List<generic.json.JSONToken>","name":"tokens","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"generic.json.JSONError","comment":"","type_short":"JSONError"}},{"javadoc":"Parse JSON string and fill tokens.","static":false,"name":"parse","comment":"Parse JSON string and fill tokens.","params":[{"type_long":"char[]","name":"js","comment":"","type_short":"char[]"},{"type_long":"java.util.List<generic.json.JSONToken>","name":"tokens","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"generic.json.JSONError","comment":"","type_short":"JSONError"}},{"javadoc":"","static":false,"name":"expands","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"convert","comment":"","params":[{"type_long":"char[]","name":"s","comment":"","type_short":"char[]"},{"type_long":"java.util.List<generic.json.JSONToken>","name":"t","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":true,"name":"isxdigit","comment":"","params":[{"type_long":"char","name":"b","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"JSONParser","comment":"","fields":[{"type_long":"boolean","javadoc":"JSON parser. Contains an array of token blocks available. Also stores\n the string being parsed now and current position in that string","static":true,"name":"JSMN_STRICT","comment":"JSON parser. Contains an array of token blocks available. Also stores\n the string being parsed now and current position in that string","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pos","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"toknext","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"toksuper","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"ndx","comment":"","type_short":"int","constant_value":null}]}
