{"implements":["docking.action.MultiActionDockingActionIf"],"javadoc":"A class that supports multiple sub-actions, as well as a primary action.  This is useful for\n actions that perform navigation operations.\n <p>\n Clients may add actions to this class with the intention that they will be accessible\n to the user via a GUI; for example, from a popup menu.\n <p>\n Actions added must have menu bar data set.\n\n <p>This action has a drop-down button that shows a popup menu of all available actions for\n the user to execute.\n\n <p>\n If the user executes this action directly, then\n {@link #actionPerformed(ActionContext)} will be called.   Otherwise, the\n {@link DockingAction#actionPerformed(ActionContext)} method of the sub-action\n that was executed will be called.\n@see MultiStateDockingAction","static":false,"extends":"docking.action.DockingAction","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"owner","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setActions","comment":"","params":[{"type_long":"java.util.List<docking.action.DockingActionIf>","name":"actionList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActionList","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"java.util.List<docking.action.DockingActionIf>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"doCreateButton","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"","type_short":"JButton"}},{"javadoc":"By default a click on this action will trigger <tt>actionPerformed()<\/tt> to be called.\n You can call this method to disable that feature.  When called with <tt>false<\/tt>, this\n method will effectively let the user click anywhere on the button or its drop-down arrow\n to show the popup menu.  During normal operation, the user can only show the popup by\n clicking the drop-down arrow.\n@param performActionOnButtonClick if true, pressing the button calls actionPerformed;\n otherwise it pops up the menu.","static":false,"name":"setPerformActionOnButtonClick","comment":"By default a click on this action will trigger actionPerformed() to be called.\n You can call this method to disable that feature.  When called with false, this\n method will effectively let the user click anywhere on the button or its drop-down arrow\n to show the popup menu.  During normal operation, the user can only show the popup by\n clicking the drop-down arrow.","params":[{"type_long":"boolean","name":"performActionOnButtonClick","comment":"if true, pressing the button calls actionPerformed;\n otherwise it pops up the menu.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"createSeparator","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.DockingActionIf","comment":"","type_short":"DockingActionIf"}},{"javadoc":"","static":false,"name":"isEnabledForContext","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"MultiActionDockingAction","comment":"A class that supports multiple sub-actions, as well as a primary action.  This is useful for\n actions that perform navigation operations.\n \n Clients may add actions to this class with the intention that they will be accessible\n to the user via a GUI; for example, from a popup menu.\n \n Actions added must have menu bar data set.\n\n This action has a drop-down button that shows a popup menu of all available actions for\n the user to execute.\n\n \n If the user executes this action directly, then\n #actionPerformed(ActionContext) will be called.   Otherwise, the\n DockingAction#actionPerformed(ActionContext) method of the sub-action\n that was executed will be called.","fields":[{"type_long":"java.util.List<docking.action.DockingActionIf>","javadoc":"","static":false,"name":"actionList","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"performActionOnButtonClick","comment":"","type_short":"boolean","constant_value":null}]}
