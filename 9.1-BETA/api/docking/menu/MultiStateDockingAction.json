{"implements":[],"javadoc":"An action that can be in one of multiple states.   The button of this action has a \n drop-down icon that allows users to change the state of the button.  Also, by default, as\n the user presses the button, it will execute the action corresponding to the current \n state.\n \n <p>Warning: if you use this action in a toolbar, then be sure to call the \n {@link #MultiStateDockingAction(String, String, boolean) correct constructor}.  If you call\n another constructor, or pass false for this boolean above, your \n {@link #doActionPerformed(ActionContext)} method will get called twice.\n@param <T> the type of the user data\n@see MultiActionDockingAction","static":false,"extends":"docking.action.DockingAction","methods":[{"javadoc":"Call this constructor with this action will not be added to a toolbar\n@param name the action name\n@param owner the owner\n@see #MultiStateDockingAction(String, String, boolean)","static":false,"name":"<init>","comment":"Call this constructor with this action will not be added to a toolbar","params":[{"type_long":"java.lang.String","name":"name","comment":"the action name","type_short":"String"},{"type_long":"java.lang.String","name":"owner","comment":"the owner","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Use this constructor explicitly when this action is used in a toolbar, passing true \n for <code>isToolbarAction<\/code> (see the javadoc header note).\n@param name the action name\n@param owner the owner\n@param isToolbarAction true if this action is a toolbar action","static":false,"name":"<init>","comment":"Use this constructor explicitly when this action is used in a toolbar, passing true \n for isToolbarAction (see the javadoc header note).","params":[{"type_long":"java.lang.String","name":"name","comment":"the action name","type_short":"String"},{"type_long":"java.lang.String","name":"owner","comment":"the owner","type_short":"String"},{"type_long":"boolean","name":"isToolbarAction","comment":"true if this action is a toolbar action","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"actionStateChanged","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"newActionState","comment":"","type_short":"ActionState"},{"type_long":"docking.widgets.EventTrigger","name":"trigger","comment":"","type_short":"EventTrigger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If <tt>doPerformAction<\/tt> is <tt>true<\/tt>, then, when the user clicks the\n button and not the drop-down arrow, the {@link #doActionPerformed(ActionContext)}\n method will be called.  If <tt>doPerformAction<\/tt> is <tt>false<\/tt>, then, when\n the user clicks the button and not the drop-down arrow, the popup menu will be shown, just\n as if the user had clicked the drop-down arrow.\n <p>\n Also, if the parameter is true, then the button will behave like a button in terms of\n mouse feedback.  If false, then the button will behave more like a label.\n@param doPerformAction true to call {@link #doActionPerformed(ActionContext)} when the\n        user presses the button for this action (not the drop-down menu; see above)","static":false,"name":"setPerformActionOnPrimaryButtonClick","comment":"If doPerformAction is true, then, when the user clicks the\n button and not the drop-down arrow, the #doActionPerformed(ActionContext)\n method will be called.  If doPerformAction is false, then, when\n the user clicks the button and not the drop-down arrow, the popup menu will be shown, just\n as if the user had clicked the drop-down arrow.\n \n Also, if the parameter is true, then the button will behave like a button in terms of\n mouse feedback.  If false, then the button will behave more like a label.","params":[{"type_long":"boolean","name":"doPerformAction","comment":"true to call #doActionPerformed(ActionContext) when the\n        user presses the button for this action (not the drop-down menu; see above)","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"actionPerformed","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is the callback to be overridden when the child wishes to respond to user button\n presses that are on the button and not the drop-down.  This will only be called if\n {@link #performActionOnPrimaryButtonClick} is true.\n@param context the action context","static":false,"name":"doActionPerformed","comment":"This is the callback to be overridden when the child wishes to respond to user button\n presses that are on the button and not the drop-down.  This will only be called if\n #performActionOnPrimaryButtonClick is true.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the action context","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActionContext","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"","type_short":"ActionContext"}},{"javadoc":"","static":false,"name":"getStateActions","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.action.DockingActionIf>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"setGroup","comment":"","params":[{"type_long":"java.lang.String","name":"group","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSubGroup","comment":"","params":[{"type_long":"java.lang.String","name":"subGroup","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addActionState","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"actionState","comment":"","type_short":"ActionState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setActionStates","comment":"","params":[{"type_long":"java.util.List<docking.menu.ActionState<T>>","name":"newStates","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCurrentUserData","comment":"","params":[],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"getCurrentState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.menu.ActionState<T>","comment":"","type_short":"ActionState"}},{"javadoc":"","static":false,"name":"getAllActionStates","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.menu.ActionState<T>>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"setCurrentActionStateByUserData","comment":"","params":[{"type_long":"T","name":"t","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCurrentActionState","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"actionState","comment":"","type_short":"ActionState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCurrentActionStateWithTrigger","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"actionState","comment":"","type_short":"ActionState"},{"type_long":"docking.widgets.EventTrigger","name":"trigger","comment":"","type_short":"EventTrigger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getIcon","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"actionState","comment":"","type_short":"ActionState"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"","type_short":"Icon"}},{"javadoc":"","static":false,"name":"doCreateButton","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"","type_short":"JButton"}},{"javadoc":"","static":false,"name":"setButtonState","comment":"","params":[{"type_long":"docking.menu.ActionState<T>","name":"actionState","comment":"","type_short":"ActionState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMenuBarData","comment":"","params":[{"type_long":"docking.action.MenuData","name":"newMenuData","comment":"","type_short":"MenuData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"superSetMenuBarData","comment":"","params":[{"type_long":"docking.action.MenuData","name":"newMenuData","comment":"","type_short":"MenuData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPopupMenuData","comment":"","params":[{"type_long":"docking.action.MenuData","name":"newMenuData","comment":"","type_short":"MenuData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTooTipText","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"MultiStateDockingAction","comment":"An action that can be in one of multiple states.   The button of this action has a \n drop-down icon that allows users to change the state of the button.  Also, by default, as\n the user presses the button, it will execute the action corresponding to the current \n state.\n \n Warning: if you use this action in a toolbar, then be sure to call the \n #MultiStateDockingAction(String, String, boolean).  If you call\n another constructor, or pass false for this boolean above, your \n #doActionPerformed(ActionContext) method will get called twice.","fields":[{"type_long":"javax.swing.Icon","javadoc":"","static":true,"name":"EMPTY_ICON","comment":"","type_short":"Icon","constant_value":null},{"type_long":"java.util.List<docking.menu.ActionState<T>>","javadoc":"","static":false,"name":"actionStates","comment":"","type_short":"List","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"currentStateIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"docking.action.MultiActionDockingActionIf","javadoc":"","static":false,"name":"multiActionGenerator","comment":"","type_short":"MultiActionDockingActionIf","constant_value":null},{"type_long":"docking.menu.MultipleActionDockingToolbarButton","javadoc":"","static":false,"name":"multipleButton","comment":"","type_short":"MultipleActionDockingToolbarButton","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"performActionOnPrimaryButtonClick","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.awt.event.ActionListener","javadoc":"","static":false,"name":"clickListener","comment":"","type_short":"ActionListener","constant_value":null}]}
