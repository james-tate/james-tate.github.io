{"implements":[],"javadoc":"Interface to define a drag source.","static":false,"methods":[{"javadoc":"Return true if the object at the location in the DragGesture \n event is draggable.\n@param e event passed to a DragGestureListener via its \n dragGestureRecognized() method when a particular DragGestureRecognizer \n detects a platform dependent Drag and Drop action initiating \n gesture has occurred on the Component it is tracking.\n@see docking.dnd.DragGestureAdapter","static":false,"name":"isStartDragOk","comment":"Return true if the object at the location in the DragGesture \n event is draggable.","params":[{"type_long":"java.awt.dnd.DragGestureEvent","name":"e","comment":"event passed to a DragGestureListener via its \n dragGestureRecognized() method when a particular DragGestureRecognizer \n detects a platform dependent Drag and Drop action initiating \n gesture has occurred on the Component it is tracking.","type_short":"DragGestureEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Called by the DragGestureAdapter to start the drag.","static":false,"name":"getDragSourceListener","comment":"Called by the DragGestureAdapter to start the drag.","params":[],"throws":[],"return":{"type_long":"java.awt.dnd.DragSourceListener","comment":"","type_short":"DragSourceListener"}},{"javadoc":"Do the move operation; called when the drag and drop operation\n completes.\n@see docking.dnd.DragSrcAdapter#dragDropEnd","static":false,"name":"move","comment":"Do the move operation; called when the drag and drop operation\n completes.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Method called when the drag operation exits the drop target \n without dropping.\n@param event TODO","static":false,"name":"dragCanceled","comment":"Method called when the drag operation exits the drop target \n without dropping.","params":[{"type_long":"java.awt.dnd.DragSourceDropEvent","name":"event","comment":"TODO","type_short":"DragSourceDropEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the drag actions supported by this drag source:\n <UL>\n <li>DnDConstants.ACTION_MOVE\n <li>DnDConstants.ACTION_COPY\n <li>DnDConstants.ACTION_COPY_OR_MOVE\n <\/li>\n@return the drag actions","static":false,"name":"getDragAction","comment":"Get the drag actions supported by this drag source:\n \n DnDConstants.ACTION_MOVE\n DnDConstants.ACTION_COPY\n DnDConstants.ACTION_COPY_OR_MOVE\n ","params":[],"throws":[],"return":{"type_long":"int","comment":"the drag actions","type_short":"int"}},{"javadoc":"Get the object to transfer.\n@param p location of object to transfer\n@return object to transfer","static":false,"name":"getTransferable","comment":"Get the object to transfer.","params":[{"type_long":"java.awt.Point","name":"p","comment":"location of object to transfer","type_short":"Point"}],"throws":[],"return":{"type_long":"java.awt.datatransfer.Transferable","comment":"object to transfer","type_short":"Transferable"}}],"name":"Draggable","comment":"Interface to define a drag source.","fields":[]}
