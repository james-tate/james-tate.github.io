{"implements":["java.awt.dnd.DropTargetListener"],"javadoc":"Class to handle notifications of drag and drop operations that occur\n on the DropTarget object. The DropTarget is the component that accepts\n drops during a drag and drop operation. The <tt>drop<\/tt>\n method actually transfers the data.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param dropComponent the drop target\n@param acceptableDropActions a DnDConstants variable that defines\n dnd actions\n@param acceptableDropFlavors acceptable data formats that the drop\n target can handle","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"docking.dnd.Droppable","name":"dropComponent","comment":"the drop target","type_short":"Droppable"},{"type_long":"int","name":"acceptableDropActions","comment":"a DnDConstants variable that defines\n dnd actions","type_short":"int"},{"type_long":"java.awt.datatransfer.DataFlavor[]","name":"acceptableDropFlavors","comment":"acceptable data formats that the drop\n target can handle","type_short":"java.awt.datatransfer.DataFlavor[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the data flavors acceptable to the associated drop target.\n@param dropFlavors","static":false,"name":"setAcceptableDropFlavors","comment":"Set the data flavors acceptable to the associated drop target.","params":[{"type_long":"java.awt.datatransfer.DataFlavor[]","name":"dropFlavors","comment":"","type_short":"java.awt.datatransfer.DataFlavor[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"DropTargetListener method called when the drag operation encounters\n the drop target.\n@param e event that has current state of drag and drop operation","static":false,"name":"dragEnter","comment":"DropTargetListener method called when the drag operation encounters\n the drop target.","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetDragEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"DropTargetListener method called when the drag operation is over\n the drop target.\n@param e event that has current state of drag and drop operation","static":false,"name":"dragOver","comment":"DropTargetListener method called when the drag operation is over\n the drop target.","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetDragEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"DropTargetListener method called when the\n drag operation exits the drop target without dropping.  However,\n this method is also called even when the drop completes.\n@param e event that has current state of drag and drop operation","static":false,"name":"dragExit","comment":"DropTargetListener method called when the\n drag operation exits the drop target without dropping.  However,\n this method is also called even when the drop completes.","params":[{"type_long":"java.awt.dnd.DropTargetEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"DropTargetListener method called when the user modifies the\n drag action.\n@param e event that has current state of drag and drop operation","static":false,"name":"dropActionChanged","comment":"DropTargetListener method called when the user modifies the\n drag action.","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetDragEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"DropTargetListener method called when the drag operation terminates and\n drops onto the drop target.\n@param e event that has current state of drag and drop operation","static":false,"name":"drop","comment":"DropTargetListener method called when the drag operation terminates and\n drops onto the drop target.","params":[{"type_long":"java.awt.dnd.DropTargetDropEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetDropEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the drop operation is OK. A drop is deemed to be okay if\n <br> 1. the drop target accepts one of the data flavors that the event's transferrable provides.\n <br> 2. the drop action (i.e. COPY, MOVE, etc.) is accepted by the target.\n <br> 3. the drop is accepted by the Droppable component.\n@param e event that has current state of drag and drop operation","static":false,"name":"isDropOk","comment":"Returns true if the drop operation is OK. A drop is deemed to be okay if\n  1. the drop target accepts one of the data flavors that the event's transferrable provides.\n  2. the drop action (i.e. COPY, MOVE, etc.) is accepted by the target.\n  3. the drop is accepted by the Droppable component.","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"event that has current state of drag and drop operation","type_short":"DropTargetDragEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the drop target can accept the data\n flavor that is to be dropped.","static":false,"name":"isDragFlavorSupported","comment":"Returns true if the drop target can accept the data\n flavor that is to be dropped.","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"","type_short":"DropTargetDragEvent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"getFirstMatchingFlavor","comment":"","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"","type_short":"DropTargetDragEvent"},{"type_long":"java.awt.datatransfer.DataFlavor[]","name":"acceptableFlavors","comment":"","type_short":"java.awt.datatransfer.DataFlavor[]"}],"throws":[],"return":{"type_long":"java.awt.datatransfer.DataFlavor","comment":"","type_short":"DataFlavor"}},{"javadoc":"","static":true,"name":"getAllMatchingFlavors","comment":"","params":[{"type_long":"java.awt.dnd.DropTargetDragEvent","name":"e","comment":"","type_short":"DropTargetDragEvent"},{"type_long":"java.awt.datatransfer.DataFlavor[]","name":"acceptableFlavors","comment":"","type_short":"java.awt.datatransfer.DataFlavor[]"}],"throws":[],"return":{"type_long":"java.awt.datatransfer.DataFlavor[]","comment":"","type_short":"java.awt.datatransfer.DataFlavor[]"}}],"name":"DropTgtAdapter","comment":"Class to handle notifications of drag and drop operations that occur\n on the DropTarget object. The DropTarget is the component that accepts\n drops during a drag and drop operation. The drop\n method actually transfers the data.","fields":[{"type_long":"docking.dnd.Droppable","javadoc":"","static":false,"name":"dropComponent","comment":"","type_short":"Droppable","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"dropActions","comment":"","type_short":"int","constant_value":null},{"type_long":"java.awt.datatransfer.DataFlavor[]","javadoc":"","static":false,"name":"dropFlavors","comment":"","type_short":"java.awt.datatransfer.DataFlavor[]","constant_value":null}]}
