{"implements":[],"javadoc":"Interface to define methods that control what panel is displayed in a\n wizard.","static":false,"methods":[{"javadoc":"Return true if the \"finish\" step can be completed.\n@return boolean true if ok to finish","static":false,"name":"canFinish","comment":"Return true if the \"finish\" step can be completed.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if ok to finish","type_short":"boolean"}},{"javadoc":"Return true if there is a \"next\" panel.\n@return boolean true means there is a next panel to display","static":false,"name":"hasNextPanel","comment":"Return true if there is a \"next\" panel.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true means there is a next panel to display","type_short":"boolean"}},{"javadoc":"Return true if there is a \"previous\" panel.\n@return boolean true means there is a previous panel to display","static":false,"name":"hasPreviousPanel","comment":"Return true if there is a \"previous\" panel.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true means there is a previous panel to display","type_short":"boolean"}},{"javadoc":"Get the next panel in the process.\n@return WizardPanel the next panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs","static":false,"name":"getNextPanel","comment":"Get the next panel in the process.","params":[],"throws":[{"type_long":"docking.wizard.IllegalPanelStateException","comment":"if an IOException or other unexpected error occurs","type_short":"IllegalPanelStateException"}],"return":{"type_long":"docking.wizard.WizardPanel","comment":"WizardPanel the next panel","type_short":"WizardPanel"}},{"javadoc":"Get the first panel in the process.\n@return WizardPanel the first panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs","static":false,"name":"getInitialPanel","comment":"Get the first panel in the process.","params":[],"throws":[{"type_long":"docking.wizard.IllegalPanelStateException","comment":"if an IOException or other unexpected error occurs","type_short":"IllegalPanelStateException"}],"return":{"type_long":"docking.wizard.WizardPanel","comment":"WizardPanel the first panel","type_short":"WizardPanel"}},{"javadoc":"Get the previous panel in the process.\n@return WizardPanel the previous panel\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs","static":false,"name":"getPreviousPanel","comment":"Get the previous panel in the process.","params":[],"throws":[{"type_long":"docking.wizard.IllegalPanelStateException","comment":"if an IOException or other unexpected error occurs","type_short":"IllegalPanelStateException"}],"return":{"type_long":"docking.wizard.WizardPanel","comment":"WizardPanel the previous panel","type_short":"WizardPanel"}},{"javadoc":"Get the status message for the current panel.\n@return String message to display;\n                may be null if there is no message that should be displayed","static":false,"name":"getStatusMessage","comment":"Get the status message for the current panel.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"String message to display;\n                may be null if there is no message that should be displayed","type_short":"String"}},{"javadoc":"Method called when the user wants to finish the process.\n@throws IllegalPanelStateException if an IOException or other unexpected error occurs","static":false,"name":"finish","comment":"Method called when the user wants to finish the process.","params":[],"throws":[{"type_long":"docking.wizard.IllegalPanelStateException","comment":"if an IOException or other unexpected error occurs","type_short":"IllegalPanelStateException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Method called when the user wants to cancel the process.","static":false,"name":"cancel","comment":"Method called when the user wants to cancel the process.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set up the panel process.","static":false,"name":"initialize","comment":"Set up the panel process.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the size of the panels.\n@return Dimension size of the panel","static":false,"name":"getPanelSize","comment":"Get the size of the panels.","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"Dimension size of the panel","type_short":"Dimension"}},{"javadoc":"Set the wizard manager for this panel manager.\n@param wm wizard manager that calls the methods on this panel \n manager","static":false,"name":"setWizardManager","comment":"Set the wizard manager for this panel manager.","params":[{"type_long":"docking.wizard.WizardManager","name":"wm","comment":"wizard manager that calls the methods on this panel \n manager","type_short":"WizardManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the wizard manager.\n@return WizardManager wizard manager for this panel manager","static":false,"name":"getWizardManager","comment":"Get the wizard manager.","params":[],"throws":[],"return":{"type_long":"docking.wizard.WizardManager","comment":"WizardManager wizard manager for this panel manager","type_short":"WizardManager"}}],"name":"PanelManager","comment":"Interface to define methods that control what panel is displayed in a\n wizard.","fields":[]}
