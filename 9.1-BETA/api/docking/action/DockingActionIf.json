{"implements":["docking.help.HelpDescriptor"],"javadoc":"The base interface for clients that wish to create commands to be registered with a tool.\n \n <p>An action may appear in a primary menu, a popup menu or a toolbar.   Further, an action \n may have a key binding assigned.\n \n <p>The particular support for key bindings is defined by {@link KeyBindingType}.   Almost all\n client actions will use the default setting of {@link KeyBindingType#INDIVIDUAL}.   To control\n the level of key binding support, you can pass the desired {@link KeyBindingType} to the\n base implementation of this interface.","static":false,"methods":[{"javadoc":"Returns the name of the action\n@return the name","static":false,"name":"getName","comment":"Returns the name of the action","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name","type_short":"String"}},{"javadoc":"Returns the owner of this action\n@return the owner","static":false,"name":"getOwner","comment":"Returns the owner of this action","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the owner","type_short":"String"}},{"javadoc":"Returns a description of this actions owner.  For most actions this will return the \n same value as {@link #getOwner()}.\n@return the description","static":false,"name":"getOwnerDescription","comment":"Returns a description of this actions owner.  For most actions this will return the \n same value as #getOwner().","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the description","type_short":"String"}},{"javadoc":"Returns a short description of this action. Generally used for a tooltip\n@return the description","static":false,"name":"getDescription","comment":"Returns a short description of this action. Generally used for a tooltip","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the description","type_short":"String"}},{"javadoc":"Adds a listener to be notified if any property changes\n@param listener The property change listener that will be notified of\n        property change events.\n@see Action#addPropertyChangeListener(java.beans.PropertyChangeListener)","static":false,"name":"addPropertyChangeListener","comment":"Adds a listener to be notified if any property changes","params":[{"type_long":"java.beans.PropertyChangeListener","name":"listener","comment":"The property change listener that will be notified of\n        property change events.","type_short":"PropertyChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes a listener to be notified of property changes.\n@param listener The property change listener that will be notified of\n        property change events.\n@see #addPropertyChangeListener(PropertyChangeListener)\n@see Action#addPropertyChangeListener(java.beans.PropertyChangeListener)","static":false,"name":"removePropertyChangeListener","comment":"Removes a listener to be notified of property changes.","params":[{"type_long":"java.beans.PropertyChangeListener","name":"listener","comment":"The property change listener that will be notified of\n        property change events.","type_short":"PropertyChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Enables or disables the action\n@param newValue true to enable the action, false to disable it\n@return the enabled value of the action after this call","static":false,"name":"setEnabled","comment":"Enables or disables the action","params":[{"type_long":"boolean","name":"newValue","comment":"true to enable the action, false to disable it","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"the enabled value of the action after this call","type_short":"boolean"}},{"javadoc":"Returns true if the action is enabled.\n@return true if the action is enabled, false otherwise","static":false,"name":"isEnabled","comment":"Returns true if the action is enabled.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the action is enabled, false otherwise","type_short":"boolean"}},{"javadoc":"Returns the {@link MenuData} to be used to put this action in the menu bar.  The MenuData will be\n null if the action in not set to be in the menu bar.\n@return the {@link MenuData} for the menu bar or null if the action is not in the menu bar.","static":false,"name":"getMenuBarData","comment":"Returns the MenuData to be used to put this action in the menu bar.  The MenuData will be\n null if the action in not set to be in the menu bar.","params":[],"throws":[],"return":{"type_long":"docking.action.MenuData","comment":"the MenuData for the menu bar or null if the action is not in the menu bar.","type_short":"MenuData"}},{"javadoc":"Returns the {@link MenuData} to be used to put this action in a popup menu.  The MenuData will be\n null if the action in not set to be in a popup menu.\n@return the {@link MenuData} for a popup menu or null if the action is not to be in a popup menu.","static":false,"name":"getPopupMenuData","comment":"Returns the MenuData to be used to put this action in a popup menu.  The MenuData will be\n null if the action in not set to be in a popup menu.","params":[],"throws":[],"return":{"type_long":"docking.action.MenuData","comment":"the MenuData for a popup menu or null if the action is not to be in a popup menu.","type_short":"MenuData"}},{"javadoc":"Returns the {@link ToolBarData} to be used to put this action in a toolbar.  The ToolBarData will be\n null if the action in not set to be in a tool bar.\n@return the {@link ToolBarData} for the popup menu or null if the action is not in a popup menu.","static":false,"name":"getToolBarData","comment":"Returns the ToolBarData to be used to put this action in a toolbar.  The ToolBarData will be\n null if the action in not set to be in a tool bar.","params":[],"throws":[],"return":{"type_long":"docking.action.ToolBarData","comment":"the ToolBarData for the popup menu or null if the action is not in a popup menu.","type_short":"ToolBarData"}},{"javadoc":"Returns the {@link KeyBindingData} to be used to assign this action to a key binding.  The \n KeyBindingData will be null if the action is not set to have a keyBinding.\n@return the {@link KeyBindingData} for the action or null if the action does not have a keyBinding.","static":false,"name":"getKeyBindingData","comment":"Returns the KeyBindingData to be used to assign this action to a key binding.  The \n KeyBindingData will be null if the action is not set to have a keyBinding.","params":[],"throws":[],"return":{"type_long":"docking.action.KeyBindingData","comment":"the KeyBindingData for the action or null if the action does not have a keyBinding.","type_short":"KeyBindingData"}},{"javadoc":"Returns the default {@link KeyBindingData} to be used to assign this action to a \n key binding.  The KeyBindingData will be null if the action is not set to have a keyBinding.\n The value of this method is that which is set from a call to \n {@link #setKeyBindingData(KeyBindingData)}.\n@return the {@link KeyBindingData} for the action or null if the action does not have a keyBinding.","static":false,"name":"getDefaultKeyBindingData","comment":"Returns the default KeyBindingData to be used to assign this action to a \n key binding.  The KeyBindingData will be null if the action is not set to have a keyBinding.\n The value of this method is that which is set from a call to \n #setKeyBindingData(KeyBindingData).","params":[],"throws":[],"return":{"type_long":"docking.action.KeyBindingData","comment":"the KeyBindingData for the action or null if the action does not have a keyBinding.","type_short":"KeyBindingData"}},{"javadoc":"Convenience method for getting the keybinding for this action.\n@return the {@link KeyStroke} to be used as a keybinding for this action or null if there is no","static":false,"name":"getKeyBinding","comment":"Convenience method for getting the keybinding for this action.","params":[],"throws":[],"return":{"type_long":"javax.swing.KeyStroke","comment":"the KeyStroke to be used as a keybinding for this action or null if there is no","type_short":"KeyStroke"}},{"javadoc":"Returns the full name (the action name combined with the owner name)\n@return the full name","static":false,"name":"getFullName","comment":"Returns the full name (the action name combined with the owner name)","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the full name","type_short":"String"}},{"javadoc":"method to actually perform the action logic for this action.\n@param context the {@link ActionContext} object that provides information about where and how\n this action was invoked.","static":false,"name":"actionPerformed","comment":"method to actually perform the action logic for this action.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the ActionContext object that provides information about where and how\n this action was invoked.","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"method is used to determine if this action should be displayed on the current popup.  This \n method will only be called if the action has popup {@link PopupMenuData} set.\n <p>\n Generally, actions don't need to override this method as the default implementation will \n defer to the {@link #isEnabledForContext(ActionContext)}, which will have the effect \n of adding the action to the popup only if it is enabled for a given context.  \n By overriding this method,\n you can change this behavior so that the action will be added to the popup, even if it is\n disabled for the context, by having this method return true even if the \n {@link #isEnabledForContext(ActionContext)} method will return false, resulting in the \n action appearing in the popup menu, but begin disabled.\n@param context the {@link ActionContext} from the active provider.\n@return true if this action is appropriate for the given context.","static":false,"name":"isAddToPopup","comment":"method is used to determine if this action should be displayed on the current popup.  This \n method will only be called if the action has popup PopupMenuData set.\n \n Generally, actions don't need to override this method as the default implementation will \n defer to the #isEnabledForContext(ActionContext), which will have the effect \n of adding the action to the popup only if it is enabled for a given context.  \n By overriding this method,\n you can change this behavior so that the action will be added to the popup, even if it is\n disabled for the context, by having this method return true even if the \n #isEnabledForContext(ActionContext) method will return false, resulting in the \n action appearing in the popup menu, but begin disabled.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the ActionContext from the active provider.","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this action is appropriate for the given context.","type_short":"boolean"}},{"javadoc":"Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given context.  This method is used\n to determine if the action should be enabled based on the either the local context or the\n global context.  The action is first asked if it is valid for the local context and if not,\n then it is asked if it is valid for the global context.  If a context is valid, then it will\n then be asked if it is enabled for that context.\n@param context the {@link ActionContext} from the active provider.\n@return true if this action is appropriate for the given context.","static":false,"name":"isValidContext","comment":"Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given context.  This method is used\n to determine if the action should be enabled based on the either the local context or the\n global context.  The action is first asked if it is valid for the local context and if not,\n then it is asked if it is valid for the global context.  If a context is valid, then it will\n then be asked if it is enabled for that context.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the ActionContext from the active provider.","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this action is appropriate for the given context.","type_short":"boolean"}},{"javadoc":"Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given global context.  This method is just like the isValidContext\n and in fact calls that method by default.  Many actions will work with either the active\n provider context or the global (the main listing) context if the local context is not valid.\n If you want a global action to only work on the global context, then override this method\n and return false.\n@param globalContext the global {@link ActionContext} from the active provider.\n@return true if this action is appropriate for the given context.","static":false,"name":"isValidGlobalContext","comment":"Method that actions implement to indicate if this action is valid (knows how to work with, is\n appropriate for) for the given global context.  This method is just like the isValidContext\n and in fact calls that method by default.  Many actions will work with either the active\n provider context or the global (the main listing) context if the local context is not valid.\n If you want a global action to only work on the global context, then override this method\n and return false.","params":[{"type_long":"docking.ActionContext","name":"globalContext","comment":"the global ActionContext from the active provider.","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this action is appropriate for the given context.","type_short":"boolean"}},{"javadoc":"Method used to determine if this action should be enabled for the given context.  \n <p>\n <b>This is the method implementors override to control when the action may be used.<\/b>\n <p>\n This method\n will be called by the DockingWindowManager for actions on the global menuBar and toolBar\n and for actions that have a keyBinding. \n <p>\n This method will be called whenever\n one of the following events occur: \n <ol>\n    <li>when the user invokes the action via its keyBinding,<\/li>\n    <li>the user changes focus from one component provider to another,<\/li>  \n \t  <li>the user moves a component to another position in the window or into another window,<\/li> \n    <li>a component provider reports a change in it's context,<\/li> \n    <li>any plugin or software component reports a general change in context (calls the \n tool.contextChanged(ComponentProvider) with a null parameter).<\/li>\n <\/ol>\n  The default implementation will simply return this action's enablement state.\n@param context the current {@link ActionContext} for the window.\n@return true if the action should be enabled for the context or false otherwise.","static":false,"name":"isEnabledForContext","comment":"Method used to determine if this action should be enabled for the given context.  \n \n This is the method implementors override to control when the action may be used.\n \n This method\n will be called by the DockingWindowManager for actions on the global menuBar and toolBar\n and for actions that have a keyBinding. \n \n This method will be called whenever\n one of the following events occur: \n \n    when the user invokes the action via its keyBinding,\n    the user changes focus from one component provider to another,  \n \t  the user moves a component to another position in the window or into another window, \n    a component provider reports a change in it's context, \n    any plugin or software component reports a general change in context (calls the \n tool.contextChanged(ComponentProvider) with a null parameter).\n \n  The default implementation will simply return this action's enablement state.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the current ActionContext for the window.","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the action should be enabled for the context or false otherwise.","type_short":"boolean"}},{"javadoc":"Returns a string that includes source file and line number information of where \n this action was created\n@return the inception information","static":false,"name":"getInceptionInformation","comment":"Returns a string that includes source file and line number information of where \n this action was created","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the inception information","type_short":"String"}},{"javadoc":"Returns a JButton that is suitable for this action.  For example, It creates a ToggleButton\n if the action is a {@link ToggleDockingActionIf}.\n@return a JButton to be used in a toolbar or null if the action does not have ToolBarData set.","static":false,"name":"createButton","comment":"Returns a JButton that is suitable for this action.  For example, It creates a ToggleButton\n if the action is a ToggleDockingActionIf.","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"a JButton to be used in a toolbar or null if the action does not have ToolBarData set.","type_short":"JButton"}},{"javadoc":"Returns a JMenuItem that is suitable for this action.  For example, if the action is a \n {@link ToggleDockingActionIf}, then a JCheckBoxMenuItem will be created.\n@param isPopup true if the action should use its Popup MenuData, else it uses the MenuBar MenuData.\n@return a JMenuItem for placement in either the menu bar or a popup menu.","static":false,"name":"createMenuItem","comment":"Returns a JMenuItem that is suitable for this action.  For example, if the action is a \n ToggleDockingActionIf, then a JCheckBoxMenuItem will be created.","params":[{"type_long":"boolean","name":"isPopup","comment":"true if the action should use its Popup MenuData, else it uses the MenuBar MenuData.","type_short":"boolean"}],"throws":[],"return":{"type_long":"javax.swing.JMenuItem","comment":"a JMenuItem for placement in either the menu bar or a popup menu.","type_short":"JMenuItem"}},{"javadoc":"Determines whether this action should be added to a window (either the main window or a\n secondary detached window).  By default, this method will return true for the main window\n and false otherwise.  Actions that want to also appear in other windows should override this\n method to return true when appropriate for the context types\n@param isMainWindow true if the window in question is the main window. Otherwise, the window\n is a secondary window.\n@param contextTypes a list of contextTypes (Classes) based on the providers that are currently\n in the window.\n@return true if this action should be added to the window, false otherwise.","static":false,"name":"shouldAddToWindow","comment":"Determines whether this action should be added to a window (either the main window or a\n secondary detached window).  By default, this method will return true for the main window\n and false otherwise.  Actions that want to also appear in other windows should override this\n method to return true when appropriate for the context types","params":[{"type_long":"boolean","name":"isMainWindow","comment":"true if the window in question is the main window. Otherwise, the window\n is a secondary window.","type_short":"boolean"},{"type_long":"java.util.Set<java.lang.Class<?>>","name":"contextTypes","comment":"a list of contextTypes (Classes) based on the providers that are currently\n in the window.","type_short":"Set"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this action should be added to the window, false otherwise.","type_short":"boolean"}},{"javadoc":"Returns this actions level of support for key binding accelerator keys\n \n <p>Actions support key bindings by default.  Some reserved actions do not support \n key bindings, while others wish to share the same key bindings with multiple, equivalent\n actions (this allows the user to set one binding that works in many different contexts).\n@return the key binding support","static":false,"name":"getKeyBindingType","comment":"Returns this actions level of support for key binding accelerator keys\n \n Actions support key bindings by default.  Some reserved actions do not support \n key bindings, while others wish to share the same key bindings with multiple, equivalent\n actions (this allows the user to set one binding that works in many different contexts).","params":[],"throws":[],"return":{"type_long":"docking.action.KeyBindingType","comment":"the key binding support","type_short":"KeyBindingType"}},{"javadoc":"Sets the {@link KeyBindingData} on an action to either assign a keybinding or remove it\n  (keyBindingData = null).\n@param keyBindingData if non-null, assigns a keybinding to the action. Otherwise, removes\n any keybinding from the action.","static":false,"name":"setKeyBindingData","comment":"Sets the KeyBindingData on an action to either assign a keybinding or remove it\n  (keyBindingData = null).","params":[{"type_long":"docking.action.KeyBindingData","name":"keyBindingData","comment":"if non-null, assigns a keybinding to the action. Otherwise, removes\n any keybinding from the action.","type_short":"KeyBindingData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<b>Users creating actions should not call this method, but should instead call\n {@link #setKeyBindingData(KeyBindingData)}.<\/b>\n <p>\n Call this method when you wish to bypass the validation of \n {@link #setKeyBindingData(KeyBindingData)} so that keybindings are set exactly as they\n are given (such as when set by the user and not by the programmer).\n@param newKeyBindingData the KeyBindingData to be used to assign this action to a keybinding","static":false,"name":"setUnvalidatedKeyBindingData","comment":"Users creating actions should not call this method, but should instead call\n #setKeyBindingData(KeyBindingData).\n \n Call this method when you wish to bypass the validation of \n #setKeyBindingData(KeyBindingData) so that keybindings are set exactly as they\n are given (such as when set by the user and not by the programmer).","params":[{"type_long":"docking.action.KeyBindingData","name":"newKeyBindingData","comment":"the KeyBindingData to be used to assign this action to a keybinding","type_short":"KeyBindingData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called when the action's owner is removed from the tool","static":false,"name":"dispose","comment":"Called when the action's owner is removed from the tool","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DockingActionIf","comment":"The base interface for clients that wish to create commands to be registered with a tool.\n \n An action may appear in a primary menu, a popup menu or a toolbar.   Further, an action \n may have a key binding assigned.\n \n The particular support for key bindings is defined by KeyBindingType.   Almost all\n client actions will use the default setting of KeyBindingType#INDIVIDUAL.   To control\n the level of key binding support, you can pass the desired KeyBindingType to the\n base implementation of this interface.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ENABLEMENT_PROPERTY","comment":"","type_short":"String","constant_value":"\"enabled\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GLOBALCONTEXT_PROPERTY","comment":"","type_short":"String","constant_value":"\"globalContext\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DESCRIPTION_PROPERTY","comment":"","type_short":"String","constant_value":"\"description\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"KEYBINDING_DATA_PROPERTY","comment":"","type_short":"String","constant_value":"\"KeyBindings\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MENUBAR_DATA_PROPERTY","comment":"","type_short":"String","constant_value":"\"MenuBar\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"POPUP_MENU_DATA_PROPERTY","comment":"","type_short":"String","constant_value":"\"PopupMenu\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TOOLBAR_DATA_PROPERTY","comment":"","type_short":"String","constant_value":"\"ToolBar\""}]}
