{"implements":["java.beans.PropertyChangeListener","docking.PlaceholderInstaller"],"javadoc":"Manages the \"Docking\" arrangement of a set of components and actions. The components can be \"docked\" \n together or exist in their own window.  Actions can be associated with components so they\n \"move\" with the component as it moved from one location to another.\n <P>\n Components are added via ComponentProviders.  A ComponentProvider is an interface for getting\n a component and its related information.  The docking window manager will get the component\n from the provider as needed.  It is up to the provider if it wants to reuse the component or\n recreate a new one when the component is requested.  When the user hides a component (by using \n the x button on the component header), the docking window manager removes all\n knowledge of the component and will request it again from the provider if the component\n is again shown.  The provider is also notified whenever a component is hidden and shown.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new DockingWindowManager\n@param tool the tool\n@param images the images to use for windows in this window manager","static":false,"name":"<init>","comment":"Constructs a new DockingWindowManager","params":[{"type_long":"docking.DockingTool","name":"tool","comment":"the tool","type_short":"DockingTool"},{"type_long":"java.util.List<java.awt.Image>","name":"images","comment":"the images to use for windows in this window manager","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new DockingWindowManager\n@param tool the tool\n@param images the list of icons to set on the window\n@param modal if true then the root window will be a modal dialog instead of a frame\n@param isDocking true for normal operation, false to suppress docking support(removes\n component headers and window menu)\n@param hasStatusBar if true a status bar will be created for the main window\n@param factory the drop target factory","static":false,"name":"<init>","comment":"Constructs a new DockingWindowManager","params":[{"type_long":"docking.DockingTool","name":"tool","comment":"the tool","type_short":"DockingTool"},{"type_long":"java.util.List<java.awt.Image>","name":"images","comment":"the list of icons to set on the window","type_short":"List"},{"type_long":"boolean","name":"modal","comment":"if true then the root window will be a modal dialog instead of a frame","type_short":"boolean"},{"type_long":"boolean","name":"isDocking","comment":"true for normal operation, false to suppress docking support(removes\n component headers and window menu)","type_short":"boolean"},{"type_long":"boolean","name":"hasStatusBar","comment":"if true a status bar will be created for the main window","type_short":"boolean"},{"type_long":"docking.DropTargetFactory","name":"factory","comment":"the drop target factory","type_short":"DropTargetFactory"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Sets the help service for the all docking window managers.\n@param helpSvc the help service to use.","static":true,"name":"setHelpService","comment":"Sets the help service for the all docking window managers.","params":[{"type_long":"docking.help.HelpService","name":"helpSvc","comment":"the help service to use.","type_short":"HelpService"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the global help service.\n@return the global help service.","static":true,"name":"getHelpService","comment":"Returns the global help service.","params":[],"throws":[],"return":{"type_long":"docking.help.HelpService","comment":"the global help service.","type_short":"HelpService"}},{"javadoc":"","static":true,"name":"addInstance","comment":"","params":[{"type_long":"docking.DockingWindowManager","name":"winMgr","comment":"","type_short":"DockingWindowManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"removeInstance","comment":"","params":[{"type_long":"docking.DockingWindowManager","name":"winMgr","comment":"","type_short":"DockingWindowManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the docking window manager instance which corresponds to the specified window.\n@param win the window for which to find its parent docking window manager.\n@return docking window manager or null if unknown.","static":true,"name":"getInstanceForWindow","comment":"Get the docking window manager instance which corresponds to the specified window.","params":[{"type_long":"java.awt.Window","name":"win","comment":"the window for which to find its parent docking window manager.","type_short":"Window"}],"throws":[],"return":{"type_long":"docking.DockingWindowManager","comment":"docking window manager or null if unknown.","type_short":"DockingWindowManager"}},{"javadoc":"A convenience method for getting the window for <tt>component<\/tt> and then calling\n {@link #getInstanceForWindow(Window)}.\n@param component The component for which to get the associated {@link DockingWindowManager}\n        instance.\n@return The {@link DockingWindowManager} instance associated with <tt>component<\/tt>","static":true,"name":"getInstance","comment":"A convenience method for getting the window for component and then calling\n #getInstanceForWindow(Window).","params":[{"type_long":"java.awt.Component","name":"component","comment":"The component for which to get the associated DockingWindowManager\n        instance.","type_short":"Component"}],"throws":[],"return":{"type_long":"docking.DockingWindowManager","comment":"The DockingWindowManager instance associated with component","type_short":"DockingWindowManager"}},{"javadoc":"Returns the last active docking window manager which is visible.\n@return the last active docking window manager which is visible.","static":true,"name":"getActiveInstance","comment":"Returns the last active docking window manager which is visible.","params":[],"throws":[],"return":{"type_long":"docking.DockingWindowManager","comment":"the last active docking window manager which is visible.","type_short":"DockingWindowManager"}},{"javadoc":"Returns a new list of all DockingWindowManager instances know to exist.\n@return a new list of all DockingWindowManager instances know to exist.","static":true,"name":"getAllDockingWindowManagers","comment":"Returns a new list of all DockingWindowManager instances know to exist.","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.DockingWindowManager>","comment":"a new list of all DockingWindowManager instances know to exist.","type_short":"List"}},{"javadoc":"The specified docking window manager has just become active\n@param mgr the window manager that became active.","static":true,"name":"setActiveManager","comment":"The specified docking window manager has just become active","params":[{"type_long":"docking.DockingWindowManager","name":"mgr","comment":"the window manager that became active.","type_short":"DockingWindowManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Register a specific Help content URL for a component.\n The DocWinListener will be notified with the helpURL if the specified\n component 'c' has focus and the help key is pressed.\n@param c component on which to set help.\n@param helpLocation help content location","static":true,"name":"setHelpLocation","comment":"Register a specific Help content URL for a component.\n The DocWinListener will be notified with the helpURL if the specified\n component 'c' has focus and the help key is pressed.","params":[{"type_long":"javax.swing.JComponent","name":"c","comment":"component on which to set help.","type_short":"JComponent"},{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"help content location","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the tool name which is displayed as the title\n for all windows.\n@param toolName tool name \/ title","static":false,"name":"setToolName","comment":"Set the tool name which is displayed as the title\n for all windows.","params":[{"type_long":"java.lang.String","name":"toolName","comment":"tool name \/ title","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the Icon for all windows.\n@param icon image icon","static":false,"name":"setIcon","comment":"Set the Icon for all windows.","params":[{"type_long":"javax.swing.ImageIcon","name":"icon","comment":"image icon","type_short":"ImageIcon"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this manager contains the given provider.\n@param provider the provider for which to check\n@return true if this manager contains the given provider.","static":false,"name":"containsProvider","comment":"Returns true if this manager contains the given provider.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the provider for which to check","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this manager contains the given provider.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getPlaceholderManager","comment":"","params":[],"throws":[],"return":{"type_long":"docking.PlaceholderManager","comment":"","type_short":"PlaceholderManager"}},{"javadoc":"","static":false,"name":"getActionToGuiMapper","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ActionToGuiMapper","comment":"","type_short":"ActionToGuiMapper"}},{"javadoc":"","static":false,"name":"getRootNode","comment":"","params":[],"throws":[],"return":{"type_long":"docking.RootNode","comment":"","type_short":"RootNode"}},{"javadoc":"Returns the tool that owns this manager\n@return the tool","static":false,"name":"getTool","comment":"Returns the tool that owns this manager","params":[],"throws":[],"return":{"type_long":"docking.DockingTool","comment":"the tool","type_short":"DockingTool"}},{"javadoc":"Returns the root window frame.\n@return the root window frame.","static":false,"name":"getRootFrame","comment":"Returns the root window frame.","params":[],"throws":[],"return":{"type_long":"javax.swing.JFrame","comment":"the root window frame.","type_short":"JFrame"}},{"javadoc":"Sets the provider that should get the default focus when no component has focus.\n@param provider the provider that should get the default focus when no component has focus.","static":false,"name":"setDefaultComponent","comment":"Sets the provider that should get the default focus when no component has focus.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the provider that should get the default focus when no component has focus.","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns this tool's notion of the current action context, which is based upon the active\n {@link ComponentProvider}.  If there is not active provider, then a generic context will\n be returned.\n@return the context","static":false,"name":"getGlobalContext","comment":"Returns this tool's notion of the current action context, which is based upon the active\n ComponentProvider.  If there is not active provider, then a generic context will\n be returned.","params":[],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"the context","type_short":"ActionContext"}},{"javadoc":"Get the window which contains the specified Provider's component.\n@param provider component provider\n@return window or null if component is not visible or not found.","static":false,"name":"getProviderWindow","comment":"Get the window which contains the specified Provider's component.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"component provider","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"java.awt.Window","comment":"window or null if component is not visible or not found.","type_short":"Window"}},{"javadoc":"","static":false,"name":"getActivePlaceholder","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"","type_short":"ComponentPlaceholder"}},{"javadoc":"Returns the active window (or the root window if nobody has yet been made active).\n@return the active window.","static":false,"name":"getActiveWindow","comment":"Returns the active window (or the root window if nobody has yet been made active).","params":[],"throws":[],"return":{"type_long":"java.awt.Window","comment":"the active window.","type_short":"Window"}},{"javadoc":"Returns the current active component.\n@return the current active component.","static":false,"name":"getActiveComponent","comment":"Returns the current active component.","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the current active component.","type_short":"Component"}},{"javadoc":"Returns the component which has focus\n@return the placeholder","static":false,"name":"getFocusedComponent","comment":"Returns the component which has focus","params":[],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"the placeholder","type_short":"ComponentPlaceholder"}},{"javadoc":"","static":false,"name":"getDefaultFocusComponent","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"","type_short":"ComponentPlaceholder"}},{"javadoc":"","static":false,"name":"isActiveProvider","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the visible state of the set of docking windows.\n@param state if true the main window and all sub-windows are set to be visible.  If\n state is false, then all windows are set to be invisible.","static":false,"name":"setVisible","comment":"Sets the visible state of the set of docking windows.","params":[{"type_long":"boolean","name":"state","comment":"if true the main window and all sub-windows are set to be visible.  If\n state is false, then all windows are set to be invisible.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the set of windows associated with this window manager are visible.\n@return true if the set of windows associated with this window manager are visible.","static":false,"name":"isVisible","comment":"Returns true if the set of windows associated with this window manager are visible.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set of windows associated with this window manager are visible.","type_short":"boolean"}},{"javadoc":"Returns true if the specified provider's component is visible\n@param provider component provider\n@return true if the specified provider's component is visible","static":false,"name":"isVisible","comment":"Returns true if the specified provider's component is visible","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"component provider","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the specified provider's component is visible","type_short":"boolean"}},{"javadoc":"Adds a new component (via the provider) to be managed by this docking window manager.\n The component is initially hidden.\n@param provider the component provider","static":false,"name":"addComponent","comment":"Adds a new component (via the provider) to be managed by this docking window manager.\n The component is initially hidden.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the component provider","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a new component (vial the provider) to be managed by this docking window manager.\n The component will be initially shown or hidden based on the the \"show\" parameter.\n@param provider the component provider.\n@param show indicates whether or not the component should be initially shown.","static":false,"name":"addComponent","comment":"Adds a new component (vial the provider) to be managed by this docking window manager.\n The component will be initially shown or hidden based on the the \"show\" parameter.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the component provider.","type_short":"ComponentProvider"},{"type_long":"boolean","name":"show","comment":"indicates whether or not the component should be initially shown.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"registerHelpLocation","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"},{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkIfAlreadyAdded","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the ComponentProvider with the given name.  If more than one provider exists with the name,\n one will be returned, but it could be any one of them.\n@param name the name of the provider to return.\n@return a provider with the given name, or null if no providers with that name exist.","static":false,"name":"getComponentProvider","comment":"Returns the ComponentProvider with the given name.  If more than one provider exists with the name,\n one will be returned, but it could be any one of them.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the provider to return.","type_short":"String"}],"throws":[],"return":{"type_long":"docking.ComponentProvider","comment":"a provider with the given name, or null if no providers with that name exist.","type_short":"ComponentProvider"}},{"javadoc":"The <b>first<\/b> provider instance with a class equal to that of the given class\n@param clazz the class of the desired provider\n@return the <b>first<\/b> provider instance with a class equal to that of the given class.\n@see #getComponentProviders(Class)","static":false,"name":"getComponentProvider","comment":"The first provider instance with a class equal to that of the given class","params":[{"type_long":"java.lang.Class<T>","name":"clazz","comment":"the class of the desired provider","type_short":"Class"}],"throws":[],"return":{"type_long":"T","comment":"the first provider instance with a class equal to that of the given class.","type_short":"T"}},{"javadoc":"Gets all components providers with a matching class.  Some component providers will have\n multiple instances in the tool\n@param clazz The class of the provider\n@return all found provider instances","static":false,"name":"getComponentProviders","comment":"Gets all components providers with a matching class.  Some component providers will have\n multiple instances in the tool","params":[{"type_long":"java.lang.Class<T>","name":"clazz","comment":"The class of the provider","type_short":"Class"}],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"all found provider instances","type_short":"List"}},{"javadoc":"Returns the component provider that is the conceptual parent of the given component.  More\n precisely, this will return the component provider whose \n {@link ComponentProvider#getComponent() component} is the parent of the given component.\n@param component the component for which to find a provider\n@return the provider; null if the component is not the child of a provider","static":false,"name":"getComponentProvider","comment":"Returns the component provider that is the conceptual parent of the given component.  More\n precisely, this will return the component provider whose \n ComponentProvider#getComponent() is the parent of the given component.","params":[{"type_long":"java.awt.Component","name":"component","comment":"the component for which to find a provider","type_short":"Component"}],"throws":[],"return":{"type_long":"docking.ComponentProvider","comment":"the provider; null if the component is not the child of a provider","type_short":"ComponentProvider"}},{"javadoc":"","static":false,"name":"getDockableComponent","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"docking.DockableComponent","comment":"","type_short":"DockableComponent"}},{"javadoc":"","static":false,"name":"getPlaceholder","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"","type_short":"ComponentPlaceholder"}},{"javadoc":"Set whether a component's header should be shown; the header is the\n component that is dragged in order to move the component within the\n tool, or out of the tool into a separate window.\n@param provider provider of the visible component in the tool\n@param b true means to show the header","static":false,"name":"showComponentHeader","comment":"Set whether a component's header should be shown; the header is the\n component that is dragged in order to move the component within the\n tool, or out of the tool into a separate window.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"provider of the visible component in the tool","type_short":"ComponentProvider"},{"type_long":"boolean","name":"b","comment":"true means to show the header","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setIcon","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"},{"type_long":"javax.swing.Icon","name":"icon","comment":"","type_short":"Icon"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateTitle","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current subtitle for the component for the given provider.\n@param provider the component provider of the component for which to get its subtitle.\n@return the current subtitle for the component for the given provider.","static":false,"name":"getSubTitle","comment":"Returns the current subtitle for the component for the given provider.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the component provider of the component for which to get its subtitle.","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the current subtitle for the component for the given provider.","type_short":"String"}},{"javadoc":"Removes the ComponentProvider (component) from the docking windows manager.  The location\n of the window will be remember and reused if the provider is added back in later.\n@param provider the provider to be removed.","static":false,"name":"removeComponent","comment":"Removes the ComponentProvider (component) from the docking windows manager.  The location\n of the window will be remember and reused if the provider is added back in later.","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the provider to be removed.","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getComponentActions","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"java.util.Iterator<docking.action.DockingActionIf>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"removeProviderAction","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"},{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addLocalAction","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"},{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addToolAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeToolAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns any action that is bound to the given keystroke for the tool associated with this\n DockingWindowManager instance.\n@param keyStroke The keystroke to check for key bindings.\n@return The action that is bound to the keystroke, or null of there is no binding for the\n         given keystroke.","static":false,"name":"getActionForKeyStroke","comment":"Returns any action that is bound to the given keystroke for the tool associated with this\n DockingWindowManager instance.","params":[{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"The keystroke to check for key bindings.","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"javax.swing.Action","comment":"The action that is bound to the keystroke, or null of there is no binding for the\n         given keystroke.","type_short":"Action"}},{"javadoc":"","static":false,"name":"ownerRemoved","comment":"","params":[{"type_long":"java.lang.String","name":"owner","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Hides or shows the component associated with the given provider.\n <p><br>\n <b>Note: <\/b> This method will not show the given provider if it has not previously been\n added via <tt>addComponent(...)<\/tt>.\n@param provider the provider of the component to be hidden or shown.\n@param visibleState true to show the component, false to hide it.\n@see #addComponent(ComponentProvider)\n@see #addComponent(ComponentProvider, boolean)","static":false,"name":"showComponent","comment":"Hides or shows the component associated with the given provider.\n \n Note:  This method will not show the given provider if it has not previously been\n added via addComponent(...).","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"the provider of the component to be hidden or shown.","type_short":"ComponentProvider"},{"type_long":"boolean","name":"visibleState","comment":"true to show the component, false to hide it.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toFront","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toFront","comment":"","params":[{"type_long":"java.awt.Window","name":"window","comment":"","type_short":"Window"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Releases all resources used by this docking window manager.  Once the dispose method\n is called, no other calls to this object should be made.","static":false,"name":"dispose","comment":"Releases all resources used by this docking window manager.  Once the dispose method\n is called, no other calls to this object should be made.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showComponent","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"},{"type_long":"boolean","name":"visibleState","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"shouldEmphasize","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows or hides the component associated with the given placeholder object.\n@param placeholder the component placeholder object for the component to be shown or hidden.\n@param visibleState true to show or false to hide.\n@param requestFocus True signals that the system should request focus on the component.","static":false,"name":"showComponent","comment":"Shows or hides the component associated with the given placeholder object.","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"the component placeholder object for the component to be shown or hidden.","type_short":"ComponentPlaceholder"},{"type_long":"boolean","name":"visibleState","comment":"true to show or false to hide.","type_short":"boolean"},{"type_long":"boolean","name":"requestFocus","comment":"True signals that the system should request focus on the component.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showComponent","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"boolean","name":"visibleState","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"requestFocus","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"shouldEmphasize","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"movePlaceholderToFront","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"boolean","name":"emphasisze","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Generates a JDOM element object for saving the window managers state to XML.\n@param rootXMLElement The root element to which to save XML data.","static":false,"name":"saveToXML","comment":"Generates a JDOM element object for saving the window managers state to XML.","params":[{"type_long":"org.jdom.Element","name":"rootXMLElement","comment":"The root element to which to save XML data.","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Save this docking window manager's window layout and positioning information as XML.\n@return An XML element with the above information.","static":false,"name":"saveWindowingDataToXml","comment":"Save this docking window manager's window layout and positioning information as XML.","params":[],"throws":[],"return":{"type_long":"org.jdom.Element","comment":"An XML element with the above information.","type_short":"Element"}},{"javadoc":"Restores the docking window managers state from the XML information.\n@param rootXMLElement JDOM element from which to extract the state information.","static":false,"name":"restoreFromXML","comment":"Restores the docking window managers state from the XML information.","params":[{"type_long":"org.jdom.Element","name":"rootXMLElement","comment":"JDOM element from which to extract the state information.","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restore to the docking window manager the layout and positioning information from XML.\n@param windowData The XML element containing the above information.","static":false,"name":"restoreWindowDataFromXml","comment":"Restore to the docking window manager the layout and positioning information from XML.","params":[{"type_long":"org.jdom.Element","name":"windowData","comment":"The XML element containing the above information.","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreSavedFocusedPlaceholder","comment":"","params":[{"type_long":"java.lang.String","name":"focusOwner","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"focusName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"focusTitle","comment":"","type_short":"String"},{"type_long":"docking.ComponentPlaceholder","name":"bestFocusReplacementPlaceholder","comment":"","type_short":"ComponentPlaceholder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sorts the active providers by window group.  This ensures that the dependent window groups\n are loaded after their dependencies have been.","static":false,"name":"sortActiveProviders","comment":"Sorts the active providers by window group.  This ensures that the dependent window groups\n are loaded after their dependencies have been.","params":[{"type_long":"java.util.Map<docking.ComponentProvider,docking.ComponentPlaceholder>","name":"activeProviders","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.List<java.util.Map.Entry<docking.ComponentProvider,docking.ComponentPlaceholder>>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"installPlaceholder","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"docking.WindowPosition","name":"position","comment":"","type_short":"WindowPosition"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"uninstallPlaceholder","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"boolean","name":"keepAround","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"disposePlaceholder","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"boolean","name":"keepAround","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearCurrentOrPendingFocusForRemovedPlaceholder","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Moves the component associated with the given source placeholder object from its current\n docked location to its own window that will be anchored at the given point.\n@param source the component placeholder containing the component to be moved.\n@param p the location at which to create a new window for the component.","static":false,"name":"movePlaceholder","comment":"Moves the component associated with the given source placeholder object from its current\n docked location to its own window that will be anchored at the given point.","params":[{"type_long":"docking.ComponentPlaceholder","name":"source","comment":"the component placeholder containing the component to be moved.","type_short":"ComponentPlaceholder"},{"type_long":"java.awt.Point","name":"p","comment":"the location at which to create a new window for the component.","type_short":"Point"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Moves the component associated with the given source placeholder object to a new docked \n location relative to the given destination placeholder object\n@param source the component placeholder for the component being moved\n@param destination the component placeholder object used to base to move\n@param windowPosition a code specifying the docking relationship between two placeholders","static":false,"name":"movePlaceholder","comment":"Moves the component associated with the given source placeholder object to a new docked \n location relative to the given destination placeholder object","params":[{"type_long":"docking.ComponentPlaceholder","name":"source","comment":"the component placeholder for the component being moved","type_short":"ComponentPlaceholder"},{"type_long":"docking.ComponentPlaceholder","name":"destination","comment":"the component placeholder object used to base to move","type_short":"ComponentPlaceholder"},{"type_long":"docking.WindowPosition","name":"windowPosition","comment":"a code specifying the docking relationship between two placeholders","type_short":"WindowPosition"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notifies the docking windows listener that the close button has been pressed on\n the main window frame.","static":false,"name":"close","comment":"Notifies the docking windows listener that the close button has been pressed on\n the main window frame.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isDocking","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Builds the window menu containing a menu item for each component.","static":false,"name":"buildComponentMenu","comment":"Builds the window menu containing a menu item for each component.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isWindowMenuShowing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getMenuForSelection","comment":"","params":[{"type_long":"javax.swing.MenuElement[]","name":"selectedPath","comment":"","type_short":"javax.swing.MenuElement[]"}],"throws":[],"return":{"type_long":"javax.swing.JMenu","comment":"","type_short":"JMenu"}},{"javadoc":"","static":false,"name":"createActions","comment":"","params":[{"type_long":"java.util.Map<java.lang.String,java.util.List<docking.ComponentPlaceholder>>","name":"map","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"promoteSingleMenuGroups","comment":"","params":[{"type_long":"java.util.Map<java.lang.String,java.util.List<docking.ComponentPlaceholder>>","name":"lazyMap","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createWindowActions","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"scheduleUpdate","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updatePending","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"doUpdate","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateFocus","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setNextFocusPlaceholder","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeGetPlaceholderToFocus","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"","type_short":"ComponentPlaceholder"}},{"javadoc":"","static":false,"name":"updateFocus","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Display an text edit box on top of the specified component.\n@param defaultText initial text to be displayed in edit box\n@param c component over which the edit box will be placed\n@param r specifies the bounds of the edit box relative to the \n component.  The height is ignored.  The default text field height \n is used as the preferred height.\n@param listener when the edit is complete, this listener is notified \n with the new text.  The edit box is dismissed prior to notifying\n the listener.","static":false,"name":"showEditWindow","comment":"Display an text edit box on top of the specified component.","params":[{"type_long":"java.lang.String","name":"defaultText","comment":"initial text to be displayed in edit box","type_short":"String"},{"type_long":"java.awt.Component","name":"c","comment":"component over which the edit box will be placed","type_short":"Component"},{"type_long":"java.awt.Rectangle","name":"r","comment":"specifies the bounds of the edit box relative to the \n component.  The height is ignored.  The default text field height \n is used as the preferred height.","type_short":"Rectangle"},{"type_long":"docking.EditListener","name":"listener","comment":"when the edit is complete, this listener is notified \n with the new text.  The edit box is dismissed prior to notifying\n the listener.","type_short":"EditListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"restoreFocusOwner","comment":"","params":[{"type_long":"java.lang.String","name":"focusOwner","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"focusName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setFocusedComponent","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeholder","comment":"","type_short":"ComponentPlaceholder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"findNextFocusedComponent","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ComponentPlaceholder","comment":"","type_short":"ComponentPlaceholder"}},{"javadoc":"","static":false,"name":"clearFocusedComponent","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invoked by associated docking windows when they become active or inactive\n@param window the active window\n@param active true signals that this DockingWindowManager has become active","static":false,"name":"setActive","comment":"Invoked by associated docking windows when they become active or inactive","params":[{"type_long":"java.awt.Window","name":"window","comment":"the active window","type_short":"Window"},{"type_long":"boolean","name":"active","comment":"true signals that this DockingWindowManager has become active","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"requestFocus","comment":"","params":[{"type_long":"java.awt.Component","name":"component","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"propertyChange","comment":"","params":[{"type_long":"java.beans.PropertyChangeEvent","name":"evt","comment":"","type_short":"PropertyChangeEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"ensureDockableComponentContainsFocusOwner","comment":"","params":[{"type_long":"java.awt.Component","name":"newFocusComponent","comment":"","type_short":"Component"},{"type_long":"docking.DockableComponent","name":"dockableComponent","comment":"","type_short":"DockableComponent"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isFocusComponentInEditingWindow","comment":"","params":[{"type_long":"java.awt.Component","name":"newFocusComponent","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDockableComponentForFocusOwner","comment":"","params":[{"type_long":"java.awt.Window","name":"window","comment":"","type_short":"Window"},{"type_long":"java.awt.Component","name":"focusedComp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"docking.DockableComponent","comment":"","type_short":"DockableComponent"}},{"javadoc":"","static":false,"name":"getDockableComponent","comment":"","params":[{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"docking.DockableComponent","comment":"","type_short":"DockableComponent"}},{"javadoc":"","static":false,"name":"savePreferencesToXML","comment":"","params":[],"throws":[],"return":{"type_long":"org.jdom.Element","comment":"","type_short":"Element"}},{"javadoc":"","static":false,"name":"restorePreferencesFromXML","comment":"","params":[{"type_long":"org.jdom.Element","name":"rootElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a PreferenceState object to this window manager instance that is bound to the given\n key.  When the state of the tool using this window manager is saved, then the mapped\n preferences will also be saved.\n@param key The key with which to store the preferences.\n@param state The state object to store.\n@see #getPreferenceState(String)","static":false,"name":"putPreferenceState","comment":"Adds a PreferenceState object to this window manager instance that is bound to the given\n key.  When the state of the tool using this window manager is saved, then the mapped\n preferences will also be saved.","params":[{"type_long":"java.lang.String","name":"key","comment":"The key with which to store the preferences.","type_short":"String"},{"type_long":"ghidra.framework.options.PreferenceState","name":"state","comment":"The state object to store.","type_short":"PreferenceState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets a preferences state object stored with the given key.  The state objects are loaded\n from persistent storage when the tool using this window manager has its state loaded.\n@param key The key with which to store the preferences.\n@return the PrefrenceState object stored by the given key, or null if one does not exist\n@see #putPreferenceState(String, PreferenceState)","static":false,"name":"getPreferenceState","comment":"Gets a preferences state object stored with the given key.  The state objects are loaded\n from persistent storage when the tool using this window manager has its state loaded.","params":[{"type_long":"java.lang.String","name":"key","comment":"The key with which to store the preferences.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.options.PreferenceState","comment":"the PrefrenceState object stored by the given key, or null if one does not exist","type_short":"PreferenceState"}},{"javadoc":"Removes the Preferences state for the given key.\n@param key the key to the preference state to be removed","static":false,"name":"removePreferenceState","comment":"Removes the Preferences state for the given key.","params":[{"type_long":"java.lang.String","name":"key","comment":"the key to the preference state to be removed","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isMyWindow","comment":"","params":[{"type_long":"java.awt.Window","name":"win","comment":"","type_short":"Window"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Shows the dialog using the tool's currently active window as a parent\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog","static":true,"name":"showDialogOnActiveWindow","comment":"Shows the dialog using the tool's currently active window as a parent","params":[{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog","type_short":"DialogComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows the dialog using the tool's currently active window as a parent\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog","static":true,"name":"showDialog","comment":"Shows the dialog using the tool's currently active window as a parent","params":[{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog","type_short":"DialogComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows the dialog using the given component's parent frame, centering the dialog \n on the given component\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@param centeredOnComponent the component on which to center the dialog.","static":true,"name":"showDialog","comment":"Shows the dialog using the given component's parent frame, centering the dialog \n on the given component","params":[{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog.","type_short":"DialogComponentProvider"},{"type_long":"java.awt.Component","name":"centeredOnComponent","comment":"the component on which to center the dialog.","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows the dialog using the window containing the given componentProvider as its \n parent window\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@param centeredOnProvider the component provider that is used to find a parent \n        window for this dialog.   The dialog is centered on this component \n        provider's component.","static":false,"name":"showDialog","comment":"Shows the dialog using the window containing the given componentProvider as its \n parent window","params":[{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog.","type_short":"DialogComponentProvider"},{"type_long":"docking.ComponentProvider","name":"centeredOnProvider","comment":"the component provider that is used to find a parent \n        window for this dialog.   The dialog is centered on this component \n        provider's component.","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"doShowDialog","comment":"","params":[{"type_long":"docking.DialogComponentProvider","name":"provider","comment":"","type_short":"DialogComponentProvider"},{"type_long":"java.awt.Component","name":"parent","comment":"","type_short":"Component"},{"type_long":"java.awt.Component","name":"centeredOnComponent","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getCenterOnComponent","comment":"","params":[{"type_long":"java.awt.Component","name":"centeredOnComponent","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"Shows the dialog using the given parent component to find a parent window and to \n position the dialog. If a Window can be found containing the given component, it \n will be used as the parent window for the dialog.  If the component is null or not \n contained in a window, the current active window manager will be used to parent \n the dialog.  If there are no active tools, then a frame will be created to parent\n the dialog.\n@param parent the component whose window over which the given dialog will be shown; null\n        signals to use the active window\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog.\n@see #getParentWindow(Component) for parenting notes","static":true,"name":"showDialog","comment":"Shows the dialog using the given parent component to find a parent window and to \n position the dialog. If a Window can be found containing the given component, it \n will be used as the parent window for the dialog.  If the component is null or not \n contained in a window, the current active window manager will be used to parent \n the dialog.  If there are no active tools, then a frame will be created to parent\n the dialog.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"the component whose window over which the given dialog will be shown; null\n        signals to use the active window","type_short":"Component"},{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog.","type_short":"DialogComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Shows the dialog using the given parent window using the optional component for \n positioning\n@param parent the component whose window over which the given dialog will be shown\n@param dialogComponent the DialogComponentProvider object to be shown in a dialog\n@param centeredOnComponent the component over which the dialog will be centered if not null","static":true,"name":"showDialog","comment":"Shows the dialog using the given parent window using the optional component for \n positioning","params":[{"type_long":"java.awt.Window","name":"parent","comment":"the component whose window over which the given dialog will be shown","type_short":"Window"},{"type_long":"docking.DialogComponentProvider","name":"dialogComponent","comment":"the DialogComponentProvider object to be shown in a dialog","type_short":"DialogComponentProvider"},{"type_long":"java.awt.Component","name":"centeredOnComponent","comment":"the component over which the dialog will be centered if not null","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getParentWindow","comment":"","params":[{"type_long":"java.awt.Component","name":"parent","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Window","comment":"","type_short":"Window"}},{"javadoc":"","static":true,"name":"isNonTransientWindow","comment":"","params":[{"type_long":"java.awt.Component","name":"c","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"getActiveNonTransientWindow","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Window","comment":"","type_short":"Window"}},{"javadoc":"","static":false,"name":"getActiveComponentProvider","comment":"","params":[],"throws":[],"return":{"type_long":"docking.ComponentProvider","comment":"","type_short":"ComponentProvider"}},{"javadoc":"Sets the icon for this window's 'home button'. This button, when pressed,\n will show the tool's main application window.\n@param icon the button's icon\n@param callback the callback to execute when the button is pressed by the user","static":false,"name":"setHomeButton","comment":"Sets the icon for this window's 'home button'. This button, when pressed,\n will show the tool's main application window.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the button's icon","type_short":"Icon"},{"type_long":"java.lang.Runnable","name":"callback","comment":"the callback to execute when the button is pressed by the user","type_short":"Runnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if a status bar is present.\n@return true if a status bar is present.","static":false,"name":"hasStatusBar","comment":"Returns true if a status bar is present.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if a status bar is present.","type_short":"boolean"}},{"javadoc":"Add a new status item component to the status area.  The preferred height and border\n for the component will be altered.  The components preferred width will be \n preserved.\n@param c the status item component to add\n@param addBorder True signals to add a border to the status area\n@param rightSide component will be added to the right-side of the status\n area if true, else it will be added immediately after the status text area\n if false.","static":false,"name":"addStatusItem","comment":"Add a new status item component to the status area.  The preferred height and border\n for the component will be altered.  The components preferred width will be \n preserved.","params":[{"type_long":"javax.swing.JComponent","name":"c","comment":"the status item component to add","type_short":"JComponent"},{"type_long":"boolean","name":"addBorder","comment":"True signals to add a border to the status area","type_short":"boolean"},{"type_long":"boolean","name":"rightSide","comment":"component will be added to the right-side of the status\n area if true, else it will be added immediately after the status text area\n if false.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the specified status item.\n@param c status component previously added.","static":false,"name":"removeStatusItem","comment":"Remove the specified status item.","params":[{"type_long":"javax.swing.JComponent","name":"c","comment":"status component previously added.","type_short":"JComponent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the status text in the active component window\n@param text status text","static":false,"name":"setStatusText","comment":"Set the status text in the active component window","params":[{"type_long":"java.lang.String","name":"text","comment":"status text","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the status text in the active component window\n@param text string to be displayed in the Status display area\n@param beep whether to beep or not","static":false,"name":"setStatusText","comment":"Set the status text in the active component window","params":[{"type_long":"java.lang.String","name":"text","comment":"string to be displayed in the Status display area","type_short":"String"},{"type_long":"boolean","name":"beep","comment":"whether to beep or not","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to make an attention-grabbing noise to the user","static":true,"name":"beep","comment":"A convenience method to make an attention-grabbing noise to the user","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSetMenuGroup","comment":"","params":[{"type_long":"java.lang.String[]","name":"menuPath","comment":"","type_short":"java.lang.String[]"},{"type_long":"java.lang.String","name":"group","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the menu group associated with a cascaded submenu.  This allows\n a cascading menu item to be grouped with a specific set of actions.\n <p>\n The default group for a cascaded submenu is the name of the submenu.\n <p>\n@param menuPath menu name path where the last element corresponds to the specified group name.\n@param group group name\n@param menuSubGroup the name used to sort the cascaded menu within other menu items at \n                     its level","static":false,"name":"setMenuGroup","comment":"Set the menu group associated with a cascaded submenu.  This allows\n a cascading menu item to be grouped with a specific set of actions.\n \n The default group for a cascaded submenu is the name of the submenu.\n ","params":[{"type_long":"java.lang.String[]","name":"menuPath","comment":"menu name path where the last element corresponds to the specified group name.","type_short":"java.lang.String[]"},{"type_long":"java.lang.String","name":"group","comment":"group name","type_short":"String"},{"type_long":"java.lang.String","name":"menuSubGroup","comment":"the name used to sort the cascaded menu within other menu items at \n                     its level","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tests if the given component is one of a known list of component classes that we\n don't ever want to get keyboard focus.  Currently excluded is JScrollPane\n@param c the component to test for exclusion\n@return true if the component should not be allowed to have keyboard focus.","static":true,"name":"excludeFocus","comment":"Tests if the given component is one of a known list of component classes that we\n don't ever want to get keyboard focus.  Currently excluded is JScrollPane","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component to test for exclusion","type_short":"Component"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the component should not be allowed to have keyboard focus.","type_short":"boolean"}},{"javadoc":"Sets the mode such that all satellite docking windows always appear on top of the root window\n@param windowsOnTop true to set mode to on top, false to disable on top mode.","static":false,"name":"setWindowsOnTop","comment":"Sets the mode such that all satellite docking windows always appear on top of the root window","params":[{"type_long":"boolean","name":"windowsOnTop","comment":"true to set mode to on top, false to disable on top mode.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the window mode is \"satellite windows always on top of root window\".\n@return true if the window mode is \"satellite windows always on top of root window\".","static":false,"name":"isWindowsOnTop","comment":"Returns true if the window mode is \"satellite windows always on top of root window\".","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the window mode is \"satellite windows always on top of root window\".","type_short":"boolean"}},{"javadoc":"Returns a list with all the windows in the windowStack. Used for testing.\n@param includeMain if true, include the main root window.\n@return a list with all the windows in the windowStack. Used for testing.","static":false,"name":"getWindows","comment":"Returns a list with all the windows in the windowStack. Used for testing.","params":[{"type_long":"boolean","name":"includeMain","comment":"if true, include the main root window.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<java.awt.Window>","comment":"a list with all the windows in the windowStack. Used for testing.","type_short":"List"}},{"javadoc":"","static":false,"name":"iconify","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deIconify","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the root window.\n@return the root window.","static":false,"name":"getMainWindow","comment":"Returns the root window.","params":[],"throws":[],"return":{"type_long":"java.awt.Window","comment":"the root window.","type_short":"Window"}},{"javadoc":"","static":true,"name":"getMouseOverAction","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.DockingActionIf","comment":"","type_short":"DockingActionIf"}},{"javadoc":"","static":true,"name":"setMouseOverAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getMouseOverObject","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":true,"name":"setMouseOverObject","comment":"","params":[{"type_long":"java.lang.Object","name":"object","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"clearMouseOverHelp","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"contextChanged","comment":"","params":[{"type_long":"docking.ComponentProvider","name":"provider","comment":"","type_short":"ComponentProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given popup action provider to this tool.   This provider will be called each\n time the popup menu is about to be shown.\n@param provider the provider","static":false,"name":"addPopupActionProvider","comment":"Adds the given popup action provider to this tool.   This provider will be called each\n time the popup menu is about to be shown.","params":[{"type_long":"docking.actions.PopupActionProvider","name":"provider","comment":"the provider","type_short":"PopupActionProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given popup action provider\n@param provider the provider","static":false,"name":"removePopupActionProvider","comment":"Removes the given popup action provider","params":[{"type_long":"docking.actions.PopupActionProvider","name":"provider","comment":"the provider","type_short":"PopupActionProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of temporary popup actions to be returned.  Only those actions which have \n a suitable popup menu path will be considered.  This mechanism allows clients to \n add transient actions to be added to the tool without the accompanying management overhead.\n@param context the ActionContext\n@return list of temporary actions\n@see #addPopupActionProvider(PopupActionProvider)","static":false,"name":"getTemporaryPopupActions","comment":"Returns a list of temporary popup actions to be returned.  Only those actions which have \n a suitable popup menu path will be considered.  This mechanism allows clients to \n add transient actions to be added to the tool without the accompanying management overhead.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"the ActionContext","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"java.util.List<docking.action.DockingActionIf>","comment":"list of temporary actions","type_short":"List"}},{"javadoc":"","static":false,"name":"addContextListener","comment":"","params":[{"type_long":"docking.DockingContextListener","name":"listener","comment":"","type_short":"DockingContextListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeContextListener","comment":"","params":[{"type_long":"docking.DockingContextListener","name":"listener","comment":"","type_short":"DockingContextListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyContextListeners","comment":"","params":[{"type_long":"docking.ComponentPlaceholder","name":"placeHolder","comment":"","type_short":"ComponentPlaceholder"},{"type_long":"docking.ActionContext","name":"actionContext","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Registers a callback to be notified when the given component has been parented to\n a docking window manager\n@param component the component that will be parented in a docking window system\n@param listener the listener to be notified the component was parented","static":true,"name":"registerComponentLoadedListener","comment":"Registers a callback to be notified when the given component has been parented to\n a docking window manager","params":[{"type_long":"java.awt.Component","name":"component","comment":"the component that will be parented in a docking window system","type_short":"Component"},{"type_long":"docking.ComponentLoadedListener","name":"listener","comment":"the listener to be notified the component was parented","type_short":"ComponentLoadedListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DockingWindowManager","comment":"Manages the \"Docking\" arrangement of a set of components and actions. The components can be \"docked\" \n together or exist in their own window.  Actions can be associated with components so they\n \"move\" with the component as it moved from one location to another.\n \n Components are added via ComponentProviders.  A ComponentProvider is an interface for getting\n a component and its related information.  The docking window manager will get the component\n from the provider as needed.  It is up to the provider if it wants to reuse the component or\n recreate a new one when the component is requested.  When the user hides a component (by using \n the x button on the component header), the docking window manager removes all\n knowledge of the component and will request it again from the provider if the component\n is again shown.  The provider is also notified whenever a component is hidden and shown.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"COMPONENT_MENU_NAME","comment":"","type_short":"String","constant_value":"\"Window\""},{"type_long":"docking.action.DockingActionIf","javadoc":"","static":true,"name":"actionUnderMouse","comment":"","type_short":"DockingActionIf","constant_value":null},{"type_long":"java.lang.Object","javadoc":"","static":true,"name":"objectUnderMouse","comment":"","type_short":"Object","constant_value":null},{"type_long":"java.lang.String","javadoc":"The owner name for docking windows actions.  \n <p>Warning: Any action with this owner will get removed every time the 'Window' menu is\n rebuilt, with the exception if reserved key bindings.","static":true,"name":"DOCKING_WINDOWS_OWNER","comment":"The owner name for docking windows actions.  \n Warning: Any action with this owner will get removed every time the 'Window' menu is\n rebuilt, with the exception if reserved key bindings.","type_short":"String","constant_value":"\"DockingWindows\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TOOL_PREFERENCES_XML_NAME","comment":"","type_short":"String","constant_value":"\"PREFERENCES\""},{"type_long":"docking.help.HelpService","javadoc":"The helpService field should be set to the appropriate help service provider.","static":true,"name":"helpService","comment":"The helpService field should be set to the appropriate help service provider.","type_short":"HelpService","constant_value":null},{"type_long":"java.util.List<docking.DockingWindowManager>","javadoc":"","static":true,"name":"instances","comment":"","type_short":"List","constant_value":null},{"type_long":"docking.DockingTool","javadoc":"","static":false,"name":"tool","comment":"","type_short":"DockingTool","constant_value":null},{"type_long":"docking.RootNode","javadoc":"","static":false,"name":"root","comment":"","type_short":"RootNode","constant_value":null},{"type_long":"docking.PlaceholderManager","javadoc":"","static":false,"name":"placeholderManager","comment":"","type_short":"PlaceholderManager","constant_value":null},{"type_long":"ghidra.util.datastruct.LRUSet<docking.ComponentPlaceholder>","javadoc":"","static":false,"name":"lastFocusedPlaceholders","comment":"","type_short":"LRUSet","constant_value":null},{"type_long":"docking.DockingWindowManager.ActivatedInfo","javadoc":"","static":false,"name":"activatedInfo","comment":"","type_short":"ActivatedInfo","constant_value":null},{"type_long":"docking.ComponentPlaceholder","javadoc":"","static":false,"name":"focusedPlaceholder","comment":"","type_short":"ComponentPlaceholder","constant_value":null},{"type_long":"docking.ComponentPlaceholder","javadoc":"","static":false,"name":"nextFocusedPlaceholder","comment":"","type_short":"ComponentPlaceholder","constant_value":null},{"type_long":"docking.ComponentProvider","javadoc":"","static":false,"name":"defaultProvider","comment":"","type_short":"ComponentProvider","constant_value":null},{"type_long":"java.awt.Component","javadoc":"","static":true,"name":"pendingRequestFocusComponent","comment":"","type_short":"Component","constant_value":null},{"type_long":"java.util.Map<java.lang.String,docking.ComponentProvider>","javadoc":"","static":false,"name":"providerNameCache","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.String,ghidra.framework.options.PreferenceState>","javadoc":"","static":false,"name":"preferenceStateMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"docking.ActionToGuiMapper","javadoc":"","static":false,"name":"actionToGuiMapper","comment":"","type_short":"ActionToGuiMapper","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<docking.actions.PopupActionProvider>","javadoc":"","static":false,"name":"popupActionProviders","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<docking.DockingContextListener>","javadoc":"","static":false,"name":"contextListeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"rebuildUpdater","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isVisible","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isDocking","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasStatusBar","comment":"","type_short":"boolean","constant_value":null},{"type_long":"docking.EditWindow","javadoc":"","static":false,"name":"editWindow","comment":"","type_short":"EditWindow","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"windowsOnTop","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.awt.Window","javadoc":"","static":false,"name":"lastActiveWindow","comment":"","type_short":"Window","constant_value":null}]}
