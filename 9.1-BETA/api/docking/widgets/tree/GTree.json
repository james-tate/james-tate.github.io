{"implements":["ghidra.util.task.BusyListener"],"javadoc":"Class for creating a JTree that supports filtering, threading, and a progress bar.","static":false,"extends":"javax.swing.JPanel","methods":[{"javadoc":"Creates a GTree with the given root node.  The created GTree will use a threaded model\n for performing tasks, which allows the GUI to be responsive for reaaaaaaaaly big trees.\n@param root The root node of the tree.","static":false,"name":"<init>","comment":"Creates a GTree with the given root node.  The created GTree will use a threaded model\n for performing tasks, which allows the GUI to be responsive for reaaaaaaaaly big trees.","params":[{"type_long":"docking.widgets.tree.GTreeRootNode","name":"root","comment":"The root node of the tree.","type_short":"GTreeRootNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Should be called by threads running {@link GTreeTask}s.\n@param monitor the monitor being used for the currently running task.\n@see #getThreadLocalMonitor()","static":false,"name":"setThreadLocalMonitor","comment":"Should be called by threads running GTreeTasks.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor being used for the currently running task.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the monitor in associated with the GTree for the calling thread.  This method is\n designed to be used by slow loading nodes that are loading <b>off the Swing thread<\/b>.\n Some of the loading methods are called by the slow loading node at a point when it is\n not passed a monitor (like when clients ask how many children the node has).\n <p>\n When a {@link GTreeTask} is run in thread from a thread pool, it registers its monitor\n (which is different than the GTree's) with this tree.  Then, if a node performing work,\n like loading, needs a monitor, it can call {@link #getThreadLocalMonitor()} in order to\n get the monitor that was registered with that thread.\n <P>\n This method is necessary because the concurrent library used by this tree will provide a\n unique monitor for each task that is run, which will be different (but connected) to the\n monitor created by this tree.\n <p>\n If this method is called from a client other than a {@link GTreeTask}, then a dummy\n monitor will be returned.\n@return the monitor associated with the calling thread; null if the monitor was not set\n@see #setThreadLocalMonitor(TaskMonitor)","static":false,"name":"getThreadLocalMonitor","comment":"Returns the monitor in associated with the GTree for the calling thread.  This method is\n designed to be used by slow loading nodes that are loading off the Swing thread.\n Some of the loading methods are called by the slow loading node at a point when it is\n not passed a monitor (like when clients ask how many children the node has).\n \n When a GTreeTask is run in thread from a thread pool, it registers its monitor\n (which is different than the GTree's) with this tree.  Then, if a node performing work,\n like loading, needs a monitor, it can call #getThreadLocalMonitor() in order to\n get the monitor that was registered with that thread.\n \n This method is necessary because the concurrent library used by this tree will provide a\n unique monitor for each task that is run, which will be different (but connected) to the\n monitor created by this tree.\n \n If this method is called from a client other than a GTreeTask, then a dummy\n monitor will be returned.","params":[],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"the monitor associated with the calling thread; null if the monitor was not set","type_short":"TaskMonitor"}},{"javadoc":"","static":false,"name":"setEnabled","comment":"","params":[{"type_long":"boolean","name":"enabled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDragNDropHandler","comment":"","params":[{"type_long":"docking.widgets.tree.support.GTreeDragNDropHandler","name":"dragNDropHandler","comment":"","type_short":"GTreeDragNDropHandler"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setTransferHandler","comment":"","params":[{"type_long":"javax.swing.TransferHandler","name":"handler","comment":"","type_short":"TransferHandler"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDragNDropHandler","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.support.GTreeDragNDropHandler","comment":"","type_short":"GTreeDragNDropHandler"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCellRenderer","comment":"","params":[{"type_long":"docking.widgets.tree.support.GTreeRenderer","name":"renderer","comment":"","type_short":"GTreeRenderer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCellRenderer","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.support.GTreeRenderer","comment":"","type_short":"GTreeRenderer"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isDisposed","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Signals that any multithreaded work should be cancelled.","static":false,"name":"cancelWork","comment":"Signals that any multithreaded work should be cancelled.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"filterChanged","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateModelFilter","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createMouseListenerDelegate","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.JTreeMouseListenerDelegate","comment":"","type_short":"JTreeMouseListenerDelegate"}},{"javadoc":"","static":false,"name":"getRestoreTreeState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeState","comment":"","type_short":"GTreeState"}},{"javadoc":"Returns a state object that allows this tree to later restore its expanded and selected\n state.\n <p>\n <b>Note: <\/b>See the usage note at the header of this class concerning how tree state\n is used relative to the <tt>equals()<\/tt> method.","static":false,"name":"getTreeState","comment":"Returns a state object that allows this tree to later restore its expanded and selected\n state.\n \n Note: See the usage note at the header of this class concerning how tree state\n is used relative to the equals() method.","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeState","comment":"","type_short":"GTreeState"}},{"javadoc":"","static":false,"name":"getTreeState","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeState","comment":"","type_short":"GTreeState"}},{"javadoc":"Restores the expanded and selected state of this tree to that contained in the given\n state object.\n <p>\n <b>Note: <\/b>See the usage note at the header of this class concerning how tree state\n is used relative to the <tt>equals()<\/tt> method.\n@see #getTreeState()\n@see #getTreeState(GTreeNode)\n@see #cloneTreeState()","static":false,"name":"restoreTreeState","comment":"Restores the expanded and selected state of this tree to that contained in the given\n state object.\n \n Note: See the usage note at the header of this class concerning how tree state\n is used relative to the equals() method.","params":[{"type_long":"docking.widgets.tree.GTreeState","name":"state","comment":"","type_short":"GTreeState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A method that subclasses can use to be notified when tree state has been restored.  This\n method is called after a major structural tree change has happened <b>and<\/b> the paths\n that should be opened have been opened.  Thus any other nodes are closed and can be\n disposed, if desired.\n@param taskMonitor","static":false,"name":"expandedStateRestored","comment":"A method that subclasses can use to be notified when tree state has been restored.  This\n method is called after a major structural tree change has happened and the paths\n that should be opened have been opened.  Thus any other nodes are closed and can be\n disposed, if desired.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"onitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExpandedPaths","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"java.util.List<javax.swing.tree.TreePath>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"expandTree","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"expandAll","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"collapseAll","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"expandPath","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"expandPath","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"expandPaths","comment":"","params":[{"type_long":"javax.swing.tree.TreePath[]","name":"paths","comment":"","type_short":"javax.swing.tree.TreePath[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"expandPaths","comment":"","params":[{"type_long":"java.util.List<javax.swing.tree.TreePath>","name":"pathsList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSelectionPaths","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectedNode","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectedNodes","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode[]","name":"nodes","comment":"","type_short":"docking.widgets.tree.GTreeNode[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectedNodes","comment":"","params":[{"type_long":"java.util.Collection<docking.widgets.tree.GTreeNode>","name":"nodes","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectionPaths","comment":"","params":[{"type_long":"javax.swing.tree.TreePath[]","name":"paths","comment":"","type_short":"javax.swing.tree.TreePath[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectionPaths","comment":"","params":[{"type_long":"java.util.List<javax.swing.tree.TreePath>","name":"pathsList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectionPath","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to select a node by a path, starting with the tree root name, down\n each level until the desired node name.\n@param namePath The path to select","static":false,"name":"setSelectedNodeByNamePath","comment":"A convenience method to select a node by a path, starting with the tree root name, down\n each level until the desired node name.","params":[{"type_long":"java.lang.String[]","name":"namePath","comment":"The path to select","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method that allows clients that have created a new child node to select that\n node in the tree, without having to lookup the actual GTreeNode implementation.\n@param parentNode The parent containing a child by the given name\n@param childName The name of the child to select","static":false,"name":"setSeletedNodeByName","comment":"A convenience method that allows clients that have created a new child node to select that\n node in the tree, without having to lookup the actual GTreeNode implementation.","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"parentNode","comment":"The parent containing a child by the given name","type_short":"GTreeNode"},{"type_long":"java.lang.String","name":"childName","comment":"The name of the child to select","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Selects the node that matches the each name in the given tree path.  It is worth noting\n that the items in the tree path themselves are not used to identify nodes, but the\n {@link #toString()} of those items will be used.\n@param treePath The path containing the names of the path of the node to select","static":false,"name":"setSelectedNodeByPathName","comment":"Selects the node that matches the each name in the given tree path.  It is worth noting\n that the items in the tree path themselves are not used to identify nodes, but the\n #toString() of those items will be used.","params":[{"type_long":"javax.swing.tree.TreePath","name":"treePath","comment":"The path containing the names of the path of the node to select","type_short":"TreePath"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setSelectionPaths","comment":"","params":[{"type_long":"javax.swing.tree.TreePath[]","name":"path","comment":"","type_short":"javax.swing.tree.TreePath[]"},{"type_long":"docking.widgets.tree.support.GTreeSelectionEvent.EventOrigin","name":"origin","comment":"","type_short":"EventOrigin"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isCollapsed","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setHorizontalScrollPolicy","comment":"","params":[{"type_long":"int","name":"policy","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getScrollPane","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JScrollPane","comment":"","type_short":"JScrollPane"}},{"javadoc":"Sets the size of the scroll when mouse scrolling or pressing the scroll up\/down buttons.\n Most clients will not need this method, as the default behavior of the tree is correct,\n which is to scroll based upon the size of the nodes (which is usually uniform and a\n single row in size).  However, some clients that have variable row height, with potentially\n large rows, may wish to change the scrolling behavior so that it is not too fast.\n@param increment the new (uniform) scroll increment.","static":false,"name":"setScrollableUnitIncrement","comment":"Sets the size of the scroll when mouse scrolling or pressing the scroll up\/down buttons.\n Most clients will not need this method, as the default behavior of the tree is correct,\n which is to scroll based upon the size of the nodes (which is usually uniform and a\n single row in size).  However, some clients that have variable row height, with potentially\n large rows, may wish to change the scrolling behavior so that it is not too fast.","params":[{"type_long":"int","name":"increment","comment":"the new (uniform) scroll increment.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getModel","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.internal.GTreeModel","comment":"","type_short":"GTreeModel"}},{"javadoc":"","static":false,"name":"getJTree","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JTree","comment":"","type_short":"JTree"}},{"javadoc":"","static":false,"name":"getViewPosition","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Point","comment":"","type_short":"Point"}},{"javadoc":"","static":false,"name":"setViewPosition","comment":"","params":[{"type_long":"java.awt.Point","name":"p","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getViewRect","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"","type_short":"Rectangle"}},{"javadoc":"","static":false,"name":"getNodeForLocation","comment":"","params":[{"type_long":"int","name":"x","comment":"","type_short":"int"},{"type_long":"int","name":"y","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeNode","comment":"","type_short":"GTreeNode"}},{"javadoc":"Gets the node for the given path.  This is useful if the node that is in the path has\n been replaced by a new node that is equal, but a different instance.\n@param path the path of the node\n@return the current node in the tree","static":false,"name":"getNodeForPath","comment":"Gets the node for the given path.  This is useful if the node that is in the path has\n been replaced by a new node that is equal, but a different instance.","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"the path of the node","type_short":"TreePath"}],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeNode","comment":"the current node in the tree","type_short":"GTreeNode"}},{"javadoc":"","static":false,"name":"setActiveDropTargetNode","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setFilterText","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFilterProvider","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeFilterProvider","comment":"","type_short":"GTreeFilterProvider"}},{"javadoc":"","static":false,"name":"setFilterProvider","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeFilterProvider","name":"filterProvider","comment":"","type_short":"GTreeFilterProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFilterText","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Disabled the filter text field, but allows the tree to still filter.  This is useful if\n you want to allow programmatic filtering, but to not allow the user to filter.\n@param enabled True makes the filter field editable; false makes it uneditable\n@see #setFilteringEnabled(boolean)","static":false,"name":"setFilterFieldEnabled","comment":"Disabled the filter text field, but allows the tree to still filter.  This is useful if\n you want to allow programmatic filtering, but to not allow the user to filter.","params":[{"type_long":"boolean","name":"enabled","comment":"True makes the filter field editable; false makes it uneditable","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disables all filtering performed by this tree.  Also, the filter field of the tree will\n be disabled.\n <p>\n Use this method to temporarily disable filtering.\n@param enabled True to allow normal filtering; false to disable all filtering\n@see #setFilterFieldEnabled(boolean)","static":false,"name":"setFilteringEnabled","comment":"Disables all filtering performed by this tree.  Also, the filter field of the tree will\n be disabled.\n \n Use this method to temporarily disable filtering.","params":[{"type_long":"boolean","name":"enabled","comment":"True to allow normal filtering; false to disable all filtering","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Hides the filter field.  Filtering will still take place, as defined by the\n {@link GTreeFilterProvider}.\n@param visible true to show the filter; false to hide it.\n@see #setFilteringEnabled(boolean)","static":false,"name":"setFilterVisible","comment":"Hides the filter field.  Filtering will still take place, as defined by the\n GTreeFilterProvider.","params":[{"type_long":"boolean","name":"visible","comment":"true to show the filter; false to hide it.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isFilteringEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets a transformer object used to perform filtering.  This object is responsible for\n turning the tree's nodes into a list of strings that can be searched when filtering.\n@param transformer the transformer to set","static":false,"name":"setDataTransformer","comment":"Sets a transformer object used to perform filtering.  This object is responsible for\n turning the tree's nodes into a list of strings that can be searched when filtering.","params":[{"type_long":"ghidra.util.FilterTransformer<docking.widgets.tree.GTreeNode>","name":"transformer","comment":"the transformer to set","type_short":"FilterTransformer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the filter text field in this tree.\n@return the filter text field in this tree.","static":false,"name":"getFilterField","comment":"Returns the filter text field in this tree.","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the filter text field in this tree.","type_short":"Component"}},{"javadoc":"Returns true if the given JTree is the actual JTree used by this GTree.\n@param jTree the tree to test\n@return true if the given JTree is the actual JTree used by this GTree.","static":false,"name":"isMyJTree","comment":"Returns true if the given JTree is the actual JTree used by this GTree.","params":[{"type_long":"javax.swing.JTree","name":"jTree","comment":"the tree to test","type_short":"JTree"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given JTree is the actual JTree used by this GTree.","type_short":"boolean"}},{"javadoc":"Sets the root node for the GTree.\n <p>\n Note: If this call is made from the Swing thread, then it will install a temporary\n \"In Progress\" node and then return immediately.  However, when called from any other thread,\n this method will block while any pending work is cancelled.  In this scenario, when this\n method returns, the given root node will be the actual root node.\n@param rootNode The node to set.","static":false,"name":"setRootNode","comment":"Sets the root node for the GTree.\n \n Note: If this call is made from the Swing thread, then it will install a temporary\n \"In Progress\" node and then return immediately.  However, when called from any other thread,\n this method will block while any pending work is cancelled.  In this scenario, when this\n method returns, the given root node will be the actual root node.","params":[{"type_long":"docking.widgets.tree.GTreeRootNode","name":"rootNode","comment":"The node to set.","type_short":"GTreeRootNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method always returns the root node given by the client, whether from the\n constructor or from {@link #setRootNode(GTreeRootNode)}.  There is a chance that the\n root node being used by the GUI is an \"In Progress\" node that is a placeholder used while\n this threaded tree is setting the root node.\n@return ","static":false,"name":"getRootNode","comment":"This method always returns the root node given by the client, whether from the\n constructor or from #setRootNode(GTreeRootNode).  There is a chance that the\n root node being used by the GUI is an \"In Progress\" node that is a placeholder used while\n this threaded tree is setting the root node.","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.GTreeRootNode","comment":"","type_short":"GTreeRootNode"}},{"javadoc":"This method is useful for debugging tree problems.  Don't know where else to put it.\n@param name - Use this to indicate what tree event occurred (\"node inserted\" \"node removed\", etc.)\n@param e the TreeModelEvent;","static":true,"name":"printEvent","comment":"This method is useful for debugging tree problems.  Don't know where else to put it.","params":[{"type_long":"java.io.PrintWriter","name":"out","comment":"","type_short":"PrintWriter"},{"type_long":"java.lang.String","name":"name","comment":"- Use this to indicate what tree event occurred (\"node inserted\" \"node removed\", etc.)","type_short":"String"},{"type_long":"javax.swing.event.TreeModelEvent","name":"e","comment":"the TreeModelEvent;","type_short":"TreeModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSelectionModel","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.tree.TreeSelectionModel","comment":"","type_short":"TreeSelectionModel"}},{"javadoc":"","static":false,"name":"getGTSelectionModel","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.internal.GTreeSelectionModel","comment":"","type_short":"GTreeSelectionModel"}},{"javadoc":"","static":false,"name":"setSelectionModel","comment":"","params":[{"type_long":"docking.widgets.tree.internal.GTreeSelectionModel","name":"selectionModel","comment":"","type_short":"GTreeSelectionModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getRowForPath","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"treePath","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getPathForRow","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath","comment":"","type_short":"TreePath"}},{"javadoc":"","static":false,"name":"getSelectionPath","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath","comment":"","type_short":"TreePath"}},{"javadoc":"","static":false,"name":"getSelectionPaths","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath[]","comment":"","type_short":"javax.swing.tree.TreePath[]"}},{"javadoc":"","static":false,"name":"isExpanded","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"treePath","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isPathSelected","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"treePath","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isRootVisible","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setRootVisible","comment":"","params":[{"type_long":"boolean","name":"b","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setShowsRootHandles","comment":"","params":[{"type_long":"boolean","name":"b","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"scrollPathToVisible","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"treePath","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCellEditor","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.CellEditor","comment":"","type_short":"CellEditor"}},{"javadoc":"","static":false,"name":"getPathForLocation","comment":"","params":[{"type_long":"int","name":"x","comment":"","type_short":"int"},{"type_long":"int","name":"y","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath","comment":"","type_short":"TreePath"}},{"javadoc":"","static":false,"name":"getPathBounds","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"","type_short":"Rectangle"}},{"javadoc":"","static":false,"name":"setRowHeight","comment":"","params":[{"type_long":"int","name":"rowHeight","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSelectionPath","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addTreeExpansionListener","comment":"","params":[{"type_long":"javax.swing.event.TreeExpansionListener","name":"listener","comment":"","type_short":"TreeExpansionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeTreeExpansionListener","comment":"","params":[{"type_long":"javax.swing.event.TreeExpansionListener","name":"listener","comment":"","type_short":"TreeExpansionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addGTreeSelectionListener","comment":"","params":[{"type_long":"docking.widgets.tree.support.GTreeSelectionListener","name":"listener","comment":"","type_short":"GTreeSelectionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeGTreeSelectionListener","comment":"","params":[{"type_long":"docking.widgets.tree.support.GTreeSelectionListener","name":"listener","comment":"","type_short":"GTreeSelectionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addGTModelListener","comment":"","params":[{"type_long":"javax.swing.event.TreeModelListener","name":"listener","comment":"","type_short":"TreeModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeGTModelListener","comment":"","params":[{"type_long":"javax.swing.event.TreeModelListener","name":"listener","comment":"","type_short":"TreeModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setEditable","comment":"","params":[{"type_long":"boolean","name":"editable","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"startEditing","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"parent","comment":"","type_short":"GTreeNode"},{"type_long":"java.lang.String","name":"childName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addMouseListener","comment":"","params":[{"type_long":"java.awt.event.MouseListener","name":"listener","comment":"","type_short":"MouseListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeMouseListener","comment":"","params":[{"type_long":"java.awt.event.MouseListener","name":"listener","comment":"","type_short":"MouseListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMouseListeners","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.event.MouseListener[]","comment":"","type_short":"java.awt.event.MouseListener[]"}},{"javadoc":"","static":false,"name":"setCellEditor","comment":"","params":[{"type_long":"javax.swing.tree.TreeCellEditor","name":"editor","comment":"","type_short":"TreeCellEditor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isPathEditable","comment":"","params":[{"type_long":"javax.swing.tree.TreePath","name":"path","comment":"","type_short":"TreePath"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Passing a value of <tt>false<\/tt> signals to disable the {@link JTree}'s default behavior\n of showing handles for leaf nodes until they are opened.\n@param enable False to disable the default JTree behavior","static":false,"name":"setPaintHandlesForLeafNodes","comment":"Passing a value of false signals to disable the JTree's default behavior\n of showing handles for leaf nodes until they are opened.","params":[{"type_long":"boolean","name":"enable","comment":"False to disable the default JTree behavior","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isRootAllowedToCollapse","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setRootNodeAllowedToCollapse","comment":"","params":[{"type_long":"boolean","name":"allowed","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getModificationID","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"showProgressPanel","comment":"","params":[{"type_long":"boolean","name":"show","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showProgress","comment":"","params":[{"type_long":"int","name":"delay","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBusy","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setBusy","comment":"","params":[{"type_long":"boolean","name":"busy","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refilter","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFilter","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.tree.support.GTreeFilter","comment":"","type_short":"GTreeFilter"}},{"javadoc":"","static":false,"name":"hasFilterText","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"clearFilter","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Used to run tree tasks.  This method is not meant for general clients of this tree, but\n rather for tasks to tell the tree to perform subtasks.\n@param task the task to run","static":false,"name":"runTask","comment":"Used to run tree tasks.  This method is not meant for general clients of this tree, but\n rather for tasks to tell the tree to perform subtasks.","params":[{"type_long":"docking.widgets.tree.GTreeTask","name":"task","comment":"the task to run","type_short":"GTreeTask"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Used to run simple GTree tasks that can be expressed as a {@link MonitoredRunnable}\n (or a lambda taking a {@link TaskMonitor}).\n <p>\n@param runnableTask {@link TaskMonitor} to watch and update with progress.","static":false,"name":"runTask","comment":"Used to run simple GTree tasks that can be expressed as a MonitoredRunnable\n (or a lambda taking a TaskMonitor).\n ","params":[{"type_long":"ghidra.util.task.MonitoredRunnable","name":"runnableTask","comment":"TaskMonitor to watch and update with progress.","type_short":"MonitoredRunnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"scheduleFilterTask","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"performNodeFiltering","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"runBulkTask","comment":"","params":[{"type_long":"docking.widgets.tree.tasks.GTreeBulkTask","name":"task","comment":"","type_short":"GTreeBulkTask"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isEditing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"stopEditing","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setNodeEditable","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"child","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isFiltered","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getToolTipText","comment":"","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"clearSizeCache","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"recurseClearSizeCache","comment":"","params":[{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"generateFilterPreferenceKey","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"getInceptionInformationFromTheFirstClassThatIsNotUs","comment":"","params":[{"type_long":"java.lang.StackTraceElement[]","name":"stackTrace","comment":"","type_short":"java.lang.StackTraceElement[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GTree","comment":"Class for creating a JTree that supports filtering, threading, and a progress bar.","fields":[{"type_long":"docking.widgets.tree.GTree.AutoScrollTree","javadoc":"","static":false,"name":"tree","comment":"","type_short":"AutoScrollTree","constant_value":null},{"type_long":"docking.widgets.tree.internal.GTreeModel","javadoc":"","static":false,"name":"model","comment":"","type_short":"GTreeModel","constant_value":null},{"type_long":"docking.widgets.tree.GTreeRootNode","javadoc":"This is the root node that either is the actual current root node, or the node that will\n be the real root node, once the Worker has loaded it.  Thus, it is possible that a call to\n {@link GTreeModel#getRoot()} will return an {@link InProgressGTreeRootNode}.  By keeping\n this variable around, we can give this node to clients, regardless of the root node\n visible in the tree.","static":false,"name":"realRootNode","comment":"This is the root node that either is the actual current root node, or the node that will\n be the real root node, once the Worker has loaded it.  Thus, it is possible that a call to\n GTreeModel#getRoot() will return an InProgressGTreeRootNode.  By keeping\n this variable around, we can give this node to clients, regardless of the root node\n visible in the tree.","type_short":"GTreeRootNode","constant_value":null},{"type_long":"javax.swing.JScrollPane","javadoc":"","static":false,"name":"scrollPane","comment":"","type_short":"JScrollPane","constant_value":null},{"type_long":"docking.widgets.tree.support.GTreeRenderer","javadoc":"","static":false,"name":"renderer","comment":"","type_short":"GTreeRenderer","constant_value":null},{"type_long":"ghidra.util.FilterTransformer<docking.widgets.tree.GTreeNode>","javadoc":"","static":false,"name":"transformer","comment":"","type_short":"FilterTransformer","constant_value":null},{"type_long":"docking.widgets.JTreeMouseListenerDelegate","javadoc":"","static":false,"name":"mouseListenerDelegate","comment":"","type_short":"JTreeMouseListenerDelegate","constant_value":null},{"type_long":"docking.widgets.tree.support.GTreeDragNDropHandler","javadoc":"","static":false,"name":"dragNDropHandler","comment":"","type_short":"GTreeDragNDropHandler","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isFilteringEnabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasFilterText","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.concurrent.atomic.AtomicLong","javadoc":"","static":false,"name":"modificationID","comment":"","type_short":"AtomicLong","constant_value":null},{"type_long":"java.lang.ThreadLocal<ghidra.util.task.TaskMonitor>","javadoc":"","static":false,"name":"threadLocalMonitor","comment":"","type_short":"ThreadLocal","constant_value":null},{"type_long":"ghidra.util.worker.PriorityWorker","javadoc":"","static":false,"name":"worker","comment":"","type_short":"PriorityWorker","constant_value":null},{"type_long":"javax.swing.Timer","javadoc":"","static":false,"name":"showTimer","comment":"","type_short":"Timer","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitorComponent","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitorComponent","constant_value":null},{"type_long":"javax.swing.JComponent","javadoc":"","static":false,"name":"progressPanel","comment":"","type_short":"JComponent","constant_value":null},{"type_long":"javax.swing.JPanel","javadoc":"","static":false,"name":"mainPanel","comment":"","type_short":"JPanel","constant_value":null},{"type_long":"docking.widgets.tree.GTreeState","javadoc":"","static":false,"name":"restoreTreeState","comment":"","type_short":"GTreeState","constant_value":null},{"type_long":"docking.widgets.tree.tasks.GTreeFilterTask","javadoc":"","static":false,"name":"lastFilterTask","comment":"","type_short":"GTreeFilterTask","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"uniquePreferenceKey","comment":"","type_short":"String","constant_value":null},{"type_long":"docking.widgets.tree.support.GTreeFilter","javadoc":"","static":false,"name":"filter","comment":"","type_short":"GTreeFilter","constant_value":null},{"type_long":"docking.widgets.tree.GTreeFilterProvider","javadoc":"","static":false,"name":"filterProvider","comment":"","type_short":"GTreeFilterProvider","constant_value":null},{"type_long":"java.util.List<docking.widgets.tree.GTreeNode>","javadoc":"","static":false,"name":"nodesToBeFiltered","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"filterUpdateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"MAX_BUFFERED_FILTERED","comment":"","type_short":"int","constant_value":null}]}
