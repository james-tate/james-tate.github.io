{"implements":["javax.swing.table.TableModel"],"javadoc":"An interface to mark that the given model uses a single object to represent each row in the\n table.\n@param <T> The type of the row object.","static":false,"methods":[{"javadoc":"","static":true,"name":"unwrap","comment":"","params":[{"type_long":"javax.swing.table.TableModel","name":"m","comment":"","type_short":"TableModel"}],"throws":[],"return":{"type_long":"javax.swing.table.TableModel","comment":"","type_short":"TableModel"}},{"javadoc":"Returns the name of this model\n@return the name of this model","static":false,"name":"getName","comment":"Returns the name of this model","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this model","type_short":"String"}},{"javadoc":"Returns the row object for the given row.  This is the row in the UI.  For models that\n know how to filter, the model row value will not match the view row value.  For\n non-filtering models the view and model rows will always be the same.\n@param viewRow the row for which to return a row object.\n@return the row object","static":false,"name":"getRowObject","comment":"Returns the row object for the given row.  This is the row in the UI.  For models that\n know how to filter, the model row value will not match the view row value.  For\n non-filtering models the view and model rows will always be the same.","params":[{"type_long":"int","name":"viewRow","comment":"the row for which to return a row object.","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"the row object","type_short":"T"}},{"javadoc":"Returns the row number for the given object.\n <p>\n <b>Note: the index returned is always the 'view' index.  For non-filtering table models,\n the 'view' and the 'model' index are the same.  However, for filtering table models,\n the 'view' may be a subset of the 'model' index.   Thus, it is possible, if this model\n is a filtering model, that the given <tt>t<\/tt> may not have a row value for the current\n state of the model (i.e., when the model is filtered in the view.  If you really need to\n get the model index in such a situation, see {@link RowObjectFilterModel}.\n <\/b>\n@param t the object\n@return the row number","static":false,"name":"getRowIndex","comment":"Returns the row number for the given object.\n \n Note: the index returned is always the 'view' index.  For non-filtering table models,\n the 'view' and the 'model' index are the same.  However, for filtering table models,\n the 'view' may be a subset of the 'model' index.   Thus, it is possible, if this model\n is a filtering model, that the given t may not have a row value for the current\n state of the model (i.e., when the model is filtered in the view.  If you really need to\n get the model index in such a situation, see RowObjectFilterModel.\n ","params":[{"type_long":"T","name":"t","comment":"the object","type_short":"T"}],"throws":[],"return":{"type_long":"int","comment":"the row number","type_short":"int"}},{"javadoc":"Implementors should return the current data of the model.  For models that support\n filtering, this will be the filtered version of the data.  Furthermore, the data should be\n the underlying data and not a copy, as this method will potentially sort the given data.\n <p>\n For those subclasses using an array, you may use the <tt>Arrays<\/tt> class to create\n a list backed by the array ({@link Arrays#asList(Object...)}).\n@return the model data.","static":false,"name":"getModelData","comment":"Implementors should return the current data of the model.  For models that support\n filtering, this will be the filtered version of the data.  Furthermore, the data should be\n the underlying data and not a copy, as this method will potentially sort the given data.\n \n For those subclasses using an array, you may use the Arrays class to create\n a list backed by the array (Arrays#asList(Object...)).","params":[],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"the model data.","type_short":"List"}},{"javadoc":"Implementors are expected to return a value at the given column index for the specified\n row object.  This is essentially a more specific version of the\n {@link TableModel#getValueAt(int, int)} that allows this class's comparator objects to work.\n@param t The object that represents a given row.\n@param columnIndex The column index for which a value is requested.\n@return a value at the given column index for the specified row object.","static":false,"name":"getColumnValueForRow","comment":"Implementors are expected to return a value at the given column index for the specified\n row object.  This is essentially a more specific version of the\n TableModel#getValueAt(int, int) that allows this class's comparator objects to work.","params":[{"type_long":"T","name":"t","comment":"The object that represents a given row.","type_short":"T"},{"type_long":"int","name":"columnIndex","comment":"The column index for which a value is requested.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"a value at the given column index for the specified row object.","type_short":"Object"}},{"javadoc":"Sends an event to all listeners that all the data inside of this model may have changed.","static":false,"name":"fireTableDataChanged","comment":"Sends an event to all listeners that all the data inside of this model may have changed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RowObjectTableModel","comment":"An interface to mark that the given model uses a single object to represent each row in the\n table.","fields":[]}
