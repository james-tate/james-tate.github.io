{"implements":["docking.widgets.table.RowObjectFilterModel"],"javadoc":"The base implementation of the threaded table model.\n <p>\n You can optionally set this model to load data incrementally by passing the correct\n constructor argument.  Note, if you make this model incremental, then you need to set an\n incremental task monitor in order to get feedback about loading\n (see {@link #setIncrementalTaskMonitor(TaskMonitor)}.  Alternatively, you can use\n a {@link GThreadedTablePanel}, which will install the proper monitor for you.\n@param <ROW_OBJECT> the row object class for this table model.\n@param <DATA_SOURCE> the type of data that will be returned from {@link #getDataSource()}.  This\n                    object will be given to the {@link DynamicTableColumn} objects used by this\n                    table model when\n                    {@link DynamicTableColumn#getValue(Object, ghidra.docking.settings.Settings, Object, ServiceProvider)}\n                    is called.","static":false,"extends":"docking.widgets.table.GDynamicColumnTableModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"ghidra.framework.plugintool.ServiceProvider","name":"serviceProvider","comment":"","type_short":"ServiceProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"modelName","comment":"","type_short":"String"},{"type_long":"ghidra.framework.plugintool.ServiceProvider","name":"serviceProvider","comment":"","type_short":"ServiceProvider"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The constructor through which all others pass.\n <p>\n This class must be created on the Swing Thread\n (see {@link SwingUtilities#isEventDispatchThread()}).\n@param modelName The name of the table model. This value will appear as the name of the\n                  thread that manipulates the table data.\n@param serviceProvider The service provider of the environment.  This will be used to\n                        allow column objects to have access to services.  This man not be\n                        null.\n@param monitor The task monitor to use when manipulating table data (i.e., loading, sorting,\n                filtering).\n@param loadIncrementally When true, the table's results will be displayed as they are\n                          loaded; when false, the table's results will be displayed after\n                          all items have been loaded.  Passing true is helpful for models\n                          that take a long time to run and periodically find data.\n                          Alternatively, for quick loading tables, the overhead of loading\n                          incrementally is wasteful.","static":false,"name":"<init>","comment":"The constructor through which all others pass.\n \n This class must be created on the Swing Thread\n (see SwingUtilities#isEventDispatchThread()).","params":[{"type_long":"java.lang.String","name":"modelName","comment":"The name of the table model. This value will appear as the name of the\n                  thread that manipulates the table data.","type_short":"String"},{"type_long":"ghidra.framework.plugintool.ServiceProvider","name":"serviceProvider","comment":"The service provider of the environment.  This will be used to\n                        allow column objects to have access to services.  This man not be\n                        null.","type_short":"ServiceProvider"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"The task monitor to use when manipulating table data (i.e., loading, sorting,\n                filtering).","type_short":"TaskMonitor"},{"type_long":"boolean","name":"loadIncrementally","comment":"When true, the table's results will be displayed as they are\n                          loaded; when false, the table's results will be displayed after\n                          all items have been loaded.  Passing true is helpful for models\n                          that take a long time to run and periodically find data.\n                          Alternatively, for quick loading tables, the overhead of loading\n                          incrementally is wasteful.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isLoadIncrementally","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"initializeSorting","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A package-level method.  Subclasses should not call this.\n \n <p>This exists to handle whether this model should load incrementally.\n@param monitor the monitor\n@return the loaded data\n@throws CancelledException if the load was cancelled","static":false,"name":"load","comment":"A package-level method.  Subclasses should not call this.\n \n This exists to handle whether this model should load incrementally.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the load was cancelled","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"the loaded data","type_short":"List"}},{"javadoc":"","static":false,"name":"initializeWorker","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cancelCurrentWorkerJob","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"scheduleIncrementalLoad","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createIncrementalLoadJob","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.IncrementalLoadJob<ROW_OBJECT>","comment":"","type_short":"IncrementalLoadJob"}},{"javadoc":"The basic method that all children must implement.  This is where children load their\n data.\n@param accumulator the datastructure into which you should incrementally place you table\n        row data\n@param monitor the task monitor to check for cancellations and to update progress\n@throws CancelledException if the task monitor has been cancelled and a call is made\n         to <code>monitor.checkCancelled();<\/code>.","static":false,"name":"doLoad","comment":"The basic method that all children must implement.  This is where children load their\n data.","params":[{"type_long":"ghidra.util.datastruct.Accumulator<ROW_OBJECT>","name":"accumulator","comment":"the datastructure into which you should incrementally place you table\n        row data","type_short":"Accumulator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor to check for cancellations and to update progress","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the task monitor has been cancelled and a call is made\n         to monitor.checkCancelled();.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCachedColumnValueForRow","comment":"","params":[{"type_long":"ROW_OBJECT","name":"rowObject","comment":"","type_short":"ROW_OBJECT"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":false,"name":"initializeCache","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearCache","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getModelData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getUnfilteredData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"","type_short":"List"}},{"javadoc":"Performs a quick search for the given item in the <b>unfiltered<\/b> data of this model.\n To search only for object that are visible in the GUI, use\n {@link #getIndexForRowObject(Object)}.\n@param rowObject The object for which to search\n@return The index for the given object; a negative value if the object is not in the list\n@see #getIndexForRowObject(Object)","static":false,"name":"getUnfilteredIndexForRowObject","comment":"Performs a quick search for the given item in the unfiltered data of this model.\n To search only for object that are visible in the GUI, use\n #getIndexForRowObject(Object).","params":[{"type_long":"ROW_OBJECT","name":"rowObject","comment":"The object for which to search","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"int","comment":"The index for the given object; a negative value if the object is not in the list","type_short":"int"}},{"javadoc":"Returns the row object at the given index in the <b>unfiltered data<\/b> of this model;\n null if the index is negative or larger than the list.  To search only for object\n that are visible in the GUI, use {@link #getRowObject(int)}.\n@param row The row index for which to get a row object\n@return Returns the row object at the given index in the <b>unfiltered data<\/b> of this model;\n         null if the index is negative or larger than the list.\n@see #getRowObject(int)","static":false,"name":"getUnfilteredRowObjectForIndex","comment":"Returns the row object at the given index in the unfiltered data of this model;\n null if the index is negative or larger than the list.  To search only for object\n that are visible in the GUI, use #getRowObject(int).","params":[{"type_long":"int","name":"row","comment":"The row index for which to get a row object","type_short":"int"}],"throws":[],"return":{"type_long":"ROW_OBJECT","comment":"Returns the row object at the given index in the unfiltered data of this model;\n         null if the index is negative or larger than the list.","type_short":"ROW_OBJECT"}},{"javadoc":"","static":false,"name":"createSortComparator","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.Comparator<ROW_OBJECT>","comment":"","type_short":"Comparator"}},{"javadoc":"","static":false,"name":"getValueAt","comment":"","params":[{"type_long":"int","name":"rowIndex","comment":"","type_short":"int"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":false,"name":"sort","comment":"","params":[{"type_long":"java.util.List<ROW_OBJECT>","name":"data","comment":"","type_short":"List"},{"type_long":"docking.widgets.table.TableSortingContext<ROW_OBJECT>","name":"tableSortingContext","comment":"","type_short":"TableSortingContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current sorting context, which is the next one to be applied, if a sort is\n pending; otherwise the current sorting context.\n@return the sort context","static":false,"name":"getSortingContext","comment":"Returns the current sorting context, which is the next one to be applied, if a sort is\n pending; otherwise the current sorting context.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortingContext<ROW_OBJECT>","comment":"the sort context","type_short":"TableSortingContext"}},{"javadoc":"Returns the filter for this model.  The value returned from this method will not be null,\n but will instead be an instanceof {@link NullTableFilter} when no filter is applied.   The\n value returned from this method may not actually yet be applied, depending upon when the\n background thread finishes loading.\n@return the filter","static":false,"name":"getTableFilter","comment":"Returns the filter for this model.  The value returned from this method will not be null,\n but will instead be an instanceof NullTableFilter when no filter is applied.   The\n value returned from this method may not actually yet be applied, depending upon when the\n background thread finishes loading.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","comment":"the filter","type_short":"TableFilter"}},{"javadoc":"Returns true if there is a table filter set that is not the {@link NullTableFilter}.\n@return true if there is a table filter set.","static":false,"name":"hasFitler","comment":"Returns true if there is a table filter set that is not the NullTableFilter.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there is a table filter set.","type_short":"boolean"}},{"javadoc":"Override this to change how filtering is performed.  This implementation will do nothing\n if a <tt>TableFilter<\/tt> has not been set via a call to {@link #setTableFilter(TableFilter)}.\n@param data The list of data to be filtered.\n@param monitor the progress monitor to check for cancellation.\n@param lastSortingContext the comparator used to sort data.  This can be used by overridden\n                   filter methods that need to query data about how the table is sorted.\n@return The <b>new<\/b> filtered list of data.  If no filtering takes place, then the\n \t       original list should be returned.\n@throws CancelledException If the filter operation is cancelled.","static":false,"name":"doFilter","comment":"Override this to change how filtering is performed.  This implementation will do nothing\n if a TableFilter has not been set via a call to #setTableFilter(TableFilter).","params":[{"type_long":"java.util.List<ROW_OBJECT>","name":"data","comment":"The list of data to be filtered.","type_short":"List"},{"type_long":"docking.widgets.table.TableSortingContext<ROW_OBJECT>","name":"lastSortingContext","comment":"the comparator used to sort data.  This can be used by overridden\n                   filter methods that need to query data about how the table is sorted.","type_short":"TableSortingContext"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the progress monitor to check for cancellation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"If the filter operation is cancelled.","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"The new filtered list of data.  If no filtering takes place, then the\n \t       original list should be returned.","type_short":"List"}},{"javadoc":"","static":false,"name":"getUnfilteredRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isFiltered","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the given <tt>TableFitler<\/tt> on this model.  This table filter will then be used\n by this model in the default {@link #doFilter(List, TableSortingContext, TaskMonitor)}\n method.\n@param tableFitler The filter to use for table filtering.","static":false,"name":"setTableFilter","comment":"Sets the given TableFitler on this model.  This table filter will then be used\n by this model in the default #doFilter(List, TableSortingContext, TaskMonitor)\n method.","params":[{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"tableFitler","comment":"The filter to use for table filtering.","type_short":"TableFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setAppliedTableFitler","comment":"","params":[{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"tableFitler","comment":"","type_short":"TableFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedules an update for the specified object.\n@param obj the object for which to schedule the update","static":false,"name":"updateObject","comment":"Schedules an update for the specified object.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object for which to schedule the update","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the specified object to this model and schedules an update.\n@param obj the object to add","static":false,"name":"addObject","comment":"Adds the specified object to this model and schedules an update.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object to add","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the specified object from this model and schedules an update.\n@param obj the object to remove","static":false,"name":"removeObject","comment":"Removes the specified object from this model and schedules an update.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object to remove","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateNow","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setModelState","comment":"","params":[{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","name":"allData","comment":"","type_short":"TableData"},{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","name":"filteredData","comment":"","type_short":"TableData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAllTableData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","comment":"","type_short":"TableData"}},{"javadoc":"","static":false,"name":"getCurrentTableData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","comment":"","type_short":"TableData"}},{"javadoc":"","static":false,"name":"getAllData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"","type_short":"List"}},{"javadoc":"Returns true if the model is busy. \"Busy\" means the model\n is either loading or updating.\n@return true if the model is busy","static":false,"name":"isBusy","comment":"Returns true if the model is busy. \"Busy\" means the model\n is either loading or updating.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the model is busy","type_short":"boolean"}},{"javadoc":"Returns whether this table is loading, which is somewhat misleading.\n <p>\n If this table model is an incrementally loading table model, then this method returns true\n only when an incremental load is taking place.  Otherwise, this method returns true\n whenever the update manager is busy, which may be a load operation, or just a sort\n operation.  At issue is the fact that unless we are an incrementally loading model, we\n cannot tell if we are actually loading, or just busy otherwise manipulating out data.\n@return whether this table is loading, which is somewhat misleading.","static":false,"name":"isLoading","comment":"Returns whether this table is loading, which is somewhat misleading.\n \n If this table model is an incrementally loading table model, then this method returns true\n only when an incremental load is taking place.  Otherwise, this method returns true\n whenever the update manager is busy, which may be a load operation, or just a sort\n operation.  At issue is the fact that unless we are an incrementally loading model, we\n cannot tell if we are actually loading, or just busy otherwise manipulating out data.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"whether this table is loading, which is somewhat misleading.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isWorkerBusy","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Resort the table using the current sort criteria.  This is useful if the data in the\n table has changed and is no longer sorted properly.  If the setSort method is used, nothing\n will happen because the table will think it is already sorted on that criteria.","static":false,"name":"reSort","comment":"Resort the table using the current sort criteria.  This is useful if the data in the\n table has changed and is no longer sorted properly.  If the setSort method is used, nothing\n will happen because the table will think it is already sorted on that criteria.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Triggers this class to filter the contents of the data.","static":false,"name":"reFilter","comment":"Triggers this class to filter the contents of the data.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedules the model to completely reload\n its underlying data.","static":false,"name":"reload","comment":"Schedules the model to completely reload\n its underlying data.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.AbstractTableModel#fireTableChanged(javax.swing.event.TableModelEvent)","static":false,"name":"fireTableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disposes this model.\n Once a model has been disposed, it cannot be reused.","static":false,"name":"dispose","comment":"Disposes this model.\n Once a model has been disposed, it cannot be reused.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method will clear all data and trigger fire a table data changed.  Use this method to\n immediately clear all data.  This is useful when you want to reload your table data and\n not have any old data hanging around being painted, which can produce odd results.","static":false,"name":"clearData","comment":"This method will clear all data and trigger fire a table data changed.  Use this method to\n immediately clear all data.  This is useful when you want to reload your table data and\n not have any old data hanging around being painted, which can produce odd results.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doClearData","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cancels all current and pending updates to the model. Waits until all updates have\n been cancelled.","static":false,"name":"cancelAllUpdates","comment":"Cancels all current and pending updates to the model. Waits until all updates have\n been cancelled.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.TableModel#getRowCount()","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Given a row index for the raw (unfiltered) model, return the corresponding index in the\n view (filtered) model.\n@param modelRow The row index that corresponds to unfiltered data\n@return the index of that row in the filtered data\n@see #getModelRow(int)","static":false,"name":"getViewRow","comment":"Given a row index for the raw (unfiltered) model, return the corresponding index in the\n view (filtered) model.","params":[{"type_long":"int","name":"modelRow","comment":"The row index that corresponds to unfiltered data","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the index of that row in the filtered data","type_short":"int"}},{"javadoc":"Given a row index for the view (filtered) model, return the corresponding index in the\n raw (unfiltered) model.\n@param viewRow The row index that corresponds to filtered data\n@return the index of that row in the unfiltered data\n@see #getViewRow(int)","static":false,"name":"getModelRow","comment":"Given a row index for the view (filtered) model, return the corresponding index in the\n raw (unfiltered) model.","params":[{"type_long":"int","name":"viewRow","comment":"The row index that corresponds to filtered data","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the index of that row in the unfiltered data","type_short":"int"}},{"javadoc":"","static":false,"name":"getViewIndex","comment":"","params":[{"type_long":"ROW_OBJECT","name":"t","comment":"","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getModelIndex","comment":"","params":[{"type_long":"ROW_OBJECT","name":"t","comment":"","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the name of this model.\n@return the name of this model","static":false,"name":"getName","comment":"Returns the name of this model.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this model","type_short":"String"}},{"javadoc":"Returns the corresponding row objects for the specified rows.\n@param rows the table rows\n@return the corresponding database keys","static":false,"name":"getRowObjects","comment":"Returns the corresponding row objects for the specified rows.","params":[{"type_long":"int[]","name":"rows","comment":"the table rows","type_short":"int[]"}],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"the corresponding database keys","type_short":"List"}},{"javadoc":"Sets the update delay, which is how long the model should wait before updating, after\n a change has been made the data\n@param updateDelayMillis the new update delay\n@param maxUpdateDelayMillis the new max update delay; updates will not wait past this time","static":false,"name":"setUpdateDelay","comment":"Sets the update delay, which is how long the model should wait before updating, after\n a change has been made the data","params":[{"type_long":"int","name":"updateDelayMillis","comment":"the new update delay","type_short":"int"},{"type_long":"int","name":"maxUpdateDelayMillis","comment":"the new max update delay; updates will not wait past this time","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMinDelay","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getMaxDelay","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getSortedColumnClass","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Class<?>","comment":"","type_short":"Class"}},{"javadoc":"","static":false,"name":"getUpdateManager","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.ThreadedTableModelUpdateMgr<ROW_OBJECT>","comment":"","type_short":"ThreadedTableModelUpdateMgr"}},{"javadoc":"","static":false,"name":"setDefaultTaskMonitor","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setIncrementalTaskMonitor","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a listener that will be notified of the first table load of this model.  After the\n initial load, the listener is removed.\n@param listener the listener","static":false,"name":"addInitialLoadListener","comment":"Adds a listener that will be notified of the first table load of this model.  After the\n initial load, the listener is removed.","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"the listener","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is a way to know about updates from the table.\n@param listener the listener to add\n@see #addInitialLoadListener(ThreadedTableModelListener)\n@see #removeThreadedTableModelListener(ThreadedTableModelListener)","static":false,"name":"addThreadedTableModelListener","comment":"This is a way to know about updates from the table.","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"the listener to add","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeThreadedTableModelListener","comment":"","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyFinished","comment":"","params":[{"type_long":"boolean","name":"wasCancelled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyStarted","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyPending","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ThreadedTableModel","comment":"The base implementation of the threaded table model.\n \n You can optionally set this model to load data incrementally by passing the correct\n constructor argument.  Note, if you make this model incremental, then you need to set an\n incremental task monitor in order to get feedback about loading\n (see #setIncrementalTaskMonitor(TaskMonitor).  Alternatively, you can use\n a GThreadedTablePanel, which will install the proper monitor for you.","fields":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelUpdateMgr<ROW_OBJECT>","javadoc":"","static":false,"name":"updateManager","comment":"","type_short":"ThreadedTableModelUpdateMgr","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"loadIncrementally","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"incrementalMonitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"generic.concurrent.ConcurrentListenerSet<docking.widgets.table.threaded.ThreadedTableModelListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"ConcurrentListenerSet","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"modelName","comment":"","type_short":"String","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","javadoc":"","static":false,"name":"allData","comment":"","type_short":"TableData","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableData<ROW_OBJECT>","javadoc":"","static":false,"name":"filteredData","comment":"","type_short":"TableData","constant_value":null},{"type_long":"docking.widgets.table.TableSortingContext<ROW_OBJECT>","javadoc":"","static":false,"name":"pendingSortContext","comment":"","type_short":"TableSortingContext","constant_value":null},{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","javadoc":"This variable can be in one of three states:\n \t<ul>\n \t\t<li>null - signals that there is no filter change taking place<\/li>\n \t\t<li>An instance of <tt>NullTableFitler<\/tt> - the client has removed the current\n          filter by calling {@link #setTableFilter(TableFilter)} with a null value<\/li>\n \t\t<li>An instance of a custom <tt>TableFitler<\/tt> - the client has changed the\n          filter to a non-null value by calling {@link #setTableFilter(TableFilter)}<\/li>\n  <\/ul>","static":false,"name":"pendingTableFilter","comment":"This variable can be in one of three states:\n \t\n \t\tnull - signals that there is no filter change taking place\n \t\tAn instance of NullTableFitler - the client has removed the current\n          filter by calling #setTableFilter(TableFilter) with a null value\n \t\tAn instance of a custom TableFitler - the client has changed the\n          filter to a non-null value by calling #setTableFilter(TableFilter)\n  ","type_short":"TableFilter","constant_value":null},{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","javadoc":"","static":false,"name":"tableFilter","comment":"","type_short":"TableFilter","constant_value":null},{"type_long":"java.lang.ThreadLocal<java.util.Map<ROW_OBJECT,java.util.Map<java.lang.Integer,java.lang.Object>>>","javadoc":"","static":false,"name":"threadLocalColumnCache","comment":"","type_short":"ThreadLocal","constant_value":null},{"type_long":"ghidra.util.worker.Worker","javadoc":"","static":false,"name":"worker","comment":"","type_short":"Worker","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"minUpdateDelayMillis","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxUpdateDelayMillis","comment":"","type_short":"int","constant_value":null}]}
