{"implements":[],"javadoc":"State machine object for performing the various update functions on a ThreadedTableModel.\n The general pattern is to:\n <ol>\n \t<li>Load <\/li>\n  <li>Filter <\/li>\n  <li>Process individual adds and removes <\/li>\n  <li>Sort <\/li>\n  <li>Set the processed data back on the model<\/li>\n <\/ol>\n <p>\n Not all the update functions are performed on a run of a TableUpdateJob.  If the reloadData flag is\n not set, the the data is just copied from the model's current list, instead of calling the model's\n loadData() method. If the sortComparator is null,\n then the data is not sorted (for example, when only filtering needs to be done).  If there\n are no add\/removes in the list, then that step does nothing.\n <p>\n Before the job completes, new calls to sort and filter can be called.  If the job is past the\n stage of the new call, the <tt>monitor<\/tt> is cancelled, causing the current stage to abort.  \n The next state of this job is set to the appropriate state for the call, the monitor is \n reset, and the job begins executing the next stage, based upon the new call.\n@param <T> the type of data that each row in the table represents.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModel<T,?>","name":"model","comment":"","type_short":"ThreadedTableModel"},{"type_long":"ghidra.util.task.TaskMonitor","name":"taskMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Meant to be called by subclasses, not clients.  This method will trigger this job not \n to load data, but rather to use the given data.\n@param data The data to process.","static":false,"name":"setData","comment":"Meant to be called by subclasses, not clients.  This method will trigger this job not \n to load data, but rather to use the given data.","params":[{"type_long":"docking.widgets.table.threaded.TableData<T>","name":"data","comment":"The data to process.","type_short":"TableData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows the precise disabling of the filter operation.  For example, when the user sorts, \n no filtering is needed.  If the filter has changed, then a filter will take place, \n regardless of the state of this variable.\n@param force false to reuse the current filter, if possible.","static":false,"name":"setForceFilter","comment":"Allows the precise disabling of the filter operation.  For example, when the user sorts, \n no filtering is needed.  If the filter has changed, then a filter will take place, \n regardless of the state of this variable.","params":[{"type_long":"boolean","name":"force","comment":"false to reuse the current filter, if possible.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The basic run() method that executes the state machine.","static":false,"name":"run","comment":"The basic run() method that executes the state machine.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Forces this job to completely reload the data, instead of copying from\n the model's current data.  This call is not allowed on the currently running job and is only\n appropriate for a pending job.","static":false,"name":"reload","comment":"Forces this job to completely reload the data, instead of copying from\n the model's current data.  This call is not allowed on the currently running job and is only\n appropriate for a pending job.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the Add\/Remove item to the list of items to be processed in the add\/remove phase. This\n call is not allowed on running jobs, only pending jobs.\n@param item the add\/remove item to add to the list of items to be processed in the add\/remove\n            phase of this job.\n@param maxAddRemoveCount the maximum number of add\/remove jobs to queue before performing \n        a full reload","static":false,"name":"addRemove","comment":"Adds the Add\/Remove item to the list of items to be processed in the add\/remove phase. This\n call is not allowed on running jobs, only pending jobs.","params":[{"type_long":"docking.widgets.table.AddRemoveListItem<T>","name":"item","comment":"the add\/remove item to add to the list of items to be processed in the add\/remove\n            phase of this job.","type_short":"AddRemoveListItem"},{"type_long":"int","name":"maxAddRemoveCount","comment":"the maximum number of add\/remove jobs to queue before performing \n        a full reload","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the TableColumnComparator to use for sorting the data.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n <ul>\n     <li>If the sort state hasn't happened yet, all it does is set the comparator for when \n     the sort occurs.  \n     <li>If the sort state has already been started or completed, then this method attempts\n      to stop the current process phase and cause the state\n \t\tmachine to return to the sort phase.\n     <li>If the current job has already entered the DONE state, then the sort cannot \n     take effect in this job and a false value is returned to indicate the\n sort was not handled by this job.\n <\/ul>\n@param newSortingContext the TableColumnComparator to use to sort the data.\n@param forceSort True signals to re-sort, even if this is already sorted\n@return true if the sort can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the sort job.","static":false,"name":"requestSort","comment":"Sets the TableColumnComparator to use for sorting the data.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n \n     If the sort state hasn't happened yet, all it does is set the comparator for when \n     the sort occurs.  \n     If the sort state has already been started or completed, then this method attempts\n      to stop the current process phase and cause the state\n \t\tmachine to return to the sort phase.\n     If the current job has already entered the DONE state, then the sort cannot \n     take effect in this job and a false value is returned to indicate the\n sort was not handled by this job.\n ","params":[{"type_long":"docking.widgets.table.TableSortingContext<T>","name":"newSortingContext","comment":"the TableColumnComparator to use to sort the data.","type_short":"TableSortingContext"},{"type_long":"boolean","name":"forceSort","comment":"True signals to re-sort, even if this is already sorted","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the sort can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the sort job.","type_short":"boolean"}},{"javadoc":"Tells the job that the filter criteria has changed.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the \n effect depends on the running job's state:\n <ul>\n \t  <li>If the filter state hasn't happened yet, then nothing needs to be done as this job \n \t\t\twill filter later anyway. \n    <li>If the filter state has already been started or completed, then this method \n    \t\tattempts to stop the current process phase and cause the state machine to \n    \t\treturn to the filter phase. \n    <li>If the current job has already entered the DONE state, then the filter cannot take\n     \t\teffect in this job and a false value is returned to indicate the filter was \n     \t\tnot handled by this job.\n <\/ul>\n@return true if the filter can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the filter job.","static":false,"name":"requestFilter","comment":"Tells the job that the filter criteria has changed.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the \n effect depends on the running job's state:\n \n \t  If the filter state hasn't happened yet, then nothing needs to be done as this job \n \t\t\twill filter later anyway. \n    If the filter state has already been started or completed, then this method \n    \t\tattempts to stop the current process phase and cause the state machine to \n    \t\treturn to the filter phase. \n    If the current job has already entered the DONE state, then the filter cannot take\n     \t\teffect in this job and a false value is returned to indicate the filter was \n     \t\tnot handled by this job.\n ","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the filter can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the filter job.","type_short":"boolean"}},{"javadoc":"Returns true if this job has already started or completed the sort phase.\n@return true if this job has already started or completed the sort phase.","static":false,"name":"hasSorted","comment":"Returns true if this job has already started or completed the sort phase.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this job has already started or completed the sort phase.","type_short":"boolean"}},{"javadoc":"Returns true if this job has already started or completed the filter phase.\n@return true if this job has already started or completed the filter phase.","static":false,"name":"hasFiltered","comment":"Returns true if this job has already started or completed the filter phase.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this job has already started or completed the filter phase.","type_short":"boolean"}},{"javadoc":"Transitions to the next state of this state machine. Handles the special case if the\n monitor has been cancelled by a call to sort() or filter().  In either of these cases,\n the recover state would have been set and indicates that the monitor should be reset and\n the state machine should transition to the recover state instead of the next scheduled\n state. If the monitor has been cancelled, and no recover state has been set, then the\n job was cancelled by the user and the job will end.","static":false,"name":"gotoNextState","comment":"Transitions to the next state of this state machine. Handles the special case if the\n monitor has been cancelled by a call to sort() or filter().  In either of these cases,\n the recover state would have been set and indicates that the monitor should be reset and\n the state machine should transition to the recover state instead of the next scheduled\n state. If the monitor has been cancelled, and no recover state has been set, then the\n job was cancelled by the user and the job will end.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"YOU SHOULD BE SYNCHRNOIZED WHEN CALLING THIS!","static":false,"name":"setState","comment":"YOU SHOULD BE SYNCHRNOIZED WHEN CALLING THIS!","params":[{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","name":"state","comment":"","type_short":"JobState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the next state to transition to after the given state.\n@param state the current state to transition from.\n@return the next state to be processed after the given state.","static":false,"name":"getNextState","comment":"Returns the next state to transition to after the given state.","params":[{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","name":"state","comment":"the current state to transition from.","type_short":"JobState"}],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","comment":"the next state to be processed after the given state.","type_short":"JobState"}},{"javadoc":"Calls the appropriate method to process the given state.\n@param state the state to process.\n@throws CancelledException if the job was cancelled","static":false,"name":"processState","comment":"Calls the appropriate method to process the given state.","params":[{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","name":"state","comment":"the state to process.","type_short":"JobState"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the job was cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Work method to load data for the follow on states.  If the reloadData flag is set, the data\n will be totally reloaded, else the data will be copied from the model's current data.","static":false,"name":"loadData","comment":"Work method to load data for the follow on states.  If the reloadData flag is set, the data\n will be totally reloaded, else the data will be copied from the model's current data.","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Picks the table data to use for all future states (e.g., filtering, sorting, etc).  Data\n can be reused if its filter is a superset of the pending filter.  Likewise, if the \n pending filter is itself a superset of the current filter, then this code will walk \n backwards, starting at the current table data, until it finds either the root dataset or\n a child of the root whose filter is a superset of the pending filter.\n <p>\n Reusing table data in this way has the potential to consume too much memory (in the case\n where the initial dataset is large and each subsequent filter is a subset of the \n previous filter, where each filter does't significantly reduce the newly filtered dataset.\n <p>\n Since much memory could be consumed, we provide an option in the tool to disable this\n reuse of filtered data.  When not in use, each filter change will perform a full refilter.\n This is not an issue for tables with moderate to small-sized datasets.\n@return the initial data to use for future filter and sort operations.","static":false,"name":"pickExistingTableData","comment":"Picks the table data to use for all future states (e.g., filtering, sorting, etc).  Data\n can be reused if its filter is a superset of the pending filter.  Likewise, if the \n pending filter is itself a superset of the current filter, then this code will walk \n backwards, starting at the current table data, until it finds either the root dataset or\n a child of the root whose filter is a superset of the pending filter.\n \n Reusing table data in this way has the potential to consume too much memory (in the case\n where the initial dataset is large and each subsequent filter is a subset of the \n previous filter, where each filter does't significantly reduce the newly filtered dataset.\n \n Since much memory could be consumed, we provide an option in the tool to disable this\n reuse of filtered data.  When not in use, each filter change will perform a full refilter.\n This is not an issue for tables with moderate to small-sized datasets.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableData<T>","comment":"the initial data to use for future filter and sort operations.","type_short":"TableData"}},{"javadoc":"Gets any existing data that matches the current filter, if any.\n@returns data that should be the start point for the next filter state; null if there \n          is no filter set or if the current data's filter does not match the pending filter","static":false,"name":"getReusableFilteredData","comment":"Gets any existing data that matches the current filter, if any.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableData<T>","comment":"","type_short":"TableData"}},{"javadoc":"Returns true if the data needs to be sorted.\n@return true if the data needs to be sorted.","static":false,"name":"needsSorting","comment":"Returns true if the data needs to be sorted.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the data needs to be sorted.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasNewSort","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"True if the sort applied to the table is not the same as that in the source dataset","static":false,"name":"tableSortDiffersFromSourceData","comment":"True if the sort applied to the table is not the same as that in the source dataset","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the sort can take a shortcut and just reverse the order of the data.\n@return true if the sort can take a shortcut and just reverse the order of the data.","static":false,"name":"isCurrentSortReversable","comment":"Returns true if the sort can take a shortcut and just reverse the order of the data.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the sort can take a shortcut and just reverse the order of the data.","type_short":"boolean"}},{"javadoc":"Work method to sort the data.","static":false,"name":"sortData","comment":"Work method to sort the data.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSortData","comment":"","params":[{"type_long":"java.util.List<T>","name":"data","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maybeSortSourceData","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Work method to process the add\/remove items.","static":false,"name":"doProcessAddRemoves","comment":"Work method to process the add\/remove items.","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"When sorting we cache column value lookups to increase speed.","static":false,"name":"initializeSortCache","comment":"When sorting we cache column value lookups to increase speed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear the column value lookup cache, to give back memory","static":false,"name":"clearSortCache","comment":"Clear the column value lookup cache, to give back memory","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Work method to filter the data.","static":false,"name":"doFilterData","comment":"Work method to filter the data.","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"copyCurrentFilterData","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The current data can be re-used when the data and filter have not changed \n (this implies a sort only operation)","static":false,"name":"canReuseCurrentFilteredData","comment":"The current data can be re-used when the data and filter have not changed \n (this implies a sort only operation)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getCurrentFilteredData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.threaded.TableData<T>","comment":"","type_short":"TableData"}},{"javadoc":"Work method to set the data back into the ThreadTableModel.","static":false,"name":"applyData","comment":"Work method to set the data back into the ThreadTableModel.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getStateHistoryString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"TableUpdateJob","comment":"State machine object for performing the various update functions on a ThreadedTableModel.\n The general pattern is to:\n \n \tLoad \n  Filter \n  Process individual adds and removes \n  Sort \n  Set the processed data back on the model\n \n \n Not all the update functions are performed on a run of a TableUpdateJob.  If the reloadData flag is\n not set, the the data is just copied from the model's current list, instead of calling the model's\n loadData() method. If the sortComparator is null,\n then the data is not sorted (for example, when only filtering needs to be done).  If there\n are no add\/removes in the list, then that step does nothing.\n \n Before the job completes, new calls to sort and filter can be called.  If the job is past the\n stage of the new call, the monitor is cancelled, causing the current stage to abort.  \n The next state of this job is set to the appropriate state for the call, the monitor is \n reset, and the job begins executing the next stage, based upon the new call.","fields":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModel<T,?>","javadoc":"","static":false,"name":"model","comment":"","type_short":"ThreadedTableModel","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableData<T>","javadoc":"","static":false,"name":"sourceData","comment":"","type_short":"TableData","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableData<T>","javadoc":"","static":false,"name":"updatedData","comment":"","type_short":"TableData","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"disableSubFiltering","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"reloadData","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doForceSort","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doForceFilter","comment":"","type_short":"boolean","constant_value":null},{"type_long":"docking.widgets.table.TableSortingContext<T>","javadoc":"","static":false,"name":"newSortContext","comment":"","type_short":"TableSortingContext","constant_value":null},{"type_long":"docking.widgets.table.TableSortingContext<T>","javadoc":"","static":false,"name":"lastSortContext","comment":"","type_short":"TableSortingContext","constant_value":null},{"type_long":"java.util.List<docking.widgets.table.AddRemoveListItem<T>>","javadoc":"","static":false,"name":"addRemoveList","comment":"","type_short":"List","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","javadoc":"","static":false,"name":"currentState","comment":"","type_short":"JobState","constant_value":null},{"type_long":"docking.widgets.table.threaded.TableUpdateJob.JobState","javadoc":"","static":false,"name":"pendingRequestedState","comment":"","type_short":"JobState","constant_value":null},{"type_long":"java.util.List<docking.widgets.table.threaded.TableUpdateJob.JobState>","javadoc":"","static":false,"name":"debugStateHistory","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"a flag to signal that this job is no longer being used and can die a horrible death","static":false,"name":"isFired","comment":"a flag to signal that this job is no longer being used and can die a horrible death","type_short":"boolean","constant_value":null}]}
