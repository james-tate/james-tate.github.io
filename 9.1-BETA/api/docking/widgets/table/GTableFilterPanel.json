{"implements":[],"javadoc":"This class is a panel that provides a label and text field that allows users to input text that\n filters the contents of the table.\n <p>\n This class also handles restoring selection for the client when the table has been filtered.\n See <a href=\"#restore_selection\">below<\/a> for a caveat.\n <p>\n\n <u>Filter Reminder<\/u><br>\n The filter text will flash as the table (by default) gains focus.  This is done to remind the\n user that the data has been filtered.  To change the component that triggers the flashing use\n {@link #setFocusComponent(Component)}, where the <tt>Component<\/tt> parameter is the\n component that will trigger focus flashing when it gains focus.  To disable focus flashing,\n pass in null to {@link #setFocusComponent(Component)}.\n <p>\n\n <u>Filtering<\/u><br>\n The filtering behavior is controlled by the filter button displayed to the right of this \n panel's text field.\n <p>\n\n <b><u>Important Usage Notes<\/u><\/b>\n <ul>\n     <li><b><a name=\"translation\"><\/a>You must translate row values retrieved from the table using\n     this panel.<\/b>\n     <p>\n     Since this class wraps the given table with a new model, you must use this class to\n     translate row number values.  For example, when getting the selected row, the normal Java\n     code snippet below will give the incorrect value:\n     <pre>\n         JTable table = ...\n         <font color=\"red\">int selectedRowNumber = table.getSelectedRow();<\/font>\n     <\/pre>\n     Instead, you must translate the returned value from above, as in the following snippet:\n     <pre>\n         JTable table = ...\n         <font color=\"green\">\n         int selectedRowNumber = table.getSelectedRow();\n         int modelRowNumber = tableFilterPanel.getModelRow( selectedRowNumber );  \/\/ see {@link #getModelRow(int)}\n         <\/font>\n     <\/pre>\n\n     <li><b>This class may set a new model on the given table, which can affect how tables are sized.<\/b>\n     <p>\n      If {@link JTable#getAutoCreateColumnsFromModel()} returns true, then the columns will\n      be recreated and resized when this class is constructed.\n     <li>The {@link TableFilter} used by this class will be passed the empty string (\"\") when\n     {@link TableFilter#acceptsRow(Object)} is called.\n     <li><b>You cannot rely on {@link JTable#getRowCount()} to access all of the table data,\n     since the data may be filtered.<\/b>\n     <p>\n     To get a row count that is always all of the model's data, call\n     {@link #getUnfilteredRowCount()}.\n <\/ul>\n@param <ROW_OBJECT> the row object type for this given table and model","static":false,"extends":"javax.swing.JPanel","methods":[{"javadoc":"Creates a table filter panel that filters the contents of the given table.\n@param table The table whose contents will be filtered.\n@param tableModel The table model used by the table--passed in by the type that we require","static":false,"name":"<init>","comment":"Creates a table filter panel that filters the contents of the given table.","params":[{"type_long":"javax.swing.JTable","name":"table","comment":"The table whose contents will be filtered.","type_short":"JTable"},{"type_long":"docking.widgets.table.RowObjectTableModel<ROW_OBJECT>","name":"tableModel","comment":"The table model used by the table--passed in by the type that we require","type_short":"RowObjectTableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"javax.swing.JTable","name":"table","comment":"","type_short":"JTable"},{"type_long":"docking.widgets.table.RowObjectTableModel<ROW_OBJECT>","name":"tableModel","comment":"","type_short":"RowObjectTableModel"},{"type_long":"java.lang.String","name":"filterLabel","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[{"type_long":"docking.DockingWindowManager","name":"windowManager","comment":"","type_short":"DockingWindowManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"loadFilterPreference","comment":"","params":[{"type_long":"docking.DockingWindowManager","name":"dockingWindowManager","comment":"","type_short":"DockingWindowManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doSaveState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"saveToXML","comment":"","params":[],"throws":[],"return":{"type_long":"org.jdom.Element","comment":"","type_short":"Element"}},{"javadoc":"","static":false,"name":"restoreFromXML","comment":"","params":[{"type_long":"org.jdom.Element","name":"xmlElement","comment":"","type_short":"Element"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCombinedTableFilter","comment":"","params":[{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"filter1","comment":"","type_short":"TableFilter"},{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"filter2","comment":"","type_short":"TableFilter"},{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"filter3","comment":"","type_short":"TableFilter"}],"throws":[],"return":{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","comment":"","type_short":"TableFilter"}},{"javadoc":"Adds a listener that gets notified when the filter is changed\n\n <P>Note: this listener cannot be anonymous, as the underlying storage mechanism may be\n using a weak data structure.  This means that you will need to store the listener in\n a field inside of your class.\n@param l the listener","static":false,"name":"addFilterChagnedListener","comment":"Adds a listener that gets notified when the filter is changed\n\n Note: this listener cannot be anonymous, as the underlying storage mechanism may be\n using a weak data structure.  This means that you will need to store the listener in\n a field inside of your class.","params":[{"type_long":"docking.widgets.filter.FilterListener","name":"l","comment":"the listener","type_short":"FilterListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a listener to this widget that is called when the user presses enter in the\n filtering area.\n\n <P>Note: this listener cannot be anonymous, as the underlying storage mechanism may be\n using a weak data structure.  This means that you will need to store the listener in\n a field inside of your class.\n@param callback the listener","static":false,"name":"addEnterListener","comment":"Adds a listener to this widget that is called when the user presses enter in the\n filtering area.\n\n Note: this listener cannot be anonymous, as the underlying storage mechanism may be\n using a weak data structure.  This means that you will need to store the listener in\n a field inside of your class.","params":[{"type_long":"utility.function.Callback","name":"callback","comment":"the listener","type_short":"Callback"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets a ColumnTableFilter on this panel.\n@param newFilter the ColumnTableFilter to use for filtering this table.","static":false,"name":"setColumnTableFilter","comment":"Sets a ColumnTableFilter on this panel.","params":[{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","name":"newFilter","comment":"the ColumnTableFilter to use for filtering this table.","type_short":"ColumnBasedTableFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets a custom RowFilterTransformer.  The default row transformer will gather strings\n for each column in the table and use those strings for filtering.  This method allows\n the user to have complete control on generating the strings used to filter a table row;\n for example, to only filter on some columns but not others.\n@param transformer the custom row to string transformer used to generate strings from a\n row to be used for filtering.","static":false,"name":"setFilterRowTransformer","comment":"Sets a custom RowFilterTransformer.  The default row transformer will gather strings\n for each column in the table and use those strings for filtering.  This method allows\n the user to have complete control on generating the strings used to filter a table row;\n for example, to only filter on some columns but not others.","params":[{"type_long":"docking.widgets.table.RowFilterTransformer<ROW_OBJECT>","name":"transformer","comment":"the custom row to string transformer used to generate strings from a\n row to be used for filtering.","type_short":"RowFilterTransformer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets a secondary filter that users can use to filter table rows by other criteria other than\n the text typed in at the bottom of a table.  This filter is an additional filter that will\n be applied with the typed text filter.\n@param tableFilter the additional filter to use for the table.","static":false,"name":"setSecondaryFilter","comment":"Sets a secondary filter that users can use to filter table rows by other criteria other than\n the text typed in at the bottom of a table.  This filter is an additional filter that will\n be applied with the typed text filter.","params":[{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"tableFilter","comment":"the additional filter to use for the table.","type_short":"TableFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the filter options used by the filter factory. The options are items like \"starts with\",\n \"contains\", \"regex\", etc.\n@param filterOptions the filter options to be used by the filter factory.","static":false,"name":"setFilterOptions","comment":"Sets the filter options used by the filter factory. The options are items like \"starts with\",\n \"contains\", \"regex\", etc.","params":[{"type_long":"docking.widgets.filter.FilterOptions","name":"filterOptions","comment":"the filter options to be used by the filter factory.","type_short":"FilterOptions"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildPanel","comment":"","params":[{"type_long":"java.lang.String","name":"filterLabel","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildFilterStateButton","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"","static":false,"name":"isTableColumnFilterableModel","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"buildColumnFilterStateButton","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"","static":false,"name":"initializeSavedFilters","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateColumnFilterButton","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActionStates","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.menu.ActionState<docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>>>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"showFilterDialog","comment":"","params":[{"type_long":"docking.widgets.table.RowObjectFilterModel<ROW_OBJECT>","name":"tableModel","comment":"","type_short":"RowObjectFilterModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateFilterFactory","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"installTableModel","comment":"","params":[{"type_long":"docking.widgets.table.RowObjectTableModel<ROW_OBJECT>","name":"currentModel","comment":"","type_short":"RowObjectTableModel"}],"throws":[],"return":{"type_long":"docking.widgets.table.RowObjectFilterModel<ROW_OBJECT>","comment":"","type_short":"RowObjectFilterModel"}},{"javadoc":"","static":false,"name":"createTextFilterModel","comment":"","params":[{"type_long":"docking.widgets.table.RowObjectTableModel<ROW_OBJECT>","name":"model","comment":"","type_short":"RowObjectTableModel"}],"throws":[],"return":{"type_long":"docking.widgets.table.RowObjectFilterModel<ROW_OBJECT>","comment":"","type_short":"RowObjectFilterModel"}},{"javadoc":"","static":false,"name":"getTable","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JTable","comment":"","type_short":"JTable"}},{"javadoc":"","static":false,"name":"getTableFilterModel","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.RowObjectFilterModel<ROW_OBJECT>","comment":"","type_short":"RowObjectFilterModel"}},{"javadoc":"Convenience method to refilter the table's contents","static":false,"name":"updateTableContents","comment":"Convenience method to refilter the table's contents","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyFilterChanged","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Setting this component will trigger the filter field to flash when the component gains focus.\n If you do not want the filter field to flash as focus returns to the client,\n then pass in null.\n@param component The component that will trigger the filter field to flash when it gains\n        focus.","static":false,"name":"setFocusComponent","comment":"Setting this component will trigger the filter field to flash when the component gains focus.\n If you do not want the filter field to flash as focus returns to the client,\n then pass in null.","params":[{"type_long":"java.awt.Component","name":"component","comment":"The component that will trigger the filter field to flash when it gains\n        focus.","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Overridden to focus the text field if requestFocus() is called on this panel","static":false,"name":"requestFocus","comment":"Overridden to focus the text field if requestFocus() is called on this panel","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows the caller to set tooltip text on the filter's search label.  This can be used\n to provide an indication as to exactly how the filter text field will filter the table.\n@param text The tooltip text.","static":false,"name":"setToolTipText","comment":"Allows the caller to set tooltip text on the filter's search label.  This can be used\n to provide an indication as to exactly how the filter text field will filter the table.","params":[{"type_long":"java.lang.String","name":"text","comment":"The tooltip text.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the contents of the filter's text field to the given text.\n@param text The text to set.","static":false,"name":"setFilterText","comment":"Sets the contents of the filter's text field to the given text.","params":[{"type_long":"java.lang.String","name":"text","comment":"The text to set.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the contents of the filter's text field.\n@return The filter text field text.","static":false,"name":"getFilterText","comment":"Gets the contents of the filter's text field.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"The filter text field text.","type_short":"String"}},{"javadoc":"Returns a row number for this panel's underlying table model that is tied to the given\n row number that represents a row in a table's display.  For example, if a user clicks a\n table row in a filtered table, then this method can be used to return the table's\n underlying TableModel row index for that row. <a href=\"#translation\">Click here<\/a> for more\n information.\n <p>\n <b>Update<\/b>: The simpler way of getting the selected object is to call the newly\n added {@link #getSelectedItem()} method(s), which saves the client from having to get the\n index and then lookup the data.  Further, it handles differences in filtering across\n different model implementations.\n <p>\n This method is used as a means for models to translate user actions on a table to the\n underlying data model, since table models maintain a complete list of data, some of which\n may not be displayed, due to user filtering.\n <p>\n This is the companion method to {@link #getViewRow(int)}\n@param viewRow The table's row, as seen in the display.\n@return the corresponding model row, based upon the table's row.\n@see #getSelectedItem()\n@see #getSelectedItems()","static":false,"name":"getModelRow","comment":"Returns a row number for this panel's underlying table model that is tied to the given\n row number that represents a row in a table's display.  For example, if a user clicks a\n table row in a filtered table, then this method can be used to return the table's\n underlying TableModel row index for that row. Click here for more\n information.\n \n Update: The simpler way of getting the selected object is to call the newly\n added #getSelectedItem() method(s), which saves the client from having to get the\n index and then lookup the data.  Further, it handles differences in filtering across\n different model implementations.\n \n This method is used as a means for models to translate user actions on a table to the\n underlying data model, since table models maintain a complete list of data, some of which\n may not be displayed, due to user filtering.\n \n This is the companion method to #getViewRow(int)","params":[{"type_long":"int","name":"viewRow","comment":"The table's row, as seen in the display.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the corresponding model row, based upon the table's row.","type_short":"int"}},{"javadoc":"Returns a row number in the table (the view) for the given table model row number (the\n model).  The given value is the <b>unfiltered<\/b> row value and the returned value is the\n <b>filtered<\/b> value.\n <p>\n This is the companion method to {@link #getModelRow(int)}\n@param modelRow the row number in the unfiltered model.\n@return the row in the table for the given model row.","static":false,"name":"getViewRow","comment":"Returns a row number in the table (the view) for the given table model row number (the\n model).  The given value is the unfiltered row value and the returned value is the\n filtered value.\n \n This is the companion method to #getModelRow(int)","params":[{"type_long":"int","name":"modelRow","comment":"the row number in the unfiltered model.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the row in the table for the given model row.","type_short":"int"}},{"javadoc":"Returns the row object for the given view row index.\n@param viewRow the desired row in terms of the UI (e.g., the table's row index)\n@return the row object matching the given index","static":false,"name":"getRowObject","comment":"Returns the row object for the given view row index.","params":[{"type_long":"int","name":"viewRow","comment":"the desired row in terms of the UI (e.g., the table's row index)","type_short":"int"}],"throws":[],"return":{"type_long":"ROW_OBJECT","comment":"the row object matching the given index","type_short":"ROW_OBJECT"}},{"javadoc":"Select the given row object.  No selection will be made if the object is filtered out of\n view.\n@param t the row object to select","static":false,"name":"setSelectedItem","comment":"Select the given row object.  No selection will be made if the object is filtered out of\n view.","params":[{"type_long":"ROW_OBJECT","name":"t","comment":"the row object to select","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Scrolls the view to the currently selected item.","static":false,"name":"scrollToSelectedRow","comment":"Scrolls the view to the currently selected item.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the currently selected row object or null if there is no table selection.\n@return the currently selected row object or null if there is no table selection.","static":false,"name":"getSelectedItem","comment":"Returns the currently selected row object or null if there is no table selection.","params":[],"throws":[],"return":{"type_long":"ROW_OBJECT","comment":"the currently selected row object or null if there is no table selection.","type_short":"ROW_OBJECT"}},{"javadoc":"Returns the currently selected row objects or an empty list if there is no selection.\n@return the currently selected row objects or an empty list if there is no selection.","static":false,"name":"getSelectedItems","comment":"Returns the currently selected row objects or an empty list if there is no selection.","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"the currently selected row objects or an empty list if there is no selection.","type_short":"List"}},{"javadoc":"Returns true if the given row object is currently in the view of the table; false implies\n the object has been filtered out of view.\n@param o the row object\n@return true if in the view","static":false,"name":"isInView","comment":"Returns true if the given row object is currently in the view of the table; false implies\n the object has been filtered out of view.","params":[{"type_long":"ROW_OBJECT","name":"o","comment":"the row object","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"boolean","comment":"true if in the view","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isFiltered","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getUnfilteredRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Generates a key used to store user filter configuration state.  You can override this\n method to generate unique keys yourself.  You are required to override this method if\n you create multiple versions of a filter panel from the same place in your code, as\n multiple instances created in the same place will cause them all to share the same key and\n thus to have the same filter settings when they are created initially.\n <p>\n As an example, consider a plugin that creates <tt>n<\/tt> providers.  If each provider uses\n a filter panel, then each provider will share the same filter settings when that provider\n is created.  If this is not what you want, then you need to override this method to\n generate a unique key for each provider.\n@param jTable the table\n@return a key used to store user filter configuration state.","static":false,"name":"createUniqueFilterPreferenceKey","comment":"Generates a key used to store user filter configuration state.  You can override this\n method to generate unique keys yourself.  You are required to override this method if\n you create multiple versions of a filter panel from the same place in your code, as\n multiple instances created in the same place will cause them all to share the same key and\n thus to have the same filter settings when they are created initially.\n \n As an example, consider a plugin that creates n providers.  If each provider uses\n a filter panel, then each provider will share the same filter settings when that provider\n is created.  If this is not what you want, then you need to override this method to\n generate a unique key for each provider.","params":[{"type_long":"javax.swing.JTable","name":"jTable","comment":"the table","type_short":"JTable"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a key used to store user filter configuration state.","type_short":"String"}},{"javadoc":"Returns the ColumnTableFilter that has been set on this GTableFilterPanel or null if there\n is none.\n@return the ColumnTableFilter that has been set.","static":false,"name":"getColumnTableFilter","comment":"Returns the ColumnTableFilter that has been set on this GTableFilterPanel or null if there\n is none.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","comment":"the ColumnTableFilter that has been set.","type_short":"ColumnBasedTableFilter"}},{"javadoc":"Return a unique key that can be used to store preferences for this table.\n@return a unique key that can be used to store preferences for this table.","static":false,"name":"getPreferenceKey","comment":"Return a unique key that can be used to store preferences for this table.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a unique key that can be used to store preferences for this table.","type_short":"String"}},{"javadoc":"Updates the \"quick filter\" multistate button.\n@param filter the filter to add or remove.\n@param add if true, the filter is added to the quick list. Otherwise, it is removed.","static":false,"name":"updateSavedFilters","comment":"Updates the \"quick filter\" multistate button.","params":[{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","name":"filter","comment":"the filter to add or remove.","type_short":"ColumnBasedTableFilter"},{"type_long":"boolean","name":"add","comment":"if true, the filter is added to the quick list. Otherwise, it is removed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"generateFilterPreferenceKey","comment":"","params":[{"type_long":"javax.swing.JTable","name":"jTable","comment":"","type_short":"JTable"},{"type_long":"java.lang.String","name":"extension","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"getInceptionInformationFromTheFirstClassThatIsNotUs","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getFilterName","comment":"","params":[{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","name":"filter","comment":"","type_short":"ColumnBasedTableFilter"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GTableFilterPanel","comment":"This class is a panel that provides a label and text field that allows users to input text that\n filters the contents of the table.\n \n This class also handles restoring selection for the client when the table has been filtered.\n See below for a caveat.\n \n\n Filter Reminder\n The filter text will flash as the table (by default) gains focus.  This is done to remind the\n user that the data has been filtered.  To change the component that triggers the flashing use\n #setFocusComponent(Component), where the Component parameter is the\n component that will trigger focus flashing when it gains focus.  To disable focus flashing,\n pass in null to #setFocusComponent(Component).\n \n\n Filtering\n The filtering behavior is controlled by the filter button displayed to the right of this \n panel's text field.\n \n\n Important Usage Notes\n \n     You must translate row values retrieved from the table using\n     this panel.\n     \n     Since this class wraps the given table with a new model, you must use this class to\n     translate row number values.  For example, when getting the selected row, the normal Java\n     code snippet below will give the incorrect value:\n     \n         JTable table = ...\n         int selectedRowNumber = table.getSelectedRow();\n     \n     Instead, you must translate the returned value from above, as in the following snippet:\n     \n         JTable table = ...\n         \n         int selectedRowNumber = table.getSelectedRow();\n         int modelRowNumber = tableFilterPanel.getModelRow( selectedRowNumber );  \/\/ see #getModelRow(int)\n         \n     \n\n     This class may set a new model on the given table, which can affect how tables are sized.\n     \n      If JTable#getAutoCreateColumnsFromModel() returns true, then the columns will\n      be recreated and resized when this class is constructed.\n     The TableFilter used by this class will be passed the empty string (\"\") when\n     TableFilter#acceptsRow(Object) is called.\n     You cannot rely on JTable#getRowCount() to access all of the table data,\n     since the data may be filtered.\n     \n     To get a row count that is always all of the model's data, call\n     #getUnfilteredRowCount().\n ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FILTER_TEXTFIELD_NAME","comment":"","type_short":"String","constant_value":"\"filter.panel.textfield\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FILTER_STATE","comment":"","type_short":"String","constant_value":"\"FILTER_STATE\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FILTER_EXTENSION","comment":"","type_short":"String","constant_value":"\".FilterExtension\""},{"type_long":"javax.swing.Icon","javadoc":"","static":true,"name":"FILTER_ON_ICON","comment":"","type_short":"Icon","constant_value":null},{"type_long":"javax.swing.Icon","javadoc":"","static":true,"name":"FILTER_OFF_ICON","comment":"","type_short":"Icon","constant_value":null},{"type_long":"javax.swing.Icon","javadoc":"","static":true,"name":"APPLY_FILTER_ICON","comment":"","type_short":"Icon","constant_value":null},{"type_long":"javax.swing.Icon","javadoc":"","static":true,"name":"CLEAR_FILTER_ICON","comment":"","type_short":"Icon","constant_value":null},{"type_long":"javax.swing.JTable","javadoc":"","static":false,"name":"table","comment":"","type_short":"JTable","constant_value":null},{"type_long":"docking.widgets.table.RowObjectFilterModel<ROW_OBJECT>","javadoc":"","static":false,"name":"textFilterModel","comment":"","type_short":"RowObjectFilterModel","constant_value":null},{"type_long":"javax.swing.JLabel","javadoc":"","static":false,"name":"searchLabel","comment":"","type_short":"JLabel","constant_value":null},{"type_long":"docking.widgets.filter.FilterTextField","javadoc":"","static":false,"name":"filterField","comment":"","type_short":"FilterTextField","constant_value":null},{"type_long":"docking.widgets.filter.FilterListener","javadoc":"","static":false,"name":"filterListener","comment":"","type_short":"FilterListener","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<utility.function.Callback>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"docking.widgets.filter.FilterOptions","javadoc":"","static":false,"name":"filterOptions","comment":"","type_short":"FilterOptions","constant_value":null},{"type_long":"docking.widgets.table.TableTextFilterFactory<ROW_OBJECT>","javadoc":"","static":false,"name":"filterFactory","comment":"","type_short":"TableTextFilterFactory","constant_value":null},{"type_long":"docking.widgets.table.RowFilterTransformer<ROW_OBJECT>","javadoc":"","static":false,"name":"transformer","comment":"","type_short":"RowFilterTransformer","constant_value":null},{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","javadoc":"","static":false,"name":"secondaryTableFilter","comment":"","type_short":"TableFilter","constant_value":null},{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","javadoc":"","static":false,"name":"columnTableFilter","comment":"","type_short":"ColumnBasedTableFilter","constant_value":null},{"type_long":"java.util.List<docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>>","javadoc":"","static":false,"name":"savedFilters","comment":"","type_short":"List","constant_value":null},{"type_long":"docking.widgets.EmptyBorderButton","javadoc":"","static":false,"name":"filterStateButton","comment":"","type_short":"EmptyBorderButton","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"uniquePreferenceKey","comment":"","type_short":"String","constant_value":null},{"type_long":"docking.menu.MultiStateDockingAction<docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>>","javadoc":"","static":false,"name":"columnFilterAction","comment":"","type_short":"MultiStateDockingAction","constant_value":null},{"type_long":"docking.widgets.table.constraint.dialog.ColumnFilterDialog<ROW_OBJECT>","javadoc":"","static":false,"name":"columnFilterDialog","comment":"","type_short":"ColumnFilterDialog","constant_value":null},{"type_long":"docking.widgets.table.columnfilter.ColumnBasedTableFilter<ROW_OBJECT>","javadoc":"","static":false,"name":"lastUsedColumnFilter","comment":"","type_short":"ColumnBasedTableFilter","constant_value":null},{"type_long":"ghidra.util.task.SwingUpdateManager","javadoc":"","static":false,"name":"updateManager","comment":"","type_short":"SwingUpdateManager","constant_value":null},{"type_long":"javax.swing.event.TableColumnModelListener","javadoc":"I'm a field so that my weak reference won't go away","static":false,"name":"columnModelListener","comment":"I'm a field so that my weak reference won't go away","type_short":"TableColumnModelListener","constant_value":null},{"type_long":"java.beans.PropertyChangeListener","javadoc":"","static":false,"name":"badProgrammingPropertyChangeListener","comment":"","type_short":"PropertyChangeListener","constant_value":null}]}
