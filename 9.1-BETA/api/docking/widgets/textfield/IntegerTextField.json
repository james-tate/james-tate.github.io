{"implements":[],"javadoc":"TextField for entering integer numbers, either in decimal or hex.\n\n <P> This field does continuous checking, so\n you can't enter a bad value.\n\n <P> Internally, values are maintained using BigIntegers so this field can\n contain numbers as large as desired.  There are convenience methods for getting the value as\n either an int or long.  If using these convenience methods, you should also set the max allowed\n value so that users can't enter a value larger than can be represented by the {@link #getIntValue()}\n or {@link #getLongValue()} methods as appropriate.\n\n <P> There are several configuration options as follows:\n <UL>\n      <LI> Allows negative numbers - either support all integer numbers or just non-negative\n           numbers. See {@link #setAllowNegativeValues(boolean)} <\/LI>\n      <LI> Allows hex prefix - If this mode is on, then hex mode is turned on and off automatically\n           depending whether or not the text starts with 0x. Otherwise, the hex\/decimal mode is set externally\n           (either programmatically or pressing &lt;CTRL&gt; M) and the user is restricted to the numbers\/letters\n           appropriate for that mode. See {@link #setAllowsHexPrefix(boolean)}<\/LI>\n      <LI> Have a max value - a max value can be set (must be positive) such that the user can not type a\n           number greater than the max. Otherwise, the number is unlimited. See {@link #setMaxValue(BigInteger)}<\/LI>\n      <LI> Show the number mode as hint text - If on either \"Hex\" or \"Dec\" is displayed lightly in the\n \t\t     bottom right portion of the text field. See {@link #setShowNumberMode(boolean)}<\/LI>\n <\/UL>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new IntegerTextField with 5 columns and no initial value","static":false,"name":"<init>","comment":"Creates a new IntegerTextField with 5 columns and no initial value","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new IntegerTextField with the specified number of columns and no initial value\n@param columns the number of columns.","static":false,"name":"<init>","comment":"Creates a new IntegerTextField with the specified number of columns and no initial value","params":[{"type_long":"int","name":"columns","comment":"the number of columns.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new IntegerTextField with the specified number of columns and an initial value\n@param columns the number of columns to display in the JTextField.\n@param initialValue the initial value. This constructor takes an initialValue as a long.  If\n you need a value that is bigger (or smaller) than can be specified as a long, then use\n the constructor that takes a BigInteger as an initial value.","static":false,"name":"<init>","comment":"Creates a new IntegerTextField with the specified number of columns and an initial value","params":[{"type_long":"int","name":"columns","comment":"the number of columns to display in the JTextField.","type_short":"int"},{"type_long":"long","name":"initialValue","comment":"the initial value. This constructor takes an initialValue as a long.  If\n you need a value that is bigger (or smaller) than can be specified as a long, then use\n the constructor that takes a BigInteger as an initial value.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new IntegerTextField with the specified number of columns and initial value\n@param columns the number of columns\n@param initialValue the initial value","static":false,"name":"<init>","comment":"Creates a new IntegerTextField with the specified number of columns and initial value","params":[{"type_long":"int","name":"columns","comment":"the number of columns","type_short":"int"},{"type_long":"java.math.BigInteger","name":"initialValue","comment":"the initial value","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a change listener that will be notified whenever the value changes.\n@param listener the change listener to add.","static":false,"name":"addChangeListener","comment":"Adds a change listener that will be notified whenever the value changes.","params":[{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"the change listener to add.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the changes listener.\n@param listener the listener to be removed.","static":false,"name":"removeChangeListener","comment":"Removes the changes listener.","params":[{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"the listener to be removed.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current value of the field or null if the field has no current value.\n@return the current value of the field or null if the field has no current value.","static":false,"name":"getValue","comment":"Returns the current value of the field or null if the field has no current value.","params":[],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"the current value of the field or null if the field has no current value.","type_short":"BigInteger"}},{"javadoc":"Returns the current value as an int.\n\n <P> If the field has no current value, 0 will be returned. If\n the value is bigger (or smaller) than an int, it will be cast to an int.\n\n <P> If using this method, it is highly recommended that you set the max value to {@link Integer#MAX_VALUE}\n or lower.\n@return the current value as an int. Or 0 if there is no value.","static":false,"name":"getIntValue","comment":"Returns the current value as an int.\n\n  If the field has no current value, 0 will be returned. If\n the value is bigger (or smaller) than an int, it will be cast to an int.\n\n  If using this method, it is highly recommended that you set the max value to Integer#MAX_VALUE\n or lower.","params":[],"throws":[],"return":{"type_long":"int","comment":"the current value as an int. Or 0 if there is no value.","type_short":"int"}},{"javadoc":"Returns the current value as a long.\n\n <P> If the field has no current value, 0 will be returned. If\n the value is bigger (or smaller) than an long, it will be cast to a long.\n\n <P> If using this method, it is highly recommended that you set the max value to {@link Long#MAX_VALUE}\n or lower.\n@return the current value as a long. Or 0 if there is no value.","static":false,"name":"getLongValue","comment":"Returns the current value as a long.\n\n  If the field has no current value, 0 will be returned. If\n the value is bigger (or smaller) than an long, it will be cast to a long.\n\n  If using this method, it is highly recommended that you set the max value to Long#MAX_VALUE\n or lower.","params":[],"throws":[],"return":{"type_long":"long","comment":"the current value as a long. Or 0 if there is no value.","type_short":"long"}},{"javadoc":"Convenience method for setting the value to a long value;\n@param newValue the new value for the field.","static":false,"name":"setValue","comment":"Convenience method for setting the value to a long value;","params":[{"type_long":"long","name":"newValue","comment":"the new value for the field.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Convenience method for setting the value to an int value;\n@param newValue the new value for the field.","static":false,"name":"setValue","comment":"Convenience method for setting the value to an int value;","params":[{"type_long":"int","name":"newValue","comment":"the new value for the field.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the value of the field to the given value.  A null value will clear the field.\n@param newValue the new value or null.","static":false,"name":"setValue","comment":"Sets the value of the field to the given value.  A null value will clear the field.","params":[{"type_long":"java.math.BigInteger","name":"newValue","comment":"the new value or null.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Turns on or off the faded text that displays the field's radix mode (hex or decimal).\n@param show true to show the radix mode.","static":false,"name":"setShowNumberMode","comment":"Turns on or off the faded text that displays the field's radix mode (hex or decimal).","params":[{"type_long":"boolean","name":"show","comment":"true to show the radix mode.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the radix mode to Hex.\n\n <P> If the field is currently in decimal mode, the current text will be\n change from displaying the current value from decimal to hex.","static":false,"name":"setHexMode","comment":"Sets the radix mode to Hex.\n\n  If the field is currently in decimal mode, the current text will be\n change from displaying the current value from decimal to hex.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the mode to Decimal.\n\n <P> If the field is currently in hex mode, the current text will be\n change from displaying the current value from hex to decimal.","static":false,"name":"setDecimalMode","comment":"Sets the mode to Decimal.\n\n  If the field is currently in hex mode, the current text will be\n change from displaying the current value from hex to decimal.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets whether on not the field supports the 0x prefix.\n\n <P> If 0x is supported, hex numbers\n will be displayed with the 0x prefix.  Also, when typing, you must type 0x first to enter\n a hex number, otherwise it will only allow digits 0-9.  If the 0x prefix option is turned\n off, then hex numbers are displayed without the 0x prefix and you can't change the decimal\/hex\n mode by typing 0x.  The field will either be in decimal or hex mode and the typed text\n will be interpreted appropriately for the mode.\n@param allowsHexPrefix true to use the 0x convention for hex.","static":false,"name":"setAllowsHexPrefix","comment":"Sets whether on not the field supports the 0x prefix.\n\n  If 0x is supported, hex numbers\n will be displayed with the 0x prefix.  Also, when typing, you must type 0x first to enter\n a hex number, otherwise it will only allow digits 0-9.  If the 0x prefix option is turned\n off, then hex numbers are displayed without the 0x prefix and you can't change the decimal\/hex\n mode by typing 0x.  The field will either be in decimal or hex mode and the typed text\n will be interpreted appropriately for the mode.","params":[{"type_long":"boolean","name":"allowsHexPrefix","comment":"true to use the 0x convention for hex.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current text displayed in the field.\n@return the current text displayed in the field.","static":false,"name":"getText","comment":"Returns the current text displayed in the field.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the current text displayed in the field.","type_short":"String"}},{"javadoc":"Returns true if in hex mode, false if in decimal mode.\n@return true if in hex mode, false if in decimal mode.","static":false,"name":"isHexMode","comment":"Returns true if in hex mode, false if in decimal mode.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if in hex mode, false if in decimal mode.","type_short":"boolean"}},{"javadoc":"Sets whether or not negative numbers are accepted.\n@param b if true, negative numbers are allowed.","static":false,"name":"setAllowNegativeValues","comment":"Sets whether or not negative numbers are accepted.","params":[{"type_long":"boolean","name":"b","comment":"if true, negative numbers are allowed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current maximum allowed value.  Null indicates that there is no maximum value.\n@return the current maximum value allowed.","static":false,"name":"getMaxValue","comment":"Returns the current maximum allowed value.  Null indicates that there is no maximum value.","params":[],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"the current maximum value allowed.","type_short":"BigInteger"}},{"javadoc":"Sets the maximum allowed value.  The maximum must be a positive number.  Null indicates that\n there is no maximum value.\n@param maxValue the maximum value to allow.","static":false,"name":"setMaxValue","comment":"Sets the maximum allowed value.  The maximum must be a positive number.  Null indicates that\n there is no maximum value.","params":[{"type_long":"java.math.BigInteger","name":"maxValue","comment":"the maximum value to allow.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the JTextField component that this class manages.\n@return the JTextField component that this class manages.","static":false,"name":"getComponent","comment":"Returns the JTextField component that this class manages.","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"the JTextField component that this class manages.","type_short":"JComponent"}},{"javadoc":"Adds an ActionListener to the TextField.\n@param listener the ActionListener to add.","static":false,"name":"addActionListener","comment":"Adds an ActionListener to the TextField.","params":[{"type_long":"java.awt.event.ActionListener","name":"listener","comment":"the ActionListener to add.","type_short":"ActionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes an ActionListener from the TextField.\n@param listener the ActionListener to remove.","static":false,"name":"removeActionListener","comment":"Removes an ActionListener from the TextField.","params":[{"type_long":"java.awt.event.ActionListener","name":"listener","comment":"the ActionListener to remove.","type_short":"ActionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the enablement on the JTextField component;\n@param enabled true for enabled, false for disabled.","static":false,"name":"setEnabled","comment":"Sets the enablement on the JTextField component;","params":[{"type_long":"boolean","name":"enabled","comment":"true for enabled, false for disabled.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Requests focus to the JTextField","static":false,"name":"requestFocus","comment":"Requests focus to the JTextField","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Selects the text in the JTextField","static":false,"name":"selectAll","comment":"Selects the text in the JTextField","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"computeTextForValue","comment":"","params":[{"type_long":"java.math.BigInteger","name":"value","comment":"","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"computeValueFromString","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"","static":false,"name":"valueChanged","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toggleMode","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"passesMaxCheck","comment":"","params":[{"type_long":"java.math.BigInteger","name":"value","comment":"","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"updateNumberMode","comment":"","params":[{"type_long":"java.lang.String","name":"text","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the textField to the given value taking into account the current configuation.\n@param value the value to convert to a string for the textField.","static":false,"name":"updateTextField","comment":"Sets the textField to the given value taking into account the current configuation.","params":[{"type_long":"java.math.BigInteger","name":"value","comment":"the value to convert to a string for the textField.","type_short":"BigInteger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isValidPrefix","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"IntegerTextField","comment":"TextField for entering integer numbers, either in decimal or hex.\n\n  This field does continuous checking, so\n you can't enter a bad value.\n\n  Internally, values are maintained using BigIntegers so this field can\n contain numbers as large as desired.  There are convenience methods for getting the value as\n either an int or long.  If using these convenience methods, you should also set the max allowed\n value so that users can't enter a value larger than can be represented by the #getIntValue()\n or #getLongValue() methods as appropriate.\n\n  There are several configuration options as follows:\n \n       Allows negative numbers - either support all integer numbers or just non-negative\n           numbers. See #setAllowNegativeValues(boolean) \n       Allows hex prefix - If this mode is on, then hex mode is turned on and off automatically\n           depending whether or not the text starts with 0x. Otherwise, the hex\/decimal mode is set externally\n           (either programmatically or pressing CTRL M) and the user is restricted to the numbers\/letters\n           appropriate for that mode. See #setAllowsHexPrefix(boolean)\n       Have a max value - a max value can be set (must be positive) such that the user can not type a\n           number greater than the max. Otherwise, the number is unlimited. See #setMaxValue(BigInteger)\n       Show the number mode as hint text - If on either \"Hex\" or \"Dec\" is displayed lightly in the\n \t\t     bottom right portion of the text field. See #setShowNumberMode(boolean)\n ","fields":[{"type_long":"javax.swing.JTextField","javadoc":"","static":false,"name":"textField","comment":"","type_short":"JTextField","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isHexMode","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowsNegative","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"allowsHexPrefix","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"showNumbericDecoration","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.math.BigInteger","javadoc":"","static":false,"name":"maxValue","comment":"","type_short":"BigInteger","constant_value":null},{"type_long":"java.util.List<javax.swing.event.ChangeListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"List","constant_value":null}]}
