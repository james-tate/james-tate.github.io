{"implements":["docking.widgets.GComponent"],"javadoc":"GhidraComboBox adds the following features:\n \n 1) ActionListeners are only invoked when the &lt;Enter&gt; key\n is pressed within the text-field of the combo-box. \n In normal JComboBox case, the ActionListeners are notified\n when an item is selected from the list.\n \n 2) Adds the auto-completion feature. As a user\n types in the field, the combo box suggest the nearest matching\n entry in the combo box model.\n \n It also fixes the following bug:\n \n A normal JComboBox has a problem (feature?) \n that if you have a dialog with a button\n and JComboBox and you edit the comboText field and \n then hit the button, the button sometimes does not work.\n \n When the combobox loses focus,\n and its text has changed, it generates an actionPerformed event as\n though the user pressed &lt;Enter&gt; in the combo text field.  This\n has a bizarre effect if you have added an actionPerformed listener\n to the combobox and in your callback you adjust the enablement state\n of the button that you pressed (which caused the text field to lose\n focus) in that you end up changing the button's internal state(by calling\n setEnabled(true or false)) in the middle of the button press.","static":false,"extends":"javax.swing.JComboBox","methods":[{"javadoc":"Default constructor.","static":false,"name":"<init>","comment":"Default constructor.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new GhidraComboBox using the given model.\n@see javax.swing.JComboBox#JComboBox(ComboBoxModel)","static":false,"name":"<init>","comment":"Construct a new GhidraComboBox using the given model.","params":[{"type_long":"javax.swing.ComboBoxModel<E>","name":"aModel","comment":"","type_short":"ComboBoxModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new GhidraComboBox and populate a default model\n with the given items.\n@see javax.swing.JComboBox#JComboBox(Object[])","static":false,"name":"<init>","comment":"Construct a new GhidraComboBox and populate a default model\n with the given items.","params":[{"type_long":"E[]","name":"items","comment":"","type_short":"E[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new GhidraComboBox and populate a default model with\n the given Vector of items.\n@see javax.swing.JComboBox#JComboBox(Vector)","static":false,"name":"<init>","comment":"Construct a new GhidraComboBox and populate a default model with\n the given Vector of items.","params":[{"type_long":"java.util.Vector<E>","name":"items","comment":"","type_short":"Vector"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setUI","comment":"","params":[{"type_long":"javax.swing.plaf.ComboBoxUI","name":"ui","comment":"","type_short":"ComboBoxUI"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"HACK ALERT:  By default, the JComboBoxUI forwards the &lt;Enter&gt; key actions to the root pane\n of the JComboBox's container (which is used primarily by any installed 'default button').\n The problem is that the forwarding does not happen always.  In the case that the &lt;Enter&gt;\n key will trigger a selection in the combo box, the action is NOT forwarded.\n <p>\n By default Ghidra disables the forwarding altogether, since most users of \n {@link GhidraComboBox} will add an action listener to handle &lt;Enter&gt; actions.\n <p>\n To re-enable the default behavior, set the <tt>forwardEnter<\/tt> value to true.\n@param forwardEnter true to enable default &lt;Enter&gt; key handling.","static":false,"name":"setEnterKeyForwarding","comment":"HACK ALERT:  By default, the JComboBoxUI forwards the Enter key actions to the root pane\n of the JComboBox's container (which is used primarily by any installed 'default button').\n The problem is that the forwarding does not happen always.  In the case that the Enter\n key will trigger a selection in the combo box, the action is NOT forwarded.\n \n By default Ghidra disables the forwarding altogether, since most users of \n GhidraComboBox will add an action listener to handle Enter actions.\n \n To re-enable the default behavior, set the forwardEnter value to true.","params":[{"type_long":"boolean","name":"forwardEnter","comment":"true to enable default Enter key handling.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getText","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setSelectedItem","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the size of the text field editor used by this combo box, <b>if that is the type of\n editor used<\/b>.  By default the editor for combo boxes is a text field.  This method is\n a convenience for the user to set the number of columns on that text field, which updates\n the preferred size of the combo box.\n@param columnCount The number of columns for the text field editor\n@see JTextField#setColumns(int)","static":false,"name":"setColumnCount","comment":"Sets the size of the text field editor used by this combo box, if that is the type of\n editor used.  By default the editor for combo boxes is a text field.  This method is\n a convenience for the user to set the number of columns on that text field, which updates\n the preferred size of the combo box.","params":[{"type_long":"int","name":"columnCount","comment":"The number of columns for the text field editor","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A fix for the following series of events:\n -The user selects an item\n -The user deletes the text\n -setSelectedItem(Object) method is called with the same item\n \n In that above series of steps, the text will still be empty, as the user deleted it *and*\n the call to setSelectedItem(Object) had no effect because the base class assumed that the\n item is already selected. \n \n This method exists to make sure, in that case, that the text of the field matches the\n selected item.","static":false,"name":"updateTextFieldTextForClearedSelection","comment":"A fix for the following series of events:\n -The user selects an item\n -The user deletes the text\n -setSelectedItem(Object) method is called with the same item\n \n In that above series of steps, the text will still be empty, as the user deleted it *and*\n the call to setSelectedItem(Object) had no effect because the base class assumed that the\n item is already selected. \n \n This method exists to make sure, in that case, that the text of the field matches the\n selected item.","params":[{"type_long":"javax.swing.JTextField","name":"comboBoxTextField","comment":"","type_short":"JTextField"},{"type_long":"java.lang.Object","name":"selectedItem","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"selectAll","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove all entries in the drop down list","static":false,"name":"clearModel","comment":"Remove all entries in the drop down list","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addToModel","comment":"","params":[{"type_long":"E","name":"obj","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"containsItem","comment":"","params":[{"type_long":"E","name":"obj","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addActionListener","comment":"","params":[{"type_long":"java.awt.event.ActionListener","name":"l","comment":"","type_short":"ActionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeActionListener","comment":"","params":[{"type_long":"java.awt.event.ActionListener","name":"l","comment":"","type_short":"ActionListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addDocumentListener","comment":"","params":[{"type_long":"javax.swing.event.DocumentListener","name":"l","comment":"","type_short":"DocumentListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeDocumentListener","comment":"","params":[{"type_long":"javax.swing.event.DocumentListener","name":"l","comment":"","type_short":"DocumentListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyActionListeners","comment":"","params":[{"type_long":"java.awt.event.ActionEvent","name":"e","comment":"","type_short":"ActionEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyInsert","comment":"","params":[{"type_long":"javax.swing.event.DocumentEvent","name":"e","comment":"","type_short":"DocumentEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyChanged","comment":"","params":[{"type_long":"javax.swing.event.DocumentEvent","name":"e","comment":"","type_short":"DocumentEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"notifyRemove","comment":"","params":[{"type_long":"javax.swing.event.DocumentEvent","name":"e","comment":"","type_short":"DocumentEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"matchHistory","comment":"","params":[{"type_long":"java.lang.String","name":"input","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GhidraComboBox","comment":"GhidraComboBox adds the following features:\n \n 1) ActionListeners are only invoked when the Enter key\n is pressed within the text-field of the combo-box. \n In normal JComboBox case, the ActionListeners are notified\n when an item is selected from the list.\n \n 2) Adds the auto-completion feature. As a user\n types in the field, the combo box suggest the nearest matching\n entry in the combo box model.\n \n It also fixes the following bug:\n \n A normal JComboBox has a problem (feature?) \n that if you have a dialog with a button\n and JComboBox and you edit the comboText field and \n then hit the button, the button sometimes does not work.\n \n When the combobox loses focus,\n and its text has changed, it generates an actionPerformed event as\n though the user pressed Enter in the combo text field.  This\n has a bizarre effect if you have added an actionPerformed listener\n to the combobox and in your callback you adjust the enablement state\n of the button that you pressed (which caused the text field to lose\n focus) in that you end up changing the button's internal state(by calling\n setEnabled(true or false)) in the middle of the button press.","fields":[{"type_long":"java.util.ArrayList<java.awt.event.ActionListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.ArrayList<javax.swing.event.DocumentListener>","javadoc":"","static":false,"name":"docListeners","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"setSelectedFlag","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forwardEnter","comment":"","type_short":"boolean","constant_value":null},{"type_long":"javax.swing.Action","javadoc":"","static":false,"name":"defaultSystemEnterForwardingAction","comment":"","type_short":"Action","constant_value":null}]}
