{"implements":[],"javadoc":"<code>LongKeyInteriorNode<\/code> stores a BTree node for use as an interior\n node when searching for Table records within the database.  This type of node\n has the following layout within a single DataBuffer (field size in bytes):\n \n   | NodeType(1) | KeyType(1) | KeyCount(4) | KeyOffset0(4) | ID0(4) | ... | KeyOffsetN(4) | IDN(4) | \n     ...<FreeSpace>... | KeyN | ... | Key0 |","static":false,"extends":"db.VarKeyNode","methods":[{"javadoc":"Construct an existing variable-length-key interior node.\n@param nodeMgr table node manager instance\n@param buf node buffer","static":false,"name":"<init>","comment":"Construct an existing variable-length-key interior node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"node buffer","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new variable-length-key interior node with two child nodes.\n@param nodeMgr table node manager.\n@param key1 left child node left-most key\n@param id1 left child node buffer ID\n@param key2 right child node left-most key\n@param id2 right child node buffer ID\n@throws IOException thrown if IO error occurs","static":false,"name":"<init>","comment":"Construct a new variable-length-key interior node with two child nodes.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager.","type_short":"NodeMgr"},{"type_long":"db.Field","name":"key1","comment":"left child node left-most key","type_short":"Field"},{"type_long":"int","name":"id1","comment":"left child node buffer ID","type_short":"int"},{"type_long":"db.Field","name":"key2","comment":"right child node left-most key","type_short":"Field"},{"type_long":"int","name":"id2","comment":"right child node buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new empty variable-length-key interior node.\n Node must be initialized with a minimum of two keys.\n@param nodeMgr table node manager.\n@param keyType sample key Field","static":false,"name":"<init>","comment":"Construct a new empty variable-length-key interior node.\n Node must be initialized with a minimum of two keys.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager.","type_short":"NodeMgr"},{"type_long":"db.Field","name":"keyType","comment":"sample key Field","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logConsistencyError","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isConsistent","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the maximum number of bytes which may be consumed by a key.\n@param bufferLength buffer length\n@return maximum length of stored key (this includes the 4-byte length\n prefix which is stored with variable length key fields).","static":true,"name":"getMaxKeyLength","comment":"Get the maximum number of bytes which may be consumed by a key.","params":[{"type_long":"int","name":"bufferLength","comment":"buffer length","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"maximum length of stored key (this includes the 4-byte length\n prefix which is stored with variable length key fields).","type_short":"int"}},{"javadoc":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is used to identify the child\n node which contains the specified record key.\n@param key\n@return int buffer ID index.","static":false,"name":"getIdIndex","comment":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is used to identify the child\n node which contains the specified record key.","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"int buffer ID index.","type_short":"int"}},{"javadoc":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is intended to find the insertion \n index or exact match for a child key.\n@param key\n@return int buffer ID index.","static":false,"name":"getKeyIndex","comment":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.  This method is intended to find the insertion \n index or exact match for a child key.","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"int buffer ID index.","type_short":"int"}},{"javadoc":"Perform a binary search across the stored key offsets to find the\n key index which corresponds to the specified key offset.  This facilitates\n finding the key which utilizes the buffer storage at the specified \n offset.\n@returns key index.","static":false,"name":"getOffsetIndex","comment":"Perform a binary search across the stored key offsets to find the\n key index which corresponds to the specified key offset.  This facilitates\n finding the key which utilizes the buffer storage at the specified \n offset.","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the key offset within the buffer\n@param index key index\n@return record key offset","static":false,"name":"getKeyOffset","comment":"Get the key offset within the buffer","params":[{"type_long":"int","name":"index","comment":"key index","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"record key offset","type_short":"int"}},{"javadoc":"Store the key offset within the buffer for the specified key index.\n@param index key index\n@param offset key offset","static":false,"name":"putKeyOffset","comment":"Store the key offset within the buffer for the specified key index.","params":[{"type_long":"int","name":"index","comment":"key index","type_short":"int"},{"type_long":"int","name":"offset","comment":"key offset","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getKey","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Field","comment":"","type_short":"Field"}},{"javadoc":"Get the length of a specified child key.\n@param index child key index\n@return key storage length\n@throws IOException thrown if an IO error occurs","static":false,"name":"getKeyLength","comment":"Get the length of a specified child key.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"int","comment":"key storage length","type_short":"int"}},{"javadoc":"Get the child node buffer ID associated with the specified key index\n@param index child key index\n@return child node buffer ID","static":false,"name":"getBufferId","comment":"Get the child node buffer ID associated with the specified key index","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"child node buffer ID","type_short":"int"}},{"javadoc":"@return unused free space within node","static":false,"name":"getFreeSpace","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"unused free space within node","type_short":"int"}},{"javadoc":"Insert the child node entry (key and buffer ID) associated with the specified key index.\n All entries at and after index are shifted to make space for new entry.\n The node key count is adjusted to reflect the addition of a child.\n@param index child key index\n@param key child node key\n@param bufferId child node buffer ID","static":false,"name":"insertEntry","comment":"Insert the child node entry (key and buffer ID) associated with the specified key index.\n All entries at and after index are shifted to make space for new entry.\n The node key count is adjusted to reflect the addition of a child.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"},{"type_long":"db.Field","name":"key","comment":"child node key","type_short":"Field"},{"type_long":"int","name":"bufferId","comment":"child node buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the child key associated with the specified key index.\n Other entries are shifted as necessary to accomodate the new key length for \n the updated entry.\n@param index child key index\n@param updateKey updated child node key","static":false,"name":"updateKey","comment":"Update the child key associated with the specified key index.\n Other entries are shifted as necessary to accomodate the new key length for \n the updated entry.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"},{"type_long":"db.Field","name":"updateKey","comment":"updated child node key","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete the child node entry (key and buffer ID) associated with the specified key index.\n Other entries after shifted as necessary.\n The node key count is adjusted to reflect the removal of a child.\n@param index child key index","static":false,"name":"deleteEntry","comment":"Delete the child node entry (key and buffer ID) associated with the specified key index.\n Other entries after shifted as necessary.\n The node key count is adjusted to reflect the removal of a child.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move all keys from index to the end by the specified offset.\n@param index the smaller key index (0 &lt;= index1)\n@param offset movement offset in bytes\n@return insertion offset immediately following moved block.","static":false,"name":"moveKeys","comment":"Move all keys from index to the end by the specified offset.","params":[{"type_long":"int","name":"index","comment":"the smaller key index (0 = index1)","type_short":"int"},{"type_long":"int","name":"offset","comment":"movement offset in bytes","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"insertion offset immediately following moved block.","type_short":"int"}},{"javadoc":"Callback method for when a child node's leftmost key changes.\n@param oldKey previous leftmost key.\n@param newKey new leftmost key.","static":false,"name":"keyChanged","comment":"Callback method for when a child node's leftmost key changes.","params":[{"type_long":"db.Field","name":"oldKey","comment":"previous leftmost key.","type_short":"Field"},{"type_long":"db.Field","name":"newKey","comment":"new leftmost key.","type_short":"Field"},{"type_long":"db.VarKeyNode","name":"node","comment":"","type_short":"VarKeyNode"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Split this interior node and update the old key entry.\n@param oldIndex index of key to be updated\n@param oldKey old key value stored at oldIndex\n@param newKey new key value\n@throws IOException thrown if IO error occurs","static":false,"name":"split","comment":"Split this interior node and update the old key entry.","params":[{"type_long":"int","name":"oldIndex","comment":"index of key to be updated","type_short":"int"},{"type_long":"db.Field","name":"oldKey","comment":"old key value stored at oldIndex","type_short":"Field"},{"type_long":"db.Field","name":"newKey","comment":"new key value","type_short":"Field"},{"type_long":"db.VarKeyNode","name":"node","comment":"","type_short":"VarKeyNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert new child node.\n@param node new child node.\n@return root node\n@throws IOException thrown if IO error occurs","static":false,"name":"insert","comment":"Insert new child node.","params":[{"type_long":"db.VarKeyNode","name":"node","comment":"new child node.","type_short":"VarKeyNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"root node","type_short":"VarKeyNode"}},{"javadoc":"Insert a new entry into this node.\n It is assumed that there is sufficient space for the new entry.\n@param id id of new node\n@param key leftmost key associated with new node.\n@param node child node which corresponds to the id and key.\n@return root node.","static":false,"name":"insert","comment":"Insert a new entry into this node.\n It is assumed that there is sufficient space for the new entry.","params":[{"type_long":"int","name":"id","comment":"id of new node","type_short":"int"},{"type_long":"db.Field","name":"key","comment":"leftmost key associated with new node.","type_short":"Field"},{"type_long":"db.VarKeyNode","name":"node","comment":"child node which corresponds to the id and key.","type_short":"VarKeyNode"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"root node.","type_short":"VarKeyNode"}},{"javadoc":"Split this interior node and insert new child entry (key and buffer ID).  \n Assumes 3 or more child keys exist in this node.\n@param newKey new child key\n@param newId new child node's buffer ID\n@param node child node instance (corresponds to newKey and newId)\n@return root node.\n@throws IOException thrown if IO error occurs","static":false,"name":"split","comment":"Split this interior node and insert new child entry (key and buffer ID).  \n Assumes 3 or more child keys exist in this node.","params":[{"type_long":"db.Field","name":"newKey","comment":"new child key","type_short":"Field"},{"type_long":"int","name":"newId","comment":"new child node's buffer ID","type_short":"int"},{"type_long":"db.VarKeyNode","name":"node","comment":"child node instance (corresponds to newKey and newId)","type_short":"VarKeyNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"root node.","type_short":"VarKeyNode"}},{"javadoc":"","static":false,"name":"getLeafNode","comment":"","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"","type_short":"VarKeyRecordNode"}},{"javadoc":"","static":false,"name":"getLeftmostLeafNode","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"","type_short":"VarKeyRecordNode"}},{"javadoc":"","static":false,"name":"getRightmostLeafNode","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"","type_short":"VarKeyRecordNode"}},{"javadoc":"Callback method allowing child node to remove itself from parent.\n Rebalancing of the tree is performed if the interior node falls \n below the half-full point.\n@param key child node key\n@return root node\n@throws IOException thrown if IO error occurs","static":false,"name":"deleteChild","comment":"Callback method allowing child node to remove itself from parent.\n Rebalancing of the tree is performed if the interior node falls \n below the half-full point.","params":[{"type_long":"db.Field","name":"key","comment":"child node key","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"root node","type_short":"VarKeyNode"}},{"javadoc":"Callback method allowing a child interior node to request balancing of its \n content with its sibling nodes.  Balancing is only done if the specified node \n is half-full or less.\n@param node child interior node\n@return root node","static":false,"name":"balanceChild","comment":"Callback method allowing a child interior node to request balancing of its \n content with its sibling nodes.  Balancing is only done if the specified node \n is half-full or less.","params":[{"type_long":"db.VarKeyInteriorNode","name":"node","comment":"child interior node","type_short":"VarKeyInteriorNode"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"root node","type_short":"VarKeyNode"}},{"javadoc":"Balance the entries contained within two adjacent child interior nodes.\n One of the two nodes must be half-full or less.\n This could result in the removal of a child node if entries will fit within\n one node.\n@param leftNode left child interior node\n@param rightNode right child interior node\n@return new root\n@throws IOException thrown if an IO error occurs","static":false,"name":"balanceChild","comment":"Balance the entries contained within two adjacent child interior nodes.\n One of the two nodes must be half-full or less.\n This could result in the removal of a child node if entries will fit within\n one node.","params":[{"type_long":"db.VarKeyInteriorNode","name":"leftNode","comment":"left child interior node","type_short":"VarKeyInteriorNode"},{"type_long":"db.VarKeyInteriorNode","name":"rightNode","comment":"right child interior node","type_short":"VarKeyInteriorNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyNode","comment":"new root","type_short":"VarKeyNode"}},{"javadoc":"Move some (not all) of the keys from the left node into the right node.\n@param leftNode\n@param rightNode\n@param count\n@return true if movement occured, else false","static":true,"name":"moveKeysRight","comment":"Move some (not all) of the keys from the left node into the right node.","params":[{"type_long":"db.VarKeyInteriorNode","name":"leftNode","comment":"","type_short":"VarKeyInteriorNode"},{"type_long":"db.VarKeyInteriorNode","name":"rightNode","comment":"","type_short":"VarKeyInteriorNode"},{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if movement occured, else false","type_short":"boolean"}},{"javadoc":"Move some or all of the keys from the right node into the left node.\n If all keys are moved, the caller is responsible for deleting the right\n node.\n@param leftNode\n@param rightNode\n@param count","static":true,"name":"moveKeysLeft","comment":"Move some or all of the keys from the right node into the left node.\n If all keys are moved, the caller is responsible for deleting the right\n node.","params":[{"type_long":"db.VarKeyInteriorNode","name":"leftNode","comment":"","type_short":"VarKeyInteriorNode"},{"type_long":"db.VarKeyInteriorNode","name":"rightNode","comment":"","type_short":"VarKeyInteriorNode"},{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBufferReferences","comment":"","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"isLeftmostKey","comment":"","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isRightmostKey","comment":"","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"VarKeyInteriorNode","comment":"LongKeyInteriorNode stores a BTree node for use as an interior\n node when searching for Table records within the database.  This type of node\n has the following layout within a single DataBuffer (field size in bytes):\n \n   | NodeType(1) | KeyType(1) | KeyCount(4) | KeyOffset0(4) | ID0(4) | ... | KeyOffsetN(4) | IDN(4) | \n     ...... | KeyN | ... | Key0 |","fields":[{"type_long":"int","javadoc":"","static":true,"name":"BASE","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"KEY_OFFSET_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"ENTRY_SIZE","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"MIN_KEY_CAPACITY","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"HALF_KEY_CAPACITY","comment":"","type_short":"int","constant_value":"4"}]}
