{"implements":["db.BTreeNode"],"javadoc":"<code>VarKeyNode<\/code> is an abstract implementation of a BTree node\n which utilizes variable-length Field key values.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct an existing variable-length-key node.\n@param nodeMgr table node manager instance\n@param buf node buffer","static":false,"name":"<init>","comment":"Construct an existing variable-length-key node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"node buffer","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new variable-length-key node.\n@param nodeMgr table node manager.\n@param nodeType node type\n@param keyType key Field type\n@throws IOException thrown if IO error occurs","static":false,"name":"<init>","comment":"Construct a new variable-length-key node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager.","type_short":"NodeMgr"},{"type_long":"byte","name":"nodeType","comment":"node type","type_short":"byte"},{"type_long":"db.Field","name":"keyType","comment":"key Field type","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBufferId","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getBuffer","comment":"","params":[],"throws":[],"return":{"type_long":"db.buffers.DataBuffer","comment":"","type_short":"DataBuffer"}},{"javadoc":"Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.\n@return TableNode","static":false,"name":"getRoot","comment":"Get the root for this node.  If setParent has not been invoked, this node\n is assumed to be the root.","params":[],"throws":[],"return":{"type_long":"db.VarKeyNode","comment":"TableNode","type_short":"VarKeyNode"}},{"javadoc":"","static":false,"name":"getKeyCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setKeyCount","comment":"","params":[{"type_long":"int","name":"cnt","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the key value at a specific index.\n@param index key index\n@return key value\n@throws IOException thrown if an IO error occurs","static":false,"name":"getKey","comment":"Get the key value at a specific index.","params":[{"type_long":"int","name":"index","comment":"key index","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.Field","comment":"key value","type_short":"Field"}},{"javadoc":"Get the leaf node which contains the specified key.\n@param key key value\n@return leaf node\n@throws IOException thrown if an IO error occurs","static":false,"name":"getLeafNode","comment":"Get the leaf node which contains the specified key.","params":[{"type_long":"db.Field","name":"key","comment":"key value","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"leaf node","type_short":"VarKeyRecordNode"}},{"javadoc":"Get the left-most leaf node within the tree.\n@return left-most leaf node.\n@throws IOException thrown if IO error occurs","static":false,"name":"getLeftmostLeafNode","comment":"Get the left-most leaf node within the tree.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"left-most leaf node.","type_short":"VarKeyRecordNode"}},{"javadoc":"Get the right-most leaf node within the tree.\n@return right-most leaf node.\n@throws IOException thrown if IO error occurs","static":false,"name":"getRightmostLeafNode","comment":"Get the right-most leaf node within the tree.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.VarKeyRecordNode","comment":"right-most leaf node.","type_short":"VarKeyRecordNode"}}],"name":"VarKeyNode","comment":"VarKeyNode is an abstract implementation of a BTree node\n which utilizes variable-length Field key values.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"KEY_TYPE_SIZE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"KEY_COUNT_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"KEY_TYPE_OFFSET","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"KEY_COUNT_OFFSET","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"VARKEY_NODE_HEADER_SIZE","comment":"","type_short":"int","constant_value":"6"},{"type_long":"db.Field","javadoc":"","static":false,"name":"keyType","comment":"","type_short":"Field","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"maxKeyLength","comment":"","type_short":"int","constant_value":null},{"type_long":"db.NodeMgr","javadoc":"","static":false,"name":"nodeMgr","comment":"","type_short":"NodeMgr","constant_value":null},{"type_long":"db.buffers.DataBuffer","javadoc":"","static":false,"name":"buffer","comment":"","type_short":"DataBuffer","constant_value":null},{"type_long":"db.VarKeyInteriorNode","javadoc":"","static":false,"name":"parent","comment":"","type_short":"VarKeyInteriorNode","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"keyCount","comment":"","type_short":"int","constant_value":null}]}
