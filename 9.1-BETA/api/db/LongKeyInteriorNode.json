{"implements":[],"javadoc":"<code>LongKeyInteriorNode<\/code> stores a BTree node for use as an interior\n node when searching for Table records within the database.  This type of node\n has the following layout within a single DataBuffer (field size in bytes):\n <pre>\n   | NodeType(1) | KeyCount(4) | Key0(8) | ID0(4) | ... | KeyN(8) | IDN(4) |\n <\/pre>","static":false,"extends":"db.LongKeyNode","methods":[{"javadoc":"Construct an existing long-key interior node.\n@param nodeMgr table node manager instance\n@param buf node buffer","static":false,"name":"<init>","comment":"Construct an existing long-key interior node.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager instance","type_short":"NodeMgr"},{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"node buffer","type_short":"DataBuffer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new long-key interior node with two child nodes.\n@param nodeMgr table node manager.\n@param key1 left child node left-most key\n@param id1 left child node buffer ID\n@param key2 right child node left-most key\n@param id2 right child node buffer ID\n@throws IOException thrown if IO error occurs","static":false,"name":"<init>","comment":"Construct a new long-key interior node with two child nodes.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager.","type_short":"NodeMgr"},{"type_long":"long","name":"key1","comment":"left child node left-most key","type_short":"long"},{"type_long":"int","name":"id1","comment":"left child node buffer ID","type_short":"int"},{"type_long":"long","name":"key2","comment":"right child node left-most key","type_short":"long"},{"type_long":"int","name":"id2","comment":"right child node buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new empty long-key interior node.\n Node must be initialized with a minimum of two keys.\n@param nodeMgr table node manager.\n@throws IOException thrown if IO error occurs","static":false,"name":"<init>","comment":"Construct a new empty long-key interior node.\n Node must be initialized with a minimum of two keys.","params":[{"type_long":"db.NodeMgr","name":"nodeMgr","comment":"table node manager.","type_short":"NodeMgr"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logConsistencyError","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isConsistent","comment":"","params":[{"type_long":"java.lang.String","name":"tableName","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.\n@param key\n@return int buffer ID index.","static":false,"name":"getIdIndex","comment":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"int buffer ID index.","type_short":"int"}},{"javadoc":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.\n@param key\n@return int buffer ID index.","static":false,"name":"getKeyIndex","comment":"Perform a binary search to locate the specified key and derive an index\n into the Buffer ID storage.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"int buffer ID index.","type_short":"int"}},{"javadoc":"","static":false,"name":"getKey","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Store a key at the specified index\n@param index key index\n@param key key value","static":false,"name":"putKey","comment":"Store a key at the specified index","params":[{"type_long":"int","name":"index","comment":"key index","type_short":"int"},{"type_long":"long","name":"key","comment":"key value","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the child node buffer ID associated with the specified key index\n@param index child key index\n@return child node buffer ID","static":false,"name":"getBufferId","comment":"Get the child node buffer ID associated with the specified key index","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"child node buffer ID","type_short":"int"}},{"javadoc":"Store the child node entry (key and buffer ID) associated with the specified key index.\n The entry at index is overwritten.  Since each entry is a fixed length, movement of\n existing entries is not necessary.\n@param index child key index\n@param key child node key\n@param bufferId child node buffer ID","static":false,"name":"putEntry","comment":"Store the child node entry (key and buffer ID) associated with the specified key index.\n The entry at index is overwritten.  Since each entry is a fixed length, movement of\n existing entries is not necessary.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"},{"type_long":"long","name":"key","comment":"child node key","type_short":"long"},{"type_long":"int","name":"bufferId","comment":"child node buffer ID","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert the child node entry (key and buffer ID) associated with the specified key index.\n All entries at and after index are shifted right to make space for new entry.\n The node key count is adjusted to reflect the addition of a child.\n@param index child key index\n@param key child node key\n@param bufferId child node buffer ID","static":false,"name":"insertEntry","comment":"Insert the child node entry (key and buffer ID) associated with the specified key index.\n All entries at and after index are shifted right to make space for new entry.\n The node key count is adjusted to reflect the addition of a child.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"},{"type_long":"long","name":"key","comment":"child node key","type_short":"long"},{"type_long":"int","name":"bufferId","comment":"child node buffer ID","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete the child node entry (key and buffer ID) associated with the specified key index.\n All entries after index are shifted left.\n The node key count is adjusted to reflect the removal of a child.\n@param index child key index","static":false,"name":"deleteEntry","comment":"Delete the child node entry (key and buffer ID) associated with the specified key index.\n All entries after index are shifted left.\n The node key count is adjusted to reflect the removal of a child.","params":[{"type_long":"int","name":"index","comment":"child key index","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Callback method for when a child node's leftmost key changes.\n@param oldKey previous leftmost key.\n@param newKey new leftmost key.","static":false,"name":"keyChanged","comment":"Callback method for when a child node's leftmost key changes.","params":[{"type_long":"long","name":"oldKey","comment":"previous leftmost key.","type_short":"long"},{"type_long":"long","name":"newKey","comment":"new leftmost key.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert a new node into this node.\n@param id id of new node\n@param key leftmost key associated with new node.\n@return root node.","static":false,"name":"insert","comment":"Insert a new node into this node.","params":[{"type_long":"int","name":"id","comment":"id of new node","type_short":"int"},{"type_long":"long","name":"key","comment":"leftmost key associated with new node.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node.","type_short":"LongKeyNode"}},{"javadoc":"Split this interior node and insert new child entry (key and buffer ID).  \n Assumes 3 or more child keys exist in this node.\n@param newKey new child key\n@param newId new child node's buffer ID\n@return root node.\n@throws IOException thrown if IO error occurs","static":false,"name":"split","comment":"Split this interior node and insert new child entry (key and buffer ID).  \n Assumes 3 or more child keys exist in this node.","params":[{"type_long":"long","name":"newKey","comment":"new child key","type_short":"long"},{"type_long":"int","name":"newId","comment":"new child node's buffer ID","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node.","type_short":"LongKeyNode"}},{"javadoc":"","static":false,"name":"getLeafNode","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.LongKeyRecordNode","comment":"","type_short":"LongKeyRecordNode"}},{"javadoc":"Callback method allowing child node to remove itself from parent.\n Rebalancing of the tree is performed if the interior node falls \n below the half-full point.\n@param key child node key\n@return root node\n@throws IOException thrown if IO error occurs","static":false,"name":"deleteChild","comment":"Callback method allowing child node to remove itself from parent.\n Rebalancing of the tree is performed if the interior node falls \n below the half-full point.","params":[{"type_long":"long","name":"key","comment":"child node key","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node","type_short":"LongKeyNode"}},{"javadoc":"Callback method allowing a child interior node to request balancing of its \n content with its sibling nodes.  Balancing is only done if the specified node \n is half-full or less.\n@param node child interior node\n@return root node","static":false,"name":"balanceChild","comment":"Callback method allowing a child interior node to request balancing of its \n content with its sibling nodes.  Balancing is only done if the specified node \n is half-full or less.","params":[{"type_long":"db.LongKeyInteriorNode","name":"node","comment":"child interior node","type_short":"LongKeyInteriorNode"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"root node","type_short":"LongKeyNode"}},{"javadoc":"Balance the entries contained within two adjacent child interior nodes.\n One of the two nodes must be half-full or less.\n This could result in the removal of a child node if entries will fit within\n one node.\n@param leftNode left child interior node\n@param rightNode right child interior node\n@return new root\n@throws IOException thrown if an IO error occurs","static":false,"name":"balanceChild","comment":"Balance the entries contained within two adjacent child interior nodes.\n One of the two nodes must be half-full or less.\n This could result in the removal of a child node if entries will fit within\n one node.","params":[{"type_long":"db.LongKeyInteriorNode","name":"leftNode","comment":"left child interior node","type_short":"LongKeyInteriorNode"},{"type_long":"db.LongKeyInteriorNode","name":"rightNode","comment":"right child interior node","type_short":"LongKeyInteriorNode"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.LongKeyNode","comment":"new root","type_short":"LongKeyNode"}},{"javadoc":"Move some (not all) of the entries from the left node into the right node.\n@param leftNode\n@param rightNode\n@param count","static":true,"name":"moveKeysRight","comment":"Move some (not all) of the entries from the left node into the right node.","params":[{"type_long":"db.LongKeyInteriorNode","name":"leftNode","comment":"","type_short":"LongKeyInteriorNode"},{"type_long":"db.LongKeyInteriorNode","name":"rightNode","comment":"","type_short":"LongKeyInteriorNode"},{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move some or all of the entries from the right node into the left node.\n If all keys are moved, the caller is responsible for deleting the right\n node.\n@param leftNode\n@param rightNode\n@param count","static":true,"name":"moveKeysLeft","comment":"Move some or all of the entries from the right node into the left node.\n If all keys are moved, the caller is responsible for deleting the right\n node.","params":[{"type_long":"db.LongKeyInteriorNode","name":"leftNode","comment":"","type_short":"LongKeyInteriorNode"},{"type_long":"db.LongKeyInteriorNode","name":"rightNode","comment":"","type_short":"LongKeyInteriorNode"},{"type_long":"int","name":"count","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBufferReferences","comment":"","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"isLeftmostKey","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isRightmostKey","comment":"","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"LongKeyInteriorNode","comment":"LongKeyInteriorNode stores a BTree node for use as an interior\n node when searching for Table records within the database.  This type of node\n has the following layout within a single DataBuffer (field size in bytes):\n \n   | NodeType(1) | KeyCount(4) | Key0(8) | ID0(4) | ... | KeyN(8) | IDN(4) |\n ","fields":[{"type_long":"int","javadoc":"","static":true,"name":"BASE","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"KEY_SIZE","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"ENTRY_SIZE","comment":"","type_short":"int","constant_value":"12"},{"type_long":"int","javadoc":"","static":false,"name":"maxKeyCount","comment":"","type_short":"int","constant_value":null}]}
