{"implements":[],"javadoc":"Class for definining the columns in a Ghidra Database table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new Schema.\n@param version\n@param keyFieldClass Field class associated with primary key.  If the \n class is LongField, the long key methods on Table must be used.  Specifying any \n other Field class requires the use of the Field key methods on Table.\n@param keyName\n@param fieldClasses\n@param fieldNames","static":false,"name":"<init>","comment":"Construct a new Schema.","params":[{"type_long":"int","name":"version","comment":"","type_short":"int"},{"type_long":"java.lang.Class<? extends db.Field>","name":"keyFieldClass","comment":"Field class associated with primary key.  If the \n class is LongField, the long key methods on Table must be used.  Specifying any \n other Field class requires the use of the Field key methods on Table.","type_short":"Class"},{"type_long":"java.lang.String","name":"keyName","comment":"","type_short":"String"},{"type_long":"java.lang.Class<?>[]","name":"fieldClasses","comment":"","type_short":"java.lang.Class<?>[]"},{"type_long":"java.lang.String[]","name":"fieldNames","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new Schema which uses a long key.  The Field key methods on Table\n should not be used.\n@param version\n@param keyName\n@param fieldClasses\n@param fieldNames","static":false,"name":"<init>","comment":"Construct a new Schema which uses a long key.  The Field key methods on Table\n should not be used.","params":[{"type_long":"int","name":"version","comment":"","type_short":"int"},{"type_long":"java.lang.String","name":"keyName","comment":"","type_short":"String"},{"type_long":"java.lang.Class<?>[]","name":"fieldClasses","comment":"","type_short":"java.lang.Class<?>[]"},{"type_long":"java.lang.String[]","name":"fieldNames","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new Schema with the given number of columns\n@param version\n@param fieldTypes\n@param packedFieldNames packed list of field names separated by ';'.\n The first field name corresponds to the key name.","static":false,"name":"<init>","comment":"Construct a new Schema with the given number of columns","params":[{"type_long":"int","name":"version","comment":"","type_short":"int"},{"type_long":"byte","name":"keyFieldType","comment":"","type_short":"byte"},{"type_long":"byte[]","name":"fieldTypes","comment":"","type_short":"byte[]"},{"type_long":"java.lang.String","name":"packedFieldNames","comment":"packed list of field names separated by ';'.\n The first field name corresponds to the key name.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if this schema can use LongKeyNode's within a table.\n@return true if LongKeyNode's can be used to store records produced with this schema.","static":false,"name":"useLongKeyNodes","comment":"Determine if this schema can use LongKeyNode's within a table.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if LongKeyNode's can be used to store records produced with this schema.","type_short":"boolean"}},{"javadoc":"Get the key Field class\n@return key Field classes","static":false,"name":"getKeyFieldClass","comment":"Get the key Field class","params":[],"throws":[],"return":{"type_long":"java.lang.Class<? extends db.Field>","comment":"key Field classes","type_short":"Class"}},{"javadoc":"Get the Field type for the key.\n@return key Field type","static":false,"name":"getKeyFieldType","comment":"Get the Field type for the key.","params":[],"throws":[],"return":{"type_long":"db.Field","comment":"key Field type","type_short":"Field"}},{"javadoc":"Get the key name\n@return key name","static":false,"name":"getKeyName","comment":"Get the key name","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"key name","type_short":"String"}},{"javadoc":"Get the list of data Field classes for this schema.\n The returned list is ordered consistent with the schema definition.\n@return data Field classes","static":false,"name":"getFieldClasses","comment":"Get the list of data Field classes for this schema.\n The returned list is ordered consistent with the schema definition.","params":[],"throws":[],"return":{"type_long":"java.lang.Class<?>[]","comment":"data Field classes","type_short":"java.lang.Class<?>[]"}},{"javadoc":"Get the list of data Field names for this schema.\n The returned list is ordered consistent with the schema definition.\n@return data Field names","static":false,"name":"getFieldNames","comment":"Get the list of data Field names for this schema.\n The returned list is ordered consistent with the schema definition.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"data Field names","type_short":"java.lang.String[]"}},{"javadoc":"Get the number of data Fields\n@return data Field count","static":false,"name":"getFieldCount","comment":"Get the number of data Fields","params":[],"throws":[],"return":{"type_long":"int","comment":"data Field count","type_short":"int"}},{"javadoc":"Parse the packed list of data Field names.\n The fieldNames array is initialized with the individual Field names.\n@param packedNames packed name list produced by the getPackedFieldNames() method.","static":false,"name":"parseNames","comment":"Parse the packed list of data Field names.\n The fieldNames array is initialized with the individual Field names.","params":[{"type_long":"java.lang.String","name":"packedNames","comment":"packed name list produced by the getPackedFieldNames() method.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the packed list of data Field names.\n@return packed name list.","static":false,"name":"getPackedFieldNames","comment":"Get the packed list of data Field names.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"packed name list.","type_short":"String"}},{"javadoc":"Get the schema field types as a byte array.\n@return byte[] field type list","static":false,"name":"getFieldTypes","comment":"Get the schema field types as a byte array.","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"byte[] field type list","type_short":"byte[]"}},{"javadoc":"Get the schema version.\n@return schema version","static":false,"name":"getVersion","comment":"Get the schema version.","params":[],"throws":[],"return":{"type_long":"int","comment":"schema version","type_short":"int"}},{"javadoc":"Returns true if records for this Schema can be of variable lengths.\n@return true if records with this Schema are variable length.","static":false,"name":"isVariableLength","comment":"Returns true if records for this Schema can be of variable lengths.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if records with this Schema are variable length.","type_short":"boolean"}},{"javadoc":"Get length of fixed-length schema record.\n@return record length or 0 for variable length.","static":false,"name":"getFixedLength","comment":"Get length of fixed-length schema record.","params":[],"throws":[],"return":{"type_long":"int","comment":"record length or 0 for variable length.","type_short":"int"}},{"javadoc":"Create an empty record for the specified key.\n@param key\n@return Record","static":false,"name":"createRecord","comment":"Create an empty record for the specified key.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"db.Record","comment":"Record","type_short":"Record"}},{"javadoc":"Create an empty record for the specified key.\n@param key\n@return new record","static":false,"name":"createRecord","comment":"Create an empty record for the specified key.","params":[{"type_long":"db.Field","name":"key","comment":"","type_short":"Field"}],"throws":[],"return":{"type_long":"db.Record","comment":"new record","type_short":"Record"}},{"javadoc":"Get a new instance of a data Field object for the specified column.\n@param colIndex field index\n@return new Field object suitable for data reading\/writing.","static":false,"name":"getField","comment":"Get a new instance of a data Field object for the specified column.","params":[{"type_long":"int","name":"colIndex","comment":"field index","type_short":"int"}],"throws":[],"return":{"type_long":"db.Field","comment":"new Field object suitable for data reading\/writing.","type_short":"Field"}},{"javadoc":"Get a new instance of a data Field object for the specified Field class.\n@param fieldClass Field implementation class\n@return new Field object suitable for data reading\/writing.","static":false,"name":"getField","comment":"Get a new instance of a data Field object for the specified Field class.","params":[{"type_long":"java.lang.Class<?>","name":"fieldClass","comment":"Field implementation class","type_short":"Class"}],"throws":[],"return":{"type_long":"db.Field","comment":"new Field object suitable for data reading\/writing.","type_short":"Field"}},{"javadoc":"Compare two schemas for equality.\n Field names are ignored in this comparison.\n@see java.lang.Object#equals(java.lang.Object)","static":false,"name":"equals","comment":"Compare two schemas for equality.\n Field names are ignored in this comparison.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"Schema","comment":"Class for definining the columns in a Ghidra Database table.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME_SEPARATOR","comment":"","type_short":"String","constant_value":"\";\""},{"type_long":"int","javadoc":"","static":false,"name":"version","comment":"","type_short":"int","constant_value":null},{"type_long":"db.Field","javadoc":"","static":false,"name":"keyType","comment":"","type_short":"Field","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"keyName","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.Class<?>[]","javadoc":"","static":false,"name":"fieldClasses","comment":"","type_short":"java.lang.Class<?>[]","constant_value":null},{"type_long":"java.lang.String[]","javadoc":"","static":false,"name":"fieldNames","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isVariableLength","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"fixedLength","comment":"","type_short":"int","constant_value":null}]}
