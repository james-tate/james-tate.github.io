{"implements":[],"javadoc":"<code>IndexProvider<\/code> maintains the free index list associated\n with a BufferFile.  This provider will exhaust the free index list\n before allocating new indexes.  This provider relies on the BufferFile\n growing automatically when buffers having indexes beyond the end-of-file \n are written.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor for empty BufferFile.","static":false,"name":"<init>","comment":"Constructor for empty BufferFile.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor with initial state.\n@param indexCount previously allocated buffer count.\n@param freeIndexes list of free buffer indexes.","static":false,"name":"<init>","comment":"Constructor with initial state.","params":[{"type_long":"int","name":"indexCount","comment":"previously allocated buffer count.","type_short":"int"},{"type_long":"int[]","name":"freeIndexes","comment":"list of free buffer indexes.","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the total number of buffer indexes which have been allocated.","static":false,"name":"getIndexCount","comment":"Return the total number of buffer indexes which have been allocated.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of free indexes within the\n allocated index space.","static":false,"name":"getFreeIndexCount","comment":"Returns the number of free indexes within the\n allocated index space.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Allocate a new buffer index.  Exhaust free list before\n increasing total index count.\n@return assigned index","static":false,"name":"allocateIndex","comment":"Allocate a new buffer index.  Exhaust free list before\n increasing total index count.","params":[],"throws":[],"return":{"type_long":"int","comment":"assigned index","type_short":"int"}},{"javadoc":"Allocate a specific index.  Current index count will be adjusted if\n specified index exceeds current index count;\n@param index requested index\n@return true if index was successfully allocated","static":false,"name":"allocateIndex","comment":"Allocate a specific index.  Current index count will be adjusted if\n specified index exceeds current index count;","params":[{"type_long":"int","name":"index","comment":"requested index","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if index was successfully allocated","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isFree","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Free the specified buffer\n@param index buffer index","static":false,"name":"freeIndex","comment":"Free the specified buffer","params":[{"type_long":"int","name":"index","comment":"buffer index","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Truncate this buffer file.  This method has no affect if the specified \n newBufferCnt is greater than the current buffer count.\n@param newIndexCnt new index count\n@return true if successful, false if newIndexCnt is larger than current \n index count.","static":false,"name":"truncate","comment":"Truncate this buffer file.  This method has no affect if the specified \n newBufferCnt is greater than the current buffer count.","params":[{"type_long":"int","name":"newIndexCnt","comment":"new index count","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if successful, false if newIndexCnt is larger than current \n index count.","type_short":"boolean"}},{"javadoc":"Returns the current list of free indexes for this index provider.\n@return free index list","static":false,"name":"getFreeIndexes","comment":"Returns the current list of free indexes for this index provider.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"free index list","type_short":"int[]"}}],"name":"IndexProvider","comment":"IndexProvider maintains the free index list associated\n with a BufferFile.  This provider will exhaust the free index list\n before allocating new indexes.  This provider relies on the BufferFile\n growing automatically when buffers having indexes beyond the end-of-file \n are written.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"nextIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.Stack<java.lang.Integer>","javadoc":"","static":false,"name":"freeIndexStack","comment":"","type_short":"Stack","constant_value":null}]}
