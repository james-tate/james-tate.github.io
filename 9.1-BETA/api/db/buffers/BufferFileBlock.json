{"implements":[],"javadoc":"<code>BufferFileBlock<\/code> is used to hold BufferFile blocks \n for use during block streaming operations.\n <p>  \n Block indexes are absolute where 0 corresponds\n to the head block in the BufferFile.  It is important to note that \n this number is off by 1 from DataBuffer numbering and the index values\n utilized by {@link BufferFile#getIndexCount()}, {@link BufferFile#get(DataBuffer, int)},\n {@link BufferFile#put(DataBuffer, int)}, etc..  It is important for\n each implementation to normalize to absolute block indexes.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"BufferFileBlock constructor\n@param blockIndex block index\n@param buffer block buffer (size must match block-size for associated buffer file)","static":false,"name":"<init>","comment":"BufferFileBlock constructor","params":[{"type_long":"int","name":"blockIndex","comment":"block index","type_short":"int"},{"type_long":"byte[]","name":"buffer","comment":"block buffer (size must match block-size for associated buffer file)","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"BufferFileBlock constructor for use when reconstructing instance\n from block stream\n@param bytes buffer data received from block stream.  Buffer index will be\n determined by first 4-bytes contained within the bytes array (big-endian).","static":false,"name":"<init>","comment":"BufferFileBlock constructor for use when reconstructing instance\n from block stream","params":[{"type_long":"byte[]","name":"bytes","comment":"buffer data received from block stream.  Buffer index will be\n determined by first 4-bytes contained within the bytes array (big-endian).","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get block size\n@return block size","static":false,"name":"size","comment":"Get block size","params":[],"throws":[],"return":{"type_long":"int","comment":"block size","type_short":"int"}},{"javadoc":"Get absolute block index, where 0 corresponds to the first \n physical block within the buffer file.\n@return block index","static":false,"name":"getIndex","comment":"Get absolute block index, where 0 corresponds to the first \n physical block within the buffer file.","params":[],"throws":[],"return":{"type_long":"int","comment":"block index","type_short":"int"}},{"javadoc":"Get block data buffer\n@return block data buffer","static":false,"name":"getData","comment":"Get block data buffer","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"block data buffer","type_short":"byte[]"}},{"javadoc":"Get block as byte array suitable for use in block stream and\n reconstruction.\n@return block as byte array","static":false,"name":"toBytes","comment":"Get block as byte array suitable for use in block stream and\n reconstruction.","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"block as byte array","type_short":"byte[]"}}],"name":"BufferFileBlock","comment":"BufferFileBlock is used to hold BufferFile blocks \n for use during block streaming operations.\n   \n Block indexes are absolute where 0 corresponds\n to the head block in the BufferFile.  It is important to note that \n this number is off by 1 from DataBuffer numbering and the index values\n utilized by BufferFile#getIndexCount(), BufferFile#get(DataBuffer, int),\n BufferFile#put(DataBuffer, int), etc..  It is important for\n each implementation to normalize to absolute block indexes.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"blockIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"byte[]","javadoc":"","static":false,"name":"buffer","comment":"","type_short":"byte[]","constant_value":null}]}
