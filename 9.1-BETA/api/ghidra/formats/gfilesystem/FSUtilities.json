{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts a string -> string mapping into a \"key: value\" multi-line string.\n@param info map of string key to string value.\n@return Multi-line string \"key: value\" string.","static":true,"name":"infoMapToString","comment":"Converts a string - string mapping into a \"key: value\" multi-line string.","params":[{"type_long":"java.util.Map<java.lang.String,java.lang.String>","name":"info","comment":"map of string key to string value.","type_short":"Map"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"Multi-line string \"key: value\" string.","type_short":"String"}},{"javadoc":"Best-effort of sanitizing an untrusted string that will be used to create\n a file on the user's local filesystem.\n@param untrustedFilename filename string with possibly bad \/ hostile characters or sequences.\n@return sanitized filename","static":true,"name":"getSafeFilename","comment":"Best-effort of sanitizing an untrusted string that will be used to create\n a file on the user's local filesystem.","params":[{"type_long":"java.lang.String","name":"untrustedFilename","comment":"filename string with possibly bad \/ hostile characters or sequences.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"sanitized filename","type_short":"String"}},{"javadoc":"Returns a copy of the input string with FSRL problematic[1] characters escaped\n as \"%nn\" sequences, where nn are hexdigits specifying the numeric ascii value\n of that character.\n <p>\n Characters that need more than a byte to encode will result in multiple \"%nn\" values\n that encode the necessary UTF8 codepoints.\n <p>\n [1] - non-ascii \/ unprintable \/ FSRL portion separation characters.\n@param s string, or null.\n@return string with problematic characters escaped as \"%nn\" sequences, or null\n if parameter was null.","static":true,"name":"escapeEncode","comment":"Returns a copy of the input string with FSRL problematic[1] characters escaped\n as \"%nn\" sequences, where nn are hexdigits specifying the numeric ascii value\n of that character.\n \n Characters that need more than a byte to encode will result in multiple \"%nn\" values\n that encode the necessary UTF8 codepoints.\n \n [1] - non-ascii \/ unprintable \/ FSRL portion separation characters.","params":[{"type_long":"java.lang.String","name":"s","comment":"string, or null.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"string with problematic characters escaped as \"%nn\" sequences, or null\n if parameter was null.","type_short":"String"}},{"javadoc":"Returns a decoded version of the input stream where \"%nn\" escape sequences are\n replaced with their actual characters, using UTF-8 decoding rules.\n <p>\n@param s string with escape sequences in the form \"%nn\", or null.\n@return string with all escape sequences replaced with native characters, or null if\n original parameter was null.\n@throws MalformedURLException if bad escape sequence format.","static":true,"name":"escapeDecode","comment":"Returns a decoded version of the input stream where \"%nn\" escape sequences are\n replaced with their actual characters, using UTF-8 decoding rules.\n ","params":[{"type_long":"java.lang.String","name":"s","comment":"string with escape sequences in the form \"%nn\", or null.","type_short":"String"}],"throws":[{"type_long":"java.net.MalformedURLException","comment":"if bad escape sequence format.","type_short":"MalformedURLException"}],"return":{"type_long":"java.lang.String","comment":"string with all escape sequences replaced with native characters, or null if\n original parameter was null.","type_short":"String"}},{"javadoc":"","static":true,"name":"appendHexEncoded","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"sb","comment":"","type_short":"StringBuilder"},{"type_long":"char","name":"c","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all files in a GFileSystem.\n@param fs {@link GFileSystem} to recursively query for all files.\n@param dir the {@link GFile} directory to recurse into\n@param result {@link List} of GFiles where the results are accumulated into, or null\n to allocate a new List, returned as the result.\n@param taskMonitor {@link TaskMonitor} that will be checked for cancel.\n@return {@link List} of accumulated {@code result}s\n@throws IOException if io error during listing of directories\n@throws CancelledException if user cancels","static":true,"name":"listFileSystem","comment":"Returns a list of all files in a GFileSystem.","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"fs","comment":"GFileSystem to recursively query for all files.","type_short":"GFileSystem"},{"type_long":"ghidra.formats.gfilesystem.GFile","name":"dir","comment":"the GFile directory to recurse into","type_short":"GFile"},{"type_long":"java.util.List<ghidra.formats.gfilesystem.GFile>","name":"result","comment":"List of GFiles where the results are accumulated into, or null\n to allocate a new List, returned as the result.","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"taskMonitor","comment":"TaskMonitor that will be checked for cancel.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if io error during listing of directories","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if user cancels","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.GFile>","comment":"List of accumulated s","type_short":"List"}},{"javadoc":"Returns the type value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system type string.","static":true,"name":"getFilesystemTypeFromClass","comment":"Returns the type value of the FileSystemInfo annotation attached to the\n specified class.","params":[{"type_long":"java.lang.Class<?>","name":"clazz","comment":"Class to query.","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"File system type string.","type_short":"String"}},{"javadoc":"Returns the description value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system description string.","static":true,"name":"getFilesystemDescriptionFromClass","comment":"Returns the description value of the FileSystemInfo annotation attached to the\n specified class.","params":[{"type_long":"java.lang.Class<?>","name":"clazz","comment":"Class to query.","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"File system description string.","type_short":"String"}},{"javadoc":"Returns the priority value of the {@link FileSystemInfo} annotation attached to the\n specified class.\n@param clazz Class to query.\n@return File system priority integer.","static":true,"name":"getFilesystemPriorityFromClass","comment":"Returns the priority value of the FileSystemInfo annotation attached to the\n specified class.","params":[{"type_long":"java.lang.Class<?>","name":"clazz","comment":"Class to query.","type_short":"Class"}],"throws":[],"return":{"type_long":"int","comment":"File system priority integer.","type_short":"int"}},{"javadoc":"Returns true if all the {@link FSRL}s in the specified list are from the filesystem.\n@param fsrls {@link List} of {@link FSRL}s.\n@return boolean true if all are from same filesystem.","static":true,"name":"isSameFS","comment":"Returns true if all the FSRLs in the specified list are from the filesystem.","params":[{"type_long":"java.util.List<ghidra.formats.gfilesystem.FSRL>","name":"fsrls","comment":"List of FSRLs.","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if all are from same filesystem.","type_short":"boolean"}},{"javadoc":"Displays a filesystem related {@link Throwable exception} in the most user-friendly manner\n possible, even if we have to do some hacky things with helping the user with\n crypto problems.\n <p>\n@param originator a Logger instance, \"this\", or YourClass.class\n@param parent a parent component used to center the dialog (or null if you\n            don't have one)\n@param title the title of the pop-up dialog (main subject of message)\n@param message the details of the message\n@param throwable the Throwable that describes the cause of the error","static":true,"name":"displayException","comment":"Displays a filesystem related Throwable in the most user-friendly manner\n possible, even if we have to do some hacky things with helping the user with\n crypto problems.\n ","params":[{"type_long":"java.lang.Object","name":"originator","comment":"a Logger instance, \"this\", or YourClass.class","type_short":"Object"},{"type_long":"java.awt.Component","name":"parent","comment":"a parent component used to center the dialog (or null if you\n            don't have one)","type_short":"Component"},{"type_long":"java.lang.String","name":"title","comment":"the title of the pop-up dialog (main subject of message)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the details of the message","type_short":"String"},{"type_long":"java.lang.Throwable","name":"throwable","comment":"the Throwable that describes the cause of the error","type_short":"Throwable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"displayCryptoException","comment":"","params":[{"type_long":"java.lang.Object","name":"originator","comment":"","type_short":"Object"},{"type_long":"java.awt.Component","name":"parent","comment":"","type_short":"Component"},{"type_long":"java.lang.String","name":"title","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"ghidra.util.exception.CryptoException","name":"ce","comment":"","type_short":"CryptoException"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copies a stream and calculates the md5 at the same time.\n <p>\n Does not close the passed-in InputStream or OutputStream.\n@param is {@link InputStream} to copy.  NOTE: not closed by this method.\n@param os {@link OutputStream} to write to.  NOTE: not closed by this method.\n@return {@link StreamCopyResult} with md5 and bytes copied count, never null.\n@throws IOException if error\n@throws CancelledException if canceled","static":true,"name":"streamCopy","comment":"Copies a stream and calculates the md5 at the same time.\n \n Does not close the passed-in InputStream or OutputStream.","params":[{"type_long":"java.io.InputStream","name":"is","comment":"InputStream to copy.  NOTE: not closed by this method.","type_short":"InputStream"},{"type_long":"java.io.OutputStream","name":"os","comment":"OutputStream to write to.  NOTE: not closed by this method.","type_short":"OutputStream"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if canceled","type_short":"CancelledException"}],"return":{"type_long":"ghidra.formats.gfilesystem.FSUtilities.StreamCopyResult","comment":"StreamCopyResult with md5 and bytes copied count, never null.","type_short":"StreamCopyResult"}},{"javadoc":"Calculate the MD5 of a stream.\n@param is {@link InputStream} to read\n@param monitor {@link TaskMonitor} to watch for cancel\n@return md5 as a hex encoded string, never null.\n@throws IOException if error\n@throws CancelledException if cancelled","static":true,"name":"getStreamMD5","comment":"Calculate the MD5 of a stream.","params":[{"type_long":"java.io.InputStream","name":"is","comment":"InputStream to read","type_short":"InputStream"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to watch for cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if cancelled","type_short":"CancelledException"}],"return":{"type_long":"java.lang.String","comment":"md5 as a hex encoded string, never null.","type_short":"String"}},{"javadoc":"Calculate the MD5 of a file.\n@param f {@link File} to read.\n@param monitor {@link TaskMonitor} to watch for cancel\n@return md5 as a hex encoded string, never null.\n@throws IOException if error\n@throws CancelledException if cancelled","static":true,"name":"getFileMD5","comment":"Calculate the MD5 of a file.","params":[{"type_long":"java.io.File","name":"f","comment":"File to read.","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"TaskMonitor to watch for cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if error","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if cancelled","type_short":"CancelledException"}],"return":{"type_long":"java.lang.String","comment":"md5 as a hex encoded string, never null.","type_short":"String"}},{"javadoc":"Concats path strings together, taking care to ensure that there is a correct\n path separator character between each part.\n <p>\n Handles forward or back slashes as path separator characters in the input, but\n only adds forward slashes when separating the path strings that need a separator.\n <p>\n@param paths vararg list of path strings, empty or null elements are ok and are skipped.\n@return null if all params null, \"\" empty string if all are empty, or\n \"path_element[1]\/path_element[2]\/...\/path_element[N]\" otherwise.","static":true,"name":"appendPath","comment":"Concats path strings together, taking care to ensure that there is a correct\n path separator character between each part.\n \n Handles forward or back slashes as path separator characters in the input, but\n only adds forward slashes when separating the path strings that need a separator.\n ","params":[{"type_long":"java.lang.String[]","name":"paths","comment":"vararg list of path strings, empty or null elements are ok and are skipped.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"null if all params null, \"\" empty string if all are empty, or\n \"path_element[1]\/path_element[2]\/...\/path_element[N]\" otherwise.","type_short":"String"}},{"javadoc":"Returns the \"extension\" of the filename part of the path string.\n <p>\n Ie. everything after the nth last '.' char in the filename, including that '.' character.\n <p>\n Using: \"path\/filename.ext1.ext2\"\n <P>\n Gives:\n <UL>\n \t<LI>extLevel 1: \".ext2\"<\/LI>\n  <LI>extLevel 2: \".ext1.ext2\"<\/LI>\n  <LI>extLevel 3: <code>null<\/code><\/LI>\n <\/UL>\n@param path path\/filename.ext string\n@param extLevel number of ext levels; must be greater than 0\n@return \".ext1\" for \"path\/filename.notext.ext1\" level 1, \".ext1.ext2\" for\n         \"path\/filename.ext1.ext2\" level 2, etc. or null if there was no dot character\n@throws IllegalArgumentException if the given level is less than 1","static":true,"name":"getExtension","comment":"Returns the \"extension\" of the filename part of the path string.\n \n Ie. everything after the nth last '.' char in the filename, including that '.' character.\n \n Using: \"path\/filename.ext1.ext2\"\n \n Gives:\n \n \textLevel 1: \".ext2\"\n  extLevel 2: \".ext1.ext2\"\n  extLevel 3: null\n ","params":[{"type_long":"java.lang.String","name":"path","comment":"path\/filename.ext string","type_short":"String"},{"type_long":"int","name":"extLevel","comment":"number of ext levels; must be greater than 0","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"\".ext1\" for \"path\/filename.notext.ext1\" level 1, \".ext1.ext2\" for\n         \"path\/filename.ext1.ext2\" level 2, etc. or null if there was no dot character","type_short":"String"}},{"javadoc":"Returns a copy of the string path that has been fixed to have correct slashes\n and a correct leading root slash '\/'.\n@param path String forward or backslash path\n@return String path with all forward slashes and a leading root slash.","static":true,"name":"normalizeNativePath","comment":"Returns a copy of the string path that has been fixed to have correct slashes\n and a correct leading root slash '\/'.","params":[{"type_long":"java.lang.String","name":"path","comment":"String forward or backslash path","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String path with all forward slashes and a leading root slash.","type_short":"String"}}],"name":"FSUtilities","comment":"","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SEPARATOR_CHARS","comment":"","type_short":"String","constant_value":"\"\/\\:\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SEPARATOR","comment":"","type_short":"String","constant_value":"\"\/\""},{"type_long":"char","javadoc":"","static":true,"name":"DOT","comment":"","type_short":"char","constant_value":"."},{"type_long":"char[]","javadoc":"","static":true,"name":"hexdigit","comment":"","type_short":"char[]","constant_value":null},{"type_long":"java.util.Comparator<ghidra.formats.gfilesystem.GFile>","javadoc":"Sorts GFiles by type (directories segregated from files) and then by name,\n case-insensitive.","static":true,"name":"GFILE_NAME_TYPE_COMPARATOR","comment":"Sorts GFiles by type (directories segregated from files) and then by name,\n case-insensitive.","type_short":"Comparator","constant_value":null}]}
