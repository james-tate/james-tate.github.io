{"implements":["ghidra.formats.gfilesystem.FileSystemEventListener"],"javadoc":"A threadsafe cache of {@link GFileSystem} instances (organized by their {@link FSRLRoot})\n <p>\n Any filesystems that are not referenced by outside users (via a {@link FileSystemRef}) will\n be closed and removed from the cache when the next {@link #cacheMaint()} is performed.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new FileSystemCache object.\n@param rootFS reference to the global root file system, which is a special case\n file system that is not subject to eviction.","static":false,"name":"<init>","comment":"Creates a new FileSystemCache object.","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"rootFS","comment":"reference to the global root file system, which is a special case\n file system that is not subject to eviction.","type_short":"GFileSystem"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Forcefully closes any filesystems in the cache, then clears the list of\n cached filesystems.","static":false,"name":"clear","comment":"Forcefully closes any filesystems in the cache, then clears the list of\n cached filesystems.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes any unused filesystems in the cache.","static":false,"name":"closeAllUnused","comment":"Removes any unused filesystems in the cache.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of mounted file systems.\n <p>\n@return {@link List} of {@link FSRLRoot} of filesystems that are currently mounted.","static":false,"name":"getMountedFilesystems","comment":"Returns a list of mounted file systems.\n ","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.FSRLRoot>","comment":"List of FSRLRoot of filesystems that are currently mounted.","type_short":"List"}},{"javadoc":"Adds a new {@link GFileSystem} to the cache.\n@param fs {@link GFileSystem} to add to this cache.","static":false,"name":"add","comment":"Adds a new GFileSystem to the cache.","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"fs","comment":"GFileSystem to add to this cache.","type_short":"GFileSystem"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a new {@link FileSystemRef} to an existing, already open {@link GFileSystem filesystem}.\n Caller is responsible for {@link FileSystemRef#close() closing} it.\n <p>\n Returns NULL if the requested filesystem isn't already open and mounted in the cache.\n@param fsrl {@link FSRLRoot} of the desired filesystem.\n@return a new {@link FileSystemRef} or null if the filesystem is not currently mounted.","static":false,"name":"getRef","comment":"Returns a new FileSystemRef to an existing, already open GFileSystem.\n Caller is responsible for FileSystemRef#close() it.\n \n Returns NULL if the requested filesystem isn't already open and mounted in the cache.","params":[{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","name":"fsrl","comment":"FSRLRoot of the desired filesystem.","type_short":"FSRLRoot"}],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.FileSystemRef","comment":"a new FileSystemRef or null if the filesystem is not currently mounted.","type_short":"FileSystemRef"}},{"javadoc":"Returns true if there is a filesystem in the cache that has a containerFSRL that\n is {@link FSRL#isEquivalent(FSRL) equiv} to the specified FSRL.\n <p>\n@param containerFSRL {@link FSRL} location to query for currently mounted filesystem.\n@return true if there is a filesystem mounted using that containerFSRL.","static":false,"name":"isFilesystemMountedAt","comment":"Returns true if there is a filesystem in the cache that has a containerFSRL that\n is FSRL#isEquivalent(FSRL) to the specified FSRL.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL location to query for currently mounted filesystem.","type_short":"FSRL"}],"throws":[],"return":{"type_long":"boolean","comment":"true if there is a filesystem mounted using that containerFSRL.","type_short":"boolean"}},{"javadoc":"Returns a new {@link FileSystemRef} to a already mounted {@link GFileSystem filesystem}\n (keeping the filesystem pinned in memory without the risk of it being closed during\n a race condition).\n <p>\n The caller is responsible for {@link FileSystemRef#close() closing} it when done.\n <p>\n Returns null if there is no filesystem mounted at the requested container fsrl.\n@param containerFSRL {@link FSRL} location where a filesystem is already mounted\n@return new {@link FileSystemRef} to the already mounted filesystem, or null","static":false,"name":"getFilesystemRefMountedAt","comment":"Returns a new FileSystemRef to a already mounted GFileSystem\n (keeping the filesystem pinned in memory without the risk of it being closed during\n a race condition).\n \n The caller is responsible for FileSystemRef#close() it when done.\n \n Returns null if there is no filesystem mounted at the requested container fsrl.","params":[{"type_long":"ghidra.formats.gfilesystem.FSRL","name":"containerFSRL","comment":"FSRL location where a filesystem is already mounted","type_short":"FSRL"}],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.FileSystemRef","comment":"new FileSystemRef to the already mounted filesystem, or null","type_short":"FileSystemRef"}},{"javadoc":"","static":false,"name":"onFilesystemClose","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"fs","comment":"","type_short":"GFileSystem"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"onFilesystemRefChange","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"fs","comment":"","type_short":"GFileSystem"},{"type_long":"ghidra.formats.gfilesystem.FileSystemRefManager","name":"refManager","comment":"","type_short":"FileSystemRefManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Performs maintainence on the filesystem cache, closing() any filesystems\n that are not used anymore.","static":false,"name":"cacheMaint","comment":"Performs maintainence on the filesystem cache, closing() any filesystems\n that are not used anymore.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExpired","comment":"","params":[{"type_long":"java.util.List<ghidra.formats.gfilesystem.FileSystemCache.FSCacheInfo>","name":"recs","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.FileSystemCache.FSCacheInfo>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getUnusedFSes","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.FileSystemCache.FSCacheInfo>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"release","comment":"","params":[{"type_long":"ghidra.formats.gfilesystem.FileSystemCache.FSCacheInfo","name":"fsci","comment":"","type_short":"FSCacheInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FileSystemCache","comment":"A threadsafe cache of GFileSystem instances (organized by their FSRLRoot)\n \n Any filesystems that are not referenced by outside users (via a FileSystemRef) will\n be closed and removed from the cache when the next #cacheMaint() is performed.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"filesystemPurgeDelayMS","comment":"","type_short":"int","constant_value":"60000"},{"type_long":"java.util.Map<ghidra.formats.gfilesystem.FSRLRoot,ghidra.formats.gfilesystem.FileSystemCache.FSCacheInfo>","javadoc":"","static":false,"name":"filesystems","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.formats.gfilesystem.GFileSystem","javadoc":"","static":false,"name":"rootFS","comment":"","type_short":"GFileSystem","constant_value":null},{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","javadoc":"","static":false,"name":"rootFSRL","comment":"","type_short":"FSRLRoot","constant_value":null}]}
