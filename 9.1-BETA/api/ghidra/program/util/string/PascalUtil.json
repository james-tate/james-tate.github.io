{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Looks for Pascal strings given a sequence of bytes that represent a sequence of ascii chars.\n@param buf the Memory buffer containing the bytes that make up the string.\n@param sequence the sequence that specifies the start, end, and type of ascii sequence (i.e. ascii,\n unicode16).  This method looks for both 2 byte and 1 byte leading pascal lengths both before\n and at the beginning of the given sequence.\n@return a new sequence that has been adjusted  to represent a pascal string or null if\n a pascal string was not found.","static":true,"name":"findPascalSequence","comment":"Looks for Pascal strings given a sequence of bytes that represent a sequence of ascii chars.","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"the Memory buffer containing the bytes that make up the string.","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"the sequence that specifies the start, end, and type of ascii sequence (i.e. ascii,\n unicode16).  This method looks for both 2 byte and 1 byte leading pascal lengths both before\n and at the beginning of the given sequence.","type_short":"Sequence"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"a new sequence that has been adjusted  to represent a pascal string or null if\n a pascal string was not found.","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"findUnicodePascal","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"","type_short":"Sequence"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"findAsciiPascal","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"","type_short":"Sequence"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"checkForPascalUnicodeSequence","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"","type_short":"Sequence"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"checkForPascalAsciiSequence","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"","type_short":"Sequence"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"checkForPascal255AsciiSequence","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.util.ascii.Sequence","name":"sequence","comment":"","type_short":"Sequence"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.ascii.Sequence","comment":"","type_short":"Sequence"}},{"javadoc":"","static":true,"name":"getShort","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"getByte","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"PascalUtil","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"ONE_BYTE_OFFSET","comment":"","type_short":"int","constant_value":"-1"},{"type_long":"int","javadoc":"","static":true,"name":"TWO_BYTE_OFFSET","comment":"","type_short":"int","constant_value":"-2"},{"type_long":"int","javadoc":"","static":true,"name":"NO_OFFSET","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"ASCII_CHAR_WIDTH","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"UNICODE16_CHAR_WIDTH","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"PASCAL_LENGTH_SIZE","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"PASCAL255_LENGTH_SIZE","comment":"","type_short":"int","constant_value":"1"}]}
