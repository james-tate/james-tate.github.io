{"implements":[],"javadoc":"Class with a utility function to calculate the cyclomatic complexity of a function.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calculates the cyclomatic complexity of a function by decomposing it into a flow\n graph using a BasicBlockModel.\n@param function the function\n@param monitor a monitor\n@return the cyclomatic complexity\n@throws CancelledException","static":false,"name":"calculateCyclomaticComplexity","comment":"Calculates the cyclomatic complexity of a function by decomposing it into a flow\n graph using a BasicBlockModel.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"the function","type_short":"Function"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"the cyclomatic complexity","type_short":"int"}}],"name":"CyclomaticComplexity","comment":"Class with a utility function to calculate the cyclomatic complexity of a function.","fields":[]}
