{"implements":[],"javadoc":"<code>LanguagePostUpgradeInstructionHandler<\/code> provides an abstract implementation \n of a post language-upgrade instruction modification handler.  The Simple Language Translator\n facilitates the specification of such a handler implementation within a language \n translator specification file using the <i>post_upgrade_handler<\/i> element.\n Following a major-version language upgrade, the last translator invoked is given an\n opportunity to perform additional instruction modifications on the entire program.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param program","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get disassembler for the current program\n@return disassembler instance","static":false,"name":"getDisassembler","comment":"Get disassembler for the current program","params":[],"throws":[],"return":{"type_long":"ghidra.program.disassemble.Disassembler","comment":"disassembler instance","type_short":"Disassembler"}},{"javadoc":"Invoked after Program language upgrade has completed.  \n Implementation of this method permits the final re-disassembled program to be\n examined\/modified to address more complex language upgrades.  This method will only be \n invoked on the latest translator, which means all complex multi-version post-upgrade\n concerns must factor in the complete language transition.  The program's language \n information will still reflect the original pre-upgrade state, and if the program is\n undergoing a schema version upgrade as well, certain complex upgrades may not\n have been completed (e.g., Function and Variable changes).  Program modifications should\n be restricted to instruction and instruction context changes only.\n@param oldLanguage the oldest language involved in the current upgrade translation\n (this is passed since this is the only fixup invocation which must handle the any\n relevant fixup complexities when transitioning from the specified oldLanguage).\n@param monitor task monitor\n@throws CancelledException if upgrade cancelled","static":false,"name":"fixupInstructions","comment":"Invoked after Program language upgrade has completed.  \n Implementation of this method permits the final re-disassembled program to be\n examined\/modified to address more complex language upgrades.  This method will only be \n invoked on the latest translator, which means all complex multi-version post-upgrade\n concerns must factor in the complete language transition.  The program's language \n information will still reflect the original pre-upgrade state, and if the program is\n undergoing a schema version upgrade as well, certain complex upgrades may not\n have been completed (e.g., Function and Variable changes).  Program modifications should\n be restricted to instruction and instruction context changes only.","params":[{"type_long":"ghidra.program.model.lang.Language","name":"oldLanguage","comment":"the oldest language involved in the current upgrade translation\n (this is passed since this is the only fixup invocation which must handle the any\n relevant fixup complexities when transitioning from the specified oldLanguage).","type_short":"Language"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if upgrade cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Repair the context and re-disassemble the instruction at the specified address.\n@param program\n@param addr instruction address\n@param contextValue new context value\n@param mergeContext if true, the specified context value will be merged with the existing \n context at the specified address, otherwise the existing value will be replaced.","static":false,"name":"modifySingleInstructionContext","comment":"Repair the context and re-disassemble the instruction at the specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"instruction address","type_short":"Address"},{"type_long":"ghidra.program.model.lang.RegisterValue","name":"contextValue","comment":"new context value","type_short":"RegisterValue"},{"type_long":"boolean","name":"mergeContext","comment":"if true, the specified context value will be merged with the existing \n context at the specified address, otherwise the existing value will be replaced.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LanguagePostUpgradeInstructionHandler","comment":"LanguagePostUpgradeInstructionHandler provides an abstract implementation \n of a post language-upgrade instruction modification handler.  The Simple Language Translator\n facilitates the specification of such a handler implementation within a language \n translator specification file using the post_upgrade_handler element.\n Following a major-version language upgrade, the last translator invoked is given an\n opportunity to perform additional instruction modifications on the entire program.","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.disassemble.Disassembler","javadoc":"","static":false,"name":"disassembler","comment":"","type_short":"Disassembler","constant_value":null}]}
