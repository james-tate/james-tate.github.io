{"implements":[],"javadoc":"<code>LanguageTranslatorFactory<\/code> manages all language translators within Ghidra.  \n Language translators support either a version translation for a single language, or a \n language transition from one language to another.  The following types of translators \n are supported:\n <ul>\n <li>Simple translators are established based upon a translator XML specification file (*.trans).<\/li>\n <li>Explicit translators are class implementations of the LanguageTranslator interface.\n The abstract LanguageTranslatorAdapter has been supplied for this purpose so that \n default mappings can be used if needed.  Such custom translator classes should not be \n created within the 'ghidra.program.util' package since they will be ignored by the factory.<\/li>\n <li>Default translators can be instantiated for languages whose address spaces map to one-another.\n Such default translations may be lossy with register mappings and could result in lost register \n variables and references.<\/li> \n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"registerLanguageTranslatorFactoryMinion","comment":"","params":[{"type_long":"ghidra.program.util.LanguageTranslatorFactoryMinion","name":"minion","comment":"","type_short":"LanguageTranslatorFactoryMinion"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the single instance of the OldLanguageFactory.","static":true,"name":"getLanguageTranslatorFactory","comment":"Returns the single instance of the OldLanguageFactory.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslatorFactory","comment":"","type_short":"LanguageTranslatorFactory"}},{"javadoc":"Constructor.","static":false,"name":"<init>","comment":"Constructor.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initTranslatorMaps","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addTranslator","comment":"","params":[{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processMinion","comment":"","params":[{"type_long":"ghidra.program.util.LanguageTranslatorFactoryMinion","name":"minion","comment":"","type_short":"LanguageTranslatorFactoryMinion"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addToMap","comment":"","params":[{"type_long":"java.util.HashMap<ghidra.program.model.lang.LanguageID,java.util.List<ghidra.program.util.LanguageTranslator>>","name":"map","comment":"","type_short":"HashMap"},{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"},{"type_long":"boolean","name":"sorted","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExplicitTranslators","comment":"","params":[{"type_long":"java.util.List<ghidra.program.util.LanguageTranslator>","name":"translators","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSimpleTranslators","comment":"","params":[{"type_long":"java.util.List<ghidra.program.util.LanguageTranslator>","name":"list","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns number of files which failed to parse properly.\n This only reflects minimal parsing of old language files\n which will prevent them from being added to old language map.\n This is intended to be used by a unit test.","static":false,"name":"badFileCount","comment":"Returns number of files which failed to parse properly.\n This only reflects minimal parsing of old language files\n which will prevent them from being added to old language map.\n This is intended to be used by a unit test.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Validate all translators contained within the translator maps.  \n This is intended to be used by a unit test.\n@returns number of validation errors","static":false,"name":"validateAllTranslators","comment":"Validate all translators contained within the translator maps.  \n This is intended to be used by a unit test.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns a list of all translators.","static":false,"name":"getAllTranslators","comment":"Returns a list of all translators.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.util.LanguageTranslator>","comment":"","type_short":"List"}},{"javadoc":"Returns a language translator for the transition from an oldLanguage to a newLanguage.\n The toLanguage may be a different language or a newer version of fromLanguage.\n@param fromLanguage old language\n@param toLanguage new language\n@return language translator if transition is supported, otherwise null is returned.","static":false,"name":"getLanguageTranslator","comment":"Returns a language translator for the transition from an oldLanguage to a newLanguage.\n The toLanguage may be a different language or a newer version of fromLanguage.","params":[{"type_long":"ghidra.program.model.lang.Language","name":"fromLanguage","comment":"old language","type_short":"Language"},{"type_long":"ghidra.program.model.lang.Language","name":"toLanguage","comment":"new language","type_short":"Language"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"language translator if transition is supported, otherwise null is returned.","type_short":"LanguageTranslator"}},{"javadoc":"Returns a language translation for a language version which is no longer supported.\n@param languageName old unsupported language name\n@param majorVersion language major version within program\n@return language translator if one can be determined, otherwise null is returned.","static":false,"name":"getLanguageTranslator","comment":"Returns a language translation for a language version which is no longer supported.","params":[{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageName","comment":"old unsupported language name","type_short":"LanguageID"},{"type_long":"int","name":"majorVersion","comment":"language major version within program","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"language translator if one can be determined, otherwise null is returned.","type_short":"LanguageTranslator"}},{"javadoc":"Expand the to\/from sides of a language translator to originate \"from\" the specified \n fromMajorVersion and terminate at the current version of the \"to\" language.\n@param translator\n@param fromVersion\n@return expanded translator or null if it could not be filled-out completely","static":false,"name":"expandTranslator","comment":"Expand the to\/from sides of a language translator to originate \"from\" the specified \n fromMajorVersion and terminate at the current version of the \"to\" language.","params":[{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"},{"type_long":"int","name":"fromVersion","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"expanded translator or null if it could not be filled-out completely","type_short":"LanguageTranslator"}},{"javadoc":"Build language version translator.  A default translator will be built if \n explicit translators have not been defined.\n@param languageID\n@param fromVersion\n@param toVersion\n@return language translator or null if one could not be built","static":false,"name":"getLanguageVersionTranslator","comment":"Build language version translator.  A default translator will be built if \n explicit translators have not been defined.","params":[{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageID","comment":"","type_short":"LanguageID"},{"type_long":"int","name":"fromVersion","comment":"","type_short":"int"},{"type_long":"int","name":"toVersion","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"language translator or null if one could not be built","type_short":"LanguageTranslator"}},{"javadoc":"@param versionTranslatorList sorted list of version translators\n@param version\n@return ","static":false,"name":"getNextTranslator","comment":"","params":[{"type_long":"java.util.List<ghidra.program.util.LanguageTranslator>","name":"versionTranslatorList","comment":"sorted list of version translators","type_short":"List"},{"type_long":"int","name":"version","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"","type_short":"LanguageTranslator"}}],"name":"LanguageTranslatorFactory","comment":"LanguageTranslatorFactory manages all language translators within Ghidra.  \n Language translators support either a version translation for a single language, or a \n language transition from one language to another.  The following types of translators \n are supported:\n \n Simple translators are established based upon a translator XML specification file (*.trans).\n Explicit translators are class implementations of the LanguageTranslator interface.\n The abstract LanguageTranslatorAdapter has been supplied for this purpose so that \n default mappings can be used if needed.  Such custom translator classes should not be \n created within the 'ghidra.program.util' package since they will be ignored by the factory.\n Default translators can be instantiated for languages whose address spaces map to one-another.\n Such default translations may be lossy with register mappings and could result in lost register \n variables and references. \n ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LANGUAGE_TRANSLATOR_FILE_EXT","comment":"","type_short":"String","constant_value":"\".trans\""},{"type_long":"ghidra.program.util.LanguageTranslatorFactory","javadoc":"","static":true,"name":"languageTranslatorFactory","comment":"","type_short":"LanguageTranslatorFactory","constant_value":null},{"type_long":"java.util.Comparator<java.lang.Object>","javadoc":"","static":false,"name":"TRANSLATOR_VERSION_COMPARATOR","comment":"","type_short":"Comparator","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.lang.LanguageID,java.util.List<ghidra.program.util.LanguageTranslator>>","javadoc":"<code>translatorMap<\/code> provides pre-defined translators between different languages.","static":false,"name":"translatorMap","comment":"translatorMap provides pre-defined translators between different languages.","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.lang.LanguageID,java.util.List<ghidra.program.util.LanguageTranslator>>","javadoc":"<code>translatorVersionMap<\/code> provides pre-defined translators between consecutive versions \n of the same language.  Lists are in sorted order based upon translator fromVersion.","static":false,"name":"translatorVersionMap","comment":"translatorVersionMap provides pre-defined translators between consecutive versions \n of the same language.  Lists are in sorted order based upon translator fromVersion.","type_short":"HashMap","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"badFileCount","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<ghidra.program.util.LanguageTranslatorFactoryMinion>","javadoc":"","static":true,"name":"minionList","comment":"","type_short":"List","constant_value":null}]}
