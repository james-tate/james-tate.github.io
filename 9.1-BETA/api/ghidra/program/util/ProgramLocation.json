{"implements":["java.lang.Comparable"],"javadoc":"<CODE>ProgramLocation<\/CODE> provides information about a location in a\n program in the most generic way.\n\n ProgramLocations refer to a specific location in a program and can be specified down\n to an address, a field at that address, and within that field, a row, col, and character\n offset.  The field is not recorded directly, but by the subclass of the ProgramLocation.\n The \"cursor position\" within a field is specified by three variables: row, col, and character\n offset.  The row is literally the row (line #) the cursor is on  within the field, the\n column represents the display item on that row (For example, in the bytes field\n the column will represent which \"byte\" the cursor is on.  Most fields only have one\n column item per row.)  And finally, the character offset\n is the character position within the display item specified by the row and column.  Simple fields\n like the address field and Mnemonic field will always have a row and column of 0.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new ProgramLocation.\n <br>Note: A NullPointerException will be logged if addr is null.\n@param program the program of the location\n@param addr address of the location; cannot be null; This could be a\n code unit minimum address where the byteAddr is within the code unit.\n@param byteAddr address of the location; cannot be null\n@param groupPath path associated with the address (an address could\n appear at more than one group path); may be null\n@param componentPath array of indexes for each nested data component;\n the data index is the data component's index within its parent; may be null\n@param refAddr the \"referred to\" address if the location is\n over a reference; may be null\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.","static":false,"name":"<init>","comment":"Construct a new ProgramLocation.\n Note: A NullPointerException will be logged if addr is null.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program of the location","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address of the location; cannot be null; This could be a\n code unit minimum address where the byteAddr is within the code unit.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"byteAddr","comment":"address of the location; cannot be null","type_short":"Address"},{"type_long":"int[]","name":"componentPath","comment":"array of indexes for each nested data component;\n the data index is the data component's index within its parent; may be null","type_short":"int[]"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the \"referred to\" address if the location is\n over a reference; may be null","type_short":"Address"},{"type_long":"int","name":"row","comment":"the row within the field.","type_short":"int"},{"type_long":"int","name":"col","comment":"- the display item index on the given row. (Note most fields only have one display item per row)","type_short":"int"},{"type_long":"int","name":"charOffset","comment":"- the character offset within the display item.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.\n <br>Note: A NullPointerException will be logged if addr is null.\n@param program the program associated with this program location (also\n used to obtain a code-unit-aligned address)\n@param addr address of the location; cannot be null\n@param componentPath array of indexes for each nested data component;\n the index is the data component's index within its parent; may be null\n@param refAddr the \"referred to\" address if the location is\n over a reference; may be null\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.","static":false,"name":"<init>","comment":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.\n Note: A NullPointerException will be logged if addr is null.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program associated with this program location (also\n used to obtain a code-unit-aligned address)","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address of the location; cannot be null","type_short":"Address"},{"type_long":"int[]","name":"componentPath","comment":"array of indexes for each nested data component;\n the index is the data component's index within its parent; may be null","type_short":"int[]"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the \"referred to\" address if the location is\n over a reference; may be null","type_short":"Address"},{"type_long":"int","name":"row","comment":"the row within the field.","type_short":"int"},{"type_long":"int","name":"col","comment":"- the display item index on the given row. (Note most fields only have one display item per row)","type_short":"int"},{"type_long":"int","name":"charOffset","comment":"- the character offset within the display item.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.\n@param program the program associated with this program location (also\n used to obtain a code-unit-aligned address)\n@param addr address for the location","static":false,"name":"<init>","comment":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program associated with this program location (also\n used to obtain a code-unit-aligned address)","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address for the location","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.\n@param program the program associated with this program location (also\n used to obtain a code-unit-aligned address)\n@param addr address for the location\n@param row the row within the field.\n@param col - the display item index on the given row. (Note most fields only have one display item per row)\n@param charOffset - the character offset within the display item.","static":false,"name":"<init>","comment":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program associated with this program location (also\n used to obtain a code-unit-aligned address)","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address for the location","type_short":"Address"},{"type_long":"int","name":"row","comment":"the row within the field.","type_short":"int"},{"type_long":"int","name":"col","comment":"- the display item index on the given row. (Note most fields only have one display item per row)","type_short":"int"},{"type_long":"int","name":"charOffset","comment":"- the character offset within the display item.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.\n@param program the program associated with this program location (also\n used to obtain a code-unit-aligned address)\n@param addr address for the location\n@param refAddr the \"referred to\" address if the location is over a\n reference","static":false,"name":"<init>","comment":"Construct a new ProgramLocation for the given address.  The address will be adjusted\n to the beginning of the code unit containing that address(if it exists).  The original\n address can be retrieved using the \"getByteAddress()\" method.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program associated with this program location (also\n used to obtain a code-unit-aligned address)","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address for the location","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the \"referred to\" address if the location is over a\n reference","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Default constructor required for restoring a program location from XML.","static":false,"name":"<init>","comment":"Default constructor required for restoring a program location from XML.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the componentPath for the codeUnit.  Null will be returned if the\n object is an Instruction or a top-level Data object.","static":false,"name":"getComponentPath","comment":"Returns the componentPath for the codeUnit.  Null will be returned if the\n object is an Instruction or a top-level Data object.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"Returns program associated with location or null if not specified.","static":false,"name":"getProgram","comment":"Returns program associated with location or null if not specified.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns the address associated with this location.\n <br>Note: this may not be the same as the byte address. For example, in\n a code unit location this may be the minimum address of the code unit\n that contains the byte address.","static":false,"name":"getAddress","comment":"Returns the address associated with this location.\n Note: this may not be the same as the byte address. For example, in\n a code unit location this may be the minimum address of the code unit\n that contains the byte address.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns the byte level address associated with this location.","static":false,"name":"getByteAddress","comment":"Returns the byte level address associated with this location.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns the \"referred to\" address if the location is over an\n address in some field.","static":false,"name":"getRefAddress","comment":"Returns the \"referred to\" address if the location is over an\n address in some field.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Save this program location to the given save state object.\n@param obj the save state object for saving the location\n@param prefix prefix appended to the names of the save state items to make the entry\n unique","static":false,"name":"saveState","comment":"Save this program location to the given save state object.","params":[{"type_long":"ghidra.framework.options.SaveState","name":"obj","comment":"the save state object for saving the location","type_short":"SaveState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Restore this program location using the given program\n and save state object.\n@param prefix prefix appended to the names of the save state items to make the entry\n unique","static":false,"name":"restoreState","comment":"Restore this program location using the given program\n and save state object.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"","type_short":"Program"},{"type_long":"ghidra.framework.options.SaveState","name":"obj","comment":"","type_short":"SaveState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getLocation","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.framework.options.SaveState","name":"saveState","comment":"","type_short":"SaveState"}],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramLocation","comment":"","type_short":"ProgramLocation"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.program.util.ProgramLocation","name":"other","comment":"","type_short":"ProgramLocation"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"checkComponentPath","comment":"","params":[{"type_long":"int[]","name":"p1","comment":"","type_short":"int[]"},{"type_long":"int[]","name":"p2","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"compareAddr","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"getCodeUnitAddress","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"p","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":true,"name":"showException","comment":"","params":[{"type_long":"java.lang.Exception","name":"exception","comment":"","type_short":"Exception"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this location represents a valid location in the given program\n@param testProgram the program to test if this location is valid.\n@return true if this location represents a valid location in the given program","static":false,"name":"isValid","comment":"Returns true if this location represents a valid location in the given program","params":[{"type_long":"ghidra.program.model.listing.Program","name":"testProgram","comment":"the program to test if this location is valid.","type_short":"Program"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this location represents a valid location in the given program","type_short":"boolean"}},{"javadoc":"Returns the row within the program location.\n@return the row within the program location.","static":false,"name":"getRow","comment":"Returns the row within the program location.","params":[],"throws":[],"return":{"type_long":"int","comment":"the row within the program location.","type_short":"int"}},{"javadoc":"Returns the character offset in the display item at the (row,col)\n@return the character offset in the display item at the (row,col)","static":false,"name":"getCharOffset","comment":"Returns the character offset in the display item at the (row,col)","params":[],"throws":[],"return":{"type_long":"int","comment":"the character offset in the display item at the (row,col)","type_short":"int"}},{"javadoc":"Returns the column index of the display piece represented by this location.  For most\n locations, there is only one display item per row, in which case this value will be 0.","static":false,"name":"getColumn","comment":"Returns the column index of the display piece represented by this location.  For most\n locations, there is only one display item per row, in which case this value will be 0.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"ProgramLocation","comment":"ProgramLocation provides information about a location in a\n program in the most generic way.\n\n ProgramLocations refer to a specific location in a program and can be specified down\n to an address, a field at that address, and within that field, a row, col, and character\n offset.  The field is not recorded directly, but by the subclass of the ProgramLocation.\n The \"cursor position\" within a field is specified by three variables: row, col, and character\n offset.  The row is literally the row (line #) the cursor is on  within the field, the\n column represents the display item on that row (For example, in the bytes field\n the column will represent which \"byte\" the cursor is on.  Most fields only have one\n column item per row.)  And finally, the character offset\n is the character position within the display item specified by the row and column.  Simple fields\n like the address field and Mnemonic field will always have a row and column of 0.","fields":[{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"addr","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"refAddr","comment":"","type_short":"Address","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"componentPath","comment":"","type_short":"int[]","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"byteAddr","comment":"","type_short":"Address","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"row","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"col","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"charOffset","comment":"","type_short":"int","constant_value":null}]}
