{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a VariableStorageConflicts object for the variables contained within two\n functions.\n@param variablesList1\n@param variablesList2\n@param ignoreParamToParamConflicts if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check.\n@param monitor\n@throws CancelledException","static":false,"name":"<init>","comment":"Construct a VariableStorageConflicts object for the variables contained within two\n functions.","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variablesList1","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variablesList2","comment":"","type_short":"List"},{"type_long":"boolean","name":"ignoreParamToParamConflicts","comment":"if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Recursively expand the variable storage (set1,set2) to encompass all\n variables associated with the corresponding sets (variables1,variables2) which\n intersects the other set.  Any variables added to the overlap set will also be added\n to the corresponding overlapList.\n@param firstUseOffset first use offset or -1 for parameter\n@param variables1\n@param set1\n@param overlapList1\n@param variables2\n@param set2\n@param overlapList2\n@param monitor\n@throws CancelledException","static":false,"name":"getOverlappingVariables","comment":"Recursively expand the variable storage (set1,set2) to encompass all\n variables associated with the corresponding sets (variables1,variables2) which\n intersects the other set.  Any variables added to the overlap set will also be added\n to the corresponding overlapList.","params":[{"type_long":"int","name":"firstUseOffset","comment":"first use offset or -1 for parameter","type_short":"int"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variables1","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSet","name":"set1","comment":"","type_short":"AddressSet"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"overlapList1","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variables2","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSet","name":"set2","comment":"","type_short":"AddressSet"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"overlapList2","comment":"","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"findOverlaps","comment":"","params":[{"type_long":"int","name":"firstUseOffset","comment":"","type_short":"int"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variables","comment":"","type_short":"List"},{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"overlapList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSet","name":"overlapSet","comment":"","type_short":"AddressSet"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"nonOverlapList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"intersectSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"addAllParameters","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variables","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"overlapList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.AddressSet","name":"overlapSet","comment":"","type_short":"AddressSet"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"nonOverlapList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"addToAddressSet","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSet","name":"set","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"","type_short":"VariableStorage"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getOverlappingVariables","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.stl.Pair<java.util.List<ghidra.program.model.listing.Variable>,java.util.List<ghidra.program.model.listing.Variable>>>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"hasOverlapConflict","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasParameterConflict","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Check to see if either var1 or var2 is contained within the conflicted\/overlapping\n set of variables.  In general, one of the specified variables should be null.\n@param var1 a variable which corresponds to function1 at time of construction or null\n@param var2 a variable which corresponds to function2 at time of construction or null\n@return true if either variable is contained within the conflicted\/overlapping\n set of variables.","static":false,"name":"isConflicted","comment":"Check to see if either var1 or var2 is contained within the conflicted\/overlapping\n set of variables.  In general, one of the specified variables should be null.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"a variable which corresponds to function1 at time of construction or null","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"a variable which corresponds to function2 at time of construction or null","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if either variable is contained within the conflicted\/overlapping\n set of variables.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsVariable","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"list","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeMatchingParameter","comment":"","params":[{"type_long":"ghidra.program.model.listing.Parameter","name":"var","comment":"","type_short":"Parameter"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"list","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"","type_short":"Parameter"}},{"javadoc":"","static":false,"name":"removeMatchingVariable","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"","type_short":"Variable"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"list","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}}],"name":"VariableStorageConflicts","comment":"","fields":[{"type_long":"java.util.List<generic.stl.Pair<java.util.List<ghidra.program.model.listing.Variable>,java.util.List<ghidra.program.model.listing.Variable>>>","javadoc":"","static":false,"name":"overlappingVariables","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"ignoreParamToParamConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","javadoc":"","static":false,"name":"nonOverlappingVariables1","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","javadoc":"","static":false,"name":"nonOverlappingVariables2","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"paramOnlyAddressSets","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"parametersConflicted","comment":"","type_short":"boolean","constant_value":null}]}
