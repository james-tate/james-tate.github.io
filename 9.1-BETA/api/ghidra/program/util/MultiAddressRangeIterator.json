{"implements":[],"javadoc":"<CODE>MultiAddressRangeIterator<\/CODE> is a class for iterating through multiple\n address range iterators simultaneously. The next() method returns the next address range\n as determined from all the iterators.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor of a multi address iterator for multiple forward address iterators.\n@param iters the address iterators.","static":false,"name":"<init>","comment":"Constructor of a multi address iterator for multiple forward address iterators.","params":[{"type_long":"ghidra.program.model.address.AddressRangeIterator[]","name":"iters","comment":"the address iterators.","type_short":"ghidra.program.model.address.AddressRangeIterator[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor of a multi address range iterator.\n <br>Note: all iterators must iterate in the same direction (forwards or backwards).\n@param iters the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter.\n@param forward true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array.","static":false,"name":"<init>","comment":"Constructor of a multi address range iterator.\n Note: all iterators must iterate in the same direction (forwards or backwards).","params":[{"type_long":"ghidra.program.model.address.AddressRangeIterator[]","name":"iters","comment":"the address iterators. All must iterate in the direction indicated\n by the \"forward\" parameter.","type_short":"ghidra.program.model.address.AddressRangeIterator[]"},{"type_long":"boolean","name":"forward","comment":"true indicates that forward iterators are in the array.\n false indicates backward iterators are in the array.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines whether or not any of the original iterators has a\n next address.\n@return true if a next address can be obtained from any of\n the address iterators.","static":false,"name":"hasNext","comment":"Determines whether or not any of the original iterators has a\n next address.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if a next address can be obtained from any of\n the address iterators.","type_short":"boolean"}},{"javadoc":"Returns the next address. The next address could be from any \n one of the iterators.\n@return the next address.","static":false,"name":"next","comment":"Returns the next address. The next address could be from any \n one of the iterators.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the next address.","type_short":"AddressRange"}},{"javadoc":"Returns the next address for forward iterators. The next address could be from any \n one of the iterators.\n@return the next address.","static":false,"name":"forwardNext","comment":"Returns the next address for forward iterators. The next address could be from any \n one of the iterators.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the next address.","type_short":"AddressRange"}},{"javadoc":"Returns the next address for backward iterators. The next address could be from any \n one of the iterators.\n@return the next address.","static":false,"name":"backwardNext","comment":"Returns the next address for backward iterators. The next address could be from any \n one of the iterators.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"the next address.","type_short":"AddressRange"}}],"name":"MultiAddressRangeIterator","comment":"MultiAddressRangeIterator is a class for iterating through multiple\n address range iterators simultaneously. The next() method returns the next address range\n as determined from all the iterators.","fields":[{"type_long":"ghidra.program.model.address.AddressRangeIterator[]","javadoc":"","static":false,"name":"iters","comment":"","type_short":"ghidra.program.model.address.AddressRangeIterator[]","constant_value":null},{"type_long":"ghidra.program.model.address.AddressRange[]","javadoc":"","static":false,"name":"addrRanges","comment":"","type_short":"ghidra.program.model.address.AddressRange[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forward","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"min","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"max","comment":"","type_short":"Address","constant_value":null}]}
