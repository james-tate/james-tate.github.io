{"implements":[],"javadoc":"MemBuffer provides an array like interface into memory at a\n specific address.  Bytes can be retrieved by using a positive\n offset from the current position.  Depending on the implementation,\n the offset may be restricted to a specific positive range.  If the\n implementation does have a restriction, then a MemoryAccessException\n will be thrown, except for the {@link #getBytes(byte[], int)}\n method which will return 0.\n\n The purpose of this class is to\n allow an efficient implementation that buffers memory accesses and\n does not have to keep translating addresses.  This was designed to\n be passed to a language parser.  One advantage of MemBuffer over a\n byte array is that if necessary the actual Memory and Address can\n be retrieved in case all of the necessary bytes are not local.\n\n This interface does not provide methods to reposition the memory\n buffer.  This is so that it is clear that methods accepting this\n base class are not to mess which the base Address for this object.\n\n Memory-backed access is an optional implementation dependent\n capability.  In addition, the use of the relative offset is\n implementation dependent, but in general those implementations\n which are backed by memory may choose to wrap the offset\n when computing the corresponding memory address.  The treatment\n of the offset argument should be consistent across the various\n methods for a given implementation.\n@see ghidra.program.model.mem.MutableMemBuffer","static":false,"methods":[{"javadoc":"Returns true if this buffer's starting address has valid data.\n@return boolean true if first byte of memory buffer can be read","static":false,"name":"isInitializedMemory","comment":"Returns true if this buffer's starting address has valid data.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if first byte of memory buffer can be read","type_short":"boolean"}},{"javadoc":"Get one byte from memory at the current position plus offset.\n@param offset the displacement from the current position.\n@return the data at offset from the current position.\n@throws MemoryAccessException if memory cannot be read at the specified offset","static":false,"name":"getByte","comment":"Get one byte from memory at the current position plus offset.","params":[{"type_long":"int","name":"offset","comment":"the displacement from the current position.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"byte","comment":"the data at offset from the current position.","type_short":"byte"}},{"javadoc":"Get one unsigned byte from memory at the current position plus offset.\n@param offset the displacement from the current position.\n@return the byte data at offset from the current position, as a {@code int} value.\n@throws MemoryAccessException if memory cannot be read at the specified offset","static":false,"name":"getUnsignedByte","comment":"Get one unsigned byte from memory at the current position plus offset.","params":[{"type_long":"int","name":"offset","comment":"the displacement from the current position.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the byte data at offset from the current position, as a  value.","type_short":"int"}},{"javadoc":"Reads <tt>b.length<\/tt> bytes from this memory buffer\n starting at the address of this memory buffer plus the given memoryBufferOffset\n from that position.  The actual number of bytes may be fewer\n if bytes can't be read.\n@param b the buffer into which bytes will be placed\n@param offset the offset <b>in this memory buffer<\/b> from which to\n        start reading bytes.\n@return the number of bytes read which may be fewer than b.length if\n available bytes are exhausted or no bytes are available at the specified\n offset.","static":false,"name":"getBytes","comment":"Reads b.length bytes from this memory buffer\n starting at the address of this memory buffer plus the given memoryBufferOffset\n from that position.  The actual number of bytes may be fewer\n if bytes can't be read.","params":[{"type_long":"byte[]","name":"b","comment":"the buffer into which bytes will be placed","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"the offset in this memory buffer from which to\n        start reading bytes.","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the number of bytes read which may be fewer than b.length if\n available bytes are exhausted or no bytes are available at the specified\n offset.","type_short":"int"}},{"javadoc":"Get the Address which corresponds to the offset 0.\n@return the current address of offset 0.","static":false,"name":"getAddress","comment":"Get the Address which corresponds to the offset 0.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the current address of offset 0.","type_short":"Address"}},{"javadoc":"Get the Memory object actually used by the MemBuffer.\n@return the Memory used by this MemBuffer.","static":false,"name":"getMemory","comment":"Get the Memory object actually used by the MemBuffer.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.mem.Memory","comment":"the Memory used by this MemBuffer.","type_short":"Memory"}},{"javadoc":"Returns true if the underlying bytes are in big-endian order, false if they are little endian.\n@return true if the underlying bytes are in big-endian order, false if they are little endian.","static":false,"name":"isBigEndian","comment":"Returns true if the underlying bytes are in big-endian order, false if they are little endian.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the underlying bytes are in big-endian order, false if they are little endian.","type_short":"boolean"}},{"javadoc":"returns the short at the given offset, taking into account the endianess.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@return the short at the given offset, taking into account the endianess.\n@throws MemoryAccessException if a 2-byte short value cannot be read at the specified offset","static":false,"name":"getShort","comment":"returns the short at the given offset, taking into account the endianess.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if a 2-byte short value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"short","comment":"the short at the given offset, taking into account the endianess.","type_short":"short"}},{"javadoc":"Returns the unsigned short at the given offset, taking into account the endian-ness.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@return the unsigned short at the given offset, as a {@code int}, taking into account the endianess.\n@throws MemoryAccessException if a 2-byte short value cannot be read at the specified offset","static":false,"name":"getUnsignedShort","comment":"Returns the unsigned short at the given offset, taking into account the endian-ness.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if a 2-byte short value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the unsigned short at the given offset, as a , taking into account the endianess.","type_short":"int"}},{"javadoc":"returns the int at the given offset, taking into account the endianess.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@return the int at the given offset, taking into account the endianess.\n@throws MemoryAccessException if a 4-byte integer value cannot be read at the specified offset","static":false,"name":"getInt","comment":"returns the int at the given offset, taking into account the endianess.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if a 4-byte integer value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the int at the given offset, taking into account the endianess.","type_short":"int"}},{"javadoc":"Returns the unsigned int at the given offset, taking into account the endianess.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@return the unsigned int at the given offset, as a {@code long}, taking into account the endianess.\n@throws MemoryAccessException if a 4-byte integer value cannot be read at the specified offset","static":false,"name":"getUnsignedInt","comment":"Returns the unsigned int at the given offset, taking into account the endianess.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if a 4-byte integer value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"long","comment":"the unsigned int at the given offset, as a , taking into account the endianess.","type_short":"long"}},{"javadoc":"returns the long at the given offset, taking into account the endianess.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@return the long at the given offset, taking into account the endianess.\n@throws MemoryAccessException if a 8-byte long value cannot be read at the specified offset","static":false,"name":"getLong","comment":"returns the long at the given offset, taking into account the endianess.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if a 8-byte long value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"long","comment":"the long at the given offset, taking into account the endianess.","type_short":"long"}},{"javadoc":"returns the value at the given offset, taking into account the endianess.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@param size the number of bytes to include in the value\n@param signed true if value should be treated as a signed twos-compliment value.\n@return the value at the given offset, taking into account the endianess.\n@throws MemoryAccessException if the request size value cannot be read at the specified offset","static":false,"name":"getBigInteger","comment":"returns the value at the given offset, taking into account the endianess.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"},{"type_long":"int","name":"size","comment":"the number of bytes to include in the value","type_short":"int"},{"type_long":"boolean","name":"signed","comment":"true if value should be treated as a signed twos-compliment value.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the request size value cannot be read at the specified offset","type_short":"MemoryAccessException"}],"return":{"type_long":"java.math.BigInteger","comment":"the value at the given offset, taking into account the endianess.","type_short":"BigInteger"}},{"javadoc":"Returns the signed value of the integer (of the specified length) at the specified offset.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@param len the number of bytes that the integer occupies (ie. 2 bytes == short int, 4\n bytes == 32bit int, etc), valid lens are 1, 2 and 4.\n@return int integer value\n@throws MemoryAccessException","static":false,"name":"getVarLengthInt","comment":"Returns the signed value of the integer (of the specified length) at the specified offset.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes that the integer occupies (ie. 2 bytes == short int, 4\n bytes == 32bit int, etc), valid lens are 1, 2 and 4.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"int integer value","type_short":"int"}},{"javadoc":"Returns the unsigned value of the integer (of the specified length) at the specified offset.\n@param offset the offset from the membuffers origin (the address that it is set at)\n@param len the number of bytes that the integer occupies (ie. 2 bytes == short int, 4\n bytes == 32bit int, etc), valid lens are 1, 2 and 4.\n@return long integer value\n@throws MemoryAccessException","static":false,"name":"getVarLengthUnsignedInt","comment":"Returns the unsigned value of the integer (of the specified length) at the specified offset.","params":[{"type_long":"int","name":"offset","comment":"the offset from the membuffers origin (the address that it is set at)","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes that the integer occupies (ie. 2 bytes == short int, 4\n bytes == 32bit int, etc), valid lens are 1, 2 and 4.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"long","comment":"long integer value","type_short":"long"}}],"name":"MemBuffer","comment":"MemBuffer provides an array like interface into memory at a\n specific address.  Bytes can be retrieved by using a positive\n offset from the current position.  Depending on the implementation,\n the offset may be restricted to a specific positive range.  If the\n implementation does have a restriction, then a MemoryAccessException\n will be thrown, except for the #getBytes(byte[], int)\n method which will return 0.\n\n The purpose of this class is to\n allow an efficient implementation that buffers memory accesses and\n does not have to keep translating addresses.  This was designed to\n be passed to a language parser.  One advantage of MemBuffer over a\n byte array is that if necessary the actual Memory and Address can\n be retrieved in case all of the necessary bytes are not local.\n\n This interface does not provide methods to reposition the memory\n buffer.  This is so that it is clear that methods accepting this\n base class are not to mess which the base Address for this object.\n\n Memory-backed access is an optional implementation dependent\n capability.  In addition, the use of the relative offset is\n implementation dependent, but in general those implementations\n which are backed by memory may choose to wrap the offset\n when computing the corresponding memory address.  The treatment\n of the offset argument should be consistent across the various\n methods for a given implementation.","fields":[]}
