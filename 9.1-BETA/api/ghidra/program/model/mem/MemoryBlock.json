{"implements":["java.io.Serializable","java.lang.Comparable"],"javadoc":"Interface that defines a block in memory.","static":false,"methods":[{"javadoc":"Returns block permissions as a bit mask.\n Permission bits defined as READ, WRITE, EXECUTE and VOLATILE","static":false,"name":"getPermissions","comment":"Returns block permissions as a bit mask.\n Permission bits defined as READ, WRITE, EXECUTE and VOLATILE","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get memory data in the form of an InputStream. \n Null is returned for thos memory blocks which have no data.","static":false,"name":"getData","comment":"Get memory data in the form of an InputStream. \n Null is returned for thos memory blocks which have no data.","params":[],"throws":[],"return":{"type_long":"java.io.InputStream","comment":"","type_short":"InputStream"}},{"javadoc":"Return whether addr is contained in this block.\n@param addr address","static":false,"name":"contains","comment":"Return whether addr is contained in this block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return the starting address for this block.\n@return block's start address","static":false,"name":"getStart","comment":"Return the starting address for this block.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"block's start address","type_short":"Address"}},{"javadoc":"Return the end address of this block.\n@return end address of the block","static":false,"name":"getEnd","comment":"Return the end address of this block.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"end address of the block","type_short":"Address"}},{"javadoc":"Get the number of bytes in this block.\n@return number of bytes in the block","static":false,"name":"getSize","comment":"Get the number of bytes in this block.","params":[],"throws":[],"return":{"type_long":"long","comment":"number of bytes in the block","type_short":"long"}},{"javadoc":"Get the name of this block","static":false,"name":"getName","comment":"Get the name of this block","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Set the name for this block.\n@param name the new name for this block.\n@throws DuplicateNameException\n@throws LockException renaming an Overlay block without exclusive access","static":false,"name":"setName","comment":"Set the name for this block.","params":[{"type_long":"java.lang.String","name":"name","comment":"the new name for this block.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.framework.store.LockException","comment":"renaming an Overlay block without exclusive access","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the comment associated with this block.","static":false,"name":"getComment","comment":"Get the comment associated with this block.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Set the comment associated with this block.\n@param comment the comment to associate with this block.","static":false,"name":"setComment","comment":"Set the comment associated with this block.","params":[{"type_long":"java.lang.String","name":"comment","comment":"the comment to associate with this block.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value of the read property associated with this block","static":false,"name":"isRead","comment":"Returns the value of the read property associated with this block","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the read property associated with this block.\n@param r the value to set the read property to.","static":false,"name":"setRead","comment":"Sets the read property associated with this block.","params":[{"type_long":"boolean","name":"r","comment":"the value to set the read property to.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value of the write property associated with this block","static":false,"name":"isWrite","comment":"Returns the value of the write property associated with this block","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the write property associated with this block.\n@param w the value to set the write property to.","static":false,"name":"setWrite","comment":"Sets the write property associated with this block.","params":[{"type_long":"boolean","name":"w","comment":"the value to set the write property to.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value of the execute property associated with this block","static":false,"name":"isExecute","comment":"Returns the value of the execute property associated with this block","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the execute property associated with this block.\n@param e the value to set the execute property to.","static":false,"name":"setExecute","comment":"Sets the execute property associated with this block.","params":[{"type_long":"boolean","name":"e","comment":"the value to set the execute property to.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the read, write, execute permissions on this block\n@param read the read permission\n@param write the write permission\n@param execute the execute permission","static":false,"name":"setPermissions","comment":"Sets the read, write, execute permissions on this block","params":[{"type_long":"boolean","name":"read","comment":"the read permission","type_short":"boolean"},{"type_long":"boolean","name":"write","comment":"the write permission","type_short":"boolean"},{"type_long":"boolean","name":"execute","comment":"the execute permission","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value of the volatile property associated with this block.\n This attribute is generally associated with block of I\/O regions of memory.","static":false,"name":"isVolatile","comment":"Returns the value of the volatile property associated with this block.\n This attribute is generally associated with block of I\/O regions of memory.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the volatile property associated with this block.\n@param v the value to set the volatile property to.","static":false,"name":"setVolatile","comment":"Sets the volatile property associated with this block.","params":[{"type_long":"boolean","name":"v","comment":"the value to set the volatile property to.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the name of the source of this memory block.\n@return source name","static":false,"name":"getSourceName","comment":"Get the name of the source of this memory block.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"source name","type_short":"String"}},{"javadoc":"Sets the name of the source file that provided the data.\n@param sourceName the name of the source file.","static":false,"name":"setSourceName","comment":"Sets the name of the source file that provided the data.","params":[{"type_long":"java.lang.String","name":"sourceName","comment":"the name of the source file.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the byte at the given address in this block.\n@param addr the address.\n@throws MemoryAccessException if any of the requested bytes are\n uninitialized.\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"getByte","comment":"Returns the byte at the given address in this block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address.","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if any of the requested bytes are\n uninitialized.","type_short":"MemoryAccessException"}],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"Tries to get b.length bytes from this block at the given address.  May \n return fewer bytes if the requested length is beyond the end of the block.\n@param addr the address from which to get the bytes.\n@param b the byte array to populate.\n@return the number of bytes actually populated.\n@throws MemoryAccessException if any of the requested bytes are\n uninitialized.\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"getBytes","comment":"Tries to get b.length bytes from this block at the given address.  May \n return fewer bytes if the requested length is beyond the end of the block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address from which to get the bytes.","type_short":"Address"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if any of the requested bytes are\n uninitialized.","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Tries to get len bytes from this block at the given address and put them \n into the given byte array at the specified offet.  May return\n fewer bytes if the requested length is beyond the end of the block.\n@param addr the address from which to get the bytes.\n@param b the byte array to populate.\n@param off the offset into the byte array.\n@param len the number of bytes to get.\n@return the number of bytes actually populated.\n@throws MemoryAccessException if any of the requested bytes are\n uninitialized.\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"getBytes","comment":"Tries to get len bytes from this block at the given address and put them \n into the given byte array at the specified offet.  May return\n fewer bytes if the requested length is beyond the end of the block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address from which to get the bytes.","type_short":"Address"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to get.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if any of the requested bytes are\n uninitialized.","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Puts the given byte at the given address in this block.\n@param addr the address.\n@throws MemoryAccessException if the block is uninitialized\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"putByte","comment":"Puts the given byte at the given address in this block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address.","type_short":"Address"},{"type_long":"byte","name":"b","comment":"","type_short":"byte"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the block is uninitialized","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tries to put b.length bytes from the specified byte array to this block. \n All the bytes may not be put if the requested length is beyond the end of\n the block.\n@param addr the address of where to put the bytes.\n@param b the byte array containing the bytes to write.\n@return the number of bytes actually written.\n@throws MemoryAccessException if the block is uninitialized\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"putBytes","comment":"Tries to put b.length bytes from the specified byte array to this block. \n All the bytes may not be put if the requested length is beyond the end of\n the block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address of where to put the bytes.","type_short":"Address"},{"type_long":"byte[]","name":"b","comment":"the byte array containing the bytes to write.","type_short":"byte[]"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the block is uninitialized","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes actually written.","type_short":"int"}},{"javadoc":"Tries to put len bytes from the specified byte array to this block.  All \n the bytes may not be written if the requested length is beyond the end of\n the block.\n@param addr the address of where to put the bytes.\n@param b the byte array containing the bytes to write.\n@param off the offset into the byte array.\n@param len the number of bytes to write.\n@return the number of bytes actually written.\n@throws MemoryAccessException if the block is uninitialized\n@throws IllegalArgumentException if the Address is not in this block.","static":false,"name":"putBytes","comment":"Tries to put len bytes from the specified byte array to this block.  All \n the bytes may not be written if the requested length is beyond the end of\n the block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address of where to put the bytes.","type_short":"Address"},{"type_long":"byte[]","name":"b","comment":"the byte array containing the bytes to write.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to write.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the block is uninitialized","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the number of bytes actually written.","type_short":"int"}},{"javadoc":"Get the type for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED","static":false,"name":"getType","comment":"Get the type for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlockType","comment":"","type_short":"MemoryBlockType"}},{"javadoc":"Return whether this block has been initialized.","static":false,"name":"isInitialized","comment":"Return whether this block has been initialized.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this is either a bit-mapped or byte-mapped block","static":false,"name":"isMapped","comment":"Returns true if this is either a bit-mapped or byte-mapped block","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this memory block is a real loaded block (i.e. RAM) and not a special block\n containing file header data such as debug sections.\n@return true if this is a loaded block and not a \"special\" block such as a file header.","static":false,"name":"isLoaded","comment":"Returns true if this memory block is a real loaded block (i.e. RAM) and not a special block\n containing file header data such as debug sections.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a loaded block and not a \"special\" block such as a file header.","type_short":"boolean"}},{"javadoc":"Returns a list of {@link MemoryBlockSourceInfo} objects for this block.  A block may consist of \n multiple sequences of bytes from different sources.  Each such source of bytes is described\n by its respective SourceInfo object.  Blocks may have multiple sources after two or more\n memory blocks have been joined together and the underlying byte sources can't be joined.\n@return a list of SourceInfo objects, one for each different source of bytes in this block.","static":false,"name":"getSourceInfos","comment":"Returns a list of MemoryBlockSourceInfo objects for this block.  A block may consist of \n multiple sequences of bytes from different sources.  Each such source of bytes is described\n by its respective SourceInfo object.  Blocks may have multiple sources after two or more\n memory blocks have been joined together and the underlying byte sources can't be joined.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.mem.MemoryBlockSourceInfo>","comment":"a list of SourceInfo objects, one for each different source of bytes in this block.","type_short":"List"}},{"javadoc":"Determine if the specified address is contained within the reserved EXTERNAL block.\n@param address address of interest\n@param program\n@return true if address is contained within the reserved EXTERNAL block, else false.","static":true,"name":"isExternalBlockAddress","comment":"Determine if the specified address is contained within the reserved EXTERNAL block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"address of interest","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"boolean","comment":"true if address is contained within the reserved EXTERNAL block, else false.","type_short":"boolean"}}],"name":"MemoryBlock","comment":"Interface that defines a block in memory.","fields":[{"type_long":"java.lang.String","javadoc":"A special EXTERNAL block may be created by certain program loaders (e.g., Elf) to\n act as a stand-in for unknown external symbol locations.","static":true,"name":"EXTERNAL_BLOCK_NAME","comment":"A special EXTERNAL block may be created by certain program loaders (e.g., Elf) to\n act as a stand-in for unknown external symbol locations.","type_short":"String","constant_value":"\"EXTERNAL\""},{"type_long":"int","javadoc":"","static":true,"name":"VOLATILE","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"READ","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"WRITE","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"EXECUTE","comment":"","type_short":"int","constant_value":"1"}]}
