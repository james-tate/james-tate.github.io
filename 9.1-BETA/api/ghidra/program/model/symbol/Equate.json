{"implements":[],"javadoc":"An Equate associates a string with a scalar value in the program, \n and contains a list of addresses and operand positions that refer \n to this equate.","static":false,"methods":[{"javadoc":"Get the actual name of this equate.  Note that this name may be different than the\n \"display name,\" which is what the user will see.\n@return The actual name of this equate.","static":false,"name":"getName","comment":"Get the actual name of this equate.  Note that this name may be different than the\n \"display name,\" which is what the user will see.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"The actual name of this equate.","type_short":"String"}},{"javadoc":"Gets the \"display name\" of this equate.  Note that the display name may be different\n than the equate's actual name if the equate is based off a data type id.\n@return The \"display name\" of this equate.","static":false,"name":"getDisplayName","comment":"Gets the \"display name\" of this equate.  Note that the display name may be different\n than the equate's actual name if the equate is based off a data type id.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"The \"display name\" of this equate.","type_short":"String"}},{"javadoc":"Get the value of this equate.","static":false,"name":"getValue","comment":"Get the value of this equate.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Gets a more accurate representation of the equate value. Used for rendering as close to the\n listing as possible.\n@return A more accurate representation of the equate value.","static":false,"name":"getDisplayValue","comment":"Gets a more accurate representation of the equate value. Used for rendering as close to the\n listing as possible.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"A more accurate representation of the equate value.","type_short":"String"}},{"javadoc":"Get the number of references to this equate.","static":false,"name":"getReferenceCount","comment":"Get the number of references to this equate.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Add a reference (at the given operand position) to this equate.  If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.\n@param refAddr the address where the equate is used.\n@param opndPosition the operand index where the equate is used.","static":false,"name":"addReference","comment":"Add a reference (at the given operand position) to this equate.  If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.","params":[{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the address where the equate is used.","type_short":"Address"},{"type_long":"int","name":"opndPosition","comment":"the operand index where the equate is used.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a reference (at the given dynamic hash position) to this equate. If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.\n@param dynamicHash constant varnode dynamic hash value\n@param refAddr the address where the equate is used.","static":false,"name":"addReference","comment":"Add a reference (at the given dynamic hash position) to this equate. If a reference already\n exists for the instruction at this address, then the old reference will be removed\n before the new reference is added.","params":[{"type_long":"long","name":"dynamicHash","comment":"constant varnode dynamic hash value","type_short":"long"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the address where the equate is used.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Changes the name associated with the equate.\n@param newName the new name for this equate.\n@exception DuplicateNameException thrown if newName is already\n   used by another equate.\n@throws InvalidInputException if newName contains blank characters,\n is zero length, or is null","static":false,"name":"renameEquate","comment":"Changes the name associated with the equate.","params":[{"type_long":"java.lang.String","name":"newName","comment":"the new name for this equate.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if newName contains blank characters,\n is zero length, or is null","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the references for this equate.\n@return a array of EquateReferences.","static":false,"name":"getReferences","comment":"Get the references for this equate.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.EquateReference[]","comment":"a array of EquateReferences.","type_short":"ghidra.program.model.symbol.EquateReference[]"}},{"javadoc":"Remove the reference at the given operand position.\n@param refAddr the address that was using this equate\n@param opndPosition the operand index of the operand that was using this eqate.","static":false,"name":"removeReference","comment":"Remove the reference at the given operand position.","params":[{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the address that was using this equate","type_short":"Address"},{"type_long":"int","name":"opndPosition","comment":"the operand index of the operand that was using this eqate.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the reference at the given operand position.\n@param refAddr the address that was using this equate\n@param opndPosition the operand index of the operand that was using this eqate.","static":false,"name":"removeReference","comment":"Remove the reference at the given operand position.","params":[{"type_long":"long","name":"dynamicHash","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"the address that was using this equate","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks if equate is based off an enum's universal id and checks if the enum still exists.\n The equate is still valid if the equate is not based off an enum.\n@return true if the equate is based off an enum that still exists.","static":false,"name":"isValidUUID","comment":"Checks if equate is based off an enum's universal id and checks if the enum still exists.\n The equate is still valid if the equate is not based off an enum.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the equate is based off an enum that still exists.","type_short":"boolean"}},{"javadoc":"Checks if equate is based off an enum's universal id.\n@return ","static":false,"name":"isEnumBased","comment":"Checks if equate is based off an enum's universal id.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the universal id from this equate if the equate was based off of an enum.\n@return The universal id for this equate.","static":false,"name":"getEnumUUID","comment":"Gets the universal id from this equate if the equate was based off of an enum.","params":[],"throws":[],"return":{"type_long":"ghidra.util.UniversalID","comment":"The universal id for this equate.","type_short":"UniversalID"}},{"javadoc":"Get the name of this equate.\n@see #getName()","static":false,"name":"toString","comment":"Get the name of this equate.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"Equate","comment":"An Equate associates a string with a scalar value in the program, \n and contains a list of addresses and operand positions that refer \n to this equate.","fields":[]}
