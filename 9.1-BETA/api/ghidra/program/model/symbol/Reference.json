{"implements":["java.lang.Comparable"],"javadoc":"Base class to hold information about a referring address. Derived classes add\n what the address is referring to. A basic reference consists of a \"from\"\n address, the reference type, the operand index for where the reference is,\n and whether the reference is user defined.","static":false,"methods":[{"javadoc":"Get the address of the codeunit that is making the reference.","static":false,"name":"getFromAddress","comment":"Get the address of the codeunit that is making the reference.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the \"to\" address for this reference.","static":false,"name":"getToAddress","comment":"Get the \"to\" address for this reference.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Return whether this reference is marked as primary.","static":false,"name":"isPrimary","comment":"Return whether this reference is marked as primary.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the symbol ID associated with this reference.\n@return symbol ID or -1 if no symbol is associated with this reference","static":false,"name":"getSymbolID","comment":"Get the symbol ID associated with this reference.","params":[],"throws":[],"return":{"type_long":"long","comment":"symbol ID or -1 if no symbol is associated with this reference","type_short":"long"}},{"javadoc":"Get the type of reference being made.","static":false,"name":"getReferenceType","comment":"Get the type of reference being made.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.RefType","comment":"","type_short":"RefType"}},{"javadoc":"Get the operand index of where this reference was placed.\n@return op index or ReferenceManager.MNEMONIC","static":false,"name":"getOperandIndex","comment":"Get the operand index of where this reference was placed.","params":[],"throws":[],"return":{"type_long":"int","comment":"op index or ReferenceManager.MNEMONIC","type_short":"int"}},{"javadoc":"Return true if this reference is on the Mnemonic and not on an operand","static":false,"name":"isMnemonicReference","comment":"Return true if this reference is on the Mnemonic and not on an operand","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return true if this reference is on an operand and not on the Mnemonic.","static":false,"name":"isOperandReference","comment":"Return true if this reference is on an operand and not on the Mnemonic.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference is an instance of StackReference and\n refers to a stack location.","static":false,"name":"isStackReference","comment":"Returns true if this reference is an instance of StackReference and\n refers to a stack location.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference is an instance of ExternalReference.","static":false,"name":"isExternalReference","comment":"Returns true if this reference is an instance of ExternalReference.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference is an instance of EntryReference.","static":false,"name":"isEntryPointReference","comment":"Returns true if this reference is an instance of EntryReference.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference to an address in the programs memory\n space. This includes offset and shifted references.","static":false,"name":"isMemoryReference","comment":"Returns true if this reference to an address in the programs memory\n space. This includes offset and shifted references.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference to an address in the programs register\n space.","static":false,"name":"isRegisterReference","comment":"Returns true if this reference to an address in the programs register\n space.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference is an instance of OffsetReference.","static":false,"name":"isOffsetReference","comment":"Returns true if this reference is an instance of OffsetReference.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this reference is an instance of ShiftedReference.","static":false,"name":"isShiftedReference","comment":"Returns true if this reference is an instance of ShiftedReference.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the source of this reference. {@link SourceTypes}\n@return the source of this reference","static":false,"name":"getSource","comment":"Gets the source of this reference. SourceTypes","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SourceType","comment":"the source of this reference","type_short":"SourceType"}}],"name":"Reference","comment":"Base class to hold information about a referring address. Derived classes add\n what the address is referring to. A basic reference consists of a \"from\"\n address, the reference type, the operand index for where the reference is,\n and whether the reference is user defined.","fields":[{"type_long":"int","javadoc":"Operand index which corresponds to the instruction\/data mnemonic.","static":true,"name":"MNEMONIC","comment":"Operand index which corresponds to the instruction\/data mnemonic.","type_short":"int","constant_value":"-1"},{"type_long":"int","javadoc":"Special purpose operand index when not applicable (i.e., Thunk reference)","static":true,"name":"OTHER","comment":"Special purpose operand index when not applicable (i.e., Thunk reference)","type_short":"int","constant_value":"-2"}]}
