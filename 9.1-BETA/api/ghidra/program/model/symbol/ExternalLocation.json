{"implements":[],"javadoc":"<code>ExternalLocation<\/code> defines a location within an external\n program (i.e., library).  The external program is uniquely identified\n by a program name, and the location within the program is identified by\n label, address or both.","static":false,"methods":[{"javadoc":"Returns the symbol associated with this external location or null.\n@return the symbol associated with this external location or null.","static":false,"name":"getSymbol","comment":"Returns the symbol associated with this external location or null.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"the symbol associated with this external location or null.","type_short":"Symbol"}},{"javadoc":"Returns the name of the external program containing this location.\n@return the name of the external program containing this location.","static":false,"name":"getLibraryName","comment":"Returns the name of the external program containing this location.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the external program containing this location.","type_short":"String"}},{"javadoc":"Returns the parent namespace containing this location.\n@return the parent namespace containing this location.","static":false,"name":"getParentNameSpace","comment":"Returns the parent namespace containing this location.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"the parent namespace containing this location.","type_short":"Namespace"}},{"javadoc":"Returns the name of the parent namespace containing this location.\n@return the name of the parent namespace containing this location.","static":false,"name":"getParentName","comment":"Returns the name of the parent namespace containing this location.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the parent namespace containing this location.","type_short":"String"}},{"javadoc":"Returns the external label associated with this location.\n@return the external label associated with this location.","static":false,"name":"getLabel","comment":"Returns the external label associated with this location.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the external label associated with this location.","type_short":"String"}},{"javadoc":"Returns the original name for this location. Will be null if the name was never\n changed.\n@return the original name for this location. Will be null if the name was never\n changed.","static":false,"name":"getOriginalImportedName","comment":"Returns the original name for this location. Will be null if the name was never\n changed.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the original name for this location. Will be null if the name was never\n changed.","type_short":"String"}},{"javadoc":"Returns the source of this location.\n@return the source","static":false,"name":"getSource","comment":"Returns the source of this location.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SourceType","comment":"the source","type_short":"SourceType"}},{"javadoc":"Returns the external address if known, or null\n@return the external address if known, or null","static":false,"name":"getAddress","comment":"Returns the external address if known, or null","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the external address if known, or null","type_short":"Address"}},{"javadoc":"Sets the address in the external program associated with this location.\n The address may not be null if location has a default label.\n@param address the address to set.\n@throws InvalidInputException if address is null and location currently has a default name","static":false,"name":"setAddress","comment":"Sets the address in the external program associated with this location.\n The address may not be null if location has a default label.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to set.","type_short":"Address"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if address is null and location currently has a default name","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the external label which defines this location.\n@param label external label, may be null if addr is not null.  Label may also be\n namespace qualified and best effort will be used to parse namespace (see {@link SymbolPath}).\n If a namespace is not included within label, the current namespace will be preserved.\n Note that this method does not properly handle the presence of template information within the\n label.\n@param addr external address, may be null\n@param source the source of the external label name\n@throws DuplicateNameException if another location with this label has\n already been defined\n@throws InvalidInputException","static":false,"name":"setLocation","comment":"Set the external label which defines this location.","params":[{"type_long":"java.lang.String","name":"label","comment":"external label, may be null if addr is not null.  Label may also be\n namespace qualified and best effort will be used to parse namespace (see SymbolPath).\n If a namespace is not included within label, the current namespace will be preserved.\n Note that this method does not properly handle the presence of template information within the\n label.","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"external address, may be null","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of the external label name","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another location with this label has\n already been defined","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if location corresponds to a function","static":false,"name":"isFunction","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if location corresponds to a function","type_short":"boolean"}},{"javadoc":"Returns the DataType which has been associated with this location.","static":false,"name":"getDataType","comment":"Returns the DataType which has been associated with this location.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Associate the specified data type with this location.\n@param dt data type","static":false,"name":"setDataType","comment":"Associate the specified data type with this location.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"data type","type_short":"DataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the external function associated with this location or null if this is a data\n location.\n@return external function associated with this location or null\n if this is a data location.","static":false,"name":"getFunction","comment":"Returns the external function associated with this location or null if this is a data\n location.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"external function associated with this location or null\n if this is a data location.","type_short":"Function"}},{"javadoc":"Create an external function associated with this location or return\n the existing function if one already exists\n@return external function","static":false,"name":"createFunction","comment":"Create an external function associated with this location or return\n the existing function if one already exists","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"external function","type_short":"Function"}},{"javadoc":"Returns the address in \"External\" (fake) space where this location is stored.\n@return the address that represents this location in \"External\" space.","static":false,"name":"getExternalSpaceAddress","comment":"Returns the address in \"External\" (fake) space where this location is stored.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the address that represents this location in \"External\" space.","type_short":"Address"}},{"javadoc":"Set a new name for this external location. The new\n name will become the primary symbol for this location. The current name\n for this location will be saved as the original symbol for this location.\n@param namespace the namespace for the original symbol.  Can be different than original symbol\n@param name the user-friendly name.\n@param sourceType the SourceType for the new name.\n@throws InvalidInputException if the name contains illegal characters (space for example)","static":false,"name":"setName","comment":"Set a new name for this external location. The new\n name will become the primary symbol for this location. The current name\n for this location will be saved as the original symbol for this location.","params":[{"type_long":"ghidra.program.model.symbol.Namespace","name":"namespace","comment":"the namespace for the original symbol.  Can be different than original symbol","type_short":"Namespace"},{"type_long":"java.lang.String","name":"name","comment":"the user-friendly name.","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"the SourceType for the new name.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the name contains illegal characters (space for example)","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If this external location has a replacement name, then the primary symbol will be deleted and\n the original symbol will become the primary symbol, effectively restoring the location to\n it's original name.","static":false,"name":"restoreOriginalName","comment":"If this external location has a replacement name, then the primary symbol will be deleted and\n the original symbol will become the primary symbol, effectively restoring the location to\n it's original name.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given external location has the same name, namespace, original import name,\n and external address.\n@param other the other ExternalLocation to compare\n@return true if the other location is equivalent to this one.","static":false,"name":"isEquivalent","comment":"Returns true if the given external location has the same name, namespace, original import name,\n and external address.","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"other","comment":"the other ExternalLocation to compare","type_short":"ExternalLocation"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the other location is equivalent to this one.","type_short":"boolean"}}],"name":"ExternalLocation","comment":"ExternalLocation defines a location within an external\n program (i.e., library).  The external program is uniquely identified\n by a program name, and the location within the program is identified by\n label, address or both.","fields":[]}
