{"implements":[],"javadoc":"Interface for a symbol, which associates a string value with\n an address.","static":false,"methods":[{"javadoc":"@returns the address for the symbol.","static":false,"name":"getAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"@returns the name of this symbol.","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Check whether this symbol is still valid (i.e., deleted).\n@return true if valid or false if deleted.","static":false,"name":"checkIsValid","comment":"Check whether this symbol is still valid (i.e., deleted).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if valid or false if deleted.","type_short":"boolean"}},{"javadoc":"Gets the full path name for this symbol as an ordered array of strings ending\n with the symbol name. The global symbol will return an empty array.\n@returns the array indicating the full path name for this symbol.","static":false,"name":"getPath","comment":"Gets the full path name for this symbol as an ordered array of strings ending\n with the symbol name. The global symbol will return an empty array.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"@returns the program associated with this symbol.\n Null may be returned for global symbols.","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns the symbol name, optionally prepended with the namespace path.\n@param includeNamespace if true, the namespace path is prepended to the name.\n@returns formatted name","static":false,"name":"getName","comment":"Returns the symbol name, optionally prepended with the namespace path.","params":[{"type_long":"boolean","name":"includeNamespace","comment":"if true, the namespace path is prepended to the name.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@returns the namespace that contains this symbol","static":false,"name":"getParentNamespace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Namespace","comment":"","type_short":"Namespace"}},{"javadoc":"Returns namespace symbol of the namespace containing this symbol","static":false,"name":"getParentSymbol","comment":"Returns namespace symbol of the namespace containing this symbol","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"","type_short":"Symbol"}},{"javadoc":"Returns true if the given namespace symbol is a descendant of this symbol.\n@param namespace to test as descendant symbol of this Symbol\n@return true if this symbol is an ancestor of the given namespace symbol","static":false,"name":"isDescendant","comment":"Returns true if the given namespace symbol is a descendant of this symbol.","params":[{"type_long":"ghidra.program.model.symbol.Namespace","name":"namespace","comment":"to test as descendant symbol of this Symbol","type_short":"Namespace"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this symbol is an ancestor of the given namespace symbol","type_short":"boolean"}},{"javadoc":"Returns whether the given parent is valid for this Symbol.\n@param parent\n@returns true if parent is valid","static":false,"name":"isValidParent","comment":"Returns whether the given parent is valid for this Symbol.","params":[{"type_long":"ghidra.program.model.symbol.Namespace","name":"parent","comment":"","type_short":"Namespace"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the symbol type","static":false,"name":"getSymbolType","comment":"Returns the symbol type","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SymbolType","comment":"","type_short":"SymbolType"}},{"javadoc":"@returns the number of References to this symbol.","static":false,"name":"getReferenceCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@returns true if this symbol has more than one reference to it.","static":false,"name":"hasMultipleReferences","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@returns true if this symbol has at least one reference to it.","static":false,"name":"hasReferences","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns all memory references to the address of this symbol.  If you do not have a\n {@link TaskMonitor} instance, then you can pass {@link TaskMonitorAdapter#DUMMY_MONITOR} or\n <tt>null<\/tt>.\n@returns all memory references to the address of this symbol.\n@param monitor the monitor that is used to report progress and to cancel this\n        potentially long-running call","static":false,"name":"getReferences","comment":"Returns all memory references to the address of this symbol.  If you do not have a\n TaskMonitor instance, then you can pass TaskMonitorAdapter#DUMMY_MONITOR or\n null.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor that is used to report progress and to cancel this\n        potentially long-running call","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Returns all memory references to the address of this symbol.\n@returns all memory references to the address of this symbol\n@see #getReferences(TaskMonitor)","static":false,"name":"getReferences","comment":"Returns all memory references to the address of this symbol.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"@returns a program location corresponding to this symbol","static":false,"name":"getProgramLocation","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramLocation","comment":"","type_short":"ProgramLocation"}},{"javadoc":"Sets the name this symbol.\n If this symbol is dynamic, then the name is set\n and the symbol is no longer dynamic.\n@param newName the new name for this symbol.\n@param source the source of this symbol\n <br>Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT.\n@throws DuplicateNameException if name already exists as the name of another symbol or alias.\n@throws InvalidInputException if alias contains blank characters, is zero length, or is null\n@throws IllegalArgumentException if you try to set the source to DEFAULT for a symbol type\n that doesn't allow it.","static":false,"name":"setName","comment":"Sets the name this symbol.\n If this symbol is dynamic, then the name is set\n and the symbol is no longer dynamic.","params":[{"type_long":"java.lang.String","name":"newName","comment":"the new name for this symbol.","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this symbol\n Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if name already exists as the name of another symbol or alias.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if alias contains blank characters, is zero length, or is null","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the symbols namespace\n@param newNamespace new parent namespace\n@throws DuplicateNameException if newNamespace already contains a symbol\n with this symbol's name\n@throws InvalidInputException is newNamespace is not a valid parent for\n this symbol\n@throws CircularDependencyException if this symbol is an ancestor of\n newNamespace","static":false,"name":"setNamespace","comment":"Sets the symbols namespace","params":[{"type_long":"ghidra.program.model.symbol.Namespace","name":"newNamespace","comment":"new parent namespace","type_short":"Namespace"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if newNamespace already contains a symbol\n with this symbol's name","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"is newNamespace is not a valid parent for\n this symbol","type_short":"InvalidInputException"},{"type_long":"ghidra.program.model.listing.CircularDependencyException","comment":"if this symbol is an ancestor of\n newNamespace","type_short":"CircularDependencyException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the symbols name and namespace.  This is provided to allow the caller to\n avoid a name conflict by creating an autonomous action.\n@param newName new symbol name\n@param newNamespace new parent namespace\n@param source the source of this symbol\n <br>Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT.\n@throws DuplicateNameException if newNamespace already contains a symbol\n with this symbol's name\n@throws InvalidInputException is newNamespace is not a valid parent for\n this symbol\n@throws CircularDependencyException if this symbol is an ancestor of\n newNamespace","static":false,"name":"setNameAndNamespace","comment":"Sets the symbols name and namespace.  This is provided to allow the caller to\n avoid a name conflict by creating an autonomous action.","params":[{"type_long":"java.lang.String","name":"newName","comment":"new symbol name","type_short":"String"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"newNamespace","comment":"new parent namespace","type_short":"Namespace"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this symbol\n Some symbol types, such as function symbols, can set the source to Symbol.DEFAULT.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if newNamespace already contains a symbol\n with this symbol's name","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"is newNamespace is not a valid parent for\n this symbol","type_short":"InvalidInputException"},{"type_long":"ghidra.program.model.listing.CircularDependencyException","comment":"if this symbol is an ancestor of\n newNamespace","type_short":"CircularDependencyException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete the symbol and its associated resources.\n@returns true if successful","static":false,"name":"delete","comment":"Delete the symbol and its associated resources.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the symbol is pinned to its current address. If it is pinned, then moving\n or removing the memory associated with that address will not affect this symbol.\n@returns true if the symbol is pinned to its current address.","static":false,"name":"isPinned","comment":"Returns true if the symbol is pinned to its current address. If it is pinned, then moving\n or removing the memory associated with that address will not affect this symbol.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"<p>Sets whether or not this symbol is pinned to its associated address.<\/p>\n\n <p>If the symbol is pinned then moving or removing the memory associated with its address will\n not cause this symbol to be removed and will not cause its address to change.\n If the symbol is not pinned, then removing the memory at its address will also remove this\n symbol.<\/p>\n\n <p>Likewise, moving a memory block containing a symbol that is not anchored will change\n the address for that symbol to keep it associated with the same byte in the memory block.<\/p>\n@param pinned true indicates this symbol is anchored to its address.\n \t\tfalse indicates this symbol is not anchored to its address.","static":false,"name":"setPinned","comment":"Sets whether or not this symbol is pinned to its associated address.\n\n If the symbol is pinned then moving or removing the memory associated with its address will\n not cause this symbol to be removed and will not cause its address to change.\n If the symbol is not pinned, then removing the memory at its address will also remove this\n symbol.\n\n Likewise, moving a memory block containing a symbol that is not anchored will change\n the address for that symbol to keep it associated with the same byte in the memory block.","params":[{"type_long":"boolean","name":"pinned","comment":"true indicates this symbol is anchored to its address.\n \t\tfalse indicates this symbol is not anchored to its address.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@returns true if this symbol is a dynamic symbol (not actually defined in the database).","static":false,"name":"isDynamic","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this an external symbol.\n@return true if this an external symbol.\n@see Address#isExternalAddress()","static":false,"name":"isExternal","comment":"Returns true if this an external symbol.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this an external symbol.","type_short":"boolean"}},{"javadoc":"@returns true if this symbol is primary","static":false,"name":"isPrimary","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets this symbol to be primary. All other symbols at the same address will be set to \n !primary.  Only applies to non-function symbols.\n@return returns true if the symbol was not primary and now it is, otherwise false","static":false,"name":"setPrimary","comment":"Sets this symbol to be primary. All other symbols at the same address will be set to \n !primary.  Only applies to non-function symbols.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"returns true if the symbol was not primary and now it is, otherwise false","type_short":"boolean"}},{"javadoc":"@returns true if the symbol is at an address\n set as a external entry point.","static":false,"name":"isExternalEntryPoint","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@returns this symbol's ID.","static":false,"name":"getID","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@returns object associated with this symbol or null if symbol has been deleted","static":false,"name":"getObject","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"@returns true if the symbol is global","static":false,"name":"isGlobal","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the source of this symbol.\n {@link SourceTypes}\n@param source the new source of this symbol","static":false,"name":"setSource","comment":"Sets the source of this symbol.\n SourceTypes","params":[{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the new source of this symbol","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the source of this symbol.\n {@link SourceTypes}\n@return the source of this symbol","static":false,"name":"getSource","comment":"Gets the source of this symbol.\n SourceTypes","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SourceType","comment":"the source of this symbol","type_short":"SourceType"}}],"name":"Symbol","comment":"Interface for a symbol, which associates a string value with\n an address.","fields":[]}
