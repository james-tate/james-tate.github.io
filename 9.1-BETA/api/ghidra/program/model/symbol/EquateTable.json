{"implements":[],"javadoc":"EquateTable manages all equates for program. An equate defines a relationship\n   between a scalar value and a string whereby the scalar may be represented by\n   the string. All equates are defined by the user and remain until explicitly\n   removed by the user.","static":false,"methods":[{"javadoc":"Creates equates and\/or adds references for scalars\n in the given address set using the given data type.\n The data type given must be an enumeration data type.\n@param addrSet the address set to use.\n@param dataType the data type to use.\n@param monitor task monitor to cancel the remove operation\n@param shouldDoOnSubOps true if the enum should be applied inside sub-operands as well.\n@throws CancelledException if the operation is cancelled\n@throws IllegalArgumentException if the dataType is null or not an enum.","static":false,"name":"applyEnum","comment":"Creates equates and\/or adds references for scalars\n in the given address set using the given data type.\n The data type given must be an enumeration data type.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"the address set to use.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.data.Enum","name":"dataType","comment":"the data type to use.","type_short":"Enum"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor to cancel the remove operation","type_short":"TaskMonitor"},{"type_long":"boolean","name":"shouldDoOnSubOps","comment":"true if the enum should be applied inside sub-operands as well.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation is cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new equate\n@param name the name to associate with the given value.\n@param value the value to associate with the given name.\n@exception DuplicateNameException thrown if name is already in use\n   as an equate.\n@throws InvalidInputException if name contains blank characters,\n is zero length, or is null","static":false,"name":"createEquate","comment":"Creates a new equate","params":[{"type_long":"java.lang.String","name":"name","comment":"the name to associate with the given value.","type_short":"String"},{"type_long":"long","name":"value","comment":"the value to associate with the given name.","type_short":"long"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if name contains blank characters,\n is zero length, or is null","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.symbol.Equate","comment":"","type_short":"Equate"}},{"javadoc":"Removes the equate from the program.\n@param name the name of the equate to remove.\n@return true if the equate existed, false otherwise.","static":false,"name":"removeEquate","comment":"Removes the equate from the program.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the equate to remove.","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the equate existed, false otherwise.","type_short":"boolean"}},{"javadoc":"Removes all equates defined in the given range.\n@param start start of the range\n@param end end of the range\n@param monitor task monitor to cancel the remove operation\n@throws CancelledException if the operation was cancelled.","static":false,"name":"deleteAddressRange","comment":"Removes all equates defined in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start of the range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of the range","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor to cancel the remove operation","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation was cancelled.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the equate with the given name, null if no such equate\n   exists.\n@param name the of the equate to be retrieved.","static":false,"name":"getEquate","comment":"Returns the equate with the given name, null if no such equate\n   exists.","params":[{"type_long":"java.lang.String","name":"name","comment":"the of the equate to be retrieved.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Equate","comment":"","type_short":"Equate"}},{"javadoc":"Returns the first equate found that is associated with the given \n value at the given reference address and operand position;\n@param reference address where the equate is used.\n@param opndPosition the operand index of the operand where the equate is used.\n@param value the value where the equate is used.\n@return the equate or null if there is no such equate.","static":false,"name":"getEquate","comment":"Returns the first equate found that is associated with the given \n value at the given reference address and operand position;","params":[{"type_long":"ghidra.program.model.address.Address","name":"reference","comment":"address where the equate is used.","type_short":"Address"},{"type_long":"int","name":"opndPosition","comment":"the operand index of the operand where the equate is used.","type_short":"int"},{"type_long":"long","name":"value","comment":"the value where the equate is used.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Equate","comment":"the equate or null if there is no such equate.","type_short":"Equate"}},{"javadoc":"Returns the equates (one for each scalar) at the given reference address \n and operand position; For an instruction a given operand can have multiple scalars.\n@param reference address where the equate is used.\n@param opndPosition the operand index of the operand where the equate is used.\n@return the list of equates or empty list if there is no such equate.","static":false,"name":"getEquates","comment":"Returns the equates (one for each scalar) at the given reference address \n and operand position; For an instruction a given operand can have multiple scalars.","params":[{"type_long":"ghidra.program.model.address.Address","name":"reference","comment":"address where the equate is used.","type_short":"Address"},{"type_long":"int","name":"opndPosition","comment":"the operand index of the operand where the equate is used.","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.symbol.Equate>","comment":"the list of equates or empty list if there is no such equate.","type_short":"List"}},{"javadoc":"Returns the equates (one for each scalar and opIndex) at the given reference address.\n For an instruction a given operand can have multiple scalars.\n@param reference address where the equate is used.\n@return the list of equates or empty list if there is no such equate.","static":false,"name":"getEquates","comment":"Returns the equates (one for each scalar and opIndex) at the given reference address.\n For an instruction a given operand can have multiple scalars.","params":[{"type_long":"ghidra.program.model.address.Address","name":"reference","comment":"address where the equate is used.","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.symbol.Equate>","comment":"the list of equates or empty list if there is no such equate.","type_short":"List"}},{"javadoc":"Returns an address iterator over all the addresses where\n equates have been set.","static":false,"name":"getEquateAddresses","comment":"Returns an address iterator over all the addresses where\n equates have been set.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"","type_short":"AddressIterator"}},{"javadoc":"Returns all equates defined for value.\n@param value the value to get all equates for.","static":false,"name":"getEquates","comment":"Returns all equates defined for value.","params":[{"type_long":"long","name":"value","comment":"the value to get all equates for.","type_short":"long"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.symbol.Equate>","comment":"","type_short":"List"}},{"javadoc":"Returns an iterator over all equates.","static":false,"name":"getEquates","comment":"Returns an iterator over all equates.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.symbol.Equate>","comment":"","type_short":"Iterator"}},{"javadoc":"Return an address iterator over each address with an\n equate reference starting at the start address.\n@param start start address\n@return an AddressIterator over addresses with defined equate references","static":false,"name":"getEquateAddresses","comment":"Return an address iterator over each address with an\n equate reference starting at the start address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"an AddressIterator over addresses with defined equate references","type_short":"AddressIterator"}},{"javadoc":"Return an address iterator over each address with an\n equate reference that is in the specified address set.\n@param asv the address set\n@return AddressIterator over addresses with defined equate references","static":false,"name":"getEquateAddresses","comment":"Return an address iterator over each address with an\n equate reference that is in the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"asv","comment":"the address set","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressIterator","comment":"AddressIterator over addresses with defined equate references","type_short":"AddressIterator"}}],"name":"EquateTable","comment":"EquateTable manages all equates for program. An equate defines a relationship\n   between a scalar value and a string whereby the scalar may be represented by\n   the string. All equates are defined by the user and remain until explicitly\n   removed by the user.","fields":[]}
