{"implements":[],"javadoc":"Class to represent the various types of Symbols.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"boolean","name":"isNamespace","comment":"","type_short":"boolean"},{"type_long":"int","name":"value","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given namespace is a valid parent for a symbol of this type\n if it has the given address and whether or not it is external.\n@param program the program to contain the symbol\n@param parent the namespace where a symbol will potentially be parented.\n@param symbolAddr the address of they symbol to be parented.\n@param isExternalSymbol true if the symbol is external.\n@return true if the given namespace is a valid parent for a symbol if it has the\n given address and whether or not it is external.","static":false,"name":"isValidParent","comment":"Returns true if the given namespace is a valid parent for a symbol of this type\n if it has the given address and whether or not it is external.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to contain the symbol","type_short":"Program"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"parent","comment":"the namespace where a symbol will potentially be parented.","type_short":"Namespace"},{"type_long":"ghidra.program.model.address.Address","name":"symbolAddr","comment":"the address of they symbol to be parented.","type_short":"Address"},{"type_long":"boolean","name":"isExternalSymbol","comment":"true if the symbol is external.","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given namespace is a valid parent for a symbol if it has the\n given address and whether or not it is external.","type_short":"boolean"}},{"javadoc":"Returns true if the given address is valid for this symbol type.\n@param program the program to test for a valid address.\n@param symbolAddress the address of the symbol to be tested.\n@return true if the given address is valid within the given program.","static":false,"name":"isValidAddress","comment":"Returns true if the given address is valid for this symbol type.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to test for a valid address.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"symbolAddress","comment":"the address of the symbol to be tested.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given address is valid within the given program.","type_short":"boolean"}},{"javadoc":"Returns true if the given SourceType is valid for this symbol type. (For example, Some symbols\n don't support the SymbolType.DEFAULT)\n@param sourceType the sourceType to test.\n@param symbolAddress the address of the symbol to be tested.\n@return true if the given SourceType is valid for this symbol type.","static":false,"name":"isValidSourceType","comment":"Returns true if the given SourceType is valid for this symbol type. (For example, Some symbols\n don't support the SymbolType.DEFAULT)","params":[{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"the sourceType to test.","type_short":"SourceType"},{"type_long":"ghidra.program.model.address.Address","name":"symbolAddress","comment":"the address of the symbol to be tested.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given SourceType is valid for this symbol type.","type_short":"boolean"}},{"javadoc":"Returns true of this symbol type allows duplicate names.\n@return true of this symbol type allows duplicate names.","static":false,"name":"allowsDuplicates","comment":"Returns true of this symbol type allows duplicate names.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true of this symbol type allows duplicate names.","type_short":"boolean"}},{"javadoc":"Returns true if this symbol represents a namespace.","static":false,"name":"isNamespace","comment":"Returns true if this symbol represents a namespace.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the id of this symbol type.","static":false,"name":"getID","comment":"Returns the id of this symbol type.","params":[],"throws":[],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"Returns the SymbolType for the given id.\n@param id the id for the SymbolType to find.","static":true,"name":"getSymbolType","comment":"Returns the SymbolType for the given id.","params":[{"type_long":"int","name":"id","comment":"the id for the SymbolType to find.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SymbolType","comment":"","type_short":"SymbolType"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"SymbolType","comment":"Class to represent the various types of Symbols.","fields":[{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"LABEL","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"@deprecated use {@link #LABEL} instead.","static":true,"name":"CODE","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"LIBRARY","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"NAMESPACE","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"CLASS","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"FUNCTION","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"PARAMETER","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"LOCAL_VAR","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"GLOBAL_VAR","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType","javadoc":"","static":true,"name":"GLOBAL","comment":"","type_short":"SymbolType","constant_value":null},{"type_long":"ghidra.program.model.symbol.SymbolType[]","javadoc":"","static":true,"name":"types","comment":"","type_short":"ghidra.program.model.symbol.SymbolType[]","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"value","comment":"","type_short":"byte","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isNamespace","comment":"","type_short":"boolean","constant_value":null}]}
