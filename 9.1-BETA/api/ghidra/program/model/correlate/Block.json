{"implements":[],"javadoc":"This class holds basic-block information for matching algorithms. It is used as a node to traverse the\n control-flow graph. It serves as a container for hashing information associated with Instructions in the\n block.  It holds disambiguating hashes (calculated primarily from basic-block parent\/child relationships)\n to help separate identical or near identical sequences of Instructions within one function.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"codeBlock","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear out structures associated with main sort","static":false,"name":"clearSort","comment":"Clear out structures associated with main sort","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set up block match deconfliction value matchHash. This is fed into the n-gram hashes for Instructions\n contained by this block to uniquely associate the n-grams with this block (and the matching block on\n the other side)\n@param index is the 1-up index used to uniquely label this block","static":false,"name":"setMatched","comment":"Set up block match deconfliction value matchHash. This is fed into the n-gram hashes for Instructions\n contained by this block to uniquely associate the n-grams with this block (and the matching block on\n the other side)","params":[{"type_long":"int","name":"index","comment":"is the 1-up index used to uniquely label this block","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return the main deconfliction hash feed","static":false,"name":"getMatchHash","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the main deconfliction hash feed","type_short":"int"}},{"javadoc":"If the indicated n-gram, within this block, consists of unmatched instructions\n@param startindex is the index of the first Instruction in the n-gram\n@param length is the number of instructions in the n-gram\n@return true if all Instructions in the n-gram are not matched, false otherwise.","static":false,"name":"allUnknown","comment":"If the indicated n-gram, within this block, consists of unmatched instructions","params":[{"type_long":"int","name":"startindex","comment":"is the index of the first Instruction in the n-gram","type_short":"int"},{"type_long":"int","name":"length","comment":"is the number of instructions in the n-gram","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if all Instructions in the n-gram are not matched, false otherwise.","type_short":"boolean"}},{"javadoc":"Calculate an n-gram hash, given a particular hash function\n@param gramSize is the size of the n-gram\n@param instHash is the first Instruction in the n-gram\n@param hashCalc is the hash function\n@return the final 32-bit hash\n@throws MemoryAccessException","static":false,"name":"hashGram","comment":"Calculate an n-gram hash, given a particular hash function","params":[{"type_long":"int","name":"gramSize","comment":"is the size of the n-gram","type_short":"int"},{"type_long":"ghidra.program.model.correlate.InstructHash","name":"instHash","comment":"is the first Instruction in the n-gram","type_short":"InstructHash"},{"type_long":"ghidra.program.model.correlate.HashCalculator","name":"hashCalc","comment":"is the hash function","type_short":"HashCalculator"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"the final 32-bit hash","type_short":"int"}},{"javadoc":"Calculate n-gram hashes used for matching (for Instructions in this basic-block).  The exact hashes generated\n can be changed to get different looks at the data over multiple matching passes.\n@param minLength is the minimum length of an n-gram to calculate\n@param maxLength is the maximum length of an n-gram\n@param wholeBlock , true indicates a hash of the whole block should be calculated even if its size is below minLength\n@param matchOnly , true indicates hashes should only be calculated for previously matched, or small, blocks\n@param hashCalc is the hash function for this matching pass\n@throws MemoryAccessException","static":false,"name":"calcHashes","comment":"Calculate n-gram hashes used for matching (for Instructions in this basic-block).  The exact hashes generated\n can be changed to get different looks at the data over multiple matching passes.","params":[{"type_long":"int","name":"minLength","comment":"is the minimum length of an n-gram to calculate","type_short":"int"},{"type_long":"int","name":"maxLength","comment":"is the maximum length of an n-gram","type_short":"int"},{"type_long":"boolean","name":"wholeBlock","comment":", true indicates a hash of the whole block should be calculated even if its size is below minLength","type_short":"boolean"},{"type_long":"boolean","name":"matchOnly","comment":", true indicates hashes should only be calculated for previously matched, or small, blocks","type_short":"boolean"},{"type_long":"ghidra.program.model.correlate.HashCalculator","name":"hashCalc","comment":"is the hash function for this matching pass","type_short":"HashCalculator"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"Block","comment":"This class holds basic-block information for matching algorithms. It is used as a node to traverse the\n control-flow graph. It serves as a container for hashing information associated with Instructions in the\n block.  It holds disambiguating hashes (calculated primarily from basic-block parent\/child relationships)\n to help separate identical or near identical sequences of Instructions within one function.","fields":[{"type_long":"boolean","javadoc":"","static":false,"name":"isMatched","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isVisited","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.block.CodeBlock","javadoc":"","static":false,"name":"origBlock","comment":"","type_short":"CodeBlock","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"matchHash","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.correlate.InstructHash[]","javadoc":"","static":false,"name":"instList","comment":"","type_short":"ghidra.program.model.correlate.InstructHash[]","constant_value":null}]}
