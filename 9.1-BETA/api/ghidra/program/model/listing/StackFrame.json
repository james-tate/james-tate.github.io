{"implements":[],"javadoc":"Definition of a stack frame.\n All offsets into a stack are from a zero base.  Usually\n negative offsets are parameters and positive offsets are\n locals.  That does not have to be the case, it depends on whether\n the stack grows positively or negatively.  On an a 80x86 architecture,\n the stack grows negatively.  When a value is pushed onto the stack,\n the stack pointer is decremented by some size.\n\n <p>Each frame consists of a local sections, parameter section, and save\n information (return address, saved registers, etc...).  A frame is said to\n grow negative if the parameters are referenced with negative offsets from 0,\n or positive if the parameters are referenced with negative offsets from 0.\n <p> <pre>\n\n\n  Negative Growth\n                    -5      local2 (2 bytes)\n                    -3      local1 (4 bytes)\n   frame base        0      stuff (4 bytes)\n   return offset     4      return addr (4 bytes)\n   param offset      8      param2 (4 bytes)\n                    12      param1\n\n       \n  Positive Growth\n                   -15     param offset 1\n                   -11     param offset 2\n   param offset     -8     \n   return offset    -7     return address\n                    -3     stuff \n   frame base        0     local 1\n                     4     local 2\n                     8     \n<\/pre>","static":false,"methods":[{"javadoc":"Get the function that this stack belongs to.\n This could return null if the stack frame isn't part of a function.\n@return the function","static":false,"name":"getFunction","comment":"Get the function that this stack belongs to.\n This could return null if the stack frame isn't part of a function.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"the function","type_short":"Function"}},{"javadoc":"Get the size of this stack frame in bytes.\n@return stack frame size","static":false,"name":"getFrameSize","comment":"Get the size of this stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"stack frame size","type_short":"int"}},{"javadoc":"Get the local portion of the stack frame in bytes.\n@return local frame size","static":false,"name":"getLocalSize","comment":"Get the local portion of the stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"local frame size","type_short":"int"}},{"javadoc":"Get the parameter portion of the stack frame in bytes.\n@return parameter frame size","static":false,"name":"getParameterSize","comment":"Get the parameter portion of the stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"parameter frame size","type_short":"int"}},{"javadoc":"Get the offset to the start of the parameters.\n@return offset","static":false,"name":"getParameterOffset","comment":"Get the offset to the start of the parameters.","params":[],"throws":[],"return":{"type_long":"int","comment":"offset","type_short":"int"}},{"javadoc":"Returns true if specified offset could correspond to a parameter\n@param offset","static":false,"name":"isParameterOffset","comment":"Returns true if specified offset could correspond to a parameter","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Set the size of the local stack in bytes.\n@param size size of local stack","static":false,"name":"setLocalSize","comment":"Set the size of the local stack in bytes.","params":[{"type_long":"int","name":"size","comment":"size of local stack","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the return address stack offset.\n@param offset offset of return address.","static":false,"name":"setReturnAddressOffset","comment":"Set the return address stack offset.","params":[{"type_long":"int","name":"offset","comment":"offset of return address.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the return address stack offset.\n@return return address offset.","static":false,"name":"getReturnAddressOffset","comment":"Get the return address stack offset.","params":[],"throws":[],"return":{"type_long":"int","comment":"return address offset.","type_short":"int"}},{"javadoc":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.","static":false,"name":"getVariableContaining","comment":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.","params":[{"type_long":"int","name":"offset","comment":"offset of on stack to get variable.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"Create a stack variable.  It could be a parameter or a local depending\n on the direction of the stack.\n <p><B>WARNING!<\/B> Use of this method to add parameters may force the function\n to use custom variable storage.  In addition, parameters may be appended even if the\n current calling convention does not support them.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if data type size is too large based upon storage constraints.","static":false,"name":"createVariable","comment":"Create a stack variable.  It could be a parameter or a local depending\n on the direction of the stack.\n WARNING! Use of this method to add parameters may force the function\n to use custom variable storage.  In addition, parameters may be appended even if the\n current calling convention does not support them.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"Clear the stack variable defined at offset\n@param offset Offset onto the stack to be cleared.","static":false,"name":"clearVariable","comment":"Clear the stack variable defined at offset","params":[{"type_long":"int","name":"offset","comment":"Offset onto the stack to be cleared.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get all defined stack variables.\n Variables are returned from least offset (-) to greatest offset (+)\n@return an array of parameters.","static":false,"name":"getStackVariables","comment":"Get all defined stack variables.\n Variables are returned from least offset (-) to greatest offset (+)","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of parameters.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all defined parameters as stack variables.\n@return an array of parameters.","static":false,"name":"getParameters","comment":"Get all defined parameters as stack variables.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of parameters.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all defined local variables.\n@return an array of all local variables","static":false,"name":"getLocals","comment":"Get all defined local variables.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of all local variables","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.\n@return true if the stack grows in a negative direction.","static":false,"name":"growsNegative","comment":"A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the stack grows in a negative direction.","type_short":"boolean"}}],"name":"StackFrame","comment":"Definition of a stack frame.\n All offsets into a stack are from a zero base.  Usually\n negative offsets are parameters and positive offsets are\n locals.  That does not have to be the case, it depends on whether\n the stack grows positively or negatively.  On an a 80x86 architecture,\n the stack grows negatively.  When a value is pushed onto the stack,\n the stack pointer is decremented by some size.\n\n Each frame consists of a local sections, parameter section, and save\n information (return address, saved registers, etc...).  A frame is said to\n grow negative if the parameters are referenced with negative offsets from 0,\n or positive if the parameters are referenced with negative offsets from 0.\n  \n\n\n  Negative Growth\n                    -5      local2 (2 bytes)\n                    -3      local1 (4 bytes)\n   frame base        0      stuff (4 bytes)\n   return offset     4      return addr (4 bytes)\n   param offset      8      param2 (4 bytes)\n                    12      param1\n\n       \n  Positive Growth\n                   -15     param offset 1\n                   -11     param offset 2\n   param offset     -8     \n   return offset    -7     return address\n                    -3     stuff \n   frame base        0     local 1\n                     4     local 2\n                     8     \n","fields":[{"type_long":"int","javadoc":"Indicator for a Stack that grows negatively.","static":true,"name":"GROWS_NEGATIVE","comment":"Indicator for a Stack that grows negatively.","type_short":"int","constant_value":"-1"},{"type_long":"int","javadoc":"Indicator for a Stack that grows positively.","static":true,"name":"GROWS_POSITIVE","comment":"Indicator for a Stack that grows positively.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"Indicator for a unknown stack parameter offset","static":true,"name":"UNKNOWN_PARAM_OFFSET","comment":"Indicator for a unknown stack parameter offset","type_short":"int","constant_value":"131072"}]}
