{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Format options constructor using primarily default format options.\n@param showBlockName controls display of block name in address representations.\n@param showNamespace controls display of namespace path with label references.","static":false,"name":"<init>","comment":"Format options constructor using primarily default format options.","params":[{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","name":"showBlockName","comment":"controls display of block name in address representations.","type_short":"ShowBlockName"},{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace","name":"showNamespace","comment":"controls display of namespace path with label references.","type_short":"ShowNamespace"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Format options constructor.  Extended reference mark-up is enabled.\n@param showBlockName controls display of block name in address representations.\n@param showNamespace controls display of namespace path with label references.\n@param localPrefixOverride optional override for local name-space when showNamespace\n is ShowNamespace.LOCAL or ShowNamespace.ALWAYS.  Specifying a null value\n will cause the actual name-space to be used.\n@param doRegVariableMarkup perform register variable\/reference mark-up if true\n@param doStackVariableMarkup perform stack variable\/reference mark-up if true\n@param includeInferredVariableMarkup if true and doRegVariableMarkup is also true, an attempt\n will be made to mark-up inferred register variable usage.\n@param alwaysShowPrimaryReference if true forces the primary reference to be rendered with\n the operand using the =&gt; separator if necessary\n@param includeScalarReferenceAdjustment if true scalar adjustment of certain reference offsets\n will be included to maintain replaced scalar value\n@param showLibraryInNamespace if true any referenced external symbols will include \n library name\n@param followReferencedPointers if true referenced pointers (read or indirect) will\n follow the pointer and display the indirect symbol with -&gt; instead of pointer label.","static":false,"name":"<init>","comment":"Format options constructor.  Extended reference mark-up is enabled.","params":[{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","name":"showBlockName","comment":"controls display of block name in address representations.","type_short":"ShowBlockName"},{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace","name":"showNamespace","comment":"controls display of namespace path with label references.","type_short":"ShowNamespace"},{"type_long":"java.lang.String","name":"localPrefixOverride","comment":"optional override for local name-space when showNamespace\n is ShowNamespace.LOCAL or ShowNamespace.ALWAYS.  Specifying a null value\n will cause the actual name-space to be used.","type_short":"String"},{"type_long":"boolean","name":"doRegVariableMarkup","comment":"perform register variable\/reference mark-up if true","type_short":"boolean"},{"type_long":"boolean","name":"doStackVariableMarkup","comment":"perform stack variable\/reference mark-up if true","type_short":"boolean"},{"type_long":"boolean","name":"includeInferredVariableMarkup","comment":"if true and doRegVariableMarkup is also true, an attempt\n will be made to mark-up inferred register variable usage.","type_short":"boolean"},{"type_long":"boolean","name":"alwaysShowPrimaryReference","comment":"if true forces the primary reference to be rendered with\n the operand using the = separator if necessary","type_short":"boolean"},{"type_long":"boolean","name":"includeScalarReferenceAdjustment","comment":"if true scalar adjustment of certain reference offsets\n will be included to maintain replaced scalar value","type_short":"boolean"},{"type_long":"boolean","name":"showLibraryInNamespace","comment":"if true any referenced external symbols will include \n library name","type_short":"boolean"},{"type_long":"boolean","name":"followReferencedPointers","comment":"if true referenced pointers (read or indirect) will\n follow the pointer and display the indirect symbol with - instead of pointer label.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get current ShowBlockName option\n@return ShowBlockName option","static":false,"name":"getShowBlockNameOption","comment":"Get current ShowBlockName option","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","comment":"ShowBlockName option","type_short":"ShowBlockName"}}],"name":"CodeUnitFormatOptions","comment":"","fields":[{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowBlockName","javadoc":"","static":false,"name":"showBlockName","comment":"","type_short":"ShowBlockName","constant_value":null},{"type_long":"ghidra.program.model.listing.CodeUnitFormatOptions.ShowNamespace","javadoc":"","static":false,"name":"showNamespace","comment":"","type_short":"ShowNamespace","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"localPrefixOverride","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"showLibraryInNamespace","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doRegVariableMarkup","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"doStackVariableMarkup","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"includeInferredVariableMarkup","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"alwaysShowPrimaryReference","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"followReferencedPointers","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"includeScalarReferenceAdjustment","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"showDataMutability","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"showOffcutInfo","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.data.DataTypeDisplayOptions","javadoc":"","static":false,"name":"displayOptions","comment":"","type_short":"DataTypeDisplayOptions","constant_value":null}]}
