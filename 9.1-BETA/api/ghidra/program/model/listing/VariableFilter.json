{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"Determine if the specified variable matches this filter criteria\n@param variable\n@return true if variable satisfies the criteria of this filter","static":false,"name":"matches","comment":"Determine if the specified variable matches this filter criteria","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"variable","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if variable satisfies the criteria of this filter","type_short":"boolean"}}],"name":"VariableFilter","comment":"","fields":[{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>PARAMETER_FILTER<\/code> matches all parameters (includes auto-params).  A variable is\n treated as a parameter by this filter if it implements the Parameter interface.","static":true,"name":"PARAMETER_FILTER","comment":"PARAMETER_FILTER matches all parameters (includes auto-params).  A variable is\n treated as a parameter by this filter if it implements the Parameter interface.","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>NONAUTO_PARAMETER_FILTER<\/code> matches all parameters which are not an auto-param.  A variable is\n treated as a parameter by this filter if it implements the Parameter interface.","static":true,"name":"NONAUTO_PARAMETER_FILTER","comment":"NONAUTO_PARAMETER_FILTER matches all parameters which are not an auto-param.  A variable is\n treated as a parameter by this filter if it implements the Parameter interface.","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>LOCAL_VARIABLE_FILTER<\/code> matches all simple stack variables.  A variable is\n treated as local by this filter if it does not implement the Parameter interface.","static":true,"name":"LOCAL_VARIABLE_FILTER","comment":"LOCAL_VARIABLE_FILTER matches all simple stack variables.  A variable is\n treated as local by this filter if it does not implement the Parameter interface.","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>STACK_VARIABLE_FILTER<\/code> matches all simple stack variables","static":true,"name":"STACK_VARIABLE_FILTER","comment":"STACK_VARIABLE_FILTER matches all simple stack variables","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>COMPOUND_STACK_VARIABLE_FILTER<\/code> matches all simple or compound variables\n which utilize a stack storage element","static":true,"name":"COMPOUND_STACK_VARIABLE_FILTER","comment":"COMPOUND_STACK_VARIABLE_FILTER matches all simple or compound variables\n which utilize a stack storage element","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>REGISTER_VARIABLE_FILTER<\/code> matches all simple register variables","static":true,"name":"REGISTER_VARIABLE_FILTER","comment":"REGISTER_VARIABLE_FILTER matches all simple register variables","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>MEMORY_VARIABLE_FILTER<\/code> matches all simple memory variables","static":true,"name":"MEMORY_VARIABLE_FILTER","comment":"MEMORY_VARIABLE_FILTER matches all simple memory variables","type_short":"VariableFilter","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableFilter","javadoc":"<code>UNIQUE_VARIABLE_FILTER<\/code> matches all simple unique variables identified by a hash value","static":true,"name":"UNIQUE_VARIABLE_FILTER","comment":"UNIQUE_VARIABLE_FILTER matches all simple unique variables identified by a hash value","type_short":"VariableFilter","constant_value":null}]}
