{"implements":["java.lang.Comparable"],"javadoc":"Defines an object that stores a value of some specific data type. The\n variable has a name, type, size, and a comment.","static":false,"methods":[{"javadoc":"Get the Data Type of this variable\n@return the data type of the variable","static":false,"name":"getDataType","comment":"Get the Data Type of this variable","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"the data type of the variable","type_short":"DataType"}},{"javadoc":"Set the Data Type of this variable and the associated storage whose size matches the \n data type length.\n <p>NOTE: The storage and source are ignored if the function does not have custom storage enabled.\n@param type the data type\n@param storage properly sized storage for the new data type\n@param force overwrite conflicting variables\n@param source variable storage source (used only for function parameters and return)\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if force is false and data type size causes a conflict \n with other variables","static":false,"name":"setDataType","comment":"Set the Data Type of this variable and the associated storage whose size matches the \n data type length.\n NOTE: The storage and source are ignored if the function does not have custom storage enabled.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"the data type","type_short":"DataType"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"properly sized storage for the new data type","type_short":"VariableStorage"},{"type_long":"boolean","name":"force","comment":"overwrite conflicting variables","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"variable storage source (used only for function parameters and return)","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or violates storage constraints.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the Data Type of this variable using the default alignment behavior (implementation specific). \n The given dataType must have a fixed length.  If contained within a stack-frame, data-type size\n will be constrained by existing variables (e.g., equivalent to force=false)\n Note: stack offset will be maintained for stack variables.\n@param type the data type\n@param source signature source\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if data type size causes a conflict with other variables\n@see #setDataType(DataType, boolean)","static":false,"name":"setDataType","comment":"Set the Data Type of this variable using the default alignment behavior (implementation specific). \n The given dataType must have a fixed length.  If contained within a stack-frame, data-type size\n will be constrained by existing variables (e.g., equivalent to force=false)\n Note: stack offset will be maintained for stack variables.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"the data type","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"signature source","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or violates storage constraints.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the Data Type of this variable. The given dataType must have a fixed length.\n@param type the data type\n@param force overwrite conflicting variables\n@param source signature source\n@param align maintain proper stack alignment\/justification if supported by implementation.\n \t\t\tIf false and this is a stack variable, the current stack address\/offset will not change.\n \t\t\tIf true, the affect is implementation dependent since alignment can\n \t\t\tnot be performed without access to a compiler specification.\n@throws InvalidInputException if data type is not a fixed length or violates storage constraints.\n@throws VariableSizeException if force is false and data type size causes a conflict \n with other variables","static":false,"name":"setDataType","comment":"Set the Data Type of this variable. The given dataType must have a fixed length.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"the data type","type_short":"DataType"},{"type_long":"boolean","name":"alignStack","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"force","comment":"overwrite conflicting variables","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"signature source","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or violates storage constraints.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the Name of this variable or null if not assigned or not-applicable\n@return the name of the variable","static":false,"name":"getName","comment":"Get the Name of this variable or null if not assigned or not-applicable","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the variable","type_short":"String"}},{"javadoc":"Get the length of this variable\n@return the length of the variable","static":false,"name":"getLength","comment":"Get the length of this variable","params":[],"throws":[],"return":{"type_long":"int","comment":"the length of the variable","type_short":"int"}},{"javadoc":"Verify that the variable is valid \n (i.e., storage is valid and size matches variable data type size)\n@return true if variable is valid","static":false,"name":"isValid","comment":"Verify that the variable is valid \n (i.e., storage is valid and size matches variable data type size)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if variable is valid","type_short":"boolean"}},{"javadoc":"Returns the function that contains this Variable.  May be null if the variable is not in\n a function.","static":false,"name":"getFunction","comment":"Returns the function that contains this Variable.  May be null if the variable is not in\n a function.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"","type_short":"Function"}},{"javadoc":"Returns the program that contains this variable or is the intended target\n@return the program.","static":false,"name":"getProgram","comment":"Returns the program that contains this variable or is the intended target","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the program.","type_short":"Program"}},{"javadoc":"Get the source of this variable\n@return the source of this variable","static":false,"name":"getSource","comment":"Get the source of this variable","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SourceType","comment":"the source of this variable","type_short":"SourceType"}},{"javadoc":"Set the name of this variable.\n@param name the name\n@param source the source of this variable name\n@throws DuplicateNameException if the name collides with the name of another variable.\n@throws InvalidInputException if name contains blank characters, is zero length, or is null","static":false,"name":"setName","comment":"Set the name of this variable.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this variable name","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if the name collides with the name of another variable.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if name contains blank characters, is zero length, or is null","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the Comment for this variable\n@return the comment","static":false,"name":"getComment","comment":"Get the Comment for this variable","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the comment","type_short":"String"}},{"javadoc":"Set the comment for this variable\n@param comment the comment","static":false,"name":"setComment","comment":"Set the comment for this variable","params":[{"type_long":"java.lang.String","name":"comment","comment":"the comment","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the variable storage associated with this variable.\n@return the variable storage for this variable","static":false,"name":"getVariableStorage","comment":"Get the variable storage associated with this variable.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"the variable storage for this variable","type_short":"VariableStorage"}},{"javadoc":"Get the first storage varnode for this variable\n@return the first storage varnode associated with this variable\n@see #getStorageElements()","static":false,"name":"getFirstStorageVarnode","comment":"Get the first storage varnode for this variable","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"the first storage varnode associated with this variable","type_short":"Varnode"}},{"javadoc":"Get the last storage varnode for this variable\n@return the last storage varnode associated with this variable\n@see #getStorageElements()","static":false,"name":"getLastStorageVarnode","comment":"Get the last storage varnode for this variable","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"the last storage varnode associated with this variable","type_short":"Varnode"}},{"javadoc":"@return true if this is a simple variable consisting of a single stack varnode\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link #getLastStorageVarnode()} methods. The stack offset can be obtained using:\n <pre>\n \t\tgetFirstStorageVarnode().getOffset()\n  <\/pre>","static":false,"name":"isStackVariable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a simple variable consisting of a single stack varnode\n which will be returned by either the #getFirstStorageVarnode() or \n #getLastStorageVarnode() methods. The stack offset can be obtained using:\n \n \t\tgetFirstStorageVarnode().getOffset()\n  ","type_short":"boolean"}},{"javadoc":"@return true if this variable uses simple or compound storage which contains a stack element.  \n If true, the last storage varnode will always be the stack element.\n@see #getLastStorageVarnode()","static":false,"name":"hasStackStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this variable uses simple or compound storage which contains a stack element.  \n If true, the last storage varnode will always be the stack element.","type_short":"boolean"}},{"javadoc":"@return true if this is a simple variable consisting of a single register varnode\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link getLastStorageVarnode()} methods.  The register can be obtained using the \n {@link #getRegister()} method.","static":false,"name":"isRegisterVariable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a simple variable consisting of a single register varnode\n which will be returned by either the #getFirstStorageVarnode() or \n getLastStorageVarnode() methods.  The register can be obtained using the \n #getRegister() method.","type_short":"boolean"}},{"javadoc":"@return first storage register associated with this variable, else null is returned.\n A variable with compound storage may have more than one register or other storage\n in addition to the register returned by this method.\n@see #isRegisterVariable()","static":false,"name":"getRegister","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"first storage register associated with this variable, else null is returned.\n A variable with compound storage may have more than one register or other storage\n in addition to the register returned by this method.","type_short":"Register"}},{"javadoc":"@return all storage register(s) associated with this variable, else null is returned if \n no registers are used.  A variable with compound storage may have more than one register \n or other storage in addition to the register(s) returned by this method.\n@see #isRegisterVariable()\n@see #isCompoundVariable()","static":false,"name":"getRegisters","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"all storage register(s) associated with this variable, else null is returned if \n no registers are used.  A variable with compound storage may have more than one register \n or other storage in addition to the register(s) returned by this method.","type_short":"List"}},{"javadoc":"@return the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: {@link #BAD_STORAGE}, {@link #UNASSIGNED_STORAGE},\n {@link #VOID_STORAGE}","static":false,"name":"getMinAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: #BAD_STORAGE, #UNASSIGNED_STORAGE,\n #VOID_STORAGE","type_short":"Address"}},{"javadoc":"@return the stack offset associated with simple stack variable (i.e., {@link #isStackVariable()} \n returns true).\n@throws UnsupportedOperationException if storage is not a simple stack variable","static":false,"name":"getStackOffset","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the stack offset associated with simple stack variable (i.e., #isStackVariable() \n returns true).","type_short":"int"}},{"javadoc":"@return true if this is a simple variable consisting of a single storage memory element\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link getStorageElements()} methods.","static":false,"name":"isMemoryVariable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a simple variable consisting of a single storage memory element\n which will be returned by either the #getFirstStorageVarnode() or \n getStorageElements() methods.","type_short":"boolean"}},{"javadoc":"@return true if this is a simple variable consisting of a single storage unique\/hash element\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link getStorageElements()} methods.  The unique hash can be obtained from the \n storage address offset corresponding to the single storage element.","static":false,"name":"isUniqueVariable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a simple variable consisting of a single storage unique\/hash element\n which will be returned by either the #getFirstStorageVarnode() or \n getStorageElements() methods.  The unique hash can be obtained from the \n storage address offset corresponding to the single storage element.","type_short":"boolean"}},{"javadoc":"@return true if this variable uses compound storage consisting of two or more storage elements\n which will be returned by the {@link getStorageElements()} method.  Compound variables will\n always use a register(s) optionally followed by other storage (i.e., stack).","static":false,"name":"isCompoundVariable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this variable uses compound storage consisting of two or more storage elements\n which will be returned by the getStorageElements() method.  Compound variables will\n always use a register(s) optionally followed by other storage (i.e., stack).","type_short":"boolean"}},{"javadoc":"@return true if this variable has been assigned storage.  This is equivalent to \n {@link #getVariableStorage()} != null","static":false,"name":"hasAssignedStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this variable has been assigned storage.  This is equivalent to \n #getVariableStorage() != null","type_short":"boolean"}},{"javadoc":"@return the first use offset relative to the function entry point.","static":false,"name":"getFirstUseOffset","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the first use offset relative to the function entry point.","type_short":"int"}},{"javadoc":"@return the symbol associated with this variable or null if no symbol \n associated.  Certain dynamic variables such as auto-parameters do not\n have a symbol.","static":false,"name":"getSymbol","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"the symbol associated with this variable or null if no symbol \n associated.  Certain dynamic variables such as auto-parameters do not\n have a symbol.","type_short":"Symbol"}},{"javadoc":"@return true if the specified variable is equivalent to this variable","static":false,"name":"isEquivalent","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"variable","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the specified variable is equivalent to this variable","type_short":"boolean"}}],"name":"Variable","comment":"Defines an object that stores a value of some specific data type. The\n variable has a name, type, size, and a comment.","fields":[]}
