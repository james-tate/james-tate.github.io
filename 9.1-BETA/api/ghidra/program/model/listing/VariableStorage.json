{"implements":["java.lang.Comparable"],"javadoc":"<code><\/code> encapsulates the ordered list of storage varnodes which correspond to a \n function parameter or local variable.  For big-endian the first element corresponds \n to the most-significant varnode, while for little-endian the first element \n corresponds to the least-significant varnode.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct an empty variable storage for reserved usage (i.e., BAD_STORAGE, UNMAPPED_STORAGE)","static":false,"name":"<init>","comment":"Construct an empty variable storage for reserved usage (i.e., BAD_STORAGE, UNMAPPED_STORAGE)","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct variable storage\n@param program\n@param varnodes one or more ordered storage varnodes\n@throws InvalidInputException if specified varnodes violate storage restrictions","static":false,"name":"<init>","comment":"Construct variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"varnodes","comment":"one or more ordered storage varnodes","type_short":"ghidra.program.model.pcode.Varnode[]"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if specified varnodes violate storage restrictions","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct register variable storage\n@param program\n@param registers one or more ordered registers\n@throws InvalidInputException if specified registers violate storage restrictions","static":false,"name":"<init>","comment":"Construct register variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.lang.Register[]","name":"registers","comment":"one or more ordered registers","type_short":"ghidra.program.model.lang.Register[]"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if specified registers violate storage restrictions","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct stack variable storage\n@param program\n@param stackOffset stack offset\n@param size stack element size\n@throws InvalidInputException if specified registers violate storage restrictions","static":false,"name":"<init>","comment":"Construct stack variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"int","name":"stackOffset","comment":"stack offset","type_short":"int"},{"type_long":"int","name":"size","comment":"stack element size","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if specified registers violate storage restrictions","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getVarnodeList","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register[]","name":"registers","comment":"","type_short":"ghidra.program.model.lang.Register[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode[]","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"}},{"javadoc":"Construct variable storage\n@param program\n@param varnodes one or more ordered storage varnodes\n@throws InvalidInputException if specified varnodes violate storage restrictions","static":false,"name":"<init>","comment":"Construct variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.util.List<ghidra.program.model.pcode.Varnode>","name":"varnodes","comment":"one or more ordered storage varnodes","type_short":"List"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if specified varnodes violate storage restrictions","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct variable storage\n@param program\n@param address\n@param size\n@throws InvalidInputException","static":false,"name":"<init>","comment":"Construct variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct variable storage\n@param program\n@param serialization storage serialization string\n@throws InvalidInputException","static":true,"name":"deserialize","comment":"Construct variable storage","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String","name":"serialization","comment":"storage serialization string","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"","type_short":"VariableStorage"}},{"javadoc":"@return program for which this storage is associated","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program for which this storage is associated","type_short":"Program"}},{"javadoc":"@return the total size of corresponding storage varnodes","static":false,"name":"size","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the total size of corresponding storage varnodes","type_short":"int"}},{"javadoc":"","static":false,"name":"checkVarnodes","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempt to clone variable storage for use in a different program.\n Dynamic storage characteristics will not be preserved.\n@param newProgram target program\n@return cloned storage\n@throws InvalidInputException","static":false,"name":"clone","comment":"Attempt to clone variable storage for use in a different program.\n Dynamic storage characteristics will not be preserved.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"newProgram","comment":"target program","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"cloned storage","type_short":"VariableStorage"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addVarnodeInfo","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"builder","comment":"","type_short":"StringBuilder"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAddressString","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@return the number of varnodes associated with this variable storage","static":false,"name":"getVarnodeCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of varnodes associated with this variable storage","type_short":"int"}},{"javadoc":"@return ordered varnodes associated with this variable storage","static":false,"name":"getVarnodes","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode[]","comment":"ordered varnodes associated with this variable storage","type_short":"ghidra.program.model.pcode.Varnode[]"}},{"javadoc":"Associated with auto-parameters.  Parameters whose existence is dictated\n by a calling-convention may automatically inject additional hidden\n parameters.  If this storage is associated with a auto-parameter, this\n method will return true.\n@return true if this storage is associated with an auto-parameter, else false","static":false,"name":"isAutoStorage","comment":"Associated with auto-parameters.  Parameters whose existence is dictated\n by a calling-convention may automatically inject additional hidden\n parameters.  If this storage is associated with a auto-parameter, this\n method will return true.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this storage is associated with an auto-parameter, else false","type_short":"boolean"}},{"javadoc":"If this storage corresponds to a auto-parameter, return the type associated\n with the auto-parameter.\n@return auto-parameter type or null if not applicable","static":false,"name":"getAutoParameterType","comment":"If this storage corresponds to a auto-parameter, return the type associated\n with the auto-parameter.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.AutoParameterType","comment":"auto-parameter type or null if not applicable","type_short":"AutoParameterType"}},{"javadoc":"If this storage corresponds to parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its raw type.\n@return true if this parameter was forced to be passed as a pointer instead of its raw type","static":false,"name":"isForcedIndirect","comment":"If this storage corresponds to parameter which was forced by the associated calling \n convention to be passed as a pointer instead of its raw type.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this parameter was forced to be passed as a pointer instead of its raw type","type_short":"boolean"}},{"javadoc":"@return true if this storage is bad (could not be resolved)","static":false,"name":"isBadStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this storage is bad (could not be resolved)","type_short":"boolean"}},{"javadoc":"@return true if storage has not been assigned (no varnodes)","static":false,"name":"isUnassignedStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage has not been assigned (no varnodes)","type_short":"boolean"}},{"javadoc":"@return true if storage is assigned and is not BAD","static":false,"name":"isValid","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage is assigned and is not BAD","type_short":"boolean"}},{"javadoc":"@return true if storage corresponds to the VOID_STORAGE instance\n@see #VOID_STORAGE","static":false,"name":"isVoidStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage corresponds to the VOID_STORAGE instance","type_short":"boolean"}},{"javadoc":"@return first varnode within the ordered list of varnodes","static":false,"name":"getFirstVarnode","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"first varnode within the ordered list of varnodes","type_short":"Varnode"}},{"javadoc":"@return last varnode within the ordered list of varnodes","static":false,"name":"getLastVarnode","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"last varnode within the ordered list of varnodes","type_short":"Varnode"}},{"javadoc":"@return true if storage consists of a single stack varnode","static":false,"name":"isStackStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of a single stack varnode","type_short":"boolean"}},{"javadoc":"@return true if the last varnode for simple or compound storage is a stack varnode","static":false,"name":"hasStackStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the last varnode for simple or compound storage is a stack varnode","type_short":"boolean"}},{"javadoc":"@return true if this is a simple variable consisting of a single register varnode\n which will be returned by either the {@link #getFirstStorageVarnode()} or \n {@link getLastStorageVarnode()} methods.  The register can be obtained using the \n {@link #getRegister()} method.  Keep in mind that registers\n may exist in a memory space or the register space.","static":false,"name":"isRegisterStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a simple variable consisting of a single register varnode\n which will be returned by either the #getFirstStorageVarnode() or \n getLastStorageVarnode() methods.  The register can be obtained using the \n #getRegister() method.  Keep in mind that registers\n may exist in a memory space or the register space.","type_short":"boolean"}},{"javadoc":"@return first storage register associated with this register or compound storage, else\n null is returned.\n@see #isRegisterVariable()","static":false,"name":"getRegister","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"first storage register associated with this register or compound storage, else\n null is returned.","type_short":"Register"}},{"javadoc":"@return storage register(s) associated with this register or compound storage, else\n null is returned.\n@see #isRegisterVariable()\n@see #isCompoundStorage()","static":false,"name":"getRegisters","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"storage register(s) associated with this register or compound storage, else\n null is returned.","type_short":"List"}},{"javadoc":"@return the stack offset associated with simple stack storage or compound \n storage where the last varnode is stack, see {@link #hasStackStorage()}.\n@throws UnsupportedOperationException if storage does not have a stack varnode","static":false,"name":"getStackOffset","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the stack offset associated with simple stack storage or compound \n storage where the last varnode is stack, see #hasStackStorage().","type_short":"int"}},{"javadoc":"@return the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: {@link #isBadStorage()}, {@link #isUnassignedStorage()},\n {@link #isVoidStorage()}","static":false,"name":"getMinAddress","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the minimum address corresponding to the first varnode of this storage\n or null if this is a special empty storage: #isBadStorage(), #isUnassignedStorage(),\n #isVoidStorage()","type_short":"Address"}},{"javadoc":"@return true if storage consists of a single memory varnode which does not correspond\n to a register.","static":false,"name":"isMemoryStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of a single memory varnode which does not correspond\n to a register.","type_short":"boolean"}},{"javadoc":"@return true if storage consists of a single constant-space varnode which is used when storing\n local function constants.","static":false,"name":"isConstantStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of a single constant-space varnode which is used when storing\n local function constants.","type_short":"boolean"}},{"javadoc":"@return true if storage consists of a single hash-space varnode which is used when storing\n local unique function variables.","static":false,"name":"isHashStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of a single hash-space varnode which is used when storing\n local unique function variables.","type_short":"boolean"}},{"javadoc":"@return true if storage consists of a single unique-space varnode which is used during\n function analysis.  This type of storage is not suitable for database-stored function\n variables.  This type of storage must be properly converted to Hash storage when \n storing unique function variables.","static":false,"name":"isUniqueStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of a single unique-space varnode which is used during\n function analysis.  This type of storage is not suitable for database-stored function\n variables.  This type of storage must be properly converted to Hash storage when \n storing unique function variables.","type_short":"boolean"}},{"javadoc":"@return true if storage consists of two or more storage varnodes","static":false,"name":"isCompoundStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if storage consists of two or more storage varnodes","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getLongHash","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"This storage is considered equal if it consists of the same storage varnodes.","static":false,"name":"equals","comment":"This storage is considered equal if it consists of the same storage varnodes.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determine if this variable storage intersects the specified variable storage\n@param variableStorage\n@return true if any intersection exists between this storage and the specified\n variable storage","static":false,"name":"intersects","comment":"Determine if this variable storage intersects the specified variable storage","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"variableStorage","comment":"","type_short":"VariableStorage"}],"throws":[],"return":{"type_long":"boolean","comment":"true if any intersection exists between this storage and the specified\n variable storage","type_short":"boolean"}},{"javadoc":"Determine if this storage intersects the specified address set\n@param set address set\n@return true if this storage intersects the specified address set","static":false,"name":"intersects","comment":"Determine if this storage intersects the specified address set","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"address set","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this storage intersects the specified address set","type_short":"boolean"}},{"javadoc":"Determine if this storage intersects the specified register\n@param set address set\n@return true if this storage intersects the specified address set","static":false,"name":"intersects","comment":"Determine if this storage intersects the specified register","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this storage intersects the specified address set","type_short":"boolean"}},{"javadoc":"Determine if the specified address is contained within this storage\n@param address\n@return ","static":false,"name":"contains","comment":"Determine if the specified address is contained within this storage","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"getPrecedence","comment":"","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"","type_short":"VariableStorage"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Compare this variable storage with another.  A value of 0 indicates \n that the two objects are equal\n@see java.lang.Comparable#compareTo(java.lang.Object)","static":false,"name":"compareTo","comment":"Compare this variable storage with another.  A value of 0 indicates \n that the two objects are equal","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"otherStorage","comment":"","type_short":"VariableStorage"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Return a serialization form of this variable storage.\n@return storage serialization string useful for subsequent reconstruction","static":false,"name":"getSerializationString","comment":"Return a serialization form of this variable storage.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"storage serialization string useful for subsequent reconstruction","type_short":"String"}},{"javadoc":"Generate VariableStorage serialization string\n@param varnodes\n@return storage serialization string useful for subsequent reconstruction\n of a VariableStorage object","static":true,"name":"getSerializationString","comment":"Generate VariableStorage serialization string","params":[{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"varnodes","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"storage serialization string useful for subsequent reconstruction\n of a VariableStorage object","type_short":"String"}},{"javadoc":"Parse a storage serialization string to produce an array or varnodes\n@param addrFactory\n@param serialization\n@return array of varnodes or null if invalid","static":true,"name":"getVarnodes","comment":"Parse a storage serialization string to produce an array or varnodes","params":[{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"java.lang.String","name":"serialization","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"java.util.List<ghidra.program.model.pcode.Varnode>","comment":"array of varnodes or null if invalid","type_short":"List"}},{"javadoc":"Perform language translations on VariableStorage serialization string\n@param translator language translator\n@param serialization VariableStorage serialization string\n@return translated serialization string\n@throws InvalidInputException if serialization has invalid format","static":true,"name":"translateSerialization","comment":"Perform language translations on VariableStorage serialization string","params":[{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"language translator","type_short":"LanguageTranslator"},{"type_long":"java.lang.String","name":"serialization","comment":"VariableStorage serialization string","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if serialization has invalid format","type_short":"InvalidInputException"}],"return":{"type_long":"java.lang.String","comment":"translated serialization string","type_short":"String"}},{"javadoc":"Translate register varnode address offsetStr\n@param translator\n@param space\n@param offsetStr\n@param sizeStr\n@return translated offsetStr or null if BAD translation","static":true,"name":"translateRegisterVarnodeOffset","comment":"Translate register varnode address offsetStr","params":[{"type_long":"ghidra.program.model.address.Address","name":"oldRegAddr","comment":"","type_short":"Address"},{"type_long":"int","name":"varnodeSize","comment":"","type_short":"int"},{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"},{"type_long":"ghidra.program.model.address.AddressSpace","name":"newRegisterSpace","comment":"","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"translated offsetStr or null if BAD translation","type_short":"String"}}],"name":"VariableStorage","comment":" encapsulates the ordered list of storage varnodes which correspond to a \n function parameter or local variable.  For big-endian the first element corresponds \n to the most-significant varnode, while for little-endian the first element \n corresponds to the least-significant varnode.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BAD","comment":"","type_short":"String","constant_value":"\"<BAD>\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"UNASSIGNED","comment":"","type_short":"String","constant_value":"\"<UNASSIGNED>\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"VOID","comment":"","type_short":"String","constant_value":"\"<VOID>\""},{"type_long":"ghidra.program.model.listing.VariableStorage","javadoc":"<code>BAD_STORAGE<\/code> used to identify variable storage which is no longer\n valid.  This can be caused by various events such as significant language\/processor\n changes or software bugs which prevent variable storage to be properly decoded.","static":true,"name":"BAD_STORAGE","comment":"BAD_STORAGE used to identify variable storage which is no longer\n valid.  This can be caused by various events such as significant language\/processor\n changes or software bugs which prevent variable storage to be properly decoded.","type_short":"VariableStorage","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableStorage","javadoc":"<code>UNMASSIGNED_STORAGE<\/code> used to identify parameter storage which is \"unmapped\"\n or could not be determined.","static":true,"name":"UNASSIGNED_STORAGE","comment":"UNMASSIGNED_STORAGE used to identify parameter storage which is \"unmapped\"\n or could not be determined.","type_short":"VariableStorage","constant_value":null},{"type_long":"ghidra.program.model.listing.VariableStorage","javadoc":"<code>VOID_STORAGE<\/code> used to identify parameter\/return storage which is \"mapped\"\n with a data-type of void.","static":true,"name":"VOID_STORAGE","comment":"VOID_STORAGE used to identify parameter\/return storage which is \"mapped\"\n with a data-type of void.","type_short":"VariableStorage","constant_value":null},{"type_long":"ghidra.program.model.pcode.Varnode[]","javadoc":"","static":false,"name":"varnodes","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"registers","comment":"","type_short":"List","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"hashcode","comment":"","type_short":"long","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"serialization","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"PRECEDENCE_MAPPED","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"PRECEDENCE_UNMAPPED","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"PRECEDENCE_BAD","comment":"","type_short":"int","constant_value":"3"}]}
