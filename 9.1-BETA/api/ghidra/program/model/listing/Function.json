{"implements":["ghidra.program.model.symbol.Namespace"],"javadoc":"Interface to define methods available on a function. Functions\n have a single entry point.","static":false,"methods":[{"javadoc":"Get the name of this function.\n@return the functions name","static":false,"name":"getName","comment":"Get the name of this function.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the functions name","type_short":"String"}},{"javadoc":"Set the name of this function.\n@param name the new name of the function\n@param source the source of this function name\n@throws DuplicateNameException if the name is used by some other symbol\n@throws InvalidInputException if the name is not a valid function name.","static":false,"name":"setName","comment":"Set the name of this function.","params":[{"type_long":"java.lang.String","name":"name","comment":"the new name of the function","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this function name","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if the name is used by some other symbol","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the name is not a valid function name.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the named call-fixup for this function.\n@param name name of call-fixup specified by compiler spec.  A null\n value will clear the current setting.","static":false,"name":"setCallFixup","comment":"Set the named call-fixup for this function.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of call-fixup specified by compiler spec.  A null\n value will clear the current setting.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current call-fixup name set on this instruction or null\n if one has not been set.","static":false,"name":"getCallFixup","comment":"Returns the current call-fixup name set on this instruction or null\n if one has not been set.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the program containing this function.\n@return the program","static":false,"name":"getProgram","comment":"Get the program containing this function.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the program","type_short":"Program"}},{"javadoc":"Get the comment for this function.\n@return the comment for this function","static":false,"name":"getComment","comment":"Get the comment for this function.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the comment for this function","type_short":"String"}},{"javadoc":"Returns the function (same as plate) comment as an array of strings where\n each item in the array is a line of text in the comment.","static":false,"name":"getCommentAsArray","comment":"Returns the function (same as plate) comment as an array of strings where\n each item in the array is a line of text in the comment.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Set the comment for this function.\n@param comment the string to set as the comment.","static":false,"name":"setComment","comment":"Set the comment for this function.","params":[{"type_long":"java.lang.String","name":"comment","comment":"the string to set as the comment.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the repeatable comment for this function.\n A repeatable comment is a comment that will appear\n at locations that 'call' this function.\n@return the repeatable comment for this function","static":false,"name":"getRepeatableComment","comment":"Returns the repeatable comment for this function.\n A repeatable comment is a comment that will appear\n at locations that 'call' this function.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the repeatable comment for this function","type_short":"String"}},{"javadoc":"Returns the repeatable comment as an array of strings.\n@return the repeatable comment as an array of strings","static":false,"name":"getRepeatableCommentAsArray","comment":"Returns the repeatable comment as an array of strings.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"the repeatable comment as an array of strings","type_short":"java.lang.String[]"}},{"javadoc":"Set the repeatable comment for this function.\n@param comment the string to set as the repeatable comment.","static":false,"name":"setRepeatableComment","comment":"Set the repeatable comment for this function.","params":[{"type_long":"java.lang.String","name":"comment","comment":"the string to set as the repeatable comment.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the entry point for this function.\n Functions may only have ONE entry point.\n@return the entry point","static":false,"name":"getEntryPoint","comment":"Get the entry point for this function.\n Functions may only have ONE entry point.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the entry point","type_short":"Address"}},{"javadoc":"Get the Function's return type.\n A null return value indicates the functions return type has never been set.\n@return the DataType that this function returns.","static":false,"name":"getReturnType","comment":"Get the Function's return type.\n A null return value indicates the functions return type has never been set.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"the DataType that this function returns.","type_short":"DataType"}},{"javadoc":"Set the function's return type.\n@param type the dataType that will define this functions return type.\n@param source TODO\n@throws InvalidInputException if data type is not a fixed length.","static":false,"name":"setReturnType","comment":"Set the function's return type.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"the dataType that will define this functions return type.","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"TODO","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the Function's return type\/storage represented by a Parameter \n object.  The parameter's ordinal value will be equal to\n Parameter.RETURN_ORIDINAL.\n@return return data-type\/storage","static":false,"name":"getReturn","comment":"Get the Function's return type\/storage represented by a Parameter \n object.  The parameter's ordinal value will be equal to\n Parameter.RETURN_ORIDINAL.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"return data-type\/storage","type_short":"Parameter"}},{"javadoc":"Set the return data-type and storage.\n <p>NOTE: The storage and source are ignored if the function does not have custom storage enabled.\n@param type\n@param storage\n@param source source to be combined with the overall signature source.\n@throws InvalidInputException if data type is not a fixed length or storage is improperly sized","static":false,"name":"setReturn","comment":"Set the return data-type and storage.\n NOTE: The storage and source are ignored if the function does not have custom storage enabled.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"source to be combined with the overall signature source.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or storage is improperly sized","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the function's effective signature.\n This is equivalent to invoking <code>getSignature(false)<\/code> where auto-params and \n forced-indirect types will be reflected in the signature if present.\n <br><br>WARNING! It is important to note that the calling convention may not be properly retained \n by the returned signature object if a non-generic calling convention is used by this function as \n defined by the program's compiler specification.\n@return the function's signature","static":false,"name":"getSignature","comment":"Get the function's effective signature.\n This is equivalent to invoking getSignature(false) where auto-params and \n forced-indirect types will be reflected in the signature if present.\n WARNING! It is important to note that the calling convention may not be properly retained \n by the returned signature object if a non-generic calling convention is used by this function as \n defined by the program's compiler specification.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.FunctionSignature","comment":"the function's signature","type_short":"FunctionSignature"}},{"javadoc":"Get the function's signature.\n <br><br>WARNING! It is important to note that the calling convention may not be properly retained \n by the returned signature object if a non-generic calling convention is used by this function as \n defined by the program's compiler specification.\n@param formalSignature if true only original raw types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.) within the returned \n signature.  If false, the effective signature will be returned where forced indirect \n and auto-params are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled.\n@return the function's signature","static":false,"name":"getSignature","comment":"Get the function's signature.\n WARNING! It is important to note that the calling convention may not be properly retained \n by the returned signature object if a non-generic calling convention is used by this function as \n defined by the program's compiler specification.","params":[{"type_long":"boolean","name":"formalSignature","comment":"if true only original raw types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.) within the returned \n signature.  If false, the effective signature will be returned where forced indirect \n and auto-params are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.FunctionSignature","comment":"the function's signature","type_short":"FunctionSignature"}},{"javadoc":"Return a string representation of the function signature\n@param formalSignature if true only original raw return\/parameter types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.) within the returned \n signature.  If false, the effective signature will be returned where forced indirect \n and auto-params are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled.\n@param includeCallingConvention if true prototype will include call convention\n declaration if known.","static":false,"name":"getPrototypeString","comment":"Return a string representation of the function signature","params":[{"type_long":"boolean","name":"formalSignature","comment":"if true only original raw return\/parameter types will be retained and \n auto-params discarded (e.g., this, __return_storage_ptr__, etc.) within the returned \n signature.  If false, the effective signature will be returned where forced indirect \n and auto-params are reflected in the signature.  This option has no affect if the specified \n function has custom storage enabled.","type_short":"boolean"},{"type_long":"boolean","name":"includeCallingConvention","comment":"if true prototype will include call convention\n declaration if known.","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the source type for the overall signature excluding function name and parameter names \n whose source is carried by the corresponding symbol.\n@return the overall SourceType of the function signature;","static":false,"name":"getSignatureSource","comment":"Returns the source type for the overall signature excluding function name and parameter names \n whose source is carried by the corresponding symbol.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.SourceType","comment":"the overall SourceType of the function signature;","type_short":"SourceType"}},{"javadoc":"Set the source type for the overall signature excluding function name and parameter names \n whose source is carried by the corresponding symbol.\n@param signatureSource function signature source type","static":false,"name":"setSignatureSource","comment":"Set the source type for the overall signature excluding function name and parameter names \n whose source is carried by the corresponding symbol.","params":[{"type_long":"ghidra.program.model.symbol.SourceType","name":"signatureSource","comment":"function signature source type","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the stack frame for this function.\n NOTE: Use of the stack frame must be avoided during upgrade activity since\n the compiler spec may not be known (i.e., due to language upgrade process).\n@return this functions stack frame","static":false,"name":"getStackFrame","comment":"Get the stack frame for this function.\n NOTE: Use of the stack frame must be avoided during upgrade activity since\n the compiler spec may not be known (i.e., due to language upgrade process).","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.StackFrame","comment":"this functions stack frame","type_short":"StackFrame"}},{"javadoc":"Get the change in the stack pointer resulting from calling\n  this function.\n@return int the change in bytes to the stack pointer","static":false,"name":"getStackPurgeSize","comment":"Get the change in the stack pointer resulting from calling\n  this function.","params":[],"throws":[],"return":{"type_long":"int","comment":"int the change in bytes to the stack pointer","type_short":"int"}},{"javadoc":"Return all {@link FunctionTag} objects associated with this function.\n@return set of tag names","static":false,"name":"getTags","comment":"Return all FunctionTag objects associated with this function.","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.listing.FunctionTag>","comment":"set of tag names","type_short":"Set"}},{"javadoc":"Adds the tag with the given name to this function; if one does\n not exist, one is created.\n@param name the tag name to add\n@return true if the tag was successfully added","static":false,"name":"addTag","comment":"Adds the tag with the given name to this function; if one does\n not exist, one is created.","params":[{"type_long":"java.lang.String","name":"name","comment":"the tag name to add","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the tag was successfully added","type_short":"boolean"}},{"javadoc":"Removes the given tag from this function.\n@param name the tag name to be removed.","static":false,"name":"removeTag","comment":"Removes the given tag from this function.","params":[{"type_long":"java.lang.String","name":"name","comment":"the tag name to be removed.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the change in the stack pointer resulting from calling\n this function.\n@param purgeSize the change in bytes to the stack pointer","static":false,"name":"setStackPurgeSize","comment":"Set the change in the stack pointer resulting from calling\n this function.","params":[{"type_long":"int","name":"purgeSize","comment":"the change in bytes to the stack pointer","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"check if stack purge size is valid.\n@return true if the stack depth is valid","static":false,"name":"isStackPurgeSizeValid","comment":"check if stack purge size is valid.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the stack depth is valid","type_short":"boolean"}},{"javadoc":"Adds the given variable to the end of the parameters list.  The variable storage specified\n for the new parameter will be ignored if custom storage mode is not enabled.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param var the variable to add as a new parameter.\n@param source the source of this parameter which will be applied to the parameter symbol and \n overall function signature source.  If parameter has a null or default name a SourceType of DEFAULT\n will be applied to the parameter symbol.\n@return the Parameter object created.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if data type size is too large based upon storage constraints.\n@deprecated The use of this method is discouraged due to the potential injection of auto-parameters\n which are easily overlooked when considering parameter ordinal.  The function signature should generally be \n adjusted with a single call to {@link #updateFunction(String, Variable, List, FunctionUpdateType, boolean, SourceType)}","static":false,"name":"addParameter","comment":"Adds the given variable to the end of the parameters list.  The variable storage specified\n for the new parameter will be ignored if custom storage mode is not enabled.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"the variable to add as a new parameter.","type_short":"Variable"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this parameter which will be applied to the parameter symbol and \n overall function signature source.  If parameter has a null or default name a SourceType of DEFAULT\n will be applied to the parameter symbol.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"the Parameter object created.","type_short":"Parameter"}},{"javadoc":"Inserts the given variable into the parameters list.  The variable storage specified\n for the new parameter will be ignored if custom storage mode is not enabled.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param ordinal the position with the parameters to insert to.  This ordinal must factor in the\n presence of auto-parameters which may be injected dynamically based upon calling convention and\n return data type.  Parameters may not be inserted befor an auto-parameter.\n@param var the variable to add as a new parameter.\n@param source the source of this parameter which will be applied to the parameter symbol and \n overall function signature source.  If parameter has a null or default name a SourceType of DEFAULT\n will be applied to the parameter symbol.\n@return the Parameter object created.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if data type size is too large based upon storage constraints.\n@deprecated The use of this method is discouraged due to the potential injection of auto-parameters\n which are easily overlooked when considering parameter ordinal.  The function signature should generally be \n adjusted with a single call to {@link #updateFunction(String, Variable, List, FunctionUpdateType, boolean, SourceType)}","static":false,"name":"insertParameter","comment":"Inserts the given variable into the parameters list.  The variable storage specified\n for the new parameter will be ignored if custom storage mode is not enabled.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"int","name":"ordinal","comment":"the position with the parameters to insert to.  This ordinal must factor in the\n presence of auto-parameters which may be injected dynamically based upon calling convention and\n return data type.  Parameters may not be inserted befor an auto-parameter.","type_short":"int"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"the variable to add as a new parameter.","type_short":"Variable"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this parameter which will be applied to the parameter symbol and \n overall function signature source.  If parameter has a null or default name a SourceType of DEFAULT\n will be applied to the parameter symbol.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"the Parameter object created.","type_short":"Parameter"}},{"javadoc":"Replace all current parameters with the given list of parameters.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param params the new set of parameters for the function.\n@param updateType function update type\n@param force if true any conflicting local parameters will be removed\n@param source the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if a parameter data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if a parameter data type size is too large based upon storage constraints\n or conflicts with another variable.","static":false,"name":"replaceParameters","comment":"Replace all current parameters with the given list of parameters.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"java.util.List<? extends ghidra.program.model.listing.Variable>","name":"params","comment":"the new set of parameters for the function.","type_short":"List"},{"type_long":"ghidra.program.model.listing.Function.FunctionUpdateType","name":"updateType","comment":"function update type","type_short":"FunctionUpdateType"},{"type_long":"boolean","name":"force","comment":"if true any conflicting local parameters will be removed","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if a parameter data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Replace all current parameters with the given list of parameters.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param updateType function update type\n@param force if true any conflicting local parameters will be removed\n@param source the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.\n@param params the new parameters for the function.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if a parameter data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if a parameter data type size is too large based upon storage constraints\n or conflicts with another variable.","static":false,"name":"replaceParameters","comment":"Replace all current parameters with the given list of parameters.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"ghidra.program.model.listing.Function.FunctionUpdateType","name":"updateType","comment":"function update type","type_short":"FunctionUpdateType"},{"type_long":"boolean","name":"force","comment":"if true any conflicting local parameters will be removed","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.","type_short":"SourceType"},{"type_long":"ghidra.program.model.listing.Variable[]","name":"params","comment":"the new parameters for the function.","type_short":"ghidra.program.model.listing.Variable[]"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if a parameter data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Replace all current parameters with the given list of parameters and optionally change the calling convention\n and function return.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param callingConvention updated calling convention name or null if no change is required\n@param returnVar return variable or null if no change required\n@param params the new set of parameters for the function.\n@param updateType function update type\n@param force if true any conflicting local parameters will be removed\n@param source the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if a parameter data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if a parameter data type size is too large based upon storage constraints\n or conflicts with another variable.","static":false,"name":"updateFunction","comment":"Replace all current parameters with the given list of parameters and optionally change the calling convention\n and function return.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"java.lang.String","name":"callingConvention","comment":"updated calling convention name or null if no change is required","type_short":"String"},{"type_long":"ghidra.program.model.listing.Variable","name":"returnValue","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Function.FunctionUpdateType","name":"updateType","comment":"function update type","type_short":"FunctionUpdateType"},{"type_long":"boolean","name":"force","comment":"if true any conflicting local parameters will be removed","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.","type_short":"SourceType"},{"type_long":"ghidra.program.model.listing.Variable[]","name":"newParams","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if a parameter data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Replace all current parameters with the given list of parameters and optionally change the calling convention\n and function return.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param callingConvention updated calling convention name or null if no change is required\n@param returnVar return variable or null if no change required\n@param updateType function update type\n@param force if true any conflicting local parameters will be removed\n@param source the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.\n@param params the new parameters for the function (required).\n@throws DuplicateNameException if another variable(parameter or local) already\n exists in the function with that name.\n@throws InvalidInputException if a parameter data type is not a fixed length or variable name is invalid.\n@throws VariableSizeException if a parameter data type size is too large based upon storage constraints\n or conflicts with another variable.","static":false,"name":"updateFunction","comment":"Replace all current parameters with the given list of parameters and optionally change the calling convention\n and function return.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"java.lang.String","name":"callingConvention","comment":"updated calling convention name or null if no change is required","type_short":"String"},{"type_long":"ghidra.program.model.listing.Variable","name":"returnVar","comment":"return variable or null if no change required","type_short":"Variable"},{"type_long":"java.util.List<? extends ghidra.program.model.listing.Variable>","name":"newParams","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Function.FunctionUpdateType","name":"updateType","comment":"function update type","type_short":"FunctionUpdateType"},{"type_long":"boolean","name":"force","comment":"if true any conflicting local parameters will be removed","type_short":"boolean"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of these parameters which will be applied to the parameter symbols and \n overall function signature source.  If parameter names are null or a default name a SourceType of DEFAULT\n will be applied to the corresponding parameter symbol.","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another variable(parameter or local) already\n exists in the function with that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if a parameter data type is not a fixed length or variable name is invalid.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the specified parameter including an auto-param at the specified ordinal.\n@param ordinal the index of the parameter to return.\n@return parameter or null if ordinal is out of range","static":false,"name":"getParameter","comment":"Returns the specified parameter including an auto-param at the specified ordinal.","params":[{"type_long":"int","name":"ordinal","comment":"the index of the parameter to return.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"parameter or null if ordinal is out of range","type_short":"Parameter"}},{"javadoc":"Remove the specified parameter.  Auto-parameters may not be removed but must be accounted \n for in the specified ordinal.\n@param ordinal the index of the parameter to be removed.\n@deprecated The use of this method is discouraged.  The function signature should generally be \n adjusted with a single call to {@link #updateFunction(String, Variable, List, FunctionUpdateType, boolean, SourceType)}","static":false,"name":"removeParameter","comment":"Remove the specified parameter.  Auto-parameters may not be removed but must be accounted \n for in the specified ordinal.","params":[{"type_long":"int","name":"ordinal","comment":"the index of the parameter to be removed.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move the parameter which occupies the fromOrdinal position to the toOrdinal position.\n Parameters will be renumbered to reflect the new ordering.  Auto-parameters may not be \n moved but must be accounted for in the specified ordinals.\n@param fromOrdinal from ordinal position using the current numbering\n@param toOrdinal the final position of the specified parameter\n@returns parameter which was moved\n@deprecated The use of this method is discouraged.  The function signature should generally be \n adjusted with a single call to {@link #updateFunction(String, Variable, List, FunctionUpdateType, boolean, SourceType)}","static":false,"name":"moveParameter","comment":"Move the parameter which occupies the fromOrdinal position to the toOrdinal position.\n Parameters will be renumbered to reflect the new ordering.  Auto-parameters may not be \n moved but must be accounted for in the specified ordinals.","params":[{"type_long":"int","name":"fromOrdinal","comment":"from ordinal position using the current numbering","type_short":"int"},{"type_long":"int","name":"toOrdinal","comment":"the final position of the specified parameter","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"","type_short":"Parameter"}},{"javadoc":"Gets the total number of parameters for this function.  This number also includes any\n auto-parameters which may have been injected when dynamic parameter storage is used.\n@return the total number of parameters","static":false,"name":"getParameterCount","comment":"Gets the total number of parameters for this function.  This number also includes any\n auto-parameters which may have been injected when dynamic parameter storage is used.","params":[],"throws":[],"return":{"type_long":"int","comment":"the total number of parameters","type_short":"int"}},{"javadoc":"Gets the number of auto-parameters for this function also included in the total\n count provided by {@link #getParameterCount()}.  This number will always be 0 when\n custom parameter storage is used.\n@return the number of auto-parameters","static":false,"name":"getAutoParameterCount","comment":"Gets the number of auto-parameters for this function also included in the total\n count provided by #getParameterCount().  This number will always be 0 when\n custom parameter storage is used.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of auto-parameters","type_short":"int"}},{"javadoc":"Get all function parameters\n@return all function parameters","static":false,"name":"getParameters","comment":"Get all function parameters","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Parameter[]","comment":"all function parameters","type_short":"ghidra.program.model.listing.Parameter[]"}},{"javadoc":"Get all function parameters which satisfy the specified filter\n@param filter variable filter or null for all parameters to be returned\n@return all function parameters which satisfy the specified filter","static":false,"name":"getParameters","comment":"Get all function parameters which satisfy the specified filter","params":[{"type_long":"ghidra.program.model.listing.VariableFilter","name":"filter","comment":"variable filter or null for all parameters to be returned","type_short":"VariableFilter"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Parameter[]","comment":"all function parameters which satisfy the specified filter","type_short":"ghidra.program.model.listing.Parameter[]"}},{"javadoc":"Get all local function variables\n@return all local function variables","static":false,"name":"getLocalVariables","comment":"Get all local function variables","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"all local function variables","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all local function variables which satisfy the specified filter\n@param filter variable filter or null for all local variables to be returned\n@return all function variables which satisfy the specified filter","static":false,"name":"getLocalVariables","comment":"Get all local function variables which satisfy the specified filter","params":[{"type_long":"ghidra.program.model.listing.VariableFilter","name":"filter","comment":"variable filter or null for all local variables to be returned","type_short":"VariableFilter"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"all function variables which satisfy the specified filter","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all function variables which satisfy the specified filter\n@param filter variable filter or null for all variables to be returned\n@return all function variables which satisfy the specified filter","static":false,"name":"getVariables","comment":"Get all function variables which satisfy the specified filter","params":[{"type_long":"ghidra.program.model.listing.VariableFilter","name":"filter","comment":"variable filter or null for all variables to be returned","type_short":"VariableFilter"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"all function variables which satisfy the specified filter","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Returns an array of all local and parameter variables\n@return ","static":false,"name":"getAllVariables","comment":"Returns an array of all local and parameter variables","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Adds a local variable to the function.\n The {@link VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean)} \n method may be used to check and remove conflicting variables which already exist in the function.\n@param var the variable to add.\n@param source the source of this local variable\n@return the Variable added to the program.\n@throws DuplicateNameException if another local variable or parameter already\n has that name.","static":false,"name":"addLocalVariable","comment":"Adds a local variable to the function.\n The VariableUtilities#checkVariableConflict(Function, Variable, VariableStorage, boolean) \n method may be used to check and remove conflicting variables which already exist in the function.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"the variable to add.","type_short":"Variable"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this local variable","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"if another local variable or parameter already\n has that name.","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"the Variable added to the program.","type_short":"Variable"}},{"javadoc":"Removes the given variable from the function.\n@param var the variable to remove.","static":false,"name":"removeVariable","comment":"Removes the given variable from the function.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"the variable to remove.","type_short":"Variable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the new body for this function. The entry point must be contained\n in the new body.\n@param newBody address set to use as the body of this function\n@throws OverlappingFunctionException if the address set overlaps that\n of another function","static":false,"name":"setBody","comment":"Set the new body for this function. The entry point must be contained\n in the new body.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"newBody","comment":"address set to use as the body of this function","type_short":"AddressSetView"}],"throws":[{"type_long":"ghidra.program.database.function.OverlappingFunctionException","comment":"if the address set overlaps that\n of another function","type_short":"OverlappingFunctionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this function has a variable argument list (VarArgs).","static":false,"name":"hasVarArgs","comment":"Returns true if this function has a variable argument list (VarArgs).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Set whether parameters can be passed as a VarArg (variable argument list).\n@param hasVarArgs true if this function has a variable argument list (ie printf(fmt, ...)).","static":false,"name":"setVarArgs","comment":"Set whether parameters can be passed as a VarArg (variable argument list).","params":[{"type_long":"boolean","name":"hasVarArgs","comment":"true if this function has a variable argument list (ie printf(fmt, ...)).","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if this is an inline function.","static":false,"name":"isInline","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is an inline function.","type_short":"boolean"}},{"javadoc":"Sets whether or not this function is inline.\n@param isInline true if this is an inline function.","static":false,"name":"setInline","comment":"Sets whether or not this function is inline.","params":[{"type_long":"boolean","name":"isInline","comment":"true if this is an inline function.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if this function does not return.","static":false,"name":"hasNoReturn","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function does not return.","type_short":"boolean"}},{"javadoc":"Set whether or not this function has a return.\n@param hasNoReturn true if this function does not return.","static":false,"name":"setNoReturn","comment":"Set whether or not this function has a return.","params":[{"type_long":"boolean","name":"hasNoReturn","comment":"true if this function does not return.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if function parameters utilize custom variable storage.","static":false,"name":"hasCustomVariableStorage","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if function parameters utilize custom variable storage.","type_short":"boolean"}},{"javadoc":"Set whether or not this function uses custom variable storage\n@param hasCustomVariableStorage","static":false,"name":"setCustomVariableStorage","comment":"Set whether or not this function uses custom variable storage","params":[{"type_long":"boolean","name":"hasCustomVariableStorage","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the calling convention prototype model for this function.\n@return the prototype model of the function's current calling convention or null.","static":false,"name":"getCallingConvention","comment":"Gets the calling convention prototype model for this function.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.PrototypeModel","comment":"the prototype model of the function's current calling convention or null.","type_short":"PrototypeModel"}},{"javadoc":"Gets the calling convention's name for this function.\n@return the name of the calling convention \n or Function.DEFAULT_CALLING_CONVENTION_STRING \n (i.e. \"default\", if the calling convention has been set to the default for this function)\n or Function.UNKNOWN_CALLING_CONVENTION_STRING \n (i.e. \"unknown\", if no calling convention is specified for this function).","static":false,"name":"getCallingConventionName","comment":"Gets the calling convention's name for this function.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the calling convention \n or Function.DEFAULT_CALLING_CONVENTION_STRING \n (i.e. \"default\", if the calling convention has been set to the default for this function)\n or Function.UNKNOWN_CALLING_CONVENTION_STRING \n (i.e. \"unknown\", if no calling convention is specified for this function).","type_short":"String"}},{"javadoc":"Gets the name of the default calling convention.\n <br>Note: The name in the PrototypeModel of the default calling convention may be null.\n@return the name of the default calling convention.","static":false,"name":"getDefaultCallingConventionName","comment":"Gets the name of the default calling convention.\n Note: The name in the PrototypeModel of the default calling convention may be null.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the default calling convention.","type_short":"String"}},{"javadoc":"Sets the calling convention for this function to the named calling convention.\n@param name the name of the calling convention. \"unknown\" and \"default\" are reserved names\n that can also be used here. \n <br>Null or Function.UNKNOWN_CALLING_CONVENTION_STRING sets this function to not have a \n calling convention (i.e. unknown).\n <br>Function.DEFAULT_CALLING_CONVENTION_STRING sets this function to use the default calling \n convention. (i.e. default)\n@throws InvalidInputException if the specified name is not a recognized calling convention name.","static":false,"name":"setCallingConvention","comment":"Sets the calling convention for this function to the named calling convention.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the calling convention. \"unknown\" and \"default\" are reserved names\n that can also be used here. \n Null or Function.UNKNOWN_CALLING_CONVENTION_STRING sets this function to not have a \n calling convention (i.e. unknown).\n Function.DEFAULT_CALLING_CONVENTION_STRING sets this function to use the default calling \n convention. (i.e. default)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if the specified name is not a recognized calling convention name.","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if this function is a Thunk and has a referenced Thunked Function.\n@see #getThunkedFunction(boolean)","static":false,"name":"isThunk","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function is a Thunk and has a referenced Thunked Function.","type_short":"boolean"}},{"javadoc":"If this function is a Thunk, this method returns the referenced function.\n@param recursive if true and the thunked-function is a thunk itself, the returned \n thunked-function will be the final thunked-function which will never be a thunk.\n@return function referenced by this Thunk Function or null if this is not a Thunk\n function","static":false,"name":"getThunkedFunction","comment":"If this function is a Thunk, this method returns the referenced function.","params":[{"type_long":"boolean","name":"recursive","comment":"if true and the thunked-function is a thunk itself, the returned \n thunked-function will be the final thunked-function which will never be a thunk.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"function referenced by this Thunk Function or null if this is not a Thunk\n function","type_short":"Function"}},{"javadoc":"If this function is \"Thunked\", an array of Thunk Function entry points is returned\n@return associated thunk function entry points or null if this is not a \"Thunked\" function.","static":false,"name":"getFunctionThunkAddresses","comment":"If this function is \"Thunked\", an array of Thunk Function entry points is returned","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address[]","comment":"associated thunk function entry points or null if this is not a \"Thunked\" function.","type_short":"ghidra.program.model.address.Address[]"}},{"javadoc":"Set the currently Thunked Function or null to convert to a normal function\n@param thunkedFunction the thunked function or null to convert this thunked function to a \n normal function.\n@throws IllegalArgumentException if an attempt is made to thunk a function or another\n thunk which would result in a loop back to this function or if this function is an external\n function, or specified function is from a different program instance.","static":false,"name":"setThunkedFunction","comment":"Set the currently Thunked Function or null to convert to a normal function","params":[{"type_long":"ghidra.program.model.listing.Function","name":"thunkedFunction","comment":"the thunked function or null to convert this thunked function to a \n normal function.","type_short":"Function"}],"throws":[{"type_long":"java.lang.IllegalArgumentException","comment":"if an attempt is made to thunk a function or another\n thunk which would result in a loop back to this function or if this function is an external\n function, or specified function is from a different program instance.","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if this function is external (i.e., entry point is in EXTERNAL address space)","static":false,"name":"isExternal","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function is external (i.e., entry point is in EXTERNAL address space)","type_short":"boolean"}},{"javadoc":"@return if this is an external function return the associated external location object.","static":false,"name":"getExternalLocation","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ExternalLocation","comment":"if this is an external function return the associated external location object.","type_short":"ExternalLocation"}},{"javadoc":"Returns a set of functions that call this function.\n@param monitor The monitor that is used to report progress and allow for canceling of \n                the search.  May be null.\n@return a set of functions that call this function.","static":false,"name":"getCallingFunctions","comment":"Returns a set of functions that call this function.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"The monitor that is used to report progress and allow for canceling of \n                the search.  May be null.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.listing.Function>","comment":"a set of functions that call this function.","type_short":"Set"}},{"javadoc":"Returns a set of functions that this function calls.\n@param monitor The monitor that is used to report progress and allow for canceling of \n                the search.  May be null.\n@return a set of functions that this function calls.","static":false,"name":"getCalledFunctions","comment":"Returns a set of functions that this function calls.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"The monitor that is used to report progress and allow for canceling of \n                the search.  May be null.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.listing.Function>","comment":"a set of functions that this function calls.","type_short":"Set"}},{"javadoc":"Changes all local user-defined labels for this function to global symbols. If a\n global code symbol already exists with the same name at the symbols address the\n symbol will be removed.","static":false,"name":"promoteLocalUserLabelsToGlobal","comment":"Changes all local user-defined labels for this function to global symbols. If a\n global code symbol already exists with the same name at the symbols address the\n symbol will be removed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"Function","comment":"Interface to define methods available on a function. Functions\n have a single entry point.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_PARAM_PREFIX","comment":"","type_short":"String","constant_value":"\"param_\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"THIS_PARAM_NAME","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"RETURN_PTR_PARAM_NAME","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_PARAM_PREFIX_LEN","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_LOCAL_PREFIX","comment":"","type_short":"String","constant_value":"\"local_\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_LOCAL_RESERVED_PREFIX","comment":"","type_short":"String","constant_value":"\"local_res\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_LOCAL_TEMP_PREFIX","comment":"","type_short":"String","constant_value":"\"temp_\""},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_LOCAL_PREFIX_LEN","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"UNKNOWN_CALLING_CONVENTION_STRING","comment":"","type_short":"String","constant_value":"\"unknown\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_CALLING_CONVENTION_STRING","comment":"","type_short":"String","constant_value":"\"default\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"INLINE","comment":"","type_short":"String","constant_value":"\"inline\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NORETURN","comment":"","type_short":"String","constant_value":"\"noreturn\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"THUNK","comment":"","type_short":"String","constant_value":"\"thunk\""},{"type_long":"int","javadoc":"Default Stack depth for a function.","static":true,"name":"UNKNOWN_STACK_DEPTH_CHANGE","comment":"Default Stack depth for a function.","type_short":"int","constant_value":"2147483647"},{"type_long":"int","javadoc":"","static":true,"name":"INVALID_STACK_DEPTH_CHANGE","comment":"","type_short":"int","constant_value":"2147483646"}]}
