{"implements":["java.lang.Comparable"],"javadoc":"The AddressSpace class is used to represent a unique context for addresses.  Programs can\n have multiple address spaces and address 0 in one space is not the same as address 0 in\n another space.","static":false,"methods":[{"javadoc":"Returns the name of this address space.","static":false,"name":"getName","comment":"Returns the name of this address space.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the ID for this space\n@return space ID","static":false,"name":"getBaseSpaceID","comment":"Get the ID for this space","params":[],"throws":[],"return":{"type_long":"int","comment":"space ID","type_short":"int"}},{"javadoc":"","static":false,"name":"getUniqueSpaceID","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of bits that are used to form the address.  Thus\n the maximum offset for this address space will be 2^size-1.","static":false,"name":"getSize","comment":"Returns the number of bits that are used to form the address.  Thus\n the maximum offset for this address space will be 2^size-1.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of data bytes which correspond to each addressable \n location within this space (i.e., word-size in bytes).\n NOTE: When transforming a byte-offset to an addressable word\n offset the method {@link #getAddressableWordOffset(long)} should\n be used instead of simple division.  When transforming an addressable word-offset\n to a byte-offset simple multiplication may be used.  Neither of these\n transformations perform address space bounds checking.\n <pre>\n   byteOffset = wordOffset * addressUnitSize\n   wordOffset = getAddressableWordOffset(byteOffset)\n <\/pre>","static":false,"name":"getAddressableUnitSize","comment":"Returns the number of data bytes which correspond to each addressable \n location within this space (i.e., word-size in bytes).\n NOTE: When transforming a byte-offset to an addressable word\n offset the method #getAddressableWordOffset(long) should\n be used instead of simple division.  When transforming an addressable word-offset\n to a byte-offset simple multiplication may be used.  Neither of these\n transformations perform address space bounds checking.\n \n   byteOffset = wordOffset * addressUnitSize\n   wordOffset = getAddressableWordOffset(byteOffset)\n ","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the addressable memory word offset which corresponds to the specified \n memory byte offset.  This method handles some of the issues of unsigned \n math when stuck using Java's signed long primitives. No space bounds\n checking is performed.\n@param byteOffset memory byte offset\n@return addressable memory word offset","static":false,"name":"getAddressableWordOffset","comment":"Get the addressable memory word offset which corresponds to the specified \n memory byte offset.  This method handles some of the issues of unsigned \n math when stuck using Java's signed long primitives. No space bounds\n checking is performed.","params":[{"type_long":"long","name":"byteOffset","comment":"memory byte offset","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"addressable memory word offset","type_short":"long"}},{"javadoc":"Returns the absolute size of a pointer into this space (in bytes).\n@see Program#getDefaultPointerSize() for a user adjustable pointer size which is derived from the\n CompilerSpec store pointer size.","static":false,"name":"getPointerSize","comment":"Returns the absolute size of a pointer into this space (in bytes).","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the type of this address space","static":false,"name":"getType","comment":"Returns the type of this address space","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the unique index for this address space","static":false,"name":"getUnique","comment":"Returns the unique index for this address space","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Parses the String into an address.\n@param addrString the string to parse as an address.\n@return an address if the string parsed successfully or null if the\n AddressSpace specified in the addrString is not this space.\n@throws AddressFormatException if the string cannot be parsed or the\n parsed offset is larger than the size for this space.","static":false,"name":"getAddress","comment":"Parses the String into an address.","params":[{"type_long":"java.lang.String","name":"addrString","comment":"the string to parse as an address.","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"if the string cannot be parsed or the\n parsed offset is larger than the size for this space.","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"an address if the string parsed successfully or null if the\n AddressSpace specified in the addrString is not this space.","type_short":"Address"}},{"javadoc":"Parses the String into an address.\n@param addrString the string to parse as an address.\n@param caseSensitive specifies if addressSpace names must match case.\n@return an address if the string parsed successfully or null if the\n AddressSpace specified in the addrString is not this space.\n@throws AddressFormatException if the string cannot be parsed or the\n parsed offset is larger than the size for this space.","static":false,"name":"getAddress","comment":"Parses the String into an address.","params":[{"type_long":"java.lang.String","name":"addrString","comment":"the string to parse as an address.","type_short":"String"},{"type_long":"boolean","name":"caseSensitive","comment":"specifies if addressSpace names must match case.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.address.AddressFormatException","comment":"if the string cannot be parsed or the\n parsed offset is larger than the size for this space.","type_short":"AddressFormatException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"an address if the string parsed successfully or null if the\n AddressSpace specified in the addrString is not this space.","type_short":"Address"}},{"javadoc":"Returns a new address in this space with the given byte offset.\n NOTE: This method is the same as invoking getAddress(long byteOffset, false).\n@param byteOffset the byte offset for the new address.\n@return address with given byte offset\n@throws AddressOutOfBoundsException if the offset is less than 0 or greater\n than the max offset allowed for this space.","static":false,"name":"getAddress","comment":"Returns a new address in this space with the given byte offset.\n NOTE: This method is the same as invoking getAddress(long byteOffset, false).","params":[{"type_long":"long","name":"byteOffset","comment":"the byte offset for the new address.","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOutOfBoundsException","comment":"if the offset is less than 0 or greater\n than the max offset allowed for this space.","type_short":"AddressOutOfBoundsException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"address with given byte offset","type_short":"Address"}},{"javadoc":"Returns a new address in this space with the given offset.  \n NOTE: for those spaces with an addressable unit size other than 1, the address\n returned may not correspond to an addressable unit\/word boundary if a byte-offset \n is specified.\n@param offset the offset for the new address.\n@param isAddressableWordOffset if true the specified offset is an addressable unit\/word offset,\n otherwise offset is a byte offset.  See {@link #getAddressableUnitSize()}\n to understand the distinction (i.e., wordOffset = byteOffset * addressableUnitSize).\n@return address with given offset\n@throws AddressOutOfBoundsException if the offset is less than 0 or greater\n than the max offset allowed for this space.","static":false,"name":"getAddress","comment":"Returns a new address in this space with the given offset.  \n NOTE: for those spaces with an addressable unit size other than 1, the address\n returned may not correspond to an addressable unit\/word boundary if a byte-offset \n is specified.","params":[{"type_long":"long","name":"offset","comment":"the offset for the new address.","type_short":"long"},{"type_long":"boolean","name":"isAddressableWordOffset","comment":"if true the specified offset is an addressable unit\/word offset,\n otherwise offset is a byte offset.  See #getAddressableUnitSize()\n to understand the distinction (i.e., wordOffset = byteOffset * addressableUnitSize).","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOutOfBoundsException","comment":"if the offset is less than 0 or greater\n than the max offset allowed for this space.","type_short":"AddressOutOfBoundsException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"address with given offset","type_short":"Address"}},{"javadoc":"Returns a new address in this space with the given offset.  The specified \n offset will be truncated within the space and will not throw an exception.\n NOTE: for those spaces with an addressable unit size other than 1, the address\n returned may not correspond to a word boundary (addressable unit) if a byte-offset \n is specified.\n@param offset the offset for the new address.\n@param isAddressableWordOffset if true the specified offset is an addressable unit\/word offset,\n otherwise offset is a byte offset.  See {@link #getAddressableUnitSize()}\n to understand the distinction (i.e., wordOffset = byteOffset * addressableUnitSize).\n@return address with given byte offset truncated to the physical space size","static":false,"name":"getTruncatedAddress","comment":"Returns a new address in this space with the given offset.  The specified \n offset will be truncated within the space and will not throw an exception.\n NOTE: for those spaces with an addressable unit size other than 1, the address\n returned may not correspond to a word boundary (addressable unit) if a byte-offset \n is specified.","params":[{"type_long":"long","name":"offset","comment":"the offset for the new address.","type_short":"long"},{"type_long":"boolean","name":"isAddressableWordOffset","comment":"if true the specified offset is an addressable unit\/word offset,\n otherwise offset is a byte offset.  See #getAddressableUnitSize()\n to understand the distinction (i.e., wordOffset = byteOffset * addressableUnitSize).","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"address with given byte offset truncated to the physical space size","type_short":"Address"}},{"javadoc":"Get a byte address from this address space.  Don't allow overlay spaces\n to remap the address into a base space when the address is not\n contained in the bounds of the overlay region.\n@param byteOffset the byte offset for the new address.\n@return an address if the offset is valid.\n@throws AddressOutOfBoundsException if the offset is less than 0 or greater\n than the max offset allowed for this space.","static":false,"name":"getAddressInThisSpaceOnly","comment":"Get a byte address from this address space.  Don't allow overlay spaces\n to remap the address into a base space when the address is not\n contained in the bounds of the overlay region.","params":[{"type_long":"long","name":"byteOffset","comment":"the byte offset for the new address.","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOutOfBoundsException","comment":"if the offset is less than 0 or greater\n than the max offset allowed for this space.","type_short":"AddressOutOfBoundsException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"an address if the offset is valid.","type_short":"Address"}},{"javadoc":"Truncate the specified byte offset within this space to produce a valid offset.\n@param byteOffset any byte offset\n@return truncated byte offset","static":false,"name":"truncateOffset","comment":"Truncate the specified byte offset within this space to produce a valid offset.","params":[{"type_long":"long","name":"byteOffset","comment":"any byte offset","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"truncated byte offset","type_short":"long"}},{"javadoc":"Truncate the specified addressable unit\/word offset within this space to produce a \n valid offset.\n@param wordOffset any addressable unit\/word offset\n@return truncated word offset","static":false,"name":"truncateAddressableWordOffset","comment":"Truncate the specified addressable unit\/word offset within this space to produce a \n valid offset.","params":[{"type_long":"long","name":"wordOffset","comment":"any addressable unit\/word offset","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"truncated word offset","type_short":"long"}},{"javadoc":"Get an address that is relative to this address space.\n If this is an overlay space and the address falls within\n this space, return an address based in this space.\n@param addr address possibly falling within this overlay space.\n@return an address relative to this overlay","static":false,"name":"getOverlayAddress","comment":"Get an address that is relative to this address space.\n If this is an overlay space and the address falls within\n this space, return an address based in this space.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address possibly falling within this overlay space.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"an address relative to this overlay","type_short":"Address"}},{"javadoc":"Calculates the displacement between addr1 and addr2 (addr1 - addr2)\n@param addr1 the address to subtract from.\n@param addr2 the address to subtract.\n@return the difference. (<code>addr1.offset - addr2.offset<\/code>).\n@throws IllegalArgumentException if the two addresses are not in the\n same address space.","static":false,"name":"subtract","comment":"Calculates the displacement between addr1 and addr2 (addr1 - addr2)","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"the address to subtract from.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"the address to subtract.","type_short":"Address"}],"throws":[],"return":{"type_long":"long","comment":"the difference. (addr1.offset - addr2.offset).","type_short":"long"}},{"javadoc":"Creates a new address by subtracting displacement from addr's offset.\n@param addr the original address. The new address will wrap in a manner\n that depends on the address space. For a generic address space this will\n wrap at the extents of the address space. For a segmented address space\n it will wrap at the extents of the segment.\n@param displacement the displacement to subtract.\n@return a new address created by subtracting the displacement from addr.offset.","static":false,"name":"subtractWrap","comment":"Creates a new address by subtracting displacement from addr's offset.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the original address. The new address will wrap in a manner\n that depends on the address space. For a generic address space this will\n wrap at the extents of the address space. For a segmented address space\n it will wrap at the extents of the segment.","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to subtract.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"a new address created by subtracting the displacement from addr.offset.","type_short":"Address"}},{"javadoc":"Creates a new address by subtracting the displacement from the given \n address. If the offset is greater than the max offset of the address space, the high\n order bits are masked off, making the address wrap.  For non-segmented addresses this\n will be the same as subtractWrap().  For segmented addresses, the address will wrap when\n the 20 bit (oxfffff) offset is exceeded, as opposed to when the segment offset is exceeded.\n@param addr the address to subtract the displacement from.\n@param displacement the displacement to subtract.\n@return The new Address formed by subtracting the displacement from the specified address.","static":false,"name":"subtractWrapSpace","comment":"Creates a new address by subtracting the displacement from the given \n address. If the offset is greater than the max offset of the address space, the high\n order bits are masked off, making the address wrap.  For non-segmented addresses this\n will be the same as subtractWrap().  For segmented addresses, the address will wrap when\n the 20 bit (oxfffff) offset is exceeded, as opposed to when the segment offset is exceeded.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to subtract the displacement from.","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to subtract.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The new Address formed by subtracting the displacement from the specified address.","type_short":"Address"}},{"javadoc":"Creates a new address by subtracting displacement from addr's offset.\n The new offset will NOT wrap!\n@param addr the original address\n@param displacement the displacement to subtract.\n@return The new address created by subtracting displacement from addr.offset.\n@throws AddressOverflowException if the subtraction would cause a wrap,","static":false,"name":"subtractNoWrap","comment":"Creates a new address by subtracting displacement from addr's offset.\n The new offset will NOT wrap!","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the original address","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to subtract.","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if the subtraction would cause a wrap,","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The new address created by subtracting displacement from addr.offset.","type_short":"Address"}},{"javadoc":"Creates a new address (possibly in a new space) by subtracting the given \n displacement from the given address.\n@param addr original address being subtracted from\n@param displacement amount to subtract\n@return the new address\n@throws AddressOutOfBoundsException if the result does not correspond to any address.","static":false,"name":"subtract","comment":"Creates a new address (possibly in a new space) by subtracting the given \n displacement from the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"original address being subtracted from","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"amount to subtract","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the new address","type_short":"Address"}},{"javadoc":"Creates a new address by adding displacement to the given address. The\n resulting address may wrap. The new address will wrap in a manner that\n depends on the address space. For a generic address space this will wrap\n at the extents of the address space. For a segmented address space it\n will wrap at the extents of the segment.\n@param addr the original address.\n@param displacement the displacement to add.\n@return the new address created by adding displacement to addr.offset.","static":false,"name":"addWrap","comment":"Creates a new address by adding displacement to the given address. The\n resulting address may wrap. The new address will wrap in a manner that\n depends on the address space. For a generic address space this will wrap\n at the extents of the address space. For a segmented address space it\n will wrap at the extents of the segment.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the original address.","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to add.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the new address created by adding displacement to addr.offset.","type_short":"Address"}},{"javadoc":"Creates a new address by adding the displacement to the given \n address. If the offset is greater than the max offset of the address space, the high\n order bits are masked off, making the address wrap.  For non-segmented addresses this\n will be the same as addWrap().  For segmented addresses, the address will wrap when\n the 20 bit (oxfffff) offset is exceeded, as opposed to when the segment offset is exceeded.\n@param addr the address to add the displacement to.\n@param displacement the displacement to add.\n@return The new Address formed by adding the displacement to the specified addresst.","static":false,"name":"addWrapSpace","comment":"Creates a new address by adding the displacement to the given \n address. If the offset is greater than the max offset of the address space, the high\n order bits are masked off, making the address wrap.  For non-segmented addresses this\n will be the same as addWrap().  For segmented addresses, the address will wrap when\n the 20 bit (oxfffff) offset is exceeded, as opposed to when the segment offset is exceeded.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address to add the displacement to.","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to add.","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The new Address formed by adding the displacement to the specified addresst.","type_short":"Address"}},{"javadoc":"Creates a new address by adding displacement to the given address. The\n new address will NOT wrap!\n@param addr the original address.\n@param displacement the displacement to add.\n@return The new address created by adding displacement to addr.offset.\n@throws AddressOverflowException if the addition would cause a wrap,","static":false,"name":"addNoWrap","comment":"Creates a new address by adding displacement to the given address. The\n new address will NOT wrap!","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the original address.","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"the displacement to add.","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if the addition would cause a wrap,","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The new address created by adding displacement to addr.offset.","type_short":"Address"}},{"javadoc":"Creates a new address by adding displacement to the given address. The\n new address will NOT wrap!\n@param addr the original address.\n@param displacement the displacement to add.\n@return The new address created by adding displacement to addr.offset.\n@throws AddressOverflowException if the addition would cause a wrap,","static":false,"name":"addNoWrap","comment":"Creates a new address by adding displacement to the given address. The\n new address will NOT wrap!","params":[{"type_long":"ghidra.program.model.address.GenericAddress","name":"addr","comment":"the original address.","type_short":"GenericAddress"},{"type_long":"java.math.BigInteger","name":"displacement","comment":"the displacement to add.","type_short":"BigInteger"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if the addition would cause a wrap,","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The new address created by adding displacement to addr.offset.","type_short":"Address"}},{"javadoc":"Creates a new address (possibly in a new space) by adding the given \n displacement from the given address.\n@param addr original address being subtracted from\n@param displacement amount to subtract\n@return the new address\n@throws AddressOutOfBoundsException if the result does not correspond to any address.","static":false,"name":"add","comment":"Creates a new address (possibly in a new space) by adding the given \n displacement from the given address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"original address being subtracted from","type_short":"Address"},{"type_long":"long","name":"displacement","comment":"amount to subtract","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOutOfBoundsException","comment":"if the result does not correspond to any address.","type_short":"AddressOutOfBoundsException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the new address","type_short":"Address"}},{"javadoc":"Check the specified address range for validity within this space.\n Segmented spaces will restrict a range to a single segment.\n@param byteOffset\n@param length\n@return true if range is valid for this space","static":false,"name":"isValidRange","comment":"Check the specified address range for validity within this space.\n Segmented spaces will restrict a range to a single segment.","params":[{"type_long":"long","name":"byteOffset","comment":"","type_short":"long"},{"type_long":"long","name":"length","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"true if range is valid for this space","type_short":"boolean"}},{"javadoc":"Tests whether addr2 immediately follows addr1.\n@param addr1 the first address.\n@param addr2 the second address.","static":false,"name":"isSuccessor","comment":"Tests whether addr2 immediately follows addr1.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"the first address.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"the second address.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the max address allowed for this AddressSpace.","static":false,"name":"getMaxAddress","comment":"Get the max address allowed for this AddressSpace.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the min address allowed for this AddressSpace","static":false,"name":"getMinAddress","comment":"Get the min address allowed for this AddressSpace","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns the physical space associated with an address space.  There\n is always exactly one physical space associated with an address\n space (it may be its own physical space).\n@return the associated physical space.","static":false,"name":"getPhysicalSpace","comment":"Returns the physical space associated with an address space.  There\n is always exactly one physical space associated with an address\n space (it may be its own physical space).","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"the associated physical space.","type_short":"AddressSpace"}},{"javadoc":"Tests if the offset if valid. If the space is signed, then it sign extends\n the offset.\n@param offset the offset to test and\/or sign extend\n@return the valid positive offset or appropriate sign extended offset.\n@throws AddressOutOfBoundsException if offset is invalid","static":false,"name":"makeValidOffset","comment":"Tests if the offset if valid. If the space is signed, then it sign extends\n the offset.","params":[{"type_long":"long","name":"offset","comment":"the offset to test and\/or sign extend","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOutOfBoundsException","comment":"if offset is invalid","type_short":"AddressOutOfBoundsException"}],"return":{"type_long":"long","comment":"the valid positive offset or appropriate sign extended offset.","type_short":"long"}},{"javadoc":"Returns true if this space represents a memory address.  NOTE: It is important to \n make the distinction between Loaded and Non-Loaded memory addresses.  Program importers\n may create memory blocks associated with Non-Loaded file content which are not associated\n with processor defined memory regions.  While Loaded file content is placed into\n memory blocks which are associated with specific memory address spaces defined\n by the processor language specification.\n@see #isLoadedMemorySpace()\n@see #isNonLoadedMemorySpace()","static":false,"name":"isMemorySpace","comment":"Returns true if this space represents a memory address.  NOTE: It is important to \n make the distinction between Loaded and Non-Loaded memory addresses.  Program importers\n may create memory blocks associated with Non-Loaded file content which are not associated\n with processor defined memory regions.  While Loaded file content is placed into\n memory blocks which are associated with specific memory address spaces defined\n by the processor language specification.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents represents a Loaded Memory\n region (e.g., processor RAM).","static":false,"name":"isLoadedMemorySpace","comment":"Returns true if this space represents represents a Loaded Memory\n region (e.g., processor RAM).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents represents a Non-Loaded storage region\n for retaining non-loaded file data (e.g., OTHER)","static":false,"name":"isNonLoadedMemorySpace","comment":"Returns true if this space represents represents a Non-Loaded storage region\n for retaining non-loaded file data (e.g., OTHER)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents a register location","static":false,"name":"isRegisterSpace","comment":"Returns true if this space represents a register location","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents a variable location","static":false,"name":"isVariableSpace","comment":"Returns true if this space represents a variable location","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents a stack location","static":false,"name":"isStackSpace","comment":"Returns true if this space represents a stack location","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space represents a location in the HASH space.","static":false,"name":"isHashSpace","comment":"Returns true if this space represents a location in the HASH space.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space in the EXTERNAL_SPACE","static":false,"name":"isExternalSpace","comment":"Returns true if this space in the EXTERNAL_SPACE","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space in the unique space","static":false,"name":"isUniqueSpace","comment":"Returns true if this space in the unique space","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space in the constant space","static":false,"name":"isConstantSpace","comment":"Returns true if this space in the constant space","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this space has registers that are mapped into it.\n This means that registers could actually have pointers to them.\n@return true if this space has any registers mapped in it.","static":false,"name":"hasMappedRegisters","comment":"Returns true if this space has registers that are mapped into it.\n This means that registers could actually have pointers to them.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this space has any registers mapped in it.","type_short":"boolean"}},{"javadoc":"Returns true if the address should display its addressSpace name.","static":false,"name":"showSpaceName","comment":"Returns true if the address should display its addressSpace name.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this addressSpace is an OverlayAddressSpace","static":false,"name":"isOverlaySpace","comment":"Returns true if this addressSpace is an OverlayAddressSpace","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if space uses signed offset","static":false,"name":"hasSignedOffset","comment":"Returns true if space uses signed offset","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"AddressSpace","comment":"The AddressSpace class is used to represent a unique context for addresses.  Programs can\n have multiple address spaces and address 0 in one space is not the same as address 0 in\n another space.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"TYPE_CONSTANT","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_RAM","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_CODE","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_UNIQUE","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_REGISTER","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_STACK","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_JOIN","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_OTHER","comment":"","type_short":"int","constant_value":"7"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_SYMBOL","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_EXTERNAL","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_VARIABLE","comment":"","type_short":"int","constant_value":"11"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_DELETED","comment":"","type_short":"int","constant_value":"13"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_UNKNOWN","comment":"","type_short":"int","constant_value":"14"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_NONE","comment":"","type_short":"int","constant_value":"15"},{"type_long":"int","javadoc":"@see #TYPE_CONSTANT","static":true,"name":"TYPE_IPTR_CONSTANT","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"@see #TYPE_UNIQUE","static":true,"name":"TYPE_IPTR_INTERNAL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"@see #TYPE_STACK","static":true,"name":"TYPE_IPTR_SPACEBASE","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE_MASK","comment":"","type_short":"int","constant_value":"112"},{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE_SHIFT","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"ID_TYPE_MASK","comment":"","type_short":"int","constant_value":"15"},{"type_long":"int","javadoc":"","static":true,"name":"ID_UNIQUE_SHIFT","comment":"","type_short":"int","constant_value":"7"},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"The <code>OTHER_SPACE<\/code> is used to store data from the original program file that doesn't\n get loaded into the final memory image and for user-defined spaces.","static":true,"name":"OTHER_SPACE","comment":"The OTHER_SPACE is used to store data from the original program file that doesn't\n get loaded into the final memory image and for user-defined spaces.","type_short":"AddressSpace","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"The <code>EXTERNAL_SPACE<\/code> is used to contain all external locations (i.e., data and functions) \n defined within a given library namespace.  All external locations within a program\n are given a unique offset within the EXTERNAL space.","static":true,"name":"EXTERNAL_SPACE","comment":"The EXTERNAL_SPACE is used to contain all external locations (i.e., data and functions) \n defined within a given library namespace.  All external locations within a program\n are given a unique offset within the EXTERNAL space.","type_short":"AddressSpace","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"The <code>VARIABLE_SPACE<\/code> is used to contain all variables and parameters \n defined within a given namespace (i.e., function).  All variables within a program\n are given a unique offset within the VARIABLE space.","static":true,"name":"VARIABLE_SPACE","comment":"The VARIABLE_SPACE is used to contain all variables and parameters \n defined within a given namespace (i.e., function).  All variables within a program\n are given a unique offset within the VARIABLE space.","type_short":"AddressSpace","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"The <code>HASH_SPACE<\/code> provides a 60-bit space for encoding of unique hashcodes.","static":true,"name":"HASH_SPACE","comment":"The HASH_SPACE provides a 60-bit space for encoding of unique hashcodes.","type_short":"AddressSpace","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"A language may only define a single REGISTER space.  If one is not defined, this \n DEFAULT_REGISTER_SPACE definition will be used.","static":true,"name":"DEFAULT_REGISTER_SPACE","comment":"A language may only define a single REGISTER space.  If one is not defined, this \n DEFAULT_REGISTER_SPACE definition will be used.","type_short":"AddressSpace","constant_value":null}]}
