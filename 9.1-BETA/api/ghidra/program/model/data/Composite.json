{"implements":["ghidra.program.model.data.DataType"],"javadoc":"Interface for common methods in Structure and Union","static":false,"methods":[{"javadoc":"Sets the string describing this data type.\n@param desc the new description.","static":false,"name":"setDescription","comment":"Sets the string describing this data type.","params":[{"type_long":"java.lang.String","name":"desc","comment":"the new description.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the number of component data types in this data type.\n@return the number of components that make up this data prototype","static":false,"name":"getNumComponents","comment":"Gets the number of component data types in this data type.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of components that make up this data prototype","type_short":"int"}},{"javadoc":"Returns the component of this data type with the indicated ordinal.\n@param ordinal the component's ordinal (zero based).\n@return the data type component.\n@throws ArrayIndexOutOfBoundsException if the ordinal is out of bounds","static":false,"name":"getComponent","comment":"Returns the component of this data type with the indicated ordinal.","params":[{"type_long":"int","name":"ordinal","comment":"the component's ordinal (zero based).","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the data type component.","type_short":"DataTypeComponent"}},{"javadoc":"Returns an array of Data Type Components that make up this data type.\n Returns an array of length 0 if there are no subcomponents.","static":false,"name":"getComponents","comment":"Returns an array of Data Type Components that make up this data type.\n Returns an array of length 0 if there are no subcomponents.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent[]","comment":"","type_short":"ghidra.program.model.data.DataTypeComponent[]"}},{"javadoc":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for fixed-length dataTypes.\n@param dataType the datatype to add.\n@return the DataTypeComponent created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be added to this composite data type.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to add dt1 to dt2 since this would cause a cyclic dependency.","static":false,"name":"add","comment":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for fixed-length dataTypes.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to add.","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the DataTypeComponent created.","type_short":"DataTypeComponent"}},{"javadoc":"Adds a new datatype to the end of this composite. This is the preferred method\n to use for adding components to an aligned structure for dynamic dataTypes such as \n strings whose length must be specified.\n@param dataType the datatype to add.\n@param length the length to associate with the datatype.\n For fixed length types a length &lt;= 0 will use the length of the resolved dataType.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be added to this composite data type or an invalid length\n is specified.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to add dt1 to dt2 since this would cause a cyclic dependency.","static":false,"name":"add","comment":"Adds a new datatype to the end of this composite. This is the preferred method\n to use for adding components to an aligned structure for dynamic dataTypes such as \n strings whose length must be specified.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to add.","type_short":"DataType"},{"type_long":"int","name":"length","comment":"the length to associate with the datatype.\n For fixed length types a length = 0 will use the length of the resolved dataType.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for fixed-length dataTypes.\n@param dataType the datatype to add.\n@param name the field name to associate with this component.\n@param comment the comment to associate with this component.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be added to this composite data type.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to add dt1 to dt2 since this would cause a cyclic dependency.","static":false,"name":"add","comment":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for fixed-length dataTypes.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to add.","type_short":"DataType"},{"type_long":"java.lang.String","name":"name","comment":"the field name to associate with this component.","type_short":"String"},{"type_long":"java.lang.String","name":"comment","comment":"the comment to associate with this component.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Adds a new bitfield to the end of this composite.  This method is intended \n to be used with aligned structures\/unions only where the bitfield will be \n appropriately packed.  The minimum storage storage byte size will be applied.\n It will not provide useful results within unaligned composites.\n@param baseDataType the bitfield base datatype (certain restrictions apply).\n@param bitSize the bitfield size in bits\n@param componentName the field name to associate with this component.\n@param comment the comment to associate with this component.\n@return the componentDataType created whose associated data type will\n be BitFieldDataType.\n@throws InvalidDataTypeException if the specified data type is\n not a valid base type for bitfields.","static":false,"name":"addBitField","comment":"Adds a new bitfield to the end of this composite.  This method is intended \n to be used with aligned structures\/unions only where the bitfield will be \n appropriately packed.  The minimum storage storage byte size will be applied.\n It will not provide useful results within unaligned composites.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"the bitfield base datatype (certain restrictions apply).","type_short":"DataType"},{"type_long":"int","name":"bitSize","comment":"the bitfield size in bits","type_short":"int"},{"type_long":"java.lang.String","name":"componentName","comment":"the field name to associate with this component.","type_short":"String"},{"type_long":"java.lang.String","name":"comment","comment":"the comment to associate with this component.","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if the specified data type is\n not a valid base type for bitfields.","type_short":"InvalidDataTypeException"}],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created whose associated data type will\n be BitFieldDataType.","type_short":"DataTypeComponent"}},{"javadoc":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for dynamic dataTypes such as \n strings whose length must be specified.\n@param dataType the datatype to add.\n@param length the length to associate with the datatype.\n For fixed length types a length &lt;= 0 will use the length of the resolved dataType.\n@param name the field name to associate with this component.\n@param comment the comment to associate with this component.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be added to this composite data type or an invalid length is specified.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to add dt1 to dt2 since this would cause a cyclic dependency.","static":false,"name":"add","comment":"Adds a new datatype to the end of this composite.  This is the preferred method\n to use for adding components to an aligned structure for dynamic dataTypes such as \n strings whose length must be specified.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to add.","type_short":"DataType"},{"type_long":"int","name":"length","comment":"the length to associate with the datatype.\n For fixed length types a length = 0 will use the length of the resolved dataType.","type_short":"int"},{"type_long":"java.lang.String","name":"name","comment":"the field name to associate with this component.","type_short":"String"},{"type_long":"java.lang.String","name":"comment","comment":"the comment to associate with this component.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Inserts a new datatype at the specified ordinal position in this composite.\n <BR>Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.\n@param ordinal the ordinal where the new datatype is to be inserted.\n@param dataType the datatype to insert.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be inserted into this composite data type.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to insert dt1 to dt2 since this would cause a cyclic dependency.\n@throws ArrayIndexOutOfBoundsException if component ordinal is out of bounds","static":false,"name":"insert","comment":"Inserts a new datatype at the specified ordinal position in this composite.\n Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.","params":[{"type_long":"int","name":"ordinal","comment":"the ordinal where the new datatype is to be inserted.","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to insert.","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Inserts a new datatype at the specified ordinal position in this composite.\n <BR>Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.\n@param ordinal the ordinal where the new datatype is to be inserted.\n@param dataType the datatype to insert.\n@param length the length to associate with the datatype.\n For fixed length types a length &lt;= 0 will use the length of the resolved dataType.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be inserted into this composite data type or an invalid \n length is specified.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to insert dt1 to dt2 since this would cause a cyclic dependency.\n@throws ArrayIndexOutOfBoundsException if component ordinal is out of bounds","static":false,"name":"insert","comment":"Inserts a new datatype at the specified ordinal position in this composite.\n Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.","params":[{"type_long":"int","name":"ordinal","comment":"the ordinal where the new datatype is to be inserted.","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to insert.","type_short":"DataType"},{"type_long":"int","name":"length","comment":"the length to associate with the datatype.\n For fixed length types a length = 0 will use the length of the resolved dataType.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Inserts a new datatype at the specified ordinal position in this composite.\n <BR>Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.\n@param ordinal the ordinal where the new datatype is to be inserted.\n@param dataType the datatype to insert.\n@param length the length to associate with the datatype.\n For fixed length types a length &lt;= 0 will use the length of the resolved dataType.\n@param name the field name to associate with this component.\n@param comment the comment to associate with this component.\n@return the componentDataType created.\n@throws IllegalArgumentException if the specified data type is not \n allowed to be inserted into this composite data type or an invalid length\n is specified.\n For example, suppose dt1 contains dt2. Therefore it is not valid\n to insert dt1 to dt2 since this would cause a cyclic dependency.\n@throws ArrayIndexOutOfBoundsException if component ordinal is out of bounds","static":false,"name":"insert","comment":"Inserts a new datatype at the specified ordinal position in this composite.\n Note: For an aligned structure the ordinal position will get adjusted\n automatically to provide the proper alignment.","params":[{"type_long":"int","name":"ordinal","comment":"the ordinal where the new datatype is to be inserted.","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the datatype to insert.","type_short":"DataType"},{"type_long":"int","name":"length","comment":"the length to associate with the datatype.\n For fixed length types a length = 0 will use the length of the resolved dataType.","type_short":"int"},{"type_long":"java.lang.String","name":"name","comment":"the field name to associate with this component.","type_short":"String"},{"type_long":"java.lang.String","name":"comment","comment":"the comment to associate with this component.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeComponent","comment":"the componentDataType created.","type_short":"DataTypeComponent"}},{"javadoc":"Deletes the component at the given ordinal position.\n <BR>Note: Removal of bitfields from an unaligned structure will \n not shift other components with vacated bytes reverting to undefined.\n@param ordinal the ordinal of the component to be deleted.\n@throws ArrayIndexOutOfBoundsException if component ordinal is out of bounds","static":false,"name":"delete","comment":"Deletes the component at the given ordinal position.\n Note: Removal of bitfields from an unaligned structure will \n not shift other components with vacated bytes reverting to undefined.","params":[{"type_long":"int","name":"ordinal","comment":"the ordinal of the component to be deleted.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes the components at the given ordinal positions.\n <BR>Note: Removal of bitfields from an unaligned structure will \n not shift other components with vacated bytes reverting to undefined.\n@param ordinals the ordinals of the component to be deleted.\n@throws ArrayIndexOutOfBoundsException if any specified component ordinal is out of bounds","static":false,"name":"delete","comment":"Deletes the components at the given ordinal positions.\n Note: Removal of bitfields from an unaligned structure will \n not shift other components with vacated bytes reverting to undefined.","params":[{"type_long":"int[]","name":"ordinals","comment":"the ordinals of the component to be deleted.","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check if a data type is part of this data type.  A data type could\n be part of another by:\n <br>Being the same data type.\n <br>containing the data type directly\n <br>containing another data type that has the data type as a part of it.\n@param dataType the data type to look for.\n@return true if the indicated data type is part of a sub-component of \n this data type.","static":false,"name":"isPartOf","comment":"Check if a data type is part of this data type.  A data type could\n be part of another by:\n Being the same data type.\n containing the data type directly\n containing another data type that has the data type as a part of it.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"the data type to look for.","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the indicated data type is part of a sub-component of \n this data type.","type_short":"boolean"}},{"javadoc":"Updates the composite to any changes in the data organization. If the composite is not\n internally aligned, this method does nothing.","static":false,"name":"realign","comment":"Updates the composite to any changes in the data organization. If the composite is not\n internally aligned, this method does nothing.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if this data type has its internal components currently aligned.\n@return true if this data type's components are aligned relative to each other using the\n current data organization. When internally aligned the end of this data type will be padded \n to a multiple of its actual alignment.","static":false,"name":"isInternallyAligned","comment":"Determine if this data type has its internal components currently aligned.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this data type's components are aligned relative to each other using the\n current data organization. When internally aligned the end of this data type will be padded \n to a multiple of its actual alignment.","type_short":"boolean"}},{"javadoc":"Sets whether this data type's internal components are currently aligned or unaligned.\n@param aligned true means align the internal components of this data type. \n false means don't align it. True also causes the end of this data type to be padded \n to a multiple of its actual alignment.","static":false,"name":"setInternallyAligned","comment":"Sets whether this data type's internal components are currently aligned or unaligned.","params":[{"type_long":"boolean","name":"aligned","comment":"true means align the internal components of this data type. \n false means don't align it. True also causes the end of this data type to be padded \n to a multiple of its actual alignment.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The overall (external) alignment changed for the specified data type. \n In other words, the data type has a different alignment when placed inside other structures.\n@param dt the data type whose alignment changed.","static":false,"name":"dataTypeAlignmentChanged","comment":"The overall (external) alignment changed for the specified data type. \n In other words, the data type has a different alignment when placed inside other structures.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"the data type whose alignment changed.","type_short":"DataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the current packing value (typically a power of 2). If this isn't a packed data\n type then NOT_PACKING is returned. The packing value only pertains to internally aligned composite\n data types. Aligned structures allow packing.\n@return the current packing value or NOT_PACKING.","static":false,"name":"getPackingValue","comment":"Gets the current packing value (typically a power of 2). If this isn't a packed data\n type then NOT_PACKING is returned. The packing value only pertains to internally aligned composite\n data types. Aligned structures allow packing.","params":[],"throws":[],"return":{"type_long":"int","comment":"the current packing value or NOT_PACKING.","type_short":"int"}},{"javadoc":"Sets the current packing value (usually a power of 2). A value of NOT_PACKING should be passed \n if this isn't a packed data type. Otherwise this value indicates a maximum alignment\n for any component within this data type. Calling this method will cause the data type to\n become an internally aligned data type.\n <br>Note: If a component's data type has a specific external alignment, it will \n override this value if necessary.\n@param packingValue the new packing value or 0 for NOT_PACKING.\n A negative value will be treated the same as 0.","static":false,"name":"setPackingValue","comment":"Sets the current packing value (usually a power of 2). A value of NOT_PACKING should be passed \n if this isn't a packed data type. Otherwise this value indicates a maximum alignment\n for any component within this data type. Calling this method will cause the data type to\n become an internally aligned data type.\n Note: If a component's data type has a specific external alignment, it will \n override this value if necessary.","params":[{"type_long":"int","name":"packingValue","comment":"the new packing value or 0 for NOT_PACKING.\n A negative value will be treated the same as 0.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the external alignment (a minimum alignment) for this DataType.\n This controls where this data type will get aligned within other data types.\n It also causes the end of this data type to get padded so its length is a multiple \n of the alignment.\n@return the external alignment for this DataType or DEFAULT_ALIGNMENT_VALUE.","static":false,"name":"getMinimumAlignment","comment":"Get the external alignment (a minimum alignment) for this DataType.\n This controls where this data type will get aligned within other data types.\n It also causes the end of this data type to get padded so its length is a multiple \n of the alignment.","params":[],"throws":[],"return":{"type_long":"int","comment":"the external alignment for this DataType or DEFAULT_ALIGNMENT_VALUE.","type_short":"int"}},{"javadoc":"Sets the external alignment (a minimum alignment) for this DataType.\n This controls where this data type will get aligned within other data types.\n It also causes the end of this data type to get padded so its length is a multiple \n of the alignment. Calling this method will cause the data type to\n become an internally aligned data type.\n@param minimumAlignment the external (minimum) alignment for this DataType.\n Any value less than 1 will revert to default alignment.","static":false,"name":"setMinimumAlignment","comment":"Sets the external alignment (a minimum alignment) for this DataType.\n This controls where this data type will get aligned within other data types.\n It also causes the end of this data type to get padded so its length is a multiple \n of the alignment. Calling this method will cause the data type to\n become an internally aligned data type.","params":[{"type_long":"int","name":"minimumAlignment","comment":"the external (minimum) alignment for this DataType.\n Any value less than 1 will revert to default alignment.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this data type's external (minimum) alignment to the default alignment. This data type's\n external alignment will be based upon the components it contains. This should be used\n when a data type doesn't have an alignment attribute specified. Calling this method will \n cause the data type to become an internally aligned data type.","static":false,"name":"setToDefaultAlignment","comment":"Sets this data type's external (minimum) alignment to the default alignment. This data type's\n external alignment will be based upon the components it contains. This should be used\n when a data type doesn't have an alignment attribute specified. Calling this method will \n cause the data type to become an internally aligned data type.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this data type's external (minimum) alignment to a multiple of the machine alignment that is \n specified in the DataOrganization. The machine alignment is defined as the maximum useful \n alignment for the target machine. This should be used when a data type has an alignment \n attribute specified without a size (indicating to use the machine alignment).\n Calling this method will cause the data type to become an internally aligned data type.","static":false,"name":"setToMachineAlignment","comment":"Sets this data type's external (minimum) alignment to a multiple of the machine alignment that is \n specified in the DataOrganization. The machine alignment is defined as the maximum useful \n alignment for the target machine. This should be used when a data type has an alignment \n attribute specified without a size (indicating to use the machine alignment).\n Calling this method will cause the data type to become an internally aligned data type.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Whether or not this data type is using the default external (minimum) alignment.\n@return true if this data type has the default external alignment.","static":false,"name":"isDefaultAligned","comment":"Whether or not this data type is using the default external (minimum) alignment.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this data type has the default external alignment.","type_short":"boolean"}},{"javadoc":"Whether or not this data type is using the machine alignment value from the \n DataOrganization for its external (minimum) alignment.\n@return true if this data type is using the machine alignment as the minimum alignment.","static":false,"name":"isMachineAligned","comment":"Whether or not this data type is using the machine alignment value from the \n DataOrganization for its external (minimum) alignment.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this data type is using the machine alignment as the minimum alignment.","type_short":"boolean"}},{"javadoc":"Get the bitfield packing information associated with the underlying\n data organization.\n@return bitfield packing information","static":false,"name":"getBitFieldPacking","comment":"Get the bitfield packing information associated with the underlying\n data organization.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.BitFieldPacking","comment":"bitfield packing information","type_short":"BitFieldPacking"}}],"name":"Composite","comment":"Interface for common methods in Structure and Union","fields":[{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_ALIGNMENT_VALUE","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"NOT_PACKING","comment":"","type_short":"int","constant_value":"0"}]}
