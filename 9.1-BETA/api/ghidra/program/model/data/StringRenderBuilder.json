{"implements":[],"javadoc":"Helper class used to build up a formatted (for human consumption) string representation returned\n by Unicode and String data types.\n <p>\n Call {@link #toString()} to retrieve the formatted string.\n <p>\n Example (quotes are part of result): {@code \"Test\\tstring\",01,02,\"Second\\npart\",00}","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"charSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"charSize","comment":"","type_short":"int"},{"type_long":"char","name":"quoteChar","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Append the characters in the specified string. The added characters will\n be shown in a quoted text region.\n@param str String to add","static":false,"name":"addString","comment":"Append the characters in the specified string. The added characters will\n be shown in a quoted text region.","params":[{"type_long":"java.lang.String","name":"str","comment":"String to add","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Append the specified char after an escaping backslash \"\\\", ie\n \"x\" -> \"\\x\";\n@param ch","static":false,"name":"addEscapedChar","comment":"Append the specified char after an escaping backslash \"\\\", ie\n \"x\" - \"\\x\";","params":[{"type_long":"char","name":"ch","comment":"","type_short":"char"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a single character.  It will be shown in a quoted text region.\n@param codePoint Character to add","static":false,"name":"addCodePointChar","comment":"Add a single character.  It will be shown in a quoted text region.","params":[{"type_long":"int","name":"codePoint","comment":"Character to add","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a single character that needs to be shown as a numeric hex value.\n@param codePoint Character to add","static":false,"name":"addCodePointValue","comment":"Add a single character that needs to be shown as a numeric hex value.","params":[{"type_long":"int","name":"codePoint","comment":"Character to add","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add byte values, shown as numeric hex values.\n <p>\n { 0, 1, 2 } -> 00,01,02\n@param bytes","static":false,"name":"addByteSeq","comment":"Add byte values, shown as numeric hex values.\n \n { 0, 1, 2 } - 00,01,02","params":[{"type_long":"byte[]","name":"bytes","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add an unicode codepoint as its escaped hex value, with a escape character\n prefix of 'x', 'u' or 'U' depending on the magnitude of the codePoint value.\n <p>\n codePoint 15 -> '\\' 'x' \"0F\"<br>\n codePoint 65535 -> '\\' 'u' \"FFFF\"<br>\n codePoint 65536 -> '\\' 'U' \"10000\"<br>\n@param codePoint int value","static":false,"name":"addEscapedCodePoint","comment":"Add an unicode codepoint as its escaped hex value, with a escape character\n prefix of 'x', 'u' or 'U' depending on the magnitude of the codePoint value.\n \n codePoint 15 - '\\' 'x' \"0F\"\n codePoint 65535 - '\\' 'u' \"FFFF\"\n codePoint 65536 - '\\' 'U' \"10000\"","params":[{"type_long":"int","name":"codePoint","comment":"int value","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Example (quotes are part of result): {@code \"Test\\tstring\",01,02,\"Second\\npart\",00}\n <p>\n@return Formatted string","static":false,"name":"toString","comment":"Example (quotes are part of result): \n ","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"Formatted string","type_short":"String"}},{"javadoc":"","static":false,"name":"ensureTextMode","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"ensureByteMode","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"StringRenderBuilder","comment":"Helper class used to build up a formatted (for human consumption) string representation returned\n by Unicode and String data types.\n \n Call #toString() to retrieve the formatted string.\n \n Example (quotes are part of result): ","fields":[{"type_long":"char","javadoc":"","static":true,"name":"DOUBLE_QUOTE","comment":"","type_short":"char","constant_value":"\""},{"type_long":"char","javadoc":"","static":true,"name":"SINGLE_QUOTE","comment":"","type_short":"char","constant_value":"'"},{"type_long":"java.lang.StringBuilder","javadoc":"","static":false,"name":"sb","comment":"","type_short":"StringBuilder","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"byteMode","comment":"","type_short":"boolean","constant_value":null},{"type_long":"char","javadoc":"","static":false,"name":"quoteChar","comment":"","type_short":"char","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"charSize","comment":"","type_short":"int","constant_value":null}]}
