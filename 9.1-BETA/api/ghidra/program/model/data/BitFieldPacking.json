{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.\n@return true if MSVC packing conventions are used, else false (e.g., GNU conventions apply).","static":false,"name":"useMSConvention","comment":"Control if the alignment and packing of bit-fields follows MSVC conventions.  \n When this is enabled it takes precedence over all other bitfield packing controls.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if MSVC packing conventions are used, else false (e.g., GNU conventions apply).","type_short":"boolean"}},{"javadoc":"Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in GCC.\n@return true when the alignment of the bit-field type should be used to impact the \n alignment of the containing structure, and ensure that individual bit-fields will not \n straddle an alignment boundary.","static":false,"name":"isTypeAlignmentEnabled","comment":"Control whether the alignment of bit-field types is respected when laying out structures.\n Corresponds to PCC_BITFIELD_TYPE_MATTERS in GCC.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true when the alignment of the bit-field type should be used to impact the \n alignment of the containing structure, and ensure that individual bit-fields will not \n straddle an alignment boundary.","type_short":"boolean"}},{"javadoc":"A non-zero value indicates the fixed alignment size for bit-fields which follow\n a zero-length bitfield if greater than a bitfields base type normal alignment. \n Corresponds to EMPTY_FIELD_BOUNDARY in GCC.\n This value is only used when {@link #isTypeAlignmentEnabled()} returns false\n and {@link #isZeroLengthAlignmentEnabled()} returns true.\n@return fixed alignment size as number of bytes for a bit-field which follows\n a zero-length bit-field","static":false,"name":"getZeroLengthBoundary","comment":"A non-zero value indicates the fixed alignment size for bit-fields which follow\n a zero-length bitfield if greater than a bitfields base type normal alignment. \n Corresponds to EMPTY_FIELD_BOUNDARY in GCC.\n This value is only used when #isTypeAlignmentEnabled() returns false\n and #isZeroLengthAlignmentEnabled() returns true.","params":[],"throws":[],"return":{"type_long":"int","comment":"fixed alignment size as number of bytes for a bit-field which follows\n a zero-length bit-field","type_short":"int"}}],"name":"BitFieldPacking","comment":"","fields":[]}
