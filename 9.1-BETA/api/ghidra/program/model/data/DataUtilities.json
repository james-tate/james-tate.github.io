{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if the specified name is a valid data-type name\n@param name candidate data-type name\n@return true if name is valid, else false","static":true,"name":"isValidDataTypeName","comment":"Determine if the specified name is a valid data-type name","params":[{"type_long":"java.lang.String","name":"name","comment":"candidate data-type name","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if name is valid, else false","type_short":"boolean"}},{"javadoc":"Create data where existing data may already exist.\n@param program\n@param addr data address (offcut data address only allowed if clearMode == ClearDataMode.CLEAR_ALL_CONFLICT_DATA)\n@param newDataType new data-type being applied\n@param length data length (used only for Dynamic newDataType which has canSpecifyLength()==true)\n@param stackPointers see {@link #reconcileAppliedDataType(DataType, DataType, boolean)}\n@param clearMode see CreateDataMode\n@return new data created\n@throws CodeUnitInsertionException if data creation failed","static":true,"name":"createData","comment":"Create data where existing data may already exist.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"data address (offcut data address only allowed if clearMode == ClearDataMode.CLEAR_ALL_CONFLICT_DATA)","type_short":"Address"},{"type_long":"ghidra.program.model.data.DataType","name":"newDataType","comment":"new data-type being applied","type_short":"DataType"},{"type_long":"int","name":"length","comment":"data length (used only for Dynamic newDataType which has canSpecifyLength()==true)","type_short":"int"},{"type_long":"boolean","name":"stackPointers","comment":"see #reconcileAppliedDataType(DataType, DataType, boolean)","type_short":"boolean"},{"type_long":"ghidra.program.model.data.DataUtilities.ClearDataMode","name":"clearMode","comment":"see CreateDataMode","type_short":"ClearDataMode"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"if data creation failed","type_short":"CodeUnitInsertionException"}],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"new data created","type_short":"Data"}},{"javadoc":"","static":true,"name":"checkEnoughSpace","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"existingDataLen","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataTypeInstance","name":"dti","comment":"","type_short":"DataTypeInstance"},{"type_long":"ghidra.program.model.data.DataUtilities.ClearDataMode","name":"mode","comment":"","type_short":"ClearDataMode"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"","type_short":"CodeUnitInsertionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"stackPointers","comment":"","params":[{"type_long":"ghidra.program.model.data.Pointer","name":"pointer","comment":"","type_short":"Pointer"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Determine the final data-type which should be applied based upon a\n user applied type of newDataType on an existing originalDataType.\n Pointer conversion is performed when appropriate, otherwise the\n newDataType is returned unchanged.\n If newDataType is a FunctionDefinition, or Typedef to a FunctionDefinition, it will either be stacked\n with the existing pointer if enabled\/applicable, or will be converted to a pointer since\n FunctionDefinitions may only been used in the form of a pointer.\n Note that originalDataType and newDataType should be actual applied types.\n (i.e., do not strip typedefs, pointers, arrays, etc.).\n@param originalDataType existing data type onto which newDataTye is applied\n@param newDataType new data-type being applied\n@param stackPointers If true the following data type transformation will be performed:\n <ul>\n <li>If newDataType is a default pointer and the originalDataType\n is a pointer the new pointer will wrap\n the existing pointer thus increasing is 'depth'\n (e.g., int * would become int ** when default pointer applied).\n If the originalDataType is not a pointer the newDataType will be returned unchanged.\n <\/li>\n <li>If the originalDataType is any type of pointer the supplied newDatatype\n will replace the pointer's base type (e.g., int * would become db * when\n newDataType is {@link ByteDataType}).\n <\/ul>\n <P>If false, only required transformations will be applied, Example:\n if newDataType is a FunctionDefinitionDataType it will be transformed\n to a pointer before being applied.\n@return either a combined pointer data-type or the newDataType specified with any\n required transformation","static":true,"name":"reconcileAppliedDataType","comment":"Determine the final data-type which should be applied based upon a\n user applied type of newDataType on an existing originalDataType.\n Pointer conversion is performed when appropriate, otherwise the\n newDataType is returned unchanged.\n If newDataType is a FunctionDefinition, or Typedef to a FunctionDefinition, it will either be stacked\n with the existing pointer if enabled\/applicable, or will be converted to a pointer since\n FunctionDefinitions may only been used in the form of a pointer.\n Note that originalDataType and newDataType should be actual applied types.\n (i.e., do not strip typedefs, pointers, arrays, etc.).","params":[{"type_long":"ghidra.program.model.data.DataType","name":"originalDataType","comment":"existing data type onto which newDataTye is applied","type_short":"DataType"},{"type_long":"ghidra.program.model.data.DataType","name":"newDataType","comment":"new data-type being applied","type_short":"DataType"},{"type_long":"boolean","name":"stackPointers","comment":"If true the following data type transformation will be performed:\n \n If newDataType is a default pointer and the originalDataType\n is a pointer the new pointer will wrap\n the existing pointer thus increasing is 'depth'\n (e.g., int * would become int ** when default pointer applied).\n If the originalDataType is not a pointer the newDataType will be returned unchanged.\n \n If the originalDataType is any type of pointer the supplied newDatatype\n will replace the pointer's base type (e.g., int * would become db * when\n newDataType is ByteDataType).\n \n If false, only required transformations will be applied, Example:\n if newDataType is a FunctionDefinitionDataType it will be transformed\n to a pointer before being applied.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"either a combined pointer data-type or the newDataType specified with any\n required transformation","type_short":"DataType"}},{"javadoc":"","static":true,"name":"isDefaultPointer","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the data for the given address; if the code unit at the address is\n an instruction, return null.\n@param loc the location. This provides the address and subcomponent\n within the data at the address.\n@return the data or null if the code unit at the address is an instruction.","static":true,"name":"getDataAtLocation","comment":"Get the data for the given address; if the code unit at the address is\n an instruction, return null.","params":[{"type_long":"ghidra.program.util.ProgramLocation","name":"loc","comment":"the location. This provides the address and subcomponent\n within the data at the address.","type_short":"ProgramLocation"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"the data or null if the code unit at the address is an instruction.","type_short":"Data"}},{"javadoc":"Get the data for the given address.\n <P>\n This will return a Data if and only if there is data that starts at the given address.\n@return the Data that starts at the given address or null if the address is code or offcut.","static":true,"name":"getDataAtAddress","comment":"Get the data for the given address.\n \n This will return a Data if and only if there is data that starts at the given address.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"the Data that starts at the given address or null if the address is code or offcut.","type_short":"Data"}},{"javadoc":"Get the maximum address of an undefined data range starting at addr.\n Both undefined code units and defined data which have an Undefined\n data type are included in the range.\n@param program the program which will have its code units checked.\n@param addr the address where this will start checking for Undefined data. This address can\n be offcut into an Undefined Data.\n@return end of undefined range or null if addr does not correspond\n to an undefined location.","static":true,"name":"getMaxAddressOfUndefinedRange","comment":"Get the maximum address of an undefined data range starting at addr.\n Both undefined code units and defined data which have an Undefined\n data type are included in the range.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program which will have its code units checked.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the address where this will start checking for Undefined data. This address can\n be offcut into an Undefined Data.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"end of undefined range or null if addr does not correspond\n to an undefined location.","type_short":"Address"}},{"javadoc":"Determine if the specified addr corresponds to an undefined data location\n where both undefined code units and defined data which has an Undefined\n data type is considered to be undefined.\n@param program\n@param addr\n@return ","static":true,"name":"isUndefinedData","comment":"Determine if the specified addr corresponds to an undefined data location\n where both undefined code units and defined data which has an Undefined\n data type is considered to be undefined.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the next defined data that comes after the address indicated by addr and that is\n no more than the specified maxAddr and that is not a sized undefined data type.\n@param program the program whose code units are to be checked to find the next\n non-undefined data.\n@param addr start looking for data after this address.\n@param maxAddr do not look any further than this address.\n@return the next defined data that isn't a sized undefined data type, or return null if\n there isn't one.","static":true,"name":"getNextNonUndefinedDataAfter","comment":"Get the next defined data that comes after the address indicated by addr and that is\n no more than the specified maxAddr and that is not a sized undefined data type.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose code units are to be checked to find the next\n non-undefined data.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"start looking for data after this address.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddr","comment":"do not look any further than this address.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"the next defined data that isn't a sized undefined data type, or return null if\n there isn't one.","type_short":"Data"}},{"javadoc":"Finds the first conflicting address in the given address range.\n@param program The program.\n@param addr The starting address of the range.\n@param length The length of the range.\n@param ignoreUndefinedData True if the search should ignore {@link Undefined} data as a\n   potential conflict, or false if {@link Undefined} data should trigger conflicts.\n@return The address of the first conflict in the range, or null if there were no conflicts.","static":true,"name":"findFirstConflictingAddress","comment":"Finds the first conflicting address in the given address range.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"The program.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"The starting address of the range.","type_short":"Address"},{"type_long":"int","name":"length","comment":"The length of the range.","type_short":"int"},{"type_long":"boolean","name":"ignoreUndefinedData","comment":"True if the search should ignore Undefined data as a\n   potential conflict, or false if Undefined data should trigger conflicts.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The address of the first conflict in the range, or null if there were no conflicts.","type_short":"Address"}},{"javadoc":"Determine if there is only undefined data from the specified startAddress to the specified\n endAddress. The start and end addresses must both be in the same defined block of memory.\n@param program the program whose code units are to be checked.\n@param startAddress start looking for undefined data at this address in a defined memory block.\n@param endAddress do not look any further than this address.\n This must be greater than or equal to the startAddress and must be in the same memory block\n as the start address or false is returned.\n@return true if the range of addresses in a memory block is where only undefined data exists.","static":true,"name":"isUndefinedRange","comment":"Determine if there is only undefined data from the specified startAddress to the specified\n endAddress. The start and end addresses must both be in the same defined block of memory.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose code units are to be checked.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"startAddress","comment":"start looking for undefined data at this address in a defined memory block.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"endAddress","comment":"do not look any further than this address.\n This must be greater than or equal to the startAddress and must be in the same memory block\n as the start address or false is returned.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the range of addresses in a memory block is where only undefined data exists.","type_short":"boolean"}}],"name":"DataUtilities","comment":"","fields":[]}
