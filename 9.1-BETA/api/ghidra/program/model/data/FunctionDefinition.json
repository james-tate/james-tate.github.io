{"implements":["ghidra.program.model.data.DataType","ghidra.program.model.listing.FunctionSignature"],"javadoc":"Defines a function signature for things like function pointers.","static":false,"methods":[{"javadoc":"Set the arguments to this function.\n@param args array of parameter definitions to be used as arguments to this function","static":false,"name":"setArguments","comment":"Set the arguments to this function.","params":[{"type_long":"ghidra.program.model.data.ParameterDefinition[]","name":"args","comment":"array of parameter definitions to be used as arguments to this function","type_short":"ghidra.program.model.data.ParameterDefinition[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the return data type for this function\n@param type the return datatype to be set.\n@throws IllegalArgumentException if data type is not a fixed length type","static":false,"name":"setReturnType","comment":"Set the return data type for this function","params":[{"type_long":"ghidra.program.model.data.DataType","name":"type","comment":"the return datatype to be set.","type_short":"DataType"}],"throws":[{"type_long":"java.lang.IllegalArgumentException","comment":"if data type is not a fixed length type","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the function comment\n@param comment the comment to set.","static":false,"name":"setComment","comment":"Set the function comment","params":[{"type_long":"java.lang.String","name":"comment","comment":"the comment to set.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set whether parameters can be passed as a VarArg (variable argument list).\n@param hasVarArgs true if this function has a variable argument list (ie printf(fmt, ...)).","static":false,"name":"setVarArgs","comment":"Set whether parameters can be passed as a VarArg (variable argument list).","params":[{"type_long":"boolean","name":"hasVarArgs","comment":"true if this function has a variable argument list (ie printf(fmt, ...)).","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the generic calling convention associated with this function definition.\n@param genericCallingConvention generic calling convention","static":false,"name":"setGenericCallingConvention","comment":"Set the generic calling convention associated with this function definition.","params":[{"type_long":"ghidra.program.model.data.GenericCallingConvention","name":"genericCallingConvention","comment":"generic calling convention","type_short":"GenericCallingConvention"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Replace the given argument with another data type\n@param ordinal the index of the argument to be replaced, starting from '0'\n@param name name of the new argument\n@param dt data type of the new argument\n@param comment comment for the argument\n@param source the source of this function definition argument: \n Symbol.DEFAULT, Symbol.ANALYSIS, Symbol.IMPORTED, or Symbol.USER_DEFINED","static":false,"name":"replaceArgument","comment":"Replace the given argument with another data type","params":[{"type_long":"int","name":"ordinal","comment":"the index of the argument to be replaced, starting from '0'","type_short":"int"},{"type_long":"java.lang.String","name":"name","comment":"name of the new argument","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"data type of the new argument","type_short":"DataType"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the argument","type_short":"String"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"the source of this function definition argument: \n Symbol.DEFAULT, Symbol.ANALYSIS, Symbol.IMPORTED, or Symbol.USER_DEFINED","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FunctionDefinition","comment":"Defines a function signature for things like function pointers.","fields":[]}
