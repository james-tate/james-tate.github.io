{"implements":[],"javadoc":"<code>BitFieldDataType<\/code> provides a means of defining a minimally sized bit-field\n for use within data structures.  The length (i.e., storage size) of this bitfield datatype is\n the minimum number of bytes required to contain the bitfield at its specified offset.\n The effective bit-size of a bitfield will be limited by the size of the base\n datatype whose size may be controlled by its' associated datatype manager and data organization\n (e.g., {@link IntegerDataType}). \n <p>\n NOTE: Instantiation of this datatype implementation is intended for internal use only.  \n Creating and manipulating bitfields should be accomplished directly via Structure or Union \n bitfield methods.","static":false,"extends":"ghidra.program.model.data.AbstractDataType","methods":[{"javadoc":"Construct a bit-field type based upon a specified base type.  The baseDataType will\n take precedence if specified.  Either baseType or baseDatatype must be specified.\n@param baseDataType base data type (integer\/enum type or typedef to same).  This\n bitfield will adopt the same datatype manager as this base type.\n@param bitSize size of bit-field expressed as number of bits (0..255).  The effective \n bit size may be reduced based upon the specified base datatype size.\n@param bitOffset right shift factor within storage unit when viewed as a big-endian dd\n scalar value.  Based upon minimal storage bitOffset should be in the range 0 to 7.\n@throws InvalidDataTypeException","static":false,"name":"<init>","comment":"Construct a bit-field type based upon a specified base type.  The baseDataType will\n take precedence if specified.  Either baseType or baseDatatype must be specified.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"base data type (integer\/enum type or typedef to same).  This\n bitfield will adopt the same datatype manager as this base type.","type_short":"DataType"},{"type_long":"int","name":"bitSize","comment":"size of bit-field expressed as number of bits (0..255).  The effective \n bit size may be reduced based upon the specified base datatype size.","type_short":"int"},{"type_long":"int","name":"bitOffset","comment":"right shift factor within storage unit when viewed as a big-endian dd\n scalar value.  Based upon minimal storage bitOffset should be in the range 0 to 7.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"","type_short":"InvalidDataTypeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a bit-field type based upon a supported baseDataType.\n@param baseDataType a supported primitive integer data type or TypeDef to such a type.\n The baseType must already be cloned to the target datatype manager.\n@param bitSize size of bit-field expressed as number of bits\n@throws InvalidDataTypeException if specified baseDataType is not permitted","static":false,"name":"<init>","comment":"Construct a bit-field type based upon a supported baseDataType.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"a supported primitive integer data type or TypeDef to such a type.\n The baseType must already be cloned to the target datatype manager.","type_short":"DataType"},{"type_long":"int","name":"bitSize","comment":"size of bit-field expressed as number of bits","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if specified baseDataType is not permitted","type_short":"InvalidDataTypeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if this bit-field has a zero length (i.e., alignment field)\n@return true if this bit-field has a zero length","static":false,"name":"isZeroLengthField","comment":"Determine if this bit-field has a zero length (i.e., alignment field)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this bit-field has a zero length","type_short":"boolean"}},{"javadoc":"Get the effective bit-size based upon the specified base type size.  A bit size\n larger than the base type size will truncated to the base type size.\n@param declaredBitSize\n@param baseTypeByteSize\n@return effective bit-size","static":true,"name":"getEffectiveBitSize","comment":"Get the effective bit-size based upon the specified base type size.  A bit size\n larger than the base type size will truncated to the base type size.","params":[{"type_long":"int","name":"declaredBitSize","comment":"","type_short":"int"},{"type_long":"int","name":"baseTypeByteSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"effective bit-size","type_short":"int"}},{"javadoc":"Get the minimum storage size in bytes for a given size in bits.\n This does not consider the bit offset which may increase the required \n storage.\n@param bitSize number of bits within bitfield\n@return minimum storage size in bytes","static":true,"name":"getMinimumStorageSize","comment":"Get the minimum storage size in bytes for a given size in bits.\n This does not consider the bit offset which may increase the required \n storage.","params":[{"type_long":"int","name":"bitSize","comment":"number of bits within bitfield","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"minimum storage size in bytes","type_short":"int"}},{"javadoc":"Get the minimum storage size in bytes for a given size in bits with \n the specified bitOffset (lsb position within big endian storage)\n@param bitSize number of bits within bitfield\n@param bitOffset normalized bitfield offset within storage (lsb)\n@return minimum storage size in bytes","static":true,"name":"getMinimumStorageSize","comment":"Get the minimum storage size in bytes for a given size in bits with \n the specified bitOffset (lsb position within big endian storage)","params":[{"type_long":"int","name":"bitSize","comment":"number of bits within bitfield","type_short":"int"},{"type_long":"int","name":"bitOffset","comment":"normalized bitfield offset within storage (lsb)","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"minimum storage size in bytes","type_short":"int"}},{"javadoc":"Check a bitfield base datatype\n@param baseDataType bitfield base data type (Enum, AbstractIntegerDataType and derived TypeDefs permitted)\n@throws InvalidDataTypeException if baseDataType is invalid as a bitfield base type.","static":true,"name":"checkBaseDataType","comment":"Check a bitfield base datatype","params":[{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"bitfield base data type (Enum, AbstractIntegerDataType and derived TypeDefs permitted)","type_short":"DataType"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if baseDataType is invalid as a bitfield base type.","type_short":"InvalidDataTypeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check if a specified baseDataType is valid for use with a bitfield\n@param baseDataType bitfield base data type (Enum, AbstractIntegerDataType and derived TypeDefs permitted)\n@returns true if baseDataType is valid else false","static":true,"name":"isValidBaseDataType","comment":"Check if a specified baseDataType is valid for use with a bitfield","params":[{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"bitfield base data type (Enum, AbstractIntegerDataType and derived TypeDefs permitted)","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addParent","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the size of the base data type based upon the associated data organization.\n@return base type size","static":false,"name":"getBaseTypeSize","comment":"Get the size of the base data type based upon the associated data organization.","params":[],"throws":[],"return":{"type_long":"int","comment":"base type size","type_short":"int"}},{"javadoc":"Get the packing storage size in bytes associated with this bit-field which may be\n larger than the base type associated with the fields original definition.\n Returned value is the same as {@link #getLength()}.\n@return packing storage size in bytes","static":false,"name":"getStorageSize","comment":"Get the packing storage size in bytes associated with this bit-field which may be\n larger than the base type associated with the fields original definition.\n Returned value is the same as #getLength().","params":[],"throws":[],"return":{"type_long":"int","comment":"packing storage size in bytes","type_short":"int"}},{"javadoc":"Get the effective bit size of this bit-field which may not exceed the size of the\n base datatype.\n@return bit size","static":false,"name":"getBitSize","comment":"Get the effective bit size of this bit-field which may not exceed the size of the\n base datatype.","params":[],"throws":[],"return":{"type_long":"int","comment":"bit size","type_short":"int"}},{"javadoc":"Get the declared bit size of this bit-field which may be larger than the effective\n size which could be truncated.\n@return bit size as defined by the field construction\/declaration.","static":false,"name":"getDeclaredBitSize","comment":"Get the declared bit size of this bit-field which may be larger than the effective\n size which could be truncated.","params":[],"throws":[],"return":{"type_long":"int","comment":"bit size as defined by the field construction\/declaration.","type_short":"int"}},{"javadoc":"Get the bit offset of the least-significant bit relative to bit-0 of the\n base datatype (i.e., least significant bit).  This corresponds to the\n right-shift amount within the base data type when viewed as a big-endian value.\n@return bit offset","static":false,"name":"getBitOffset","comment":"Get the bit offset of the least-significant bit relative to bit-0 of the\n base datatype (i.e., least significant bit).  This corresponds to the\n right-shift amount within the base data type when viewed as a big-endian value.","params":[],"throws":[],"return":{"type_long":"int","comment":"bit offset","type_short":"int"}},{"javadoc":"Get the base datatype associated with this bit-field \n (e.g., int, long, etc., or TypeDef to supported base type)\n@return base data type","static":false,"name":"getBaseDataType","comment":"Get the base datatype associated with this bit-field \n (e.g., int, long, etc., or TypeDef to supported base type)","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"base data type","type_short":"DataType"}},{"javadoc":"Get the base datatype associated with this bit-field \n (e.g., int, long, etc., or TypeDef to supported base type)\n@return base data type","static":false,"name":"getPrimitiveBaseDataType","comment":"Get the base datatype associated with this bit-field \n (e.g., int, long, etc., or TypeDef to supported base type)","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.AbstractIntegerDataType","comment":"base data type","type_short":"AbstractIntegerDataType"}},{"javadoc":"Gets a list of all the settingsDefinitions used by this datatype.\n@return a list of the settingsDefinitions used by this datatype.","static":false,"name":"getSettingsDefinitions","comment":"Gets a list of all the settingsDefinitions used by this datatype.","params":[],"throws":[],"return":{"type_long":"ghidra.docking.settings.SettingsDefinition[]","comment":"a list of the settingsDefinitions used by this datatype.","type_short":"ghidra.docking.settings.SettingsDefinition[]"}},{"javadoc":"","static":false,"name":"isEquivalent","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDefaultSettings","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.docking.settings.Settings","comment":"","type_short":"Settings"}},{"javadoc":"Returns a clone of this built-in DataType\n@see ghidra.program.model.data.DataType#copy(ghidra.program.model.data.DataTypeManager)","static":false,"name":"copy","comment":"Returns a clone of this built-in DataType","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"","type_short":"DataTypeManager"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Clone this bitfield to a new datatype manager.  This may change the effective bit\n size and storage size of the resulting datatype based upon the data organization\n of the specified dtm.\n@param dtm target datatype manager\n@return new instance or same instance of dtm is unchanged.","static":false,"name":"clone","comment":"Clone this bitfield to a new datatype manager.  This may change the effective bit\n size and storage size of the resulting datatype based upon the data organization\n of the specified dtm.","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"target datatype manager","type_short":"DataTypeManager"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.BitFieldDataType","comment":"new instance or same instance of dtm is unchanged.","type_short":"BitFieldDataType"}},{"javadoc":"","static":false,"name":"getLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getDescription","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getValue","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"},{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"","static":false,"name":"getBigIntegerValue","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"}],"throws":[],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"","static":false,"name":"getValueClass","comment":"","params":[{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"}],"throws":[],"return":{"type_long":"java.lang.Class<?>","comment":"","type_short":"Class"}},{"javadoc":"","static":false,"name":"getRepresentation","comment":"","params":[{"type_long":"ghidra.program.model.mem.MemBuffer","name":"buf","comment":"","type_short":"MemBuffer"},{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"},{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setDefaultSettings","comment":"","params":[{"type_long":"ghidra.docking.settings.Settings","name":"settings","comment":"","type_short":"Settings"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAlignment","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"BitFieldDataType","comment":"BitFieldDataType provides a means of defining a minimally sized bit-field\n for use within data structures.  The length (i.e., storage size) of this bitfield datatype is\n the minimum number of bytes required to contain the bitfield at its specified offset.\n The effective bit-size of a bitfield will be limited by the size of the base\n datatype whose size may be controlled by its' associated datatype manager and data organization\n (e.g., IntegerDataType). \n \n NOTE: Instantiation of this datatype implementation is intended for internal use only.  \n Creating and manipulating bitfields should be accomplished directly via Structure or Union \n bitfield methods.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"MAX_BIT_LENGTH","comment":"","type_short":"int","constant_value":"255"},{"type_long":"ghidra.program.model.data.DataType","javadoc":"","static":false,"name":"baseDataType","comment":"","type_short":"DataType","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"bitSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"effectiveBitSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"bitOffset","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"storageSize","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.docking.settings.Settings","javadoc":"","static":false,"name":"defaultSettings","comment":"","type_short":"Settings","constant_value":null}]}
