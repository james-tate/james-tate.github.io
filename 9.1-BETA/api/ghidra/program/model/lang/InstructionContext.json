{"implements":[],"javadoc":"<code>InstructionContext<\/code> is utilized by a shared instruction prototype to\n access all relevant instruction data and context-register storage needed during \n instruction parse and semantic pcode generation.","static":false,"methods":[{"javadoc":"Get the instruction address that this context corresponds to.\n@return instruction address","static":false,"name":"getAddress","comment":"Get the instruction address that this context corresponds to.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"instruction address","type_short":"Address"}},{"javadoc":"Get the read-only processor context containing the context-register state\n state at the corresponding instruction.  This is primarily used during the \n parse phase to provide the initial context-register state.\n@returns the read-only processor context","static":false,"name":"getProcessorContext","comment":"Get the read-only processor context containing the context-register state\n state at the corresponding instruction.  This is primarily used during the \n parse phase to provide the initial context-register state.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.ProcessorContextView","comment":"","type_short":"ProcessorContextView"}},{"javadoc":"Get the read-only memory buffer containing the instruction bytes.  Its position will\n correspond to the instruction address.\n@return instruction memory buffer","static":false,"name":"getMemBuffer","comment":"Get the read-only memory buffer containing the instruction bytes.  Its position will\n correspond to the instruction address.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemBuffer","comment":"instruction memory buffer","type_short":"MemBuffer"}},{"javadoc":"Get the instruction parser context for the instruction which corresponds to this \n context object.\n@return the instruction parser context for the instruction which corresponds to this \n context object.\n@throws MemoryAccessException if memory error occurred while resolving instruction\n details.","static":false,"name":"getParserContext","comment":"Get the instruction parser context for the instruction which corresponds to this \n context object.","params":[],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory error occurred while resolving instruction\n details.","type_short":"MemoryAccessException"}],"return":{"type_long":"ghidra.program.model.lang.ParserContext","comment":"the instruction parser context for the instruction which corresponds to this \n context object.","type_short":"ParserContext"}},{"javadoc":"Get the instruction parser context which corresponds to the specified instruction\n address.  This may be obtained via either caching or by parsing the instruction\n at the specified address.  The returned ParserContext may be cast to the prototype's\n implementation without checking.  This method will throw an UnknownContextException\n if a compatible ParserContext is not found at the specified address.\n@return the instruction parser context at the specified instruction address\n@throws UnknownContextException if the instruction at the specified address\n was not previously parsed or attempting to instantiate context resulted in an\n exception.\n@throws MemoryAccessException if memory error occurred while resolving instruction\n details.","static":false,"name":"getParserContext","comment":"Get the instruction parser context which corresponds to the specified instruction\n address.  This may be obtained via either caching or by parsing the instruction\n at the specified address.  The returned ParserContext may be cast to the prototype's\n implementation without checking.  This method will throw an UnknownContextException\n if a compatible ParserContext is not found at the specified address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"instructionAddress","comment":"","type_short":"Address"}],"throws":[{"type_long":"ghidra.program.model.lang.UnknownContextException","comment":"if the instruction at the specified address\n was not previously parsed or attempting to instantiate context resulted in an\n exception.","type_short":"UnknownContextException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory error occurred while resolving instruction\n details.","type_short":"MemoryAccessException"}],"return":{"type_long":"ghidra.program.model.lang.ParserContext","comment":"the instruction parser context at the specified instruction address","type_short":"ParserContext"}}],"name":"InstructionContext","comment":"InstructionContext is utilized by a shared instruction prototype to\n access all relevant instruction data and context-register storage needed during \n instruction parse and semantic pcode generation.","fields":[]}
