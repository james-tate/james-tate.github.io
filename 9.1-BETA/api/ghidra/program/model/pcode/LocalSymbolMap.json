{"implements":[],"javadoc":"Local variables visible to a function.  This includes mapped (on the stack) and\n unmapped (only stored in a register).","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"@param highFunc HighFunction the local variables are defined within.\n@param spcname space name the local variables are defined within.","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighFunction","name":"highFunc","comment":"HighFunction the local variables are defined within.","type_short":"HighFunction"},{"type_long":"java.lang.String","name":"spcname","comment":"space name the local variables are defined within.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getHighFunction","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighFunction","comment":"","type_short":"HighFunction"}},{"javadoc":"Populate the local variable map from information attached to the Program DB's function.\n@param includeDefaultNames is true if default symbol names should be considered locked","static":false,"name":"grabFromFunction","comment":"Populate the local variable map from information attached to the Program DB's function.","params":[{"type_long":"boolean","name":"includeDefaultNames","comment":"is true if default symbol names should be considered locked","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isUserDefinedName","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Parse a &lt;mapsym&gt; tag in XML\n@param parser is the XML parser\n@return the reconstructed HighSymbol\n@throws PcodeXMLException for problems sub tags","static":false,"name":"parseSymbolXML","comment":"Parse a mapsym tag in XML","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"is the XML parser","type_short":"XmlPullParser"}],"throws":[{"type_long":"ghidra.program.model.pcode.PcodeXMLException","comment":"for problems sub tags","type_short":"PcodeXMLException"}],"return":{"type_long":"ghidra.program.model.pcode.HighSymbol","comment":"the reconstructed HighSymbol","type_short":"HighSymbol"}},{"javadoc":"Parse a local symbol scope in XML from the &lt;localdb&gt; tag.\n@param parser is the XML parser\n@throws PcodeXMLException for problems parsing individual tags","static":false,"name":"parseScopeXML","comment":"Parse a local symbol scope in XML from the localdb tag.","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"is the XML parser","type_short":"XmlPullParser"}],"throws":[{"type_long":"ghidra.program.model.pcode.PcodeXMLException","comment":"for problems parsing individual tags","type_short":"PcodeXMLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add mapped symbols to this LocalVariableMap, by parsing the &lt;symbollist&gt; and &lt;mapsym&gt; tags.\n@param parser is the XML parser\n@throws PcodeXMLException for problems parsing a tag","static":false,"name":"parseSymbolList","comment":"Add mapped symbols to this LocalVariableMap, by parsing the symbollist and mapsym tags.","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"is the XML parser","type_short":"XmlPullParser"}],"throws":[{"type_long":"ghidra.program.model.pcode.PcodeXMLException","comment":"for problems parsing a tag","type_short":"PcodeXMLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return an XML document string representing this local variable map.","static":false,"name":"buildLocalDbXML","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"an XML document string representing this local variable map.","type_short":"String"}},{"javadoc":"Get all the symbols mapped for this program, Param, Locals.\n The HighSymbol can either be a HighParam, or HighLocal\n@return an iterator over all mapped symbols.","static":false,"name":"getSymbols","comment":"Get all the symbols mapped for this program, Param, Locals.\n The HighSymbol can either be a HighParam, or HighLocal","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.pcode.HighSymbol>","comment":"an iterator over all mapped symbols.","type_short":"Iterator"}},{"javadoc":"Find any local variable (including input params) by address\n@param store - variable storage\n@param pc = Address of first use, or null if address\n             is valid throughout the entire scope\n@return HighLocal or null","static":false,"name":"findLocal","comment":"Find any local variable (including input params) by address","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"store","comment":"- variable storage","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.address.Address","name":"pc","comment":"= Address of first use, or null if address\n             is valid throughout the entire scope","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighSymbol","comment":"HighLocal or null","type_short":"HighSymbol"}},{"javadoc":"Find any local variable (including input params) by address\n@param addr - variable storage address\n@param pc = Address of first use, or null if address\n             is valid throughout the entire scope\n@return HighLocal or null","static":false,"name":"findLocal","comment":"Find any local variable (including input params) by address","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"- variable storage address","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"pc","comment":"= Address of first use, or null if address\n             is valid throughout the entire scope","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighSymbol","comment":"HighLocal or null","type_short":"HighSymbol"}},{"javadoc":"Lookup high variable based upon its symbol-id\n@param id symbol-id\n@return variable or null if not found","static":false,"name":"getSymbol","comment":"Lookup high variable based upon its symbol-id","params":[{"type_long":"int","name":"id","comment":"symbol-id","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighSymbol","comment":"variable or null if not found","type_short":"HighSymbol"}},{"javadoc":"","static":false,"name":"getNumParams","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getParamSymbol","comment":"","params":[{"type_long":"int","name":"i","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.MappedSymbol","comment":"","type_short":"MappedSymbol"}},{"javadoc":"","static":false,"name":"getParam","comment":"","params":[{"type_long":"int","name":"i","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighParam","comment":"","type_short":"HighParam"}},{"javadoc":"","static":false,"name":"containsVariableWithName","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"newMappedSymbol","comment":"","params":[{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"store","comment":"","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.address.Address","name":"pcaddr","comment":"","type_short":"Address"},{"type_long":"int","name":"slot","comment":"","type_short":"int"},{"type_long":"int","name":"id","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.MappedSymbol","comment":"","type_short":"MappedSymbol"}},{"javadoc":"","static":false,"name":"newDynamicSymbol","comment":"","params":[{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"","type_short":"DataType"},{"type_long":"int","name":"sz","comment":"","type_short":"int"},{"type_long":"long","name":"hash","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.Address","name":"pcaddr","comment":"","type_short":"Address"},{"type_long":"int","name":"format","comment":"","type_short":"int"},{"type_long":"int","name":"id","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.DynamicSymbol","comment":"","type_short":"DynamicSymbol"}},{"javadoc":"","static":false,"name":"insertSymbol","comment":"","params":[{"type_long":"ghidra.program.model.pcode.HighSymbol","name":"sym","comment":"","type_short":"HighSymbol"},{"type_long":"int","name":"id","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"newEquateSymbol","comment":"","params":[{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"long","name":"val","comment":"","type_short":"long"},{"type_long":"long","name":"hash","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"format","comment":"","type_short":"int"},{"type_long":"java.util.TreeMap<java.lang.String,ghidra.program.model.pcode.DynamicSymbol>","name":"constantSymbolMap","comment":"","type_short":"TreeMap"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Build dynamic symbols based on equates\n@param dbFunction is the function to pull equates for\n@param uniqueSymbolId is the next available symbol id\n@return the next available symbol id","static":false,"name":"grabEquates","comment":"Build dynamic symbols based on equates","params":[{"type_long":"ghidra.program.model.listing.Function","name":"dbFunction","comment":"is the function to pull equates for","type_short":"Function"},{"type_long":"int","name":"uniqueSymbolId","comment":"is the next available symbol id","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the next available symbol id","type_short":"int"}}],"name":"LocalSymbolMap","comment":"Local variables visible to a function.  This includes mapped (on the stack) and\n unmapped (only stored in a register).","fields":[{"type_long":"ghidra.program.model.pcode.HighFunction","javadoc":"","static":false,"name":"func","comment":"","type_short":"HighFunction","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"spacename","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.pcode.LocalSymbolMap.MappedVarKey,ghidra.program.model.pcode.HighSymbol>","javadoc":"","static":false,"name":"addrMappedSymbols","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<java.lang.Integer,ghidra.program.model.pcode.HighSymbol>","javadoc":"","static":false,"name":"symbolMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"ghidra.program.model.pcode.MappedSymbol[]","javadoc":"","static":false,"name":"paramSymbols","comment":"","type_short":"ghidra.program.model.pcode.MappedSymbol[]","constant_value":null},{"type_long":"java.util.Comparator<ghidra.program.model.pcode.MappedSymbol>","javadoc":"","static":true,"name":"PARAM_SYMBOL_SLOT_COMPARATOR","comment":"","type_short":"Comparator","constant_value":null}]}
