{"implements":[],"javadoc":"Pcode Op describes a generic machine operation.  You can think of\n it as the microcode for a specific processor's instruction set.  There\n are a finite number of PcodeOp's that theoretically can define the\n operations for any given processor.\n \n Pcode have\n    An operation code\n    Some number of input parameter varnodes\n    possible output varnode\n \n TODO: write an emulator for each PcodeOp.  It should execute on a Pcode machine state.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor - pcode part of sequence of pcodes, some number of inputs, output\n@param sq place in sequence of pcode\n@param op pcode operation\n@param numinputs number of inputs to operation, actual inputs not defined yet.\n@param out output from operation","static":false,"name":"<init>","comment":"Constructor - pcode part of sequence of pcodes, some number of inputs, output","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"sq","comment":"place in sequence of pcode","type_short":"SequenceNumber"},{"type_long":"int","name":"op","comment":"pcode operation","type_short":"int"},{"type_long":"int","name":"numinputs","comment":"number of inputs to operation, actual inputs not defined yet.","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"out","comment":"output from operation","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor - pcode part of sequence of pcodes, inputs, outputs\n@param sq place in sequence of pcode\n@param op pcode operation\n@param in inputs to operation\n@param out output from operation","static":false,"name":"<init>","comment":"Constructor - pcode part of sequence of pcodes, inputs, outputs","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"sq","comment":"place in sequence of pcode","type_short":"SequenceNumber"},{"type_long":"int","name":"op","comment":"pcode operation","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"in","comment":"inputs to operation","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"out","comment":"output from operation","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor - inputs and outputs\n@param a address pcode is attached to\n@param sequencenumber unique sequence number for the specified address.\n@param op pcode operation\n@param in inputs to operation\n@param out output from operation","static":false,"name":"<init>","comment":"Constructor - inputs and outputs","params":[{"type_long":"ghidra.program.model.address.Address","name":"a","comment":"address pcode is attached to","type_short":"Address"},{"type_long":"int","name":"sequencenumber","comment":"unique sequence number for the specified address.","type_short":"int"},{"type_long":"int","name":"op","comment":"pcode operation","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"in","comment":"inputs to operation","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"out","comment":"output from operation","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor - no output\n@param a address pcode is attached to\n@param op operation pcode performs\n@param in inputs from pcode operation","static":false,"name":"<init>","comment":"Constructor - no output","params":[{"type_long":"ghidra.program.model.address.Address","name":"a","comment":"address pcode is attached to","type_short":"Address"},{"type_long":"int","name":"sequencenumber","comment":"","type_short":"int"},{"type_long":"int","name":"op","comment":"operation pcode performs","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"in","comment":"inputs from pcode operation","type_short":"ghidra.program.model.pcode.Varnode[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor - no inputs, output\n@param a address pcode is attached to\n@param op pcode operation","static":false,"name":"<init>","comment":"Constructor - no inputs, output","params":[{"type_long":"ghidra.program.model.address.Address","name":"a","comment":"address pcode is attached to","type_short":"Address"},{"type_long":"int","name":"sequencenumber","comment":"","type_short":"int"},{"type_long":"int","name":"op","comment":"pcode operation","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return pcode operation code","static":false,"name":"getOpcode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"pcode operation code","type_short":"int"}},{"javadoc":"@return number of input varnodes","static":false,"name":"getNumInputs","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"number of input varnodes","type_short":"int"}},{"javadoc":"@return get input varnodes","static":false,"name":"getInputs","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode[]","comment":"get input varnodes","type_short":"ghidra.program.model.pcode.Varnode[]"}},{"javadoc":"@param i the i'th input varnode\n@return the i'th input varnode","static":false,"name":"getInput","comment":"","params":[{"type_long":"int","name":"i","comment":"the i'th input varnode","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"the i'th input varnode","type_short":"Varnode"}},{"javadoc":"@return get output varnodes","static":false,"name":"getOutput","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"get output varnodes","type_short":"Varnode"}},{"javadoc":"Assuming vn is an input to this op, return its input slot number\n@param vn is the input varnode\n@return the slot number","static":false,"name":"getSlot","comment":"Assuming vn is an input to this op, return its input slot number","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"vn","comment":"is the input varnode","type_short":"Varnode"}],"throws":[],"return":{"type_long":"int","comment":"the slot number","type_short":"int"}},{"javadoc":"@return get the string representation for the pcode operation","static":false,"name":"getMnemonic","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"get the string representation for the pcode operation","type_short":"String"}},{"javadoc":"Check if the pcode has been determined to be a dead operation.\n@return true if the pcode has been determined to have no effect in the context it is used","static":false,"name":"isDead","comment":"Check if the pcode has been determined to be a dead operation.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the pcode has been determined to have no effect in the context it is used","type_short":"boolean"}},{"javadoc":"@return true if the pcode assigns a value to an output varnode","static":false,"name":"isAssignment","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the pcode assigns a value to an output varnode","type_short":"boolean"}},{"javadoc":"@return the sequence number this pcode is within some number of pcode","static":false,"name":"getSeqnum","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.SequenceNumber","comment":"the sequence number this pcode is within some number of pcode","type_short":"SequenceNumber"}},{"javadoc":"","static":false,"name":"getBasicIter","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.program.model.pcode.PcodeOp>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getInsertIter","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<java.lang.Object>","comment":"","type_short":"Iterator"}},{"javadoc":"@return the pcode basic block this pcode belongs to","static":false,"name":"getParent","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.PcodeBlockBasic","comment":"the pcode basic block this pcode belongs to","type_short":"PcodeBlockBasic"}},{"javadoc":"Set the pcode operation code\n@param o pcode operation code","static":false,"name":"setOpcode","comment":"Set the pcode operation code","params":[{"type_long":"int","name":"o","comment":"pcode operation code","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set\/Replace an input varnode at the given slot.\n@param vn varnode to replace\n@param slot index of input varnode to be replaced","static":false,"name":"setInput","comment":"Set\/Replace an input varnode at the given slot.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"vn","comment":"varnode to replace","type_short":"Varnode"},{"type_long":"int","name":"slot","comment":"index of input varnode to be replaced","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a varnode at the given slot from the list of input varnodes\n@param slot index of input varnode to remove","static":false,"name":"removeInput","comment":"Remove a varnode at the given slot from the list of input varnodes","params":[{"type_long":"int","name":"slot","comment":"index of input varnode to remove","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert an input varnode at the given index of input varnodes\n@param vn varnode to insert\n@param slot insert index in input varnode list","static":false,"name":"insertInput","comment":"Insert an input varnode at the given index of input varnodes","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"vn","comment":"varnode to insert","type_short":"Varnode"},{"type_long":"int","name":"slot","comment":"insert index in input varnode list","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set a unique number for pcode ops that are attached to the same address\n@param t unique id","static":false,"name":"setTime","comment":"Set a unique number for pcode ops that are attached to the same address","params":[{"type_long":"int","name":"t","comment":"unique id","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.\n@param ord relative position of pcode op in basic block","static":false,"name":"setOrder","comment":"Set relative position information of PcodeOps within\n a basic block, may change as basic block is edited.","params":[{"type_long":"int","name":"ord","comment":"relative position of pcode op in basic block","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the output varnode for the pcode operation.\n@param vn new output varnode","static":false,"name":"setOutput","comment":"Set the output varnode for the pcode operation.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"vn","comment":"new output varnode","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"buildXML","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"resBuf","comment":"","type_short":"StringBuilder"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read pcode from SAX tree parse node.\n@param el SAX tree parse node\n@param pfact factory used to create pcode correctly\n@return new PcodeOp\n@throws PcodeXMLException","static":true,"name":"readXML","comment":"Read pcode from SAX tree parse node.","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"},{"type_long":"ghidra.program.model.pcode.PcodeFactory","name":"pfact","comment":"factory used to create pcode correctly","type_short":"PcodeFactory"}],"throws":[{"type_long":"ghidra.program.model.pcode.PcodeXMLException","comment":"","type_short":"PcodeXMLException"}],"return":{"type_long":"ghidra.program.model.pcode.PcodeOp","comment":"new PcodeOp","type_short":"PcodeOp"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Generate a lookup table that maps pcode mnemonic strings to pcode operation codes.","static":true,"name":"generateOpcodeTable","comment":"Generate a lookup table that maps pcode mnemonic strings to pcode operation codes.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get string representation for pcode operation\n@param op operation code\n@return String rep of pcode operation\n@throws UnknownInstructionException","static":true,"name":"getMnemonic","comment":"Get string representation for pcode operation","params":[{"type_long":"int","name":"op","comment":"operation code","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String rep of pcode operation","type_short":"String"}},{"javadoc":"Get the pcode op code for the given pcode mnemonic string.\n@param s pcode op mnemonic string\n@return the pcode op code\n@throws UnknownInstructionException","static":true,"name":"getOpcode","comment":"Get the pcode op code for the given pcode mnemonic string.","params":[{"type_long":"java.lang.String","name":"s","comment":"pcode op mnemonic string","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.lang.UnknownInstructionException","comment":"","type_short":"UnknownInstructionException"}],"return":{"type_long":"int","comment":"the pcode op code","type_short":"int"}}],"name":"PcodeOp","comment":"Pcode Op describes a generic machine operation.  You can think of\n it as the microcode for a specific processor's instruction set.  There\n are a finite number of PcodeOp's that theoretically can define the\n operations for any given processor.\n \n Pcode have\n    An operation code\n    Some number of input parameter varnodes\n    possible output varnode\n \n TODO: write an emulator for each PcodeOp.  It should execute on a Pcode machine state.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"UNIMPLEMENTED","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"COPY","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"LOAD","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"STORE","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"BRANCH","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"CBRANCH","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"BRANCHIND","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"CALL","comment":"","type_short":"int","constant_value":"7"},{"type_long":"int","javadoc":"","static":true,"name":"CALLIND","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"CALLOTHER","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"RETURN","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"INT_EQUAL","comment":"","type_short":"int","constant_value":"11"},{"type_long":"int","javadoc":"","static":true,"name":"INT_NOTEQUAL","comment":"","type_short":"int","constant_value":"12"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SLESS","comment":"","type_short":"int","constant_value":"13"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SLESSEQUAL","comment":"","type_short":"int","constant_value":"14"},{"type_long":"int","javadoc":"","static":true,"name":"INT_LESS","comment":"","type_short":"int","constant_value":"15"},{"type_long":"int","javadoc":"","static":true,"name":"INT_LESSEQUAL","comment":"","type_short":"int","constant_value":"16"},{"type_long":"int","javadoc":"","static":true,"name":"INT_ZEXT","comment":"","type_short":"int","constant_value":"17"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SEXT","comment":"","type_short":"int","constant_value":"18"},{"type_long":"int","javadoc":"","static":true,"name":"INT_ADD","comment":"","type_short":"int","constant_value":"19"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SUB","comment":"","type_short":"int","constant_value":"20"},{"type_long":"int","javadoc":"","static":true,"name":"INT_CARRY","comment":"","type_short":"int","constant_value":"21"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SCARRY","comment":"","type_short":"int","constant_value":"22"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SBORROW","comment":"","type_short":"int","constant_value":"23"},{"type_long":"int","javadoc":"","static":true,"name":"INT_2COMP","comment":"","type_short":"int","constant_value":"24"},{"type_long":"int","javadoc":"","static":true,"name":"INT_NEGATE","comment":"","type_short":"int","constant_value":"25"},{"type_long":"int","javadoc":"","static":true,"name":"INT_XOR","comment":"","type_short":"int","constant_value":"26"},{"type_long":"int","javadoc":"","static":true,"name":"INT_AND","comment":"","type_short":"int","constant_value":"27"},{"type_long":"int","javadoc":"","static":true,"name":"INT_OR","comment":"","type_short":"int","constant_value":"28"},{"type_long":"int","javadoc":"","static":true,"name":"INT_LEFT","comment":"","type_short":"int","constant_value":"29"},{"type_long":"int","javadoc":"","static":true,"name":"INT_RIGHT","comment":"","type_short":"int","constant_value":"30"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SRIGHT","comment":"","type_short":"int","constant_value":"31"},{"type_long":"int","javadoc":"","static":true,"name":"INT_MULT","comment":"","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"","static":true,"name":"INT_DIV","comment":"","type_short":"int","constant_value":"33"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SDIV","comment":"","type_short":"int","constant_value":"34"},{"type_long":"int","javadoc":"","static":true,"name":"INT_REM","comment":"","type_short":"int","constant_value":"35"},{"type_long":"int","javadoc":"","static":true,"name":"INT_SREM","comment":"","type_short":"int","constant_value":"36"},{"type_long":"int","javadoc":"","static":true,"name":"BOOL_NEGATE","comment":"","type_short":"int","constant_value":"37"},{"type_long":"int","javadoc":"","static":true,"name":"BOOL_XOR","comment":"","type_short":"int","constant_value":"38"},{"type_long":"int","javadoc":"","static":true,"name":"BOOL_AND","comment":"","type_short":"int","constant_value":"39"},{"type_long":"int","javadoc":"","static":true,"name":"BOOL_OR","comment":"","type_short":"int","constant_value":"40"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_EQUAL","comment":"","type_short":"int","constant_value":"41"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_NOTEQUAL","comment":"","type_short":"int","constant_value":"42"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_LESS","comment":"","type_short":"int","constant_value":"43"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_LESSEQUAL","comment":"","type_short":"int","constant_value":"44"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_NAN","comment":"","type_short":"int","constant_value":"46"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_ADD","comment":"","type_short":"int","constant_value":"47"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_DIV","comment":"","type_short":"int","constant_value":"48"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_MULT","comment":"","type_short":"int","constant_value":"49"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_SUB","comment":"","type_short":"int","constant_value":"50"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_NEG","comment":"","type_short":"int","constant_value":"51"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_ABS","comment":"","type_short":"int","constant_value":"52"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_SQRT","comment":"","type_short":"int","constant_value":"53"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_INT2FLOAT","comment":"","type_short":"int","constant_value":"54"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_FLOAT2FLOAT","comment":"","type_short":"int","constant_value":"55"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_TRUNC","comment":"","type_short":"int","constant_value":"56"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_CEIL","comment":"","type_short":"int","constant_value":"57"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_FLOOR","comment":"","type_short":"int","constant_value":"58"},{"type_long":"int","javadoc":"","static":true,"name":"FLOAT_ROUND","comment":"","type_short":"int","constant_value":"59"},{"type_long":"int","javadoc":"","static":true,"name":"MULTIEQUAL","comment":"","type_short":"int","constant_value":"60"},{"type_long":"int","javadoc":"","static":true,"name":"INDIRECT","comment":"","type_short":"int","constant_value":"61"},{"type_long":"int","javadoc":"","static":true,"name":"PIECE","comment":"","type_short":"int","constant_value":"62"},{"type_long":"int","javadoc":"","static":true,"name":"SUBPIECE","comment":"","type_short":"int","constant_value":"63"},{"type_long":"int","javadoc":"","static":true,"name":"CAST","comment":"","type_short":"int","constant_value":"64"},{"type_long":"int","javadoc":"","static":true,"name":"PTRADD","comment":"","type_short":"int","constant_value":"65"},{"type_long":"int","javadoc":"","static":true,"name":"PTRSUB","comment":"","type_short":"int","constant_value":"66"},{"type_long":"int","javadoc":"","static":true,"name":"SEGMENTOP","comment":"","type_short":"int","constant_value":"67"},{"type_long":"int","javadoc":"","static":true,"name":"CPOOLREF","comment":"","type_short":"int","constant_value":"68"},{"type_long":"int","javadoc":"","static":true,"name":"NEW","comment":"","type_short":"int","constant_value":"69"},{"type_long":"int","javadoc":"","static":true,"name":"PCODE_MAX","comment":"","type_short":"int","constant_value":"70"},{"type_long":"java.util.Hashtable<java.lang.String,java.lang.Integer>","javadoc":"","static":true,"name":"opcodeTable","comment":"","type_short":"Hashtable","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"opcode","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.pcode.SequenceNumber","javadoc":"","static":false,"name":"seqnum","comment":"","type_short":"SequenceNumber","constant_value":null},{"type_long":"ghidra.program.model.pcode.Varnode[]","javadoc":"","static":false,"name":"input","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]","constant_value":null},{"type_long":"ghidra.program.model.pcode.Varnode","javadoc":"","static":false,"name":"output","comment":"","type_short":"Varnode","constant_value":null}]}
