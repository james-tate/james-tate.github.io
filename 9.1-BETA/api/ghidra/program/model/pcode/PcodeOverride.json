{"implements":[],"javadoc":"","static":false,"methods":[{"javadoc":"@return current instruction address","static":false,"name":"getInstructionStart","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"current instruction address","type_short":"Address"}},{"javadoc":"Get the flow override which may have been applied\n to the current instruction.\n@return flow override or null","static":false,"name":"getFlowOverride","comment":"Get the flow override which may have been applied\n to the current instruction.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.FlowOverride","comment":"flow override or null","type_short":"FlowOverride"}},{"javadoc":"Get the primary overriding reference address of {@link RefType} {@code type} from \n the current instruction\n@param type type of reference\n@return call reference address or null","static":false,"name":"getOverridingReference","comment":"Get the primary overriding reference address of RefType  from \n the current instruction","params":[{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"type of reference","type_short":"RefType"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"call reference address or null","type_short":"Address"}},{"javadoc":"Get the fall-through override address which may have been \n applied to the current instruction.\n@return fall-through override address or null","static":false,"name":"getFallThroughOverride","comment":"Get the fall-through override address which may have been \n applied to the current instruction.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"fall-through override address or null","type_short":"Address"}},{"javadoc":"Returns the call-fixup for a specified call destination.\n@param callDestAddr call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.\n@return true if call destination function has been tagged with a call-fixup","static":false,"name":"hasCallFixup","comment":"Returns the call-fixup for a specified call destination.","params":[{"type_long":"ghidra.program.model.address.Address","name":"callDestAddr","comment":"call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if call destination function has been tagged with a call-fixup","type_short":"boolean"}},{"javadoc":"Returns the call-fixup for a specified call destination.\n If the destination function has not be tagged or was tagged \n with an unknown CallFixup name this method will return null.\n@param callDestAddr call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.\n@return call fixup object or null","static":false,"name":"getCallFixup","comment":"Returns the call-fixup for a specified call destination.\n If the destination function has not be tagged or was tagged \n with an unknown CallFixup name this method will return null.","params":[{"type_long":"ghidra.program.model.address.Address","name":"callDestAddr","comment":"call destination address.  This address is used to \n identify a function which may have been tagged with a CallFixup.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.InjectPayload","comment":"call fixup object or null","type_short":"InjectPayload"}},{"javadoc":"Register that a call override has been applied at the current instruction.","static":false,"name":"setCallOverrideRefApplied","comment":"Register that a call override has been applied at the current instruction.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a boolean indicating whether a call override has been applied at the current instruction\n@return has call override been applied","static":false,"name":"isCallOverrideRefApplied","comment":"Returns a boolean indicating whether a call override has been applied at the current instruction","params":[],"throws":[],"return":{"type_long":"boolean","comment":"has call override been applied","type_short":"boolean"}},{"javadoc":"Register that a jump override has been applied at the current instruction","static":false,"name":"setJumpOverrideRefApplied","comment":"Register that a jump override has been applied at the current instruction","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a boolean indicating whether a jump override has been applied at the current instruction\n@return has jump override been applied","static":false,"name":"isJumpOverrideRefApplied","comment":"Returns a boolean indicating whether a jump override has been applied at the current instruction","params":[],"throws":[],"return":{"type_long":"boolean","comment":"has jump override been applied","type_short":"boolean"}},{"javadoc":"Register that a callother call override has been applied at the current instruction","static":false,"name":"setCallOtherCallOverrideRefApplied","comment":"Register that a callother call override has been applied at the current instruction","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a boolean indicating whether a callother call override has been applied at the current\n instruction\n@return has callother call override been applied","static":false,"name":"isCallOtherCallOverrideRefApplied","comment":"Returns a boolean indicating whether a callother call override has been applied at the current\n instruction","params":[],"throws":[],"return":{"type_long":"boolean","comment":"has callother call override been applied","type_short":"boolean"}},{"javadoc":"Register that a callother jump override has been applied at the current instruction","static":false,"name":"setCallOtherJumpOverrideRefApplied","comment":"Register that a callother jump override has been applied at the current instruction","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a boolean indicating whether a callother jump override has been applied at the current\n instruction\n@return has callother jump override been applied","static":false,"name":"isCallOtherJumpOverrideApplied","comment":"Returns a boolean indicating whether a callother jump override has been applied at the current\n instruction","params":[],"throws":[],"return":{"type_long":"boolean","comment":"has callother jump override been applied","type_short":"boolean"}},{"javadoc":"Returns a boolean indicating whether there are any primary overriding references at the current \n instruction\n@return are there primary overriding references","static":false,"name":"hasPotentialOverride","comment":"Returns a boolean indicating whether there are any primary overriding references at the current \n instruction","params":[],"throws":[],"return":{"type_long":"boolean","comment":"are there primary overriding references","type_short":"boolean"}},{"javadoc":"Get the primary call reference address from the current instruction\n@return call reference address or null","static":false,"name":"getPrimaryCallReference","comment":"Get the primary call reference address from the current instruction","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"call reference address or null","type_short":"Address"}}],"name":"PcodeOverride","comment":"","fields":[]}
