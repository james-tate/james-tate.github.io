{"implements":["ghidra.program.model.block.CodeBlockReferenceIterator"],"javadoc":"SubroutineSourceReferenceIterator is a unidirectional iterator over \n the source <CODE>CodeBlockReference<\/CODE>s for a CodeBlock.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct an Iterator over Source blocks for a CodeBlock.\n@param block block to get destination blocks for.  This should be a\n subroutine obtained from SubroutineBlockModel.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"<init>","comment":"Construct an Iterator over Source blocks for a CodeBlock.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"block to get destination blocks for.  This should be a\n subroutine obtained from SubroutineBlockModel.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReference","comment":"","type_short":"CodeBlockReference"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"getNumSources","comment":"Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of source references to.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Count and queue all source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"getSources","comment":"Count and queue all source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of source references to.","type_short":"CodeBlock"},{"type_long":"java.util.List<ghidra.program.model.block.CodeBlockReference>","name":"blockRefQueue","comment":"the CodeBlockReference queue, may be null","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Create source block reference and add it to the blockRefQueue if block\n is found at specified srcAddr.  A valid block must exist at the srcAddr\n for a reference to be added and\/or counted.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param destBlock the source block associated with the CodeBlockReference(s)\n@param destAddr destination address\n@param srcAddr source address\n@param flowType the flow type to be associated with reference.\n@param monitor task monitor which allows user to cancel operation.\n@return the number of source references\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"queueSrcReferences","comment":"Create source block reference and add it to the blockRefQueue if block\n is found at specified srcAddr.  A valid block must exist at the srcAddr\n for a reference to be added and\/or counted.","params":[{"type_long":"java.util.List<ghidra.program.model.block.CodeBlockReference>","name":"blockRefQueue","comment":"the CodeBlockReference queue, may be null","type_short":"List"},{"type_long":"ghidra.program.model.block.CodeBlock","name":"destBlock","comment":"the source block associated with the CodeBlockReference(s)","type_short":"CodeBlock"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"destination address","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"srcAddr","comment":"source address","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.FlowType","name":"flowType","comment":"the flow type to be associated with reference.","type_short":"FlowType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"the number of source references","type_short":"int"}}],"name":"SubroutineSourceReferenceIterator","comment":"SubroutineSourceReferenceIterator is a unidirectional iterator over \n the source CodeBlockReferences for a CodeBlock.","fields":[{"type_long":"java.util.LinkedList<ghidra.program.model.block.CodeBlockReference>","javadoc":"","static":false,"name":"blockRefQueue","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null}]}
