{"implements":["ghidra.program.model.block.CodeBlockReferenceIterator"],"javadoc":"SimpleSourceReferenceIterator is a unidirectional iterator over the <CODE>CodeBlockReference<\/CODE>s\n for a CodeBlock.  It is <B>not<\/B> failfast, whenever <CODE>hasNext()<\/CODE>\n are called it will find if there is a next <CODE>CodeBlockReference<\/CODE> and acquire\n a handle if there is one. If new code units are added to the listing after\n the iterator is created it will find them as it scans ahead.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct an Iterator over Source blocks for a CodeBlock.\n@param block block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"<init>","comment":"Construct an Iterator over Source blocks for a CodeBlock.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel.","type_short":"CodeBlock"},{"type_long":"boolean","name":"followIndirectFlows","comment":"indirect references will only be included if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReference","comment":"","type_short":"CodeBlockReference"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.\n@deprecated this method should be avoided since it repeats the work of the iterator","static":true,"name":"getNumSources","comment":"Get number of source references flowing from this subroutine (block).\n All Calls to this block, and all external FlowType block references\n to this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of source references to.","type_short":"CodeBlock"},{"type_long":"boolean","name":"followIndirectFlows","comment":"indirect references will only be included if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Count and queue all source references flowing from this block.\n All Calls to this block, and all external FlowType block references\n to this block are counted.\n@param block code block to get the number of source references to.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"getSources","comment":"Count and queue all source references flowing from this block.\n All Calls to this block, and all external FlowType block references\n to this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of source references to.","type_short":"CodeBlock"},{"type_long":"java.util.LinkedList<ghidra.program.model.block.CodeBlockReferenceImpl>","name":"blockRefQueue","comment":"the CodeBlockReference queue, may be null","type_short":"LinkedList"},{"type_long":"boolean","name":"followIndirectFlows","comment":"indirect references will only be included if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Process a data reference for possible indirect sources.  Update block reference queue \n with indirect block references.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param destBlock reference\/destination block\n@param destRef possible pointer reference to destBlock (is not verified)\n@param indirectFlowType reference type to assign to indirect references discovered\n@param monitor task monitor which allows user to cancel operation.\n@return number of references found, 0 if memRef does not correspond to a pointer.\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"followIndirection","comment":"Process a data reference for possible indirect sources.  Update block reference queue \n with indirect block references.","params":[{"type_long":"java.util.LinkedList<ghidra.program.model.block.CodeBlockReferenceImpl>","name":"blockRefQueue","comment":"the CodeBlockReference queue, may be null","type_short":"LinkedList"},{"type_long":"ghidra.program.model.block.CodeBlock","name":"destBlock","comment":"reference\/destination block","type_short":"CodeBlock"},{"type_long":"ghidra.program.model.symbol.Reference","name":"destRef","comment":"possible pointer reference to destBlock (is not verified)","type_short":"Reference"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"number of references found, 0 if memRef does not correspond to a pointer.","type_short":"int"}},{"javadoc":"Create a new block reference and add it to the queue.\n@param blockRefQueue the CodeBlockReference queue, may be null\n@param destBlock reference\/destination block\n@param toAddr reference destination address\n@param fromAddr reference source address\n@param flowType reference flow type\n@param monitor task monitor which allows user to cancel operation.","static":true,"name":"queueDestReference","comment":"Create a new block reference and add it to the queue.","params":[{"type_long":"java.util.LinkedList<ghidra.program.model.block.CodeBlockReferenceImpl>","name":"blockRefQueue","comment":"the CodeBlockReference queue, may be null","type_short":"LinkedList"},{"type_long":"ghidra.program.model.block.CodeBlock","name":"destBlock","comment":"reference\/destination block","type_short":"CodeBlock"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"reference destination address","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"reference source address","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.FlowType","name":"flowType","comment":"reference flow type","type_short":"FlowType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"SimpleSourceReferenceIterator","comment":"SimpleSourceReferenceIterator is a unidirectional iterator over the CodeBlockReferences\n for a CodeBlock.  It is not failfast, whenever hasNext()\n are called it will find if there is a next CodeBlockReference and acquire\n a handle if there is one. If new code units are added to the listing after\n the iterator is created it will find them as it scans ahead.","fields":[{"type_long":"java.util.LinkedList<ghidra.program.model.block.CodeBlockReferenceImpl>","javadoc":"","static":false,"name":"blockRefQueue","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null}]}
