{"implements":[],"javadoc":"Associates objects with address ranges.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new ObjectRangeMap","static":false,"name":"<init>","comment":"Constructs a new ObjectRangeMap","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an {@link AddressRangeIterator} over all ranges that have associated objects.\n@return an {@link AddressRangeIterator} over all ranges that have associated objects.","static":false,"name":"getAddressRangeIterator","comment":"Returns an AddressRangeIterator over all ranges that have associated objects.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"an AddressRangeIterator over all ranges that have associated objects.","type_short":"AddressRangeIterator"}},{"javadoc":"Returns an {@link AddressRangeIterator} over all ranges that have associated objects within\n the given range.  Object Ranges that overlap the beginning or end of the given range are\n included, but have thier start or end index adjusted to be in the given range.\n@param start the first Address in the range to find all index ranges that have associated values.\n@param end the last Address(inclusive) in the range to find all index ranges that have associated\n  values.\n@return an {@link AddressRangeIterator} over all ranges that have associated objects within the\n given range.","static":false,"name":"getAddressRangeIterator","comment":"Returns an AddressRangeIterator over all ranges that have associated objects within\n the given range.  Object Ranges that overlap the beginning or end of the given range are\n included, but have thier start or end index adjusted to be in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first Address in the range to find all index ranges that have associated values.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last Address(inclusive) in the range to find all index ranges that have associated\n  values.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRangeIterator","comment":"an AddressRangeIterator over all ranges that have associated objects within the\n given range.","type_short":"AddressRangeIterator"}},{"javadoc":"Move all values within an address range to a new range.\n@param fromAddr the first address of the range to be moved.\n@param toAddr the address where to the range is to be moved.\n@param length the number of addresses to move.\n@param monitor the task monitor.\n@throws CancelledException if the user canceled the operation via the task monitor.\n@throws AddressOverflowException if the length is such that a address wrap occurs","static":false,"name":"moveAddressRange","comment":"Move all values within an address range to a new range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"the first address of the range to be moved.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the address where to the range is to be moved.","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of addresses to move.","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user canceled the operation via the task monitor.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Associates the given object with all indices in the given range. The object may be null,\n but an association is still established.  Use the clearRange() method to remove associations.\n@param start the start of the range.\n@param end the end (inclusive) of the range.\n@param object the object to associate with the given range.","static":false,"name":"setObject","comment":"Associates the given object with all indices in the given range. The object may be null,\n but an association is still established.  Use the clearRange() method to remove associations.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the start of the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the end (inclusive) of the range.","type_short":"Address"},{"type_long":"T","name":"object","comment":"the object to associate with the given range.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"adjustRemainingRangeForOverlap","comment":"","params":[{"type_long":"T","name":"object","comment":"","type_short":"T"},{"type_long":"ghidra.program.database.register.AddressValueRange<T>","name":"newRange","comment":"","type_short":"AddressValueRange"},{"type_long":"int","name":"insertionIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"newEnd","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.database.register.AddressValueRange<T>","comment":"","type_short":"AddressValueRange"}},{"javadoc":"","static":false,"name":"removeCompletelyOverlappedRanges","comment":"","params":[{"type_long":"int","name":"insertionIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"newEnd","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"adjustPreviousRangeForOverlap","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"T","name":"object","comment":"","type_short":"T"},{"type_long":"ghidra.program.database.register.AddressValueRange<T>","name":"newRange","comment":"","type_short":"AddressValueRange"},{"type_long":"int","name":"pos","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.database.register.AddressValueRange<T>","comment":"","type_short":"AddressValueRange"}},{"javadoc":"Clears all objects from map","static":false,"name":"clearAll","comment":"Clears all objects from map","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears any object associations within the given range.\n@param start the first index in the range to be cleared.\n@param end the last index in the range to be cleared.","static":false,"name":"clearRange","comment":"Clears any object associations within the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first index in the range to be cleared.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last index in the range to be cleared.","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the associated address has an associated object even if the assocated object\n is null.\n@param address the index to check for an association.\n@return true if the associated index has an associated object even if the assocated object\n is null.","static":false,"name":"contains","comment":"Returns true if the associated address has an associated object even if the assocated object\n is null.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the index to check for an association.","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the associated index has an associated object even if the assocated object\n is null.","type_short":"boolean"}},{"javadoc":"Returns the object associated with the given index or null if no object is associated with\n the given index.  Note that null is a valid association so a null result could be either\n no association or an actual association of the index to null.  Use the contains() method\n first if the distinction is important.  If the contains() method returns true, the result\n is cached so the next call to getObject() will be fast.\n@param address the index at which to retrieve an assocated object.\n@return the object (which can be null) associated with the given index or null if no such\n association exists.","static":false,"name":"getObject","comment":"Returns the object associated with the given index or null if no object is associated with\n the given index.  Note that null is a valid association so a null result could be either\n no association or an actual association of the index to null.  Use the contains() method\n first if the distinction is important.  If the contains() method returns true, the result\n is cached so the next call to getObject() will be fast.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the index at which to retrieve an assocated object.","type_short":"Address"}],"throws":[],"return":{"type_long":"T","comment":"the object (which can be null) associated with the given index or null if no such\n association exists.","type_short":"T"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getPositionOfRangeAtOrBefore","comment":"","params":[{"type_long":"ghidra.program.database.register.AddressValueRange<T>","name":"valueRange","comment":"","type_short":"AddressValueRange"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getPositionOfRangeBefore","comment":"","params":[{"type_long":"ghidra.program.database.register.AddressValueRange<T>","name":"valueRange","comment":"","type_short":"AddressValueRange"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"valuesEqual","comment":"","params":[{"type_long":"java.lang.Object","name":"value","comment":"","type_short":"Object"},{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getMin","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getMax","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"addr2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the value or hole range containing the specified address\n@param addr","static":false,"name":"getAddressRangeContaining","comment":"Get the value or hole range containing the specified address","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange","comment":"","type_short":"AddressRange"}}],"name":"AddressRangeObjectMap","comment":"Associates objects with address ranges.","fields":[{"type_long":"java.util.List<ghidra.program.database.register.AddressValueRange<T>>","javadoc":"","static":false,"name":"ranges","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.program.database.register.AddressValueRange<T>","javadoc":"","static":false,"name":"lastRange","comment":"","type_short":"AddressValueRange","constant_value":null}]}
