{"implements":[],"javadoc":"Adapter to access the Composite database table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets an adapter for working with the composite data type database table. \n The composite table is used to store structures and unions. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.\n@param handle handle to the database to be accessed.\n@param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).\n@param monitor the monitor to use for displaying status or for canceling.\n@return the adapter for accessing the table of composite data types.\n@throws VersionException if the database handle's version doesn't match the expected version.\n@throws IOException if there is trouble accessing the database.\n@throws CancelledException task cancelled","static":true,"name":"getAdapter","comment":"Gets an adapter for working with the composite data type database table. \n The composite table is used to store structures and unions. The adapter is based \n on the version of the database associated with the specified database handle and the openMode.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to the database to be accessed.","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor to use for displaying status or for canceling.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if the database handle's version doesn't match the expected version.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if there is trouble accessing the database.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"task cancelled","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.database.data.CompositeDBAdapter","comment":"the adapter for accessing the table of composite data types.","type_short":"CompositeDBAdapter"}},{"javadoc":"Tries to get a read only adapter for the database whose handle is passed to this method.\n@param handle handle to prior version of the database.\n@return the read only Composite data type table adapter\n@throws VersionException if a read only adapter can't be obtained for the database handle's version.\n@throws IOException","static":true,"name":"findReadOnlyAdapter","comment":"Tries to get a read only adapter for the database whose handle is passed to this method.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to prior version of the database.","type_short":"DBHandle"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if a read only adapter can't be obtained for the database handle's version.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.data.CompositeDBAdapter","comment":"the read only Composite data type table adapter","type_short":"CompositeDBAdapter"}},{"javadoc":"Upgrades the Composite data type table from the oldAdapter's version to the current version.\n@param handle handle to the database whose table is to be upgraded to a newer version.\n@param oldAdapter the adapter for the existing table to be upgraded.\n@param monitor task monitor\n@return the adapter for the new upgraded version of the table.\n@throws VersionException if the the table's version does not match the expected version\n for this adapter.\n@throws IOException if the database can't be read or written.\n@throws CancelledException user cancelled upgrade","static":true,"name":"upgrade","comment":"Upgrades the Composite data type table from the oldAdapter's version to the current version.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to the database whose table is to be upgraded to a newer version.","type_short":"DBHandle"},{"type_long":"ghidra.program.database.data.CompositeDBAdapter","name":"oldAdapter","comment":"the adapter for the existing table to be upgraded.","type_short":"CompositeDBAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if the the table's version does not match the expected version\n for this adapter.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if the database can't be read or written.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"user cancelled upgrade","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.database.data.CompositeDBAdapter","comment":"the adapter for the new upgraded version of the table.","type_short":"CompositeDBAdapter"}},{"javadoc":"Creates a database record for a composite data type (structure or union).\n@param name the unique name for this data type\n@param comments comments about this data type\n@param isUnion true indicates this data type is a union and all component offsets are at zero.\n@param categoryID the ID for the category that contains this array.\n@param length the total length or size of this data type.\n@param sourceArchiveID the ID for the source archive where this data type originated.\n@param sourceDataTypeID the ID of the associated data type in the source archive.\n@param lastChangeTime the time this data type was last changed.\n@param internalAlignment UNALIGNED, ALIGNED_NO_PACKING or the packing value \n currently in use by this data type.\n@param externalAlignment DEFAULT_ALIGNED, MACHINE_ALIGNED or the minimum alignment value \n currently in use by this data type.\n@return the database record for this data type.\n@throws IOException if the database can't be accessed.","static":false,"name":"createRecord","comment":"Creates a database record for a composite data type (structure or union).","params":[{"type_long":"java.lang.String","name":"name","comment":"the unique name for this data type","type_short":"String"},{"type_long":"java.lang.String","name":"comments","comment":"comments about this data type","type_short":"String"},{"type_long":"boolean","name":"isUnion","comment":"true indicates this data type is a union and all component offsets are at zero.","type_short":"boolean"},{"type_long":"long","name":"categoryID","comment":"the ID for the category that contains this array.","type_short":"long"},{"type_long":"int","name":"length","comment":"the total length or size of this data type.","type_short":"int"},{"type_long":"long","name":"sourceArchiveID","comment":"the ID for the source archive where this data type originated.","type_short":"long"},{"type_long":"long","name":"sourceDataTypeID","comment":"the ID of the associated data type in the source archive.","type_short":"long"},{"type_long":"long","name":"lastChangeTime","comment":"the time this data type was last changed.","type_short":"long"},{"type_long":"int","name":"internalAlignment","comment":"UNALIGNED, ALIGNED_NO_PACKING or the packing value \n currently in use by this data type.","type_short":"int"},{"type_long":"int","name":"externalAlignment","comment":"DEFAULT_ALIGNED, MACHINE_ALIGNED or the minimum alignment value \n currently in use by this data type.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the database record for this data type.","type_short":"Record"}},{"javadoc":"Gets a composite data type record from the database based on its ID.\n@param dataTypeID the data type's ID.\n@return the record for the composite (structure or union) data type.\n@throws IOException if the database can't be accessed.","static":false,"name":"getRecord","comment":"Gets a composite data type record from the database based on its ID.","params":[{"type_long":"long","name":"dataTypeID","comment":"the data type's ID.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the record for the composite (structure or union) data type.","type_short":"Record"}},{"javadoc":"Gets an iterator over all composite (structure and union) data type records.\n@return the composite data type record iterator.\n@throws IOException if the database can't be accessed.","static":false,"name":"getRecords","comment":"Gets an iterator over all composite (structure and union) data type records.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"the composite data type record iterator.","type_short":"RecordIterator"}},{"javadoc":"Updates the composite data type table with the provided record.\n@param record the new record\n@param setLastChangedTime true means change the last change time in the record to the \n current time before putting the record in the database.\n@throws IOException if the database can't be accessed.","static":false,"name":"updateRecord","comment":"Updates the composite data type table with the provided record.","params":[{"type_long":"db.Record","name":"record","comment":"the new record","type_short":"Record"},{"type_long":"boolean","name":"setLastChangeTime","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the composite data type record with the specified ID.\n@param dataID the ID of the data type.\n@return true if the record is removed.\n@throws IOException if the database can't be accessed.","static":false,"name":"removeRecord","comment":"Removes the composite data type record with the specified ID.","params":[{"type_long":"long","name":"dataID","comment":"the ID of the data type.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the record is removed.","type_short":"boolean"}},{"javadoc":"Deletes the composite data type table from the database with the specified database handle.\n@param handle handle to the database where the table should get deleted.\n@throws IOException if the database can't be accessed.","static":false,"name":"deleteTable","comment":"Deletes the composite data type table from the database with the specified database handle.","params":[{"type_long":"db.DBHandle","name":"handle","comment":"handle to the database where the table should get deleted.","type_short":"DBHandle"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets all the composite data types that are contained in the category that has the indicated ID.\n@param categoryID the category whose composite data types are wanted.\n@return an array of IDs for the composite data types in the category.\n@throws IOException if the database can't be accessed.","static":false,"name":"getRecordIdsInCategory","comment":"Gets all the composite data types that are contained in the category that has the indicated ID.","params":[{"type_long":"long","name":"categoryID","comment":"the category whose composite data types are wanted.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"an array of IDs for the composite data types in the category.","type_short":"long[]"}},{"javadoc":"Gets an array with the IDs of all data types in the composite table that were derived\n from the source data type archive indicated by the source archive ID.\n@param archiveID the ID of the source archive whose data types we want.\n@return the array data type IDs.\n@throws IOException if the database can't be accessed.","static":false,"name":"getRecordIdsForSourceArchive","comment":"Gets an array with the IDs of all data types in the composite table that were derived\n from the source data type archive indicated by the source archive ID.","params":[{"type_long":"long","name":"archiveID","comment":"the ID of the source archive whose data types we want.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if the database can't be accessed.","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"the array data type IDs.","type_short":"long[]"}},{"javadoc":"","static":false,"name":"getRecordWithIDs","comment":"","params":[{"type_long":"ghidra.util.UniversalID","name":"sourceID","comment":"","type_short":"UniversalID"},{"type_long":"ghidra.util.UniversalID","name":"datatypeID","comment":"","type_short":"UniversalID"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}}],"name":"CompositeDBAdapter","comment":"Adapter to access the Composite database table.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"COMPOSITE_TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Composite Data Types\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"COMPOSITE_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_NAME_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_COMMENT_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_IS_UNION_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_CAT_COL","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_LENGTH_COL","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_NUM_COMPONENTS_COL","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_SOURCE_ARCHIVE_ID_COL","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_UNIVERSAL_DT_ID","comment":"","type_short":"int","constant_value":"7"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_SOURCE_SYNC_TIME_COL","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_LAST_CHANGE_TIME_COL","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_INTERNAL_ALIGNMENT_COL","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"COMPOSITE_EXTERNAL_ALIGNMENT_COL","comment":"","type_short":"int","constant_value":"11"},{"type_long":"byte","javadoc":"","static":true,"name":"UNALIGNED","comment":"","type_short":"byte","constant_value":"-1"},{"type_long":"byte","javadoc":"","static":true,"name":"ALIGNED_NO_PACKING","comment":"","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"","static":true,"name":"MACHINE_ALIGNED","comment":"","type_short":"byte","constant_value":"-1"},{"type_long":"byte","javadoc":"","static":true,"name":"DEFAULT_ALIGNED","comment":"","type_short":"byte","constant_value":"0"}]}
