{"implements":[],"javadoc":"Adapter to access the Data table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"","type_short":"int"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.DataDBAdapter","comment":"","type_short":"DataDBAdapter"}},{"javadoc":"","static":true,"name":"findReadOnlyAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.code.DataDBAdapter","comment":"","type_short":"DataDBAdapter"}},{"javadoc":"","static":true,"name":"upgrade","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.program.database.code.DataDBAdapter","name":"oldAdapter","comment":"","type_short":"DataDBAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.database.code.DataDBAdapter","comment":"","type_short":"DataDBAdapter"}},{"javadoc":"Get the record at or after the given start address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordAtOrAfter","comment":"Get the record at or after the given start address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the Record afer the given start address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordAfter","comment":"Get the Record afer the given start address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the record at the given start address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecord","comment":"Get the record at the given start address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the record at the give key;\n@param key the key of the record to retrieve.","static":false,"name":"getRecord","comment":"Get the record at the give key;","params":[{"type_long":"long","name":"key","comment":"the key of the record to retrieve.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the record before the given address address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordBefore","comment":"Get the record before the given address address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get a record iterator starting at the given address address.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Get a record iterator starting at the given address address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"forward","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Get a record iterator over the given range.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Get a record iterator over the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Delete the record for addr.\n@throws IOException if there was a problem accessing the database","static":false,"name":"deleteRecord","comment":"Delete the record for addr.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a data record.\n@param addr address of data\n@param dataTypeID ID of data type\n@throws IOException if there was a problem accessing the database","static":false,"name":"createData","comment":"Create a data record.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address of data","type_short":"Address"},{"type_long":"long","name":"dataTypeID","comment":"ID of data type","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get the number of records in the data table.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordCount","comment":"Get the number of records in the data table.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the record at or before the given address address.\n@param addr\n@throws IOException if there was a problem accessing the database\n@return ","static":false,"name":"getRecordAtOrBefore","comment":"Get the record at or before the given address address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get a iterator over the keys in the data table.\n@param start start of range\n@param end end of range, inclusive\n@param atStart true means position at start of the range\n@throws IOException if there was a problem accessing the database\n@return ","static":false,"name":"getKeys","comment":"Get a iterator over the keys in the data table.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start of range","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end of range, inclusive","type_short":"Address"},{"type_long":"boolean","name":"atStart","comment":"true means position at start of the range","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Get a record iterator over all records in the data table.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Get a record iterator over all records in the data table.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Deletes all records in the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@return true if at least on record was deleted.\n@throws IOException if a database io error occurs.","static":false,"name":"deleteRecords","comment":"Deletes all records in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if at least on record was deleted.","type_short":"boolean"}},{"javadoc":"Puts the given record into the database.\n@param record the record to add or update.\n@throws IOException if a database io error occurs.","static":false,"name":"putRecord","comment":"Puts the given record into the database.","params":[{"type_long":"db.Record","name":"record","comment":"the record to add or update.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an iterator over the keys that fall within the address set provided.\n@param addrSetView the address set to restrict to.\n@param forward the direction of the iteration.\n@throws IOException if a database io error occurs.","static":false,"name":"getKeys","comment":"Returns an iterator over the keys that fall within the address set provided.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSetView","comment":"the address set to restrict to.","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"the direction of the iteration.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.map.AddressKeyIterator","comment":"","type_short":"AddressKeyIterator"}},{"javadoc":"Returns a record iterator over all records that fall within the given address set.\n@param addrSet the set to restrict to.\n@param forward the direction of the iterator.\n@throws IOException if a database io error occurs.","static":false,"name":"getRecords","comment":"Returns a record iterator over all records that fall within the given address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"forward","comment":"the direction of the iterator.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Update the addresses in all records to reflect the movement of a memory block.\n@param fromAddr minimum address of the original block to be moved\n@param toAddr the new minimum address after the block move\n@param length the number of bytes in the memory block being moved\n@param monitor progress monitor\n@throws CancelledException if the user cancels the operation.\n@throws IOException if a database io error occurs.","static":false,"name":"moveAddressRange","comment":"Update the addresses in all records to reflect the movement of a memory block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"minimum address of the original block to be moved","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the new minimum address after the block move","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of bytes in the memory block being moved","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the operation.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataDBAdapter","comment":"Adapter to access the Data table.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DATA_TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Data\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"DATA_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"DATA_TYPE_ID_COL","comment":"","type_short":"int","constant_value":"0"}]}
