{"implements":["ghidra.program.model.listing.StackFrame"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a function stack frame.\n@param function\n@param variables","static":false,"name":"<init>","comment":"Construct a function stack frame.","params":[{"type_long":"ghidra.program.database.oldfunction.OldFunctionDataDB","name":"function","comment":"","type_short":"OldFunctionDataDB"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refresh","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFunctionManager","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.database.oldfunction.OldFunctionManager","comment":"","type_short":"OldFunctionManager"}},{"javadoc":"","static":false,"name":"getFunctionData","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.database.oldfunction.OldFunctionDataDB","comment":"","type_short":"OldFunctionDataDB"}},{"javadoc":"Get the function that this stack belongs to.\n@return the function","static":false,"name":"getFunction","comment":"Get the function that this stack belongs to.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"the function","type_short":"Function"}},{"javadoc":"Load the stack variables for this frame.","static":false,"name":"loadStackVariables","comment":"Load the stack variables for this frame.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getStackVariable","comment":"","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#createVariable(java.lang.String, int, ghidra.program.model.data.DataType, ghidra.program.model.symbol.SourceType)","static":false,"name":"createVariable","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getStackVariables()","static":false,"name":"getStackVariables","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all defined local variables.\n@return an array of all local variables","static":false,"name":"getLocals","comment":"Get all defined local variables.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of all local variables","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all defined parameters.\n@return an array of parameters.","static":false,"name":"getParameters","comment":"Get all defined parameters.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of parameters.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get the size of this stack frame in bytes.\n@return stack frame size","static":false,"name":"getFrameSize","comment":"Get the size of this stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"stack frame size","type_short":"int"}},{"javadoc":"Get the local portion of the stack frame in bytes.\n@return local frame size","static":false,"name":"getLocalSize","comment":"Get the local portion of the stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"local frame size","type_short":"int"}},{"javadoc":"A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.\n@return true if the stack grows in a negative direction.","static":false,"name":"growsNegative","comment":"A stack that grows negative has local references negative and\n parameter references positive.  A positive growing stack has\n positive locals and negative parameters.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the stack grows in a negative direction.","type_short":"boolean"}},{"javadoc":"Set the size of the local stack in bytes.\n@param size size of local stack","static":false,"name":"setLocalSize","comment":"Set the size of the local stack in bytes.","params":[{"type_long":"int","name":"size","comment":"size of local stack","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the parameter portion of the stack frame in bytes.\n@return parameter frame size","static":false,"name":"getParameterSize","comment":"Get the parameter portion of the stack frame in bytes.","params":[],"throws":[],"return":{"type_long":"int","comment":"parameter frame size","type_short":"int"}},{"javadoc":"@return the number of parameters on the stack","static":false,"name":"getParameterCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of parameters on the stack","type_short":"int"}},{"javadoc":"Clear the stack variable defined at offset\n@param offset Offset onto the stack to be cleared.","static":false,"name":"clearVariable","comment":"Clear the stack variable defined at offset","params":[{"type_long":"int","name":"offset","comment":"Offset onto the stack to be cleared.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the offset to the start of the parameters.\n@return offset","static":false,"name":"getParameterOffset","comment":"Get the offset to the start of the parameters.","params":[],"throws":[],"return":{"type_long":"int","comment":"offset","type_short":"int"}},{"javadoc":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.","static":false,"name":"getReturnAddressOffset","comment":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Set the return address stack size.\n@param offset offset of return address.","static":false,"name":"setReturnAddressOffset","comment":"Set the return address stack size.","params":[{"type_long":"int","name":"offset","comment":"offset of return address.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.\n@param offset offset of on stack to get variable.","static":false,"name":"getVariableContaining","comment":"Get the stack variable containing offset.  This may fall in\n the middle of a defined variable.","params":[{"type_long":"int","name":"offset","comment":"offset of on stack to get variable.","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"Get the size of the negative portion of the stack\n@return the negative portion size","static":false,"name":"getNegativeSize","comment":"Get the size of the negative portion of the stack","params":[],"throws":[],"return":{"type_long":"int","comment":"the negative portion size","type_short":"int"}},{"javadoc":"Get the size of the positive portion of the stack (including 0)\n@return the positive portion size","static":false,"name":"getPositiveSize","comment":"Get the size of the positive portion of the stack (including 0)","params":[],"throws":[],"return":{"type_long":"int","comment":"the positive portion size","type_short":"int"}},{"javadoc":"Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.\n@return an array of variables defined on the negative portion of the frame.","static":false,"name":"getNegativeVariables","comment":"Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of variables defined on the negative portion of the frame.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.","static":false,"name":"getPositiveVariables","comment":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of variables defined on the positive portion of the frame.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","static":false,"name":"getNegativeCount","comment":"Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.","static":false,"name":"getPositiveCount","comment":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.","params":[],"throws":[],"return":{"type_long":"int","comment":"an array of variables defined on the positive portion of the frame.","type_short":"int"}},{"javadoc":"@param offset\n@return boolean","static":false,"name":"isParameterOffset","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean","type_short":"boolean"}},{"javadoc":"Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.","static":false,"name":"equals","comment":"Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"OldStackFrameDB","comment":"","fields":[{"type_long":"int","javadoc":"","static":false,"name":"localSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"paramStart","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"returnStart","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","javadoc":"","static":false,"name":"variables","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.program.database.oldfunction.OldFunctionDataDB","javadoc":"","static":false,"name":"function","comment":"","type_short":"OldFunctionDataDB","constant_value":null},{"type_long":"ghidra.program.database.oldfunction.OldFunctionManager","javadoc":"","static":false,"name":"functionManager","comment":"","type_short":"OldFunctionManager","constant_value":null},{"type_long":"ghidra.program.database.oldfunction.OldStackVariableDBAdapter","javadoc":"","static":false,"name":"adapter","comment":"","type_short":"OldStackVariableDBAdapter","constant_value":null},{"type_long":"ghidra.program.model.listing.Variable[]","javadoc":"","static":true,"name":"emptyArray","comment":"","type_short":"ghidra.program.model.listing.Variable[]","constant_value":null}]}
