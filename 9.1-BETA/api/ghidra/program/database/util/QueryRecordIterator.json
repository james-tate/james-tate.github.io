{"implements":["db.RecordIterator"],"javadoc":"Iterator that only returns records from another iterator that match the given query.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new QueryRecordIterator that filters the given record iterator with\n the given Query.\n@param iter the record iterator to filter.\n@param query the query used to filter.","static":false,"name":"<init>","comment":"Constructs a new QueryRecordIterator that filters the given record iterator with\n the given Query.","params":[{"type_long":"db.RecordIterator","name":"iter","comment":"the record iterator to filter.","type_short":"RecordIterator"},{"type_long":"ghidra.program.database.util.Query","name":"query","comment":"the query used to filter.","type_short":"Query"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor\n@param iter record iterator\n@param query query needed to match the record\n@param forward true means iterate in the forward direction","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"db.RecordIterator","name":"iter","comment":"record iterator","type_short":"RecordIterator"},{"type_long":"ghidra.program.database.util.Query","name":"query","comment":"query needed to match the record","type_short":"Query"},{"type_long":"boolean","name":"forward","comment":"true means iterate in the forward direction","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see db.RecordIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.RecordIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"@see db.RecordIterator#hasPrevious()","static":false,"name":"hasPrevious","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.RecordIterator#previous()","static":false,"name":"previous","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"@see db.RecordIterator#delete()","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"findNext","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"findPrevious","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"QueryRecordIterator","comment":"Iterator that only returns records from another iterator that match the given query.","fields":[{"type_long":"db.RecordIterator","javadoc":"","static":false,"name":"iter","comment":"","type_short":"RecordIterator","constant_value":null},{"type_long":"ghidra.program.database.util.Query","javadoc":"","static":false,"name":"query","comment":"","type_short":"Query","constant_value":null},{"type_long":"db.Record","javadoc":"","static":false,"name":"record","comment":"","type_short":"Record","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forward","comment":"","type_short":"boolean","constant_value":null}]}
