{"implements":[],"javadoc":"FileBytes provides access to the all the byte values (both original and modified) from an\n imported file.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.database.mem.FileBytesAdapter","name":"adapter","comment":"","type_short":"FileBytesAdapter"},{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refresh","comment":"","params":[{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getId","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the name of the file that supplied the bytes.\n@return the name of the file that supplied the bytes.","static":false,"name":"getFilename","comment":"Returns the name of the file that supplied the bytes.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the file that supplied the bytes.","type_short":"String"}},{"javadoc":"Returns the offset in the original file from where these bytes originated. Normally this will\n be 0, but in the case where the program is actually a piece in some other file (e.g. tar,zip),\n this will be the offset into the file corresponding to the first byte in this FileBytes object.\n@return the offset in the original file from where these bytes originated.","static":false,"name":"getFileOffset","comment":"Returns the offset in the original file from where these bytes originated. Normally this will\n be 0, but in the case where the program is actually a piece in some other file (e.g. tar,zip),\n this will be the offset into the file corresponding to the first byte in this FileBytes object.","params":[],"throws":[],"return":{"type_long":"long","comment":"the offset in the original file from where these bytes originated.","type_short":"long"}},{"javadoc":"Returns the number of bytes from the original source file that are stored in the database.\n@return the number of bytes from the original source file that are stored in the database.","static":false,"name":"getSize","comment":"Returns the number of bytes from the original source file that are stored in the database.","params":[],"throws":[],"return":{"type_long":"long","comment":"the number of bytes from the original source file that are stored in the database.","type_short":"long"}},{"javadoc":"Returns the (possibly modified) byte at the given offset for this file bytes object.\n@param offset the offset into the file bytes for the byte to retrieve.\n@return the (possibly modified) byte at the given offset for this file bytes object.\n@throws IOException if there is a problem reading the database.\n@throws IndexOutOfBoundsException if the given offset is invalid.","static":false,"name":"getModifiedByte","comment":"Returns the (possibly modified) byte at the given offset for this file bytes object.","params":[{"type_long":"long","name":"offset","comment":"the offset into the file bytes for the byte to retrieve.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the database.","type_short":"IOException"}],"return":{"type_long":"byte","comment":"the (possibly modified) byte at the given offset for this file bytes object.","type_short":"byte"}},{"javadoc":"Returns the original byte value at the given offset for this file bytes object.\n@param offset the offset into the file bytes for the byte to retrieve.\n@return the original byte at the given offset for this file bytes object.\n@throws IOException if there is a problem reading the database.\n@throws IndexOutOfBoundsException if the given offset is invalid.","static":false,"name":"getOriginalByte","comment":"Returns the original byte value at the given offset for this file bytes object.","params":[{"type_long":"long","name":"offset","comment":"the offset into the file bytes for the byte to retrieve.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is a problem reading the database.","type_short":"IOException"}],"return":{"type_long":"byte","comment":"the original byte at the given offset for this file bytes object.","type_short":"byte"}},{"javadoc":"Tries to get b.length (possibly modified) bytes from this FileBytes entry at the given offset into the file\n  bytes.  May return fewer bytes if the requested length is beyond the end of the file bytes.\n@param offset the offset into the files bytes to start.\n@param b the byte array to populate.\n@return the number of bytes actually populated.\n@throws IOException if there is an error reading from the database","static":false,"name":"getModifiedBytes","comment":"Tries to get b.length (possibly modified) bytes from this FileBytes entry at the given offset into the file\n  bytes.  May return fewer bytes if the requested length is beyond the end of the file bytes.","params":[{"type_long":"long","name":"offset","comment":"the offset into the files bytes to start.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an error reading from the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Tries to get b.length original bytes from this FileBytes entry at the given offset into the file\n  bytes.  May return fewer bytes if the requested length is beyond the end of the file bytes.\n@param offset the offset into the files bytes to start.\n@param b the byte array to populate.\n@return the number of bytes actually populated.\n@throws IOException if there is an error reading from the database","static":false,"name":"getOriginalBytes","comment":"Tries to get b.length original bytes from this FileBytes entry at the given offset into the file\n  bytes.  May return fewer bytes if the requested length is beyond the end of the file bytes.","params":[{"type_long":"long","name":"offset","comment":"the offset into the files bytes to start.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an error reading from the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Tries to get length (possibly modified) bytes from the files starting at the given offset and put them \n into the given byte array at the specified offset into the byte array.  May return\n fewer bytes if the requested length is beyond the end of the file bytes.\n@param offset the offset into the files bytes to start.\n@param b the byte array to populate.\n@param off the offset into the byte array.\n@param length the number of bytes to get.\n@return the number of bytes actually populated.\n@throws IOException if there is an error reading from the database\n@throws IndexOutOfBoundsException if the destination offset and length would exceed the\n size of the buffer b.","static":false,"name":"getModifiedBytes","comment":"Tries to get length (possibly modified) bytes from the files starting at the given offset and put them \n into the given byte array at the specified offset into the byte array.  May return\n fewer bytes if the requested length is beyond the end of the file bytes.","params":[{"type_long":"long","name":"offset","comment":"the offset into the files bytes to start.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"length","comment":"the number of bytes to get.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an error reading from the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Tries to get length (original) bytes from the files starting at the given offset and put them \n into the given byte array at the specified offset into the byte array.  May return\n fewer bytes if the requested length is beyond the end of the file bytes.\n@param offset the offset into the files bytes to start.\n@param b the byte array to populate.\n@param off the offset into the byte array.\n@param length the number of bytes to get.\n@return the number of bytes actually populated.\n@throws IOException if there is an error reading from the database\n@throws IndexOutOfBoundsException if the destination offset and length would exceed the\n size of the buffer b.","static":false,"name":"getOriginalBytes","comment":"Tries to get length (original) bytes from the files starting at the given offset and put them \n into the given byte array at the specified offset into the byte array.  May return\n fewer bytes if the requested length is beyond the end of the file bytes.","params":[{"type_long":"long","name":"offset","comment":"the offset into the files bytes to start.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"length","comment":"the number of bytes to get.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an error reading from the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"","static":false,"name":"checkValid","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"invalidate","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Changes the byte at the given offset to the given value. Note, the \n original byte can still be accessed via {@link #getOriginalByte(long)}\n If the byte is changed more than once, only the original value is preserved.\n@param offset the offset into the file bytes.\n@param b the new byte value;\n@throws IOException if the write to the database fails.","static":false,"name":"putByte","comment":"Changes the byte at the given offset to the given value. Note, the \n original byte can still be accessed via #getOriginalByte(long)\n If the byte is changed more than once, only the original value is preserved.","params":[{"type_long":"long","name":"offset","comment":"the offset into the file bytes.","type_short":"long"},{"type_long":"byte","name":"b","comment":"the new byte value;","type_short":"byte"}],"throws":[{"type_long":"java.io.IOException","comment":"if the write to the database fails.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Changes the bytes at the given offset to the given values. Note, the \n original bytes can still be accessed via {@link #getOriginalBytes(long, byte[])}\n If the bytes are changed more than once, only the original values are preserved.\n@param offset the offset into the file bytes.\n@param b a byte array with the new values to write.\n@return the number of bytes written\n@throws IOException if the write to the database fails.","static":false,"name":"putBytes","comment":"Changes the bytes at the given offset to the given values. Note, the \n original bytes can still be accessed via #getOriginalBytes(long, byte[])\n If the bytes are changed more than once, only the original values are preserved.","params":[{"type_long":"long","name":"offset","comment":"the offset into the file bytes.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"a byte array with the new values to write.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"if the write to the database fails.","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes written","type_short":"int"}},{"javadoc":"Changes the bytes at the given offset to the given values. Note, the \n original bytes can still be accessed via {@link #getOriginalBytes(long, byte[], int, int)}\n If the bytes are changed more than once, only the original values are preserved.\n@param offset the offset into the file bytes.\n@param b a byte array with the new values to write.\n@param off the offset into the byte array to get the bytes to write.\n@param length the number of bytes to write.\n@return the number of bytes written\n@throws IOException if the write to the database fails.","static":false,"name":"putBytes","comment":"Changes the bytes at the given offset to the given values. Note, the \n original bytes can still be accessed via #getOriginalBytes(long, byte[], int, int)\n If the bytes are changed more than once, only the original values are preserved.","params":[{"type_long":"long","name":"offset","comment":"the offset into the file bytes.","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"a byte array with the new values to write.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array to get the bytes to write.","type_short":"int"},{"type_long":"int","name":"length","comment":"the number of bytes to write.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if the write to the database fails.","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes written","type_short":"int"}},{"javadoc":"","static":false,"name":"getByte","comment":"","params":[{"type_long":"db.DBBuffer[]","name":"buffers","comment":"","type_short":"db.DBBuffer[]"},{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"","static":false,"name":"getBytes","comment":"","params":[{"type_long":"db.DBBuffer[]","name":"buffers","comment":"","type_short":"db.DBBuffer[]"},{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"","type_short":"int"},{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"FileBytes","comment":"FileBytes provides access to the all the byte values (both original and modified) from an\n imported file.","fields":[{"type_long":"ghidra.program.database.mem.FileBytesAdapter","javadoc":"","static":false,"name":"adapter","comment":"","type_short":"FileBytesAdapter","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"id","comment":"","type_short":"long","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"filename","comment":"","type_short":"String","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"fileOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"size","comment":"","type_short":"long","constant_value":null},{"type_long":"db.DBBuffer[]","javadoc":"","static":false,"name":"originalBuffers","comment":"","type_short":"db.DBBuffer[]","constant_value":null},{"type_long":"db.DBBuffer[]","javadoc":"","static":false,"name":"layeredBuffers","comment":"","type_short":"db.DBBuffer[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"invalid","comment":"","type_short":"boolean","constant_value":null}]}
