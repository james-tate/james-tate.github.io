{"implements":["java.lang.Comparable"],"javadoc":"Interface for the various types of memory block sections.  They are used by a {@link MemoryBlockDB}\n to do the actual storing and fetching of the bytes that make up a MemoryBlock","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","name":"adapter","comment":"","type_short":"MemoryMapDBAdapter"},{"type_long":"db.Record","name":"record","comment":"","type_short":"Record"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return whether this block has been initialized (has byte values)\n@return true if the block has associated byte values.","static":false,"name":"isInitialized","comment":"Return whether this block has been initialized (has byte values)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the block has associated byte values.","type_short":"boolean"}},{"javadoc":"Returns the id of the MemoryBlockDB object that owns this sub block.\n@return the id of the MemoryBlockDB object that owns this sub block.","static":false,"name":"getParentBlockID","comment":"Returns the id of the MemoryBlockDB object that owns this sub block.","params":[],"throws":[],"return":{"type_long":"long","comment":"the id of the MemoryBlockDB object that owns this sub block.","type_short":"long"}},{"javadoc":"Returns the starting offset for this sub block.  In other words, the first byte in this sub \n block is at this starting offset relative to the containing {@link MemoryBlockDB}\n@return the starting offset for this sub block.","static":false,"name":"getStartingOffset","comment":"Returns the starting offset for this sub block.  In other words, the first byte in this sub \n block is at this starting offset relative to the containing MemoryBlockDB","params":[],"throws":[],"return":{"type_long":"long","comment":"the starting offset for this sub block.","type_short":"long"}},{"javadoc":"Returns the length of this sub block\n@return the length of this sub block","static":false,"name":"getLength","comment":"Returns the length of this sub block","params":[],"throws":[],"return":{"type_long":"long","comment":"the length of this sub block","type_short":"long"}},{"javadoc":"Returns true if the given {@link MemoryBlockDB} offset is in this sub block.\n@param memBlockOffset the offset relative to the containing {@link MemoryBlockDB}\n@return true if the offset is valid for this block","static":false,"name":"contains","comment":"Returns true if the given MemoryBlockDB offset is in this sub block.","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset relative to the containing MemoryBlockDB","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the offset is valid for this block","type_short":"boolean"}},{"javadoc":"Returns the byte in this sub block corresponding to the given offset relative to the containing\n {@link MemoryBlockDB}.  In other words, the first byte in this sub block can be retrieved\n using an offset equal to this blocks starting offset.\n@param memBlockOffset the offset from the start of the containing {@link MemoryBlockDB}\n@return the byte at the given containing block offset.\n@throws MemoryAccessException if the block is uninitialized.\n@throws IOException if there is a problem reading from the database","static":false,"name":"getByte","comment":"Returns the byte in this sub block corresponding to the given offset relative to the containing\n MemoryBlockDB.  In other words, the first byte in this sub block can be retrieved\n using an offset equal to this blocks starting offset.","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset from the start of the containing MemoryBlockDB","type_short":"long"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the block is uninitialized.","type_short":"MemoryAccessException"},{"type_long":"java.io.IOException","comment":"if there is a problem reading from the database","type_short":"IOException"}],"return":{"type_long":"byte","comment":"the byte at the given containing block offset.","type_short":"byte"}},{"javadoc":"Tries to get len bytes from this block at the given offset (relative to the containing\n {@link MemoryBlockDB} and put them into the given byte array at the specified offset.  \n May return fewer bytes if the requested length is beyond the end of the block.\n@param memBlockOffset the offset relative to the containing {@link MemoryBlockDB}\n@param b the byte array to populate.\n@param off the offset into the byte array.\n@param len the number of bytes to get.\n@return the number of bytes actually populated.\n@throws MemoryAccessException if any of the requested bytes are\n uninitialized.\n@throws IOException if there is a problem reading from the database\n@throws IllegalArgumentException if the offset is not in this block.","static":false,"name":"getBytes","comment":"Tries to get len bytes from this block at the given offset (relative to the containing\n MemoryBlockDB and put them into the given byte array at the specified offset.  \n May return fewer bytes if the requested length is beyond the end of the block.","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset relative to the containing MemoryBlockDB","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array to populate.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to get.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if any of the requested bytes are\n uninitialized.","type_short":"MemoryAccessException"},{"type_long":"java.io.IOException","comment":"if there is a problem reading from the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually populated.","type_short":"int"}},{"javadoc":"Stores the byte in this sub block at the given offset relative to the containing\n {@link MemoryBlockDB}.  In other words, the first byte in this sub block can be targeted\n using an offset equal to this blocks starting offset.\n@param memBlockOffset the offset from the start of the containing {@link MemoryBlockDB}\n@param b the byte value to store at the given offset.\n@throws MemoryAccessException if the block is uninitialized\n@throws IOException if there is a problem writing to the database\n@throws IllegalArgumentException if the offset is not in this block.","static":false,"name":"putByte","comment":"Stores the byte in this sub block at the given offset relative to the containing\n MemoryBlockDB.  In other words, the first byte in this sub block can be targeted\n using an offset equal to this blocks starting offset.","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset from the start of the containing MemoryBlockDB","type_short":"long"},{"type_long":"byte","name":"b","comment":"the byte value to store at the given offset.","type_short":"byte"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if the block is uninitialized","type_short":"MemoryAccessException"},{"type_long":"java.io.IOException","comment":"if there is a problem writing to the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Tries to write len bytes to this block at the given offset (relative to the containing\n {@link MemoryBlockDB} using the bytes contained in the given byte array at the specified byte\n array offset.  \n May write fewer bytes if the requested length is beyond the end of the block.\n@param memBlockOffset the offset relative to the containing {@link MemoryBlockDB}\n@param b the byte array with the bytes to store.\n@param off the offset into the byte array.\n@param len the number of bytes to write.\n@return the number of bytes actually written\n@throws MemoryAccessException if this block is uninitialized.\n@throws IOException if there is a problem writing to the database\n@throws IllegalArgumentException if the offset is not in this block.","static":false,"name":"putBytes","comment":"Tries to write len bytes to this block at the given offset (relative to the containing\n MemoryBlockDB using the bytes contained in the given byte array at the specified byte\n array offset.  \n May write fewer bytes if the requested length is beyond the end of the block.","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset relative to the containing MemoryBlockDB","type_short":"long"},{"type_long":"byte[]","name":"b","comment":"the byte array with the bytes to store.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the offset into the byte array.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to write.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if this block is uninitialized.","type_short":"MemoryAccessException"},{"type_long":"java.io.IOException","comment":"if there is a problem writing to the database","type_short":"IOException"}],"return":{"type_long":"int","comment":"the number of bytes actually written","type_short":"int"}},{"javadoc":"Deletes this SumMemoryBlock\n@throws IOException if a database error occurs","static":false,"name":"delete","comment":"Deletes this SumMemoryBlock","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the length of a subblock (Used by the split command)\n@param length the new length of the block\n@throws IOException if a database error occurs","static":false,"name":"setLength","comment":"Sets the length of a subblock (Used by the split command)","params":[{"type_long":"long","name":"length","comment":"the new length of the block","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempts to join the given SubMemoryBlock with this block if possible\n@param other the SubMemoryBlock to join with this one.\n@return true if the given SubMemoryBlock was successfully merged into this one\n@throws IOException if a database error occurs.","static":false,"name":"join","comment":"Attempts to join the given SubMemoryBlock with this block if possible","params":[{"type_long":"ghidra.program.database.mem.SubMemoryBlock","name":"other","comment":"the SubMemoryBlock to join with this one.","type_short":"SubMemoryBlock"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the given SubMemoryBlock was successfully merged into this one","type_short":"boolean"}},{"javadoc":"Returns true if this is either a bit-mapped or byte-mapped block.\n@return true if this is either a bit-mapped or byte-mapped block.","static":false,"name":"isMapped","comment":"Returns true if this is either a bit-mapped or byte-mapped block.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is either a bit-mapped or byte-mapped block.","type_short":"boolean"}},{"javadoc":"Get the {@link MemoryBlockType} for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED\n@return the type for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED","static":false,"name":"getType","comment":"Get the MemoryBlockType for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlockType","comment":"the type for this block: TYPE_DEFAULT, TYPE_OVERLAY, TYPE_BIT_MAPPED, or TYPE_BYTE_MAPPED","type_short":"MemoryBlockType"}},{"javadoc":"Returns the {@link MemoryBlockSourceInfo} object for this SubMemoryBlock\n@param block the {@link MemoryBlock} that this block belongs to.\n@return the {@link MemoryBlockSourceInfo} object for this SubMemoryBlock","static":false,"name":"getSourceInfo","comment":"Returns the MemoryBlockSourceInfo object for this SubMemoryBlock","params":[{"type_long":"ghidra.program.model.mem.MemoryBlock","name":"block","comment":"the MemoryBlock that this block belongs to.","type_short":"MemoryBlock"}],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlockSourceInfo","comment":"the MemoryBlockSourceInfo object for this SubMemoryBlock","type_short":"MemoryBlockSourceInfo"}},{"javadoc":"Splits this SubMemoryBlock into two memory blocks\n@param memBlockOffset the offset relative to the owning MemoryBlock (not this SubMemoryBlock)\n To get the offset relative to this SubMemoryBlock, you have to subtract this sub blocks \n starting offset.\n@return the new SubMemoryBlock that contains the back half of this block\n@throws IOException if a database error occurs.","static":false,"name":"split","comment":"Splits this SubMemoryBlock into two memory blocks","params":[{"type_long":"long","name":"memBlockOffset","comment":"the offset relative to the owning MemoryBlock (not this SubMemoryBlock)\n To get the offset relative to this SubMemoryBlock, you have to subtract this sub blocks \n starting offset.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.mem.SubMemoryBlock","comment":"the new SubMemoryBlock that contains the back half of this block","type_short":"SubMemoryBlock"}},{"javadoc":"Updates this SubMemoryBlock to have a new owning MemoryBlock and offset within that block. \n This is used when splitting a block and entire sub blocks have to be moved to the new split \n block.\n@param key the id of the new owning memory block.\n@param startingOffset the starting offset of this sub block in the new block.\n@throws IOException if a database error occurs.","static":false,"name":"setParentIdAndStartingOffset","comment":"Updates this SubMemoryBlock to have a new owning MemoryBlock and offset within that block. \n This is used when splitting a block and entire sub blocks have to be moved to the new split \n block.","params":[{"type_long":"long","name":"key","comment":"the id of the new owning memory block.","type_short":"long"},{"type_long":"long","name":"startingOffset","comment":"the starting offset of this sub block in the new block.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a description of this SubMemoryBlock suitable to be displayed to the user.\n@return a description of this SubMemoryBlock suitable to be displayed to the user.","static":false,"name":"getDescription","comment":"Returns a description of this SubMemoryBlock suitable to be displayed to the user.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a description of this SubMemoryBlock suitable to be displayed to the user.","type_short":"String"}},{"javadoc":"Returns true if this subBlock uses the given fileBytes as its byte source.\n@param fileBytes the {@link FileBytes} to check for use\n@return true if this subBlock uses the given fileBytes as its byte source.","static":false,"name":"uses","comment":"Returns true if this subBlock uses the given fileBytes as its byte source.","params":[{"type_long":"ghidra.program.database.mem.FileBytes","name":"fileBytes","comment":"the FileBytes to check for use","type_short":"FileBytes"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this subBlock uses the given fileBytes as its byte source.","type_short":"boolean"}},{"javadoc":"Gets the list of BytesSourceRanges from this sub block for the given memBlockOffset and associates\n it with the given {@link AddressRange}\n@param block the {@link MemoryBlock} that generated the BytesSourceSet.\n@param start the program address for which to get a ByteSourceSet\n@param memBlockOffset the offset from the beginning of the containing MemoryBlock.\n@param size the size of region to get byte sources\n@return the set of ByteSourceRanges which maps program addresses to byte source locations.","static":false,"name":"getByteSourceRangeList","comment":"Gets the list of BytesSourceRanges from this sub block for the given memBlockOffset and associates\n it with the given AddressRange","params":[{"type_long":"ghidra.program.model.mem.MemoryBlock","name":"block","comment":"the MemoryBlock that generated the BytesSourceSet.","type_short":"MemoryBlock"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the program address for which to get a ByteSourceSet","type_short":"Address"},{"type_long":"long","name":"memBlockOffset","comment":"the offset from the beginning of the containing MemoryBlock.","type_short":"long"},{"type_long":"long","name":"size","comment":"the size of region to get byte sources","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.database.mem.ByteSourceRangeList","comment":"the set of ByteSourceRanges which maps program addresses to byte source locations.","type_short":"ByteSourceRangeList"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.program.database.mem.SubMemoryBlock","name":"o","comment":"","type_short":"SubMemoryBlock"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"SubMemoryBlock","comment":"Interface for the various types of memory block sections.  They are used by a MemoryBlockDB\n to do the actual storing and fetching of the bytes that make up a MemoryBlock","fields":[{"type_long":"ghidra.program.database.mem.MemoryMapDBAdapter","javadoc":"","static":false,"name":"adapter","comment":"","type_short":"MemoryMapDBAdapter","constant_value":null},{"type_long":"db.Record","javadoc":"","static":false,"name":"record","comment":"","type_short":"Record","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"length","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"startingOffset","comment":"","type_short":"long","constant_value":null}]}
