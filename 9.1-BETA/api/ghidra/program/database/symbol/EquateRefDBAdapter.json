{"implements":[],"javadoc":"Adapter to access records in the equate references table.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"","type_short":"int"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.symbol.EquateRefDBAdapter","comment":"","type_short":"EquateRefDBAdapter"}},{"javadoc":"","static":true,"name":"findReadOnlyAdapter","comment":"","params":[{"type_long":"db.DBHandle","name":"handle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.symbol.EquateRefDBAdapter","comment":"","type_short":"EquateRefDBAdapter"}},{"javadoc":"","static":true,"name":"upgrade","comment":"","params":[{"type_long":"db.DBHandle","name":"dbHandle","comment":"","type_short":"DBHandle"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"","type_short":"AddressMap"},{"type_long":"ghidra.program.database.symbol.EquateRefDBAdapter","name":"oldAdapter","comment":"","type_short":"EquateRefDBAdapter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.database.symbol.EquateRefDBAdapter","comment":"","type_short":"EquateRefDBAdapter"}},{"javadoc":"Create a reference to an equate.\n@param addr address of the reference\n@param opIndex operand index\n@param dynamicHash dynamicHash associated with constant varnode\n@param equateNameID ID for the equate\n@return new record\n@throws IOException if there was a problem accessing the database","static":false,"name":"createReference","comment":"Create a reference to an equate.","params":[{"type_long":"long","name":"addr","comment":"address of the reference","type_short":"long"},{"type_long":"short","name":"opIndex","comment":"operand index","type_short":"short"},{"type_long":"long","name":"dynamicHash","comment":"dynamicHash associated with constant varnode","type_short":"long"},{"type_long":"long","name":"equateNameID","comment":"ID for the equate","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"new record","type_short":"Record"}},{"javadoc":"Get the record for the given key.\n@param the key of the record to retrieve.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecord","comment":"Get the record for the given key.","params":[{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"Get an iterator over all the equate reference records.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecords","comment":"Get an iterator over all the equate reference records.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"","type_short":"RecordIterator"}},{"javadoc":"Returns record count","static":false,"name":"getRecordCount","comment":"Returns record count","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get the records for the given addr value.\n@param addr the address to find equates for.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordKeysForAddr","comment":"Get the records for the given addr value.","params":[{"type_long":"long","name":"addr","comment":"the address to find equates for.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"Update the table with the given record.\n@param record the record to update.\n@throws IOException if there was a problem accessing the database","static":false,"name":"updateRecord","comment":"Update the table with the given record.","params":[{"type_long":"db.Record","name":"record","comment":"the record to update.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the records that have the given equateID.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getRecordKeysForEquateID","comment":"Get the records that have the given equateID.","params":[{"type_long":"long","name":"equateID","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"Get an iterator over the addresses.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getIteratorForAddresses","comment":"Get an iterator over the addresses.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"","type_short":"DBLongIterator"}},{"javadoc":"Get an iterator over the addresses in the given range.\n@param start the first address in the range.\n@param end the last address in the range.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getIteratorForAddresses","comment":"Get an iterator over the addresses in the given range.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the first address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"the last address in the range.","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"","type_short":"DBLongIterator"}},{"javadoc":"Get an iterator over an addresses set.\n@param set the set of addresses to consider.\n@throws IOException if there was a problem accessing the database","static":false,"name":"getIteratorForAddresses","comment":"Get an iterator over an addresses set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the set of addresses to consider.","type_short":"AddressSetView"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"","type_short":"DBLongIterator"}},{"javadoc":"Get an iterator over the addresses starting at the given value.\n@param start the address at which to start iterating\n@throws IOException if there was a problem accessing the database","static":false,"name":"getIteratorForAddresses","comment":"Get an iterator over the addresses starting at the given value.","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the address at which to start iterating","type_short":"Address"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"","type_short":"DBLongIterator"}},{"javadoc":"Remove the record with the given key.\n@param key the key of the record to remove.\n@throws if there was a problem accessing the database","static":false,"name":"removeRecord","comment":"Remove the record with the given key.","params":[{"type_long":"long","name":"key","comment":"the key of the record to remove.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Update the addresses in all records to reflect the movement of a memory block.\n@param fromAddr minimum address of the original block to be moved\n@param toAddr the new minimum address after the block move\n@param length the number of bytes in the memory block being moved\n@param monitor progress monitor\n@throws CancelledException if the user cancelled the operation.\n@throws IOException if there was a problem accessing the database","static":false,"name":"moveAddressRange","comment":"Update the addresses in all records to reflect the movement of a memory block.","params":[{"type_long":"ghidra.program.model.address.Address","name":"fromAddr","comment":"minimum address of the original block to be moved","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"toAddr","comment":"the new minimum address after the block move","type_short":"Address"},{"type_long":"long","name":"length","comment":"the number of bytes in the memory block being moved","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the operation.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was a problem accessing the database","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"EquateRefDBAdapter","comment":"Adapter to access records in the equate references table.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EQUATE_REFS_TABLE_NAME","comment":"","type_short":"String","constant_value":"\"Equate References\""},{"type_long":"db.Schema","javadoc":"","static":true,"name":"REFS_SCHEMA","comment":"","type_short":"Schema","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"EQUATE_ID_COL","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"ADDR_COL","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"OP_INDEX_COL","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"HASH_COL","comment":"","type_short":"int","constant_value":"3"}]}
