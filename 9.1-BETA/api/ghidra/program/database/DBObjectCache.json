{"implements":[],"javadoc":"Generic cache implementation for objects that extend DatabaseObject.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new DBObjectCache with a given hard cache size.  The hard cache size is\n the minimum number of objects to keep in the cache. Typically, the cache will contain\n more than this number, but the excess objects are subject to garbage collections\n@param hardCacheSize the minimum number of objects to keep in the cache.","static":false,"name":"<init>","comment":"Constructs a new DBObjectCache with a given hard cache size.  The hard cache size is\n the minimum number of objects to keep in the cache. Typically, the cache will contain\n more than this number, but the excess objects are subject to garbage collections","params":[{"type_long":"int","name":"hardCacheSize","comment":"the minimum number of objects to keep in the cache.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Retrieves the database object with the given key from the cache.\n@param key the key of the object to retrieve.\n@return the cached object or null if the object with that key is not currently cached.","static":false,"name":"get","comment":"Retrieves the database object with the given key from the cache.","params":[{"type_long":"long","name":"key","comment":"the key of the object to retrieve.","type_short":"long"}],"throws":[],"return":{"type_long":"T","comment":"the cached object or null if the object with that key is not currently cached.","type_short":"T"}},{"javadoc":"Retrieves the database object with the given record and associated key from the cache.\n This form should be used in conjunction with record iterators to avoid unnecessary\n record query during a possible object refresh.  To benefit from the record the cached\n object must implement the {@link DatabaseObject#refresh(Record)} method which by default\n ignores the record and simply calls {@link DatabaseObject#refresh()}.\n@param record the valid record corresponding to the object to be retrieved and possibly\n used to refresh the associated object if found in cache\n@return the cached object or null if the object with that key is not currently cached.","static":false,"name":"get","comment":"Retrieves the database object with the given record and associated key from the cache.\n This form should be used in conjunction with record iterators to avoid unnecessary\n record query during a possible object refresh.  To benefit from the record the cached\n object must implement the DatabaseObject#refresh(Record) method which by default\n ignores the record and simply calls DatabaseObject#refresh().","params":[{"type_long":"db.Record","name":"objectRecord","comment":"","type_short":"Record"}],"throws":[],"return":{"type_long":"T","comment":"the cached object or null if the object with that key is not currently cached.","type_short":"T"}},{"javadoc":"Returns the number of objects currently in the cache.","static":false,"name":"size","comment":"Returns the number of objects currently in the cache.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Sets the number of objects to protect against garbage collection.\n@param size the minimum number of objects to keep in the cache.","static":false,"name":"setHardCacheSize","comment":"Sets the number of objects to protect against garbage collection.","params":[{"type_long":"int","name":"size","comment":"the minimum number of objects to keep in the cache.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given database object to the cache.\n@param data the object to add to the cache.","static":false,"name":"put","comment":"Adds the given database object to the cache.","params":[{"type_long":"T","name":"data","comment":"the object to add to the cache.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array of all the cached objects.","static":false,"name":"getCachedObjects","comment":"Returns an array of all the cached objects.","params":[],"throws":[],"return":{"type_long":"java.util.ArrayList<T>","comment":"","type_short":"ArrayList"}},{"javadoc":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.\n@param keyRanges key ranges to delete","static":false,"name":"delete","comment":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRanges","comment":"key ranges to delete","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.  Iteration over all\n keys contained within keyRanges will be performed.\n@param keyRanges key ranges to delete","static":false,"name":"deleteSmallKeyRanges","comment":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.  Iteration over all\n keys contained within keyRanges will be performed.","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRanges","comment":"key ranges to delete","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.  Iteration over all\n keys contained within hashTable will be performed.\n@param keyRanges key ranges to delete","static":false,"name":"deleteLargeKeyRanges","comment":"Delete all objects from hashTable whose key is contained\n within the specified keyRanges.  Iteration over all\n keys contained within hashTable will be performed.","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRanges","comment":"key ranges to delete","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return total number of keys covered by list of keyRanges.\n@param keyRanges\n@return number of keys, or -1 if more than Long.MAX_VALUE keys","static":false,"name":"getKeyRangesSize","comment":"Return total number of keys covered by list of keyRanges.","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRanges","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"long","comment":"number of keys, or -1 if more than Long.MAX_VALUE keys","type_short":"long"}},{"javadoc":"","static":false,"name":"keyRangesContain","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRanges","comment":"","type_short":"List"},{"type_long":"long","name":"key","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Marks all the cached objects as invalid.  Invalid objects will have to refresh themselves\n before they are allowed to be used. If an invalidated object cannot refresh itself, then\n the object is removed from the cache and discarded and the application can no longer use\n that instance of the object.","static":false,"name":"invalidate","comment":"Marks all the cached objects as invalid.  Invalid objects will have to refresh themselves\n before they are allowed to be used. If an invalidated object cannot refresh itself, then\n the object is removed from the cache and discarded and the application can no longer use\n that instance of the object.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the current invalidate counter value which corresponds to the number of time\n the entire cache has been invalidated.\n@return current invalidate counter value.","static":false,"name":"getInvalidateCount","comment":"Get the current invalidate counter value which corresponds to the number of time\n the entire cache has been invalidated.","params":[],"throws":[],"return":{"type_long":"int","comment":"current invalidate counter value.","type_short":"int"}},{"javadoc":"Invalidates a range of objects in the cache.\n@param startKey the first key in the range to invalidate.\n@param endKey the last key in the range to invalidate.","static":false,"name":"invalidate","comment":"Invalidates a range of objects in the cache.","params":[{"type_long":"long","name":"startKey","comment":"the first key in the range to invalidate.","type_short":"long"},{"type_long":"long","name":"endKey","comment":"the last key in the range to invalidate.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the object with the given key from the cache.\n@param key the key of the object to remove.","static":false,"name":"delete","comment":"Removes the object with the given key from the cache.","params":[{"type_long":"long","name":"key","comment":"the key of the object to remove.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invalidates the object with given key.\n@param key the key of the object to invalidate.","static":false,"name":"invalidate","comment":"Invalidates the object with given key.","params":[{"type_long":"long","name":"key","comment":"the key of the object to invalidate.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addToHardCache","comment":"","params":[{"type_long":"T","name":"obj","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processQueue","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"keyChanged","comment":"","params":[{"type_long":"long","name":"oldKey","comment":"","type_short":"long"},{"type_long":"long","name":"newKey","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DBObjectCache","comment":"Generic cache implementation for objects that extend DatabaseObject.","fields":[{"type_long":"ghidra.util.datastruct.LongObjectHashtable<ghidra.program.database.DBObjectCache<T>.KeyedSoftReference>","javadoc":"","static":false,"name":"hashTable","comment":"","type_short":"LongObjectHashtable","constant_value":null},{"type_long":"java.lang.ref.ReferenceQueue<T>","javadoc":"","static":false,"name":"refQueue","comment":"","type_short":"ReferenceQueue","constant_value":null},{"type_long":"java.util.LinkedList<T>","javadoc":"","static":false,"name":"hardCache","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"hardCacheSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"invalidateCount","comment":"","type_short":"int","constant_value":null}]}
