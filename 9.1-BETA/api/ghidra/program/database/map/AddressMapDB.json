{"implements":["ghidra.program.database.map.AddressMap"],"javadoc":"Class used to map addresses to longs and longs to addresses. Several different encodings\n are depending on the nature of the address to be converted.\n The upper 4 bits in the long are used to specify the encoding used. Currently the encoding are:\n 0 - use the original ghidra encoding - used for backwards compatibility.\n 1 - absolute encoding - ignores the image base - used only by the memory map.\n 2 - relocatable - most common encoding - allows address to move with the image base.\n 3 - register - used to encode register addresses\n 4 - stack - used to encode stack addresses (includes namespace information to make them unique between functions)\n 5 - external - used to encode addresses in another program\n 15 - no address - used to represent the null address or a meaningless address.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new AddressMapDB object\n@param handle the handle to the database\n@param openMode the mode that program was opened.\n@param factory the address factory containing all the address spaces for the program.\n@param baseImageOffset the current image base offset.\n@param monitor the progress monitory used for upgrading.\n@throws IOException thrown if a dabase io error occurs.\n@throws VersionException if the database version does not match the expected version.","static":false,"name":"<init>","comment":"Constructs a new AddressMapDB object","params":[{"type_long":"db.DBHandle","name":"handle","comment":"the handle to the database","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"the mode that program was opened.","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"factory","comment":"the address factory containing all the address spaces for the program.","type_short":"AddressFactory"},{"type_long":"long","name":"baseImageOffset","comment":"the current image base offset.","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the progress monitory used for upgrading.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if a dabase io error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.VersionException","comment":"if the database version does not match the expected version.","type_short":"VersionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification when the memory map changes.  If we are segemented, we need to update our\n list of address ranges used for address normalization.\n@param memory","static":false,"name":"memoryMapChanged","comment":"Notification when the memory map changes.  If we are segemented, we need to update our\n list of address ranges used for address normalization.","params":[{"type_long":"ghidra.program.database.mem.MemoryMapDB","name":"mem","comment":"","type_short":"MemoryMapDB"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[{"type_long":"boolean","name":"rebuildAddrToIndexMap","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"invalidateCache","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an address map which may be used during the upgrade of old address\n encodings.  If the address map is up-to-date, then this method will return\n this instance of AddressMapDB.","static":false,"name":"getOldAddressMap","comment":"Returns an address map which may be used during the upgrade of old address\n encodings.  If the address map is up-to-date, then this method will return\n this instance of AddressMapDB.","params":[],"throws":[],"return":{"type_long":"ghidra.program.database.map.AddressMap","comment":"","type_short":"AddressMap"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#isUpgraded()","static":false,"name":"isUpgraded","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKey(ghidra.program.model.address.Address, boolean)","static":false,"name":"getKey","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"isInDefaultAddressSpace","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getNormalizedOffset","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getAbsoluteEncoding(ghidra.program.model.address.Address, boolean)","static":false,"name":"getAbsoluteEncoding","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Get absolute key encoding for the specified address\n@param addr address\n@param indexOperation see INDEX_CREATE, INDEX_MATCH, INDEX_MATCH_OR_NEXT or INDEX_MATCH_OR_PREVIOUS\n@return address key or INVALID_ADDRESS_KEY if not found","static":false,"name":"encodeAbsolute","comment":"Get absolute key encoding for the specified address","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address","type_short":"Address"},{"type_long":"int","name":"indexOperation","comment":"see INDEX_CREATE, INDEX_MATCH, INDEX_MATCH_OR_NEXT or INDEX_MATCH_OR_PREVIOUS","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"address key or INVALID_ADDRESS_KEY if not found","type_short":"long"}},{"javadoc":"Get base address index\n@param addr address\n@param normalize if true image base offset will be applied to addr\n@param indexOperation see INDEX_CREATE, INDEX_MATCH, INDEX_MATCH_OR_NEXT or INDEX_MATCH_OR_PREVIOUS\n@return base address index or Integer.MIN_VALUE if index not found and create is false.  A negative \n value other than Integer.MIN_VALUE indicates a NEXT or PREVIOUS base index = -(return_value)-1.","static":false,"name":"getBaseAddressIndex","comment":"Get base address index","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"address","type_short":"Address"},{"type_long":"boolean","name":"normalize","comment":"if true image base offset will be applied to addr","type_short":"boolean"},{"type_long":"int","name":"indexOperation","comment":"see INDEX_CREATE, INDEX_MATCH, INDEX_MATCH_OR_NEXT or INDEX_MATCH_OR_PREVIOUS","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"base address index or Integer.MIN_VALUE if index not found and create is false.  A negative \n value other than Integer.MIN_VALUE indicates a NEXT or PREVIOUS base index = -(return_value)-1.","type_short":"int"}},{"javadoc":"","static":false,"name":"checkAddressSpace","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSpace","name":"addrSpace","comment":"","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#decodeAddress(long)","static":false,"name":"decodeAddress","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns the address that was used to generate the given long key. (If the image base was\n moved, then a different address is returned unless the value was encoded using the\n \"absoluteEncoding\" method\n@param value the long value to convert to an address.\n@param useMemorySegmentation if true and the program's default address space is segmented (i.e., SegmentedAddressSpace).\n the address returned will be normalized to defined segmented memory blocks if possible.  This parameter should \n generally always be true except when used by the Memory map objects to avoid recursion problems.","static":false,"name":"decodeAddress","comment":"Returns the address that was used to generate the given long key. (If the image base was\n moved, then a different address is returned unless the value was encoded using the\n \"absoluteEncoding\" method","params":[{"type_long":"long","name":"value","comment":"the long value to convert to an address.","type_short":"long"},{"type_long":"boolean","name":"useMemorySegmentation","comment":"if true and the program's default address space is segmented (i.e., SegmentedAddressSpace).\n the address returned will be normalized to defined segmented memory blocks if possible.  This parameter should \n generally always be true except when used by the Memory map objects to avoid recursion problems.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"normalize","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"decode","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Stack space changed from a common 32-bit space to a compiler-specific\n stack space.  This makes bad stack addresses which previously existed\n impossible to decode.  Instead of return NO_ADDRESS, we will simply truncate such \n bad stack offsets to the MIN or MAX offsets.\n@param offset\n@param stackSpace\n@return ","static":false,"name":"truncateStackOffset","comment":"Stack space changed from a common 32-bit space to a compiler-specific\n stack space.  This makes bad stack addresses which previously existed\n impossible to decode.  Instead of return NO_ADDRESS, we will simply truncate such \n bad stack offsets to the MIN or MAX offsets.","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.AddressSpace","name":"stackSpace","comment":"","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"hasSameKeyBase","comment":"","params":[{"type_long":"long","name":"addrKey1","comment":"","type_short":"long"},{"type_long":"long","name":"addrKey2","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isKeyRangeMax","comment":"","params":[{"type_long":"long","name":"addrKey","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isKeyRangeMin","comment":"","params":[{"type_long":"long","name":"addrKey","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"encodeRelative","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"addrIsNormalized","comment":"","type_short":"boolean"},{"type_long":"int","name":"indexOperation","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Provide absolute encoding of an old namespace address for upgrade use.\n@param addr old namespace address for stack, register or external\n@return encoded address key","static":false,"name":"encodeOldNamespaceAddr","comment":"Provide absolute encoding of an old namespace address for upgrade use.","params":[{"type_long":"ghidra.program.model.address.OldGenericNamespaceAddress","name":"addr","comment":"old namespace address for stack, register or external","type_short":"OldGenericNamespaceAddress"}],"throws":[],"return":{"type_long":"long","comment":"encoded address key","type_short":"long"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#getAddressFactory()","static":false,"name":"getAddressFactory","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressFactory","comment":"","type_short":"AddressFactory"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#setImageBase(ghidra.program.model.address.Address)","static":false,"name":"setImageBase","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"base","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getModCount()","static":false,"name":"getModCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#findKeyRange(java.util.List, ghidra.program.model.address.Address)","static":false,"name":"findKeyRange","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRangeList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.Address, ghidra.program.model.address.Address, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.AddressSetView, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.Address, ghidra.program.model.address.Address, boolean, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getAllMemoryAndExternalAddresses","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.AddressSetView, boolean, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getKeyRangesForAddressSet","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"},{"type_long":"java.util.ArrayList<ghidra.program.model.address.KeyRange>","name":"keyRangeList","comment":"","type_short":"ArrayList"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create all memory base segments within the specified range.\n NOTE: minAddress and maxAddress must have the same address space!\n@param minAddress\n@param maxAddress","static":false,"name":"createBaseSegments","comment":"Create all memory base segments within the specified range.\n NOTE: minAddress and maxAddress must have the same address space!","params":[{"type_long":"ghidra.program.model.address.Address","name":"minAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddress","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add simple key ranges where the address range lies within a single base segment for a single space.\n NOTE: start and end addresses must have the same address space!\n@param keyRangeList\n@param start\n@param end\n@param absolute\n@param create","static":false,"name":"addKeyRanges","comment":"Add simple key ranges where the address range lies within a single base segment for a single space.\n NOTE: start and end addresses must have the same address space!","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRangeList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addNormalizedRange","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRangeList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.Address","name":"normalizedStart","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"normalizedEnd","comment":"","type_short":"Address"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"min","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"a1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"a2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"max","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"a1","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"a2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getShiftedAddr","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getImageBase()","static":false,"name":"getImageBase","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"setLanguage","comment":"","params":[{"type_long":"ghidra.program.model.lang.Language","name":"newLanguage","comment":"","type_short":"Language"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"renameOverlaySpace","comment":"","params":[{"type_long":"java.lang.String","name":"oldName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deleteOverlaySpace","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AddressMapDB","comment":"Class used to map addresses to longs and longs to addresses. Several different encodings\n are depending on the nature of the address to be converted.\n The upper 4 bits in the long are used to specify the encoding used. Currently the encoding are:\n 0 - use the original ghidra encoding - used for backwards compatibility.\n 1 - absolute encoding - ignores the image base - used only by the memory map.\n 2 - relocatable - most common encoding - allows address to move with the image base.\n 3 - register - used to encode register addresses\n 4 - stack - used to encode stack addresses (includes namespace information to make them unique between functions)\n 5 - external - used to encode addresses in another program\n 15 - no address - used to represent the null address or a meaningless address.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"ADDR_TYPE_SIZE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"long","javadoc":"","static":true,"name":"ADDR_TYPE_SHIFT","comment":"","type_short":"long","constant_value":"60"},{"type_long":"int","javadoc":"","static":true,"name":"ADDR_TYPE_MASK","comment":"","type_short":"int","constant_value":"15"},{"type_long":"int","javadoc":"","static":true,"name":"ADDR_OFFSET_SIZE","comment":"","type_short":"int","constant_value":"32"},{"type_long":"long","javadoc":"","static":true,"name":"MAX_OFFSET","comment":"","type_short":"long","constant_value":"4294967295"},{"type_long":"long","javadoc":"","static":true,"name":"ADDR_OFFSET_MASK","comment":"","type_short":"long","constant_value":"4294967295"},{"type_long":"long","javadoc":"","static":true,"name":"BASE_MASK","comment":"","type_short":"long","constant_value":"-4294967296"},{"type_long":"int","javadoc":"","static":true,"name":"HASH_OFFSET_SIZE","comment":"","type_short":"int","constant_value":null},{"type_long":"long","javadoc":"","static":true,"name":"HASH_OFFSET_MASK","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"ID_SIZE","comment":"","type_short":"int","constant_value":"28"},{"type_long":"int","javadoc":"","static":true,"name":"ID_MASK","comment":"","type_short":"int","constant_value":"268435455"},{"type_long":"int","javadoc":"","static":true,"name":"OLD_ADDRESS_KEY_TYPE","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"ABSOLUTE_ADDR_TYPE","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"RELOCATABLE_ADDR_TYPE","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"REGISTER_ADDR_TYPE","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"STACK_ADDR_TYPE","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"EXTERNAL_ADDR_TYPE","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"VARIABLE_ADDR_TYPE","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"HASH_ADDR_TYPE","comment":"","type_short":"int","constant_value":"7"},{"type_long":"int","javadoc":"","static":true,"name":"NO_ADDR_TYPE","comment":"","type_short":"int","constant_value":"15"},{"type_long":"long","javadoc":"","static":true,"name":"RELOCATABLE_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"2305843009213693952"},{"type_long":"long","javadoc":"","static":true,"name":"ABSOLUTE_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"1152921504606846976"},{"type_long":"long","javadoc":"","static":true,"name":"REGISTER_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"3458764513820540928"},{"type_long":"long","javadoc":"","static":true,"name":"STACK_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"4611686018427387904"},{"type_long":"long","javadoc":"","static":true,"name":"EXTERNAL_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"5764607523034234880"},{"type_long":"long","javadoc":"","static":true,"name":"VARIABLE_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"6917529027641081856"},{"type_long":"long","javadoc":"","static":true,"name":"HASH_ADDR_TYPE_LONG","comment":"","type_short":"long","constant_value":"8070450532247928832"},{"type_long":"ghidra.program.model.address.AddressFactory","javadoc":"","static":false,"name":"addrFactory","comment":"","type_short":"AddressFactory","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"readOnly","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.database.map.AddressMap","javadoc":"","static":false,"name":"oldAddrMap","comment":"","type_short":"AddressMap","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"useOldAddrMap","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSpace","javadoc":"","static":false,"name":"defaultAddrSpace","comment":"","type_short":"AddressSpace","constant_value":null},{"type_long":"ghidra.program.database.map.AddressMapDBAdapter","javadoc":"","static":false,"name":"adapter","comment":"","type_short":"AddressMapDBAdapter","constant_value":null},{"type_long":"ghidra.program.model.address.Address[]","javadoc":"","static":false,"name":"baseAddrs","comment":"","type_short":"ghidra.program.model.address.Address[]","constant_value":null},{"type_long":"ghidra.program.model.address.Address[]","javadoc":"","static":false,"name":"sortedBaseStartAddrs","comment":"","type_short":"ghidra.program.model.address.Address[]","constant_value":null},{"type_long":"ghidra.program.model.address.Address[]","javadoc":"","static":false,"name":"sortedBaseEndAddrs","comment":"","type_short":"ghidra.program.model.address.Address[]","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","javadoc":"","static":false,"name":"allKeyRanges","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.address.Address,java.lang.Integer>","javadoc":"","static":false,"name":"addrToIndexMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"baseImageOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.address.AddressRange>","javadoc":"","static":false,"name":"segmentedRanges","comment":"","type_short":"List","constant_value":null},{"type_long":"long","javadoc":"","static":true,"name":"EXT_FROM_ADDRESS_LONG","comment":"","type_short":"long","constant_value":"-2"},{"type_long":"int","javadoc":"Index Operation: get index match or create if needed\n@see #getBaseAddressIndex(Address, boolean, int)","static":true,"name":"INDEX_CREATE","comment":"Index Operation: get index match or create if needed","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"INDEX_MATCH","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"INDEX_MATCH_OR_NEXT","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"INDEX_MATCH_OR_PREVIOUS","comment":"","type_short":"int","constant_value":"3"},{"type_long":"java.util.Comparator<ghidra.program.model.address.Address>","javadoc":"Comparator used to search the sorted normalized base address list with a de-normalized address.","static":false,"name":"normalizingAddressComparator","comment":"Comparator used to search the sorted normalized base address list with a de-normalized address.","type_short":"Comparator","constant_value":null},{"type_long":"java.util.Comparator<java.lang.Object>","javadoc":"Comparator used to identify if an addr occurs before or after the \n start of a key range.","static":false,"name":"addressInsertionKeyRangeComparator","comment":"Comparator used to identify if an addr occurs before or after the \n start of a key range.","type_short":"Comparator","constant_value":null},{"type_long":"java.util.Comparator<java.lang.Object>","javadoc":"","static":true,"name":"ADDRESS_RANGE_COMPARATOR","comment":"","type_short":"Comparator","constant_value":null}]}
