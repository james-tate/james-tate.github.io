{"implements":["db.RecordIterator"],"javadoc":"Returns a RecordIterator over records that are address keyed.  Various constructors allow\n the iterator to be restricted to an address range or address set and optionally to be\n positioned at some starting address.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construcs a new AddressKeyRecordIterator that iterates over all records in ascending order.\n Memory addresses encoded as Absolute are not included.\n@param table the table to iterate.\n@param addrMap the address map\n@throws IOException if a database io error occurs.","static":false,"name":"<init>","comment":"Construcs a new AddressKeyRecordIterator that iterates over all records in ascending order.\n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the table to iterate.","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construcs a new AddressKeyRecordIterator that iterates over records starting at given \n start address.  Memory addresses encoded as Absolute are not included.\n@param table the table to iterate.\n@param addrMap the address map\n@param startAddr the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter.\n@param before if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address.\n@throws IOException if a database io error occurs.","static":false,"name":"<init>","comment":"Construcs a new AddressKeyRecordIterator that iterates over records starting at given \n start address.  Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the table to iterate.","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new AddressKeyRecordIterator that iterates over records that are within an\n address range with an optional start address within that range.  \n Memory addresses encoded as Absolute are not included.\n@param table the table to iterate.\n@param addrMap the address map\n@param minAddr the minimum address in the range.\n@param maxAddr tha maximum address in the range.\n@param startAddr the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.\n@param before if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n positioned after the max address.\n@throws IOException if a database io error occurs.","static":false,"name":"<init>","comment":"Constructs a new AddressKeyRecordIterator that iterates over records that are within an\n address range with an optional start address within that range.  \n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the table to iterate.","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.Address","name":"minAddr","comment":"the minimum address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddr","comment":"tha maximum address in the range.","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n positioned after the max address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construcs a new AddressKeyRecordIterator that iterates over records that are contained in\n an address set with an optional start address within that set.  \n Memory addresses encoded as Absolute are not included.\n@param table the table to iterate.\n@param addrMap the address map\n@param set the address set to iterate over.\n@param startAddr the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.\n@param before if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n postioned after the max address.\n@throws IOException if a database io error occurs.","static":false,"name":"<init>","comment":"Construcs a new AddressKeyRecordIterator that iterates over records that are contained in\n an address set with an optional start address within that set.  \n Memory addresses encoded as Absolute are not included.","params":[{"type_long":"db.Table","name":"table","comment":"the table to iterate.","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to iterate over.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n postioned after the max address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construcs a new AddressKeyRecordIterator that iterates over records that are contained in\n an address set with an optional start address within that set.\n@param table the table to iterate.\n@param addrMap the address map\n@param absolute if true, only absolute memory address encodings are considered, otherwise \n only standard\/relocatable address encodings are considered.\n@param set the address set to iterate over.\n@param startAddr the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.\n@param before if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n postioned after the max address.\n@throws IOException if a database io error occurs.","static":false,"name":"<init>","comment":"Construcs a new AddressKeyRecordIterator that iterates over records that are contained in\n an address set with an optional start address within that set.","params":[{"type_long":"db.Table","name":"table","comment":"the table to iterate.","type_short":"Table"},{"type_long":"ghidra.program.database.map.AddressMap","name":"addrMap","comment":"the address map","type_short":"AddressMap"},{"type_long":"boolean","name":"absolute","comment":"if true, only absolute memory address encodings are considered, otherwise \n only standard\/relocatable address encodings are considered.","type_short":"boolean"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the address set to iterate over.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"startAddr","comment":"the address at which to position the iterator.  The iterator will be positioned \n either before or after the start address depending on the before parameter. If this parameter\n is null, then the iterator will start either before the min address or after the max address \n depending on the before parameter.","type_short":"Address"},{"type_long":"boolean","name":"before","comment":"if true, the iterator will be positioned before the start address, otherwise\n it will be positioned after the start address. If the start address is null, then if the before\n parameter is true, the iterator is positioned before the min. Otherwise the iterator is \n postioned after the max address.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a database io error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see db.RecordIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.RecordIterator#hasPrevious()","static":false,"name":"hasPrevious","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see db.RecordIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"@see db.RecordIterator#previous()","static":false,"name":"previous","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"","type_short":"Record"}},{"javadoc":"@see db.RecordIterator#delete()","static":false,"name":"delete","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"iterator","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<db.Record>","comment":"","type_short":"Iterator"}}],"name":"AddressKeyRecordIterator","comment":"Returns a RecordIterator over records that are address keyed.  Various constructors allow\n the iterator to be restricted to an address range or address set and optionally to be\n positioned at some starting address.","fields":[{"type_long":"db.Table","javadoc":"","static":false,"name":"table","comment":"","type_short":"Table","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","javadoc":"","static":false,"name":"keyRangeList","comment":"","type_short":"List","constant_value":null},{"type_long":"db.RecordIterator","javadoc":"","static":false,"name":"it","comment":"","type_short":"RecordIterator","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"keyRangeIndex","comment":"","type_short":"int","constant_value":null}]}
