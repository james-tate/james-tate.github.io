{"implements":["java.util.Map.Entry"],"javadoc":"An entry in the map.\n \n Nodes are elements of a binary tree and a doubly-linked list.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Construct a new node\n@param key the key\n@param val the data","static":false,"name":"<init>","comment":"Construct a new node","params":[{"type_long":"K","name":"key","comment":"the key","type_short":"K"},{"type_long":"V","name":"val","comment":"the data","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compute this node's index.\n \n This uses the {@link #sizeLeft} field to compute the index in O(log n) on average.\n@return the index","static":false,"name":"computeIndex","comment":"Compute this node's index.\n \n This uses the #sizeLeft field to compute the index in O(log n) on average.","params":[],"throws":[],"return":{"type_long":"int","comment":"the index","type_short":"int"}},{"javadoc":"Retrieve the node at a given index in this subtree\n \n This really only makes sense at the root\n@param index the index\n@return the node at the given index","static":false,"name":"getByIndex","comment":"Retrieve the node at a given index in this subtree\n \n This really only makes sense at the root","params":[{"type_long":"int","name":"index","comment":"the index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"the node at the given index","type_short":"Node"}},{"javadoc":"","static":false,"name":"getKey","comment":"","params":[],"throws":[],"return":{"type_long":"K","comment":"","type_short":"K"}},{"javadoc":"","static":false,"name":"getValue","comment":"","params":[],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"Insert a node into this subtree and the linked list\n@param item the node to insert","static":false,"name":"insert","comment":"Insert a node into this subtree and the linked list","params":[{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","name":"item","comment":"the node to insert","type_short":"Node"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert a node as a successor to this node in the linked list\n@note Called only after the node is inserted into the tree","static":false,"name":"insertAfter","comment":"Insert a node as a successor to this node in the linked list","params":[{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","name":"item","comment":"","type_short":"Node"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Insert a node as a predecessor to this node in the linked list\n@note Called only after the node is inserted into the tree","static":false,"name":"insertBefore","comment":"Insert a node as a predecessor to this node in the linked list","params":[{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","name":"item","comment":"","type_short":"Node"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove this node from the tree and linked list","static":false,"name":"remove","comment":"Remove this node from the tree and linked list","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find the given value in this subtree\n@param val the value to find\n@param mode when the value occurs multiple times, identifies which instance to find\n@return the node containing the given value, or null if not found","static":false,"name":"searchValue","comment":"Find the given value in this subtree","params":[{"type_long":"V","name":"val","comment":"the value to find","type_short":"V"},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap.SearchMode","name":"mode","comment":"when the value occurs multiple times, identifies which instance to find","type_short":"SearchMode"}],"throws":[],"return":{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","comment":"the node containing the given value, or null if not found","type_short":"Node"}},{"javadoc":"","static":false,"name":"setValue","comment":"","params":[{"type_long":"V","name":"value","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}}],"name":"Node","comment":"An entry in the map.\n \n Nodes are elements of a binary tree and a doubly-linked list.","fields":[{"type_long":"K","javadoc":"","static":false,"name":"key","comment":"","type_short":"K","constant_value":null},{"type_long":"V","javadoc":"","static":false,"name":"val","comment":"","type_short":"V","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","javadoc":"","static":false,"name":"parent","comment":"","type_short":"Node","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","javadoc":"","static":false,"name":"lChild","comment":"","type_short":"Node","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","javadoc":"","static":false,"name":"rChild","comment":"","type_short":"Node","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"sizeLeft","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","javadoc":"","static":false,"name":"next","comment":"","type_short":"Node","constant_value":null},{"type_long":"ghidra.generic.util.datastruct.DynamicValueSortedTreeMap<K,V>.Node","javadoc":"","static":false,"name":"prev","comment":"","type_short":"Node","constant_value":null}]}
