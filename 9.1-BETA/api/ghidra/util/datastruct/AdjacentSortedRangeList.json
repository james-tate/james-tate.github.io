{"implements":[],"javadoc":"Provides a list of integer ranges that are maintained in sorted order where\n adjacent ranges do not coalesce. \n When a range is added any ranges that overlap will coalesce into a single range.\n However, ranges which are adjacent to one another will not coalesce.\n This list maintains separate ranges which can have one range ending and \n the next range beginning at the next available integer value.","static":false,"extends":"ghidra.util.datastruct.SortedRangeList","methods":[{"javadoc":"Creates a new empty sorted range list which allows adjacent ranges.","static":false,"name":"<init>","comment":"Creates a new empty sorted range list which allows adjacent ranges.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new adjacent sorted range list with ranges equivalent to those in the \n specified list.\n@param list the adjacent sorted range list to make an equivalent copy of.","static":false,"name":"<init>","comment":"Creates a new adjacent sorted range list with ranges equivalent to those in the \n specified list.","params":[{"type_long":"ghidra.util.datastruct.AdjacentSortedRangeList","name":"list","comment":"the adjacent sorted range list to make an equivalent copy of.","type_short":"AdjacentSortedRangeList"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the range from min to max to this adjacent sorted range list.\n If the range overlaps any other existing ranges, then those ranges will coalesce.\n If the range is adjacent to other\n@param min the range minimum\n@param max the range maximum (inclusive)","static":false,"name":"addRange","comment":"Adds the range from min to max to this adjacent sorted range list.\n If the range overlaps any other existing ranges, then those ranges will coalesce.\n If the range is adjacent to other","params":[{"type_long":"int","name":"min","comment":"the range minimum","type_short":"int"},{"type_long":"int","name":"max","comment":"the range maximum (inclusive)","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new AdjacentSortedRangeList that is the intersection of this \n range list and the other range list specified. The ranges in the new list will\n have breaks between adjacent ranges wherever either this range list\n or the other range list have breaks between adjacent ranges.\n@param other the other adjacent sorted range list\n@return the new AdjacentSortedRangeList representing the intersection.","static":false,"name":"intersect","comment":"Creates a new AdjacentSortedRangeList that is the intersection of this \n range list and the other range list specified. The ranges in the new list will\n have breaks between adjacent ranges wherever either this range list\n or the other range list have breaks between adjacent ranges.","params":[{"type_long":"ghidra.util.datastruct.AdjacentSortedRangeList","name":"other","comment":"the other adjacent sorted range list","type_short":"AdjacentSortedRangeList"}],"throws":[],"return":{"type_long":"ghidra.util.datastruct.AdjacentSortedRangeList","comment":"the new AdjacentSortedRangeList representing the intersection.","type_short":"AdjacentSortedRangeList"}}],"name":"AdjacentSortedRangeList","comment":"Provides a list of integer ranges that are maintained in sorted order where\n adjacent ranges do not coalesce. \n When a range is added any ranges that overlap will coalesce into a single range.\n However, ranges which are adjacent to one another will not coalesce.\n This list maintains separate ranges which can have one range ending and \n the next range beginning at the next available integer value.","fields":[]}
