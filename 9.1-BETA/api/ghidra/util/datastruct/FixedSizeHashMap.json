{"implements":[],"javadoc":"A simple implementation of a LRU map that will throw away entries that exceed the given\n maximum size.\n\n <P>If you would like a LRU based upon <i>access-order<\/i>, then use the {@link LRUMap}.\n@param <K> the key type\n@param <V> the value type","static":false,"extends":"java.util.LinkedHashMap","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"maxSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"initialSize","comment":"","type_short":"int"},{"type_long":"int","name":"maxSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeEldestEntry","comment":"","params":[{"type_long":"java.util.Map.Entry<K,V>","name":"eldest","comment":"","type_short":"Entry"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"FixedSizeHashMap","comment":"A simple implementation of a LRU map that will throw away entries that exceed the given\n maximum size.\n\n If you would like a LRU based upon access-order, then use the LRUMap.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"maxSize","comment":"","type_short":"int","constant_value":null}]}
