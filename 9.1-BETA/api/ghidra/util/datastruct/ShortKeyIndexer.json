{"implements":["java.io.Serializable"],"javadoc":"This class converts arbitrary short keys into compacted short indexes suitable\n for use as indexes into an array or table.  Whenever a new key is added,\n the smallest unused index is allocated and associated with that key.\n Basically hashes the keys into linked lists using the ShortListIndexer class,\n where all values in a list have\n the same hashcode.  Does most of the work in implementing a seperate chaining\n version of a hashtable - the only thing missing is the values which are stored\n in the individual implementations of the various hashtables.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a ShortKeyIndexer with a default capacity.","static":false,"name":"<init>","comment":"Constructs a ShortKeyIndexer with a default capacity.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a ShortKeyIndexer with a given initial capacity.\n@param capacity the initial capacity.","static":false,"name":"<init>","comment":"Constructs a ShortKeyIndexer with a given initial capacity.","params":[{"type_long":"short","name":"capacity","comment":"the initial capacity.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an index that will always be associated to the given key as long as\n the key remains in the table. If the key already exists, then the index where\n that key is stored is returned.  If the key is new, then a new index is allocated,\n the key is stored at that index, and the new index is returned.\n@param key the key to be stored.\n@return index for key, or -1 if there was no room to put the key.\n@exception IndexOutOfBoundsException thrown if this object is at maximum capacity.","static":false,"name":"put","comment":"Returns an index that will always be associated to the given key as long as\n the key remains in the table. If the key already exists, then the index where\n that key is stored is returned.  If the key is new, then a new index is allocated,\n the key is stored at that index, and the new index is returned.","params":[{"type_long":"short","name":"key","comment":"the key to be stored.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"index for key, or -1 if there was no room to put the key.","type_short":"short"}},{"javadoc":"Returns the index for the given key, or\n -1 if key is not in the table.\n@param key the key for which to find an index.","static":false,"name":"get","comment":"Returns the index for the given key, or\n -1 if key is not in the table.","params":[{"type_long":"short","name":"key","comment":"the key for which to find an index.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Removes the key from the table.\n@param key the key to remove.\n@return index of the key if the key was found, -1 if\n key did not exist in the table","static":false,"name":"remove","comment":"Removes the key from the table.","params":[{"type_long":"short","name":"key","comment":"the key to remove.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"index of the key if the key was found, -1 if\n key did not exist in the table","type_short":"short"}},{"javadoc":"Returns the number of keys stored in the table.","static":false,"name":"getSize","comment":"Returns the number of keys stored in the table.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the current size of the key table.","static":false,"name":"getCapacity","comment":"Returns the current size of the key table.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Remove all keys.","static":false,"name":"clear","comment":"Remove all keys.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array containing all the keys stored in this object.","static":false,"name":"getKeys","comment":"Returns an array containing all the keys stored in this object.","params":[],"throws":[],"return":{"type_long":"short[]","comment":"","type_short":"short[]"}},{"javadoc":"Finds the index for a given key.","static":false,"name":"findKey","comment":"Finds the index for a given key.","params":[{"type_long":"short","name":"key","comment":"","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Increases the size of the keys array and the indexer.\n  This method needs to be very careful!  It is very important that the keys get\n  mapped to the same key index even though they are stored in a different list\n  in the indexer class (Which is indexed based on the hashcode (mod capacity) of\n  the key.  Since this method can only be called when the indexer is full, we\n  can assume that there are no gaps (freed indexes) in the keys array.  Therefore,\n  if we clear everything and add them back in the same order that they were stored\n  in the old keys array, they should be assigned the same index.  This is important\n  since other containing classes may be storing lots of information based on this\n  index and we don't want the indexing to change just because we had to grow.","static":false,"name":"grow","comment":"Increases the size of the keys array and the indexer.\n  This method needs to be very careful!  It is very important that the keys get\n  mapped to the same key index even though they are stored in a different list\n  in the indexer class (Which is indexed based on the hashcode (mod capacity) of\n  the key.  Since this method can only be called when the indexer is full, we\n  can assume that there are no gaps (freed indexes) in the keys array.  Therefore,\n  if we clear everything and add them back in the same order that they were stored\n  in the old keys array, they should be assigned the same index.  This is important\n  since other containing classes may be storing lots of information based on this\n  index and we don't want the indexing to change just because we had to grow.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ShortKeyIndexer","comment":"This class converts arbitrary short keys into compacted short indexes suitable\n for use as indexes into an array or table.  Whenever a new key is added,\n the smallest unused index is allocated and associated with that key.\n Basically hashes the keys into linked lists using the ShortListIndexer class,\n where all values in a list have\n the same hashcode.  Does most of the work in implementing a seperate chaining\n version of a hashtable - the only thing missing is the values which are stored\n in the individual implementations of the various hashtables.","fields":[{"type_long":"short","javadoc":"","static":true,"name":"DEFAULT_CAPACITY","comment":"","type_short":"short","constant_value":"13"},{"type_long":"short[]","javadoc":"","static":false,"name":"keys","comment":"","type_short":"short[]","constant_value":null},{"type_long":"ghidra.util.datastruct.ShortListIndexer","javadoc":"","static":false,"name":"indexer","comment":"","type_short":"ShortListIndexer","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"capacity","comment":"","type_short":"short","constant_value":null}]}
