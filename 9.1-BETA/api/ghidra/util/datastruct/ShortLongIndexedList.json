{"implements":["java.io.Serializable"],"javadoc":"Manages an array of lists of longs. It provides methods for\n adding, deleting, and retrieving long values for specific lists.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param numLists initial number of lists.","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"short","name":"numLists","comment":"initial number of lists.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a value to the front of the list indexed by listID.\n@param listID specifies which list the value is to be added.\n@param value the value to be added to the list.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"add","comment":"Add a value to the front of the list indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"specifies which list the value is to be added.","type_short":"short"},{"type_long":"long","name":"value","comment":"the value to be added to the list.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a value to the back of the list indexed by listID.\n@param listID specifies which list the value is to be appended.\n@param value the value to be added to the linked list.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"append","comment":"Add a value to the back of the list indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"specifies which list the value is to be appended.","type_short":"short"},{"type_long":"long","name":"value","comment":"the value to be added to the linked list.","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove the value from the list indexed by listID.\n@param listID the id of the list from which to remove the value.\n@param value the value to be removed from the specified list.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"remove","comment":"Remove the value from the list indexed by listID.","params":[{"type_long":"short","name":"listID","comment":"the id of the list from which to remove the value.","type_short":"short"},{"type_long":"long","name":"value","comment":"the value to be removed from the specified list.","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Remove all values from a specified list.\n@param listID the id of the list to be cleared.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"removeAll","comment":"Remove all values from a specified list.","params":[{"type_long":"short","name":"listID","comment":"the id of the list to be cleared.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the value exists in the specified list.\n@param listID the id of the list to be tested for the given value.\n@param value the value to search for in the specified list.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"contains","comment":"Returns true if the value exists in the specified list.","params":[{"type_long":"short","name":"listID","comment":"the id of the list to be tested for the given value.","type_short":"short"},{"type_long":"long","name":"value","comment":"the value to search for in the specified list.","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get the number of values in the specified list.\n@param listID the id of the list for which to get the count.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"getCount","comment":"Get the number of values in the specified list.","params":[{"type_long":"short","name":"listID","comment":"the id of the list for which to get the count.","type_short":"short"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get values stored in the specified list.\n@param listID the id of the list from which to get the values.\n@exception IndexOutOfBoundsException thrown if the listID\n is not in the range [0, numLists].","static":false,"name":"get","comment":"Get values stored in the specified list.","params":[{"type_long":"short","name":"listID","comment":"the id of the list from which to get the values.","type_short":"short"}],"throws":[],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"Returns the number of lists.","static":false,"name":"getNumLists","comment":"Returns the number of lists.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Increase the number of lists.\n@param numLists the new number of lists.","static":false,"name":"growNumLists","comment":"Increase the number of lists.","params":[{"type_long":"short","name":"numLists","comment":"the new number of lists.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes all values from all lists.","static":false,"name":"clear","comment":"Removes all values from all lists.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Increase the capacity for the linked list of values.","static":false,"name":"grow","comment":"Increase the capacity for the linked list of values.","params":[{"type_long":"int","name":"newCapacity","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find the index of the value in the list specified by listID.","static":false,"name":"findIndex","comment":"Find the index of the value in the list specified by listID.","params":[{"type_long":"short","name":"listID","comment":"","type_short":"short"},{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}}],"name":"ShortLongIndexedList","comment":"Manages an array of lists of longs. It provides methods for\n adding, deleting, and retrieving long values for specific lists.","fields":[{"type_long":"short","javadoc":"","static":true,"name":"DEFAULT_CAPACITY","comment":"","type_short":"short","constant_value":"16"},{"type_long":"long[]","javadoc":"","static":false,"name":"values","comment":"","type_short":"long[]","constant_value":null},{"type_long":"ghidra.util.datastruct.ShortListIndexer","javadoc":"","static":false,"name":"indexer","comment":"","type_short":"ShortListIndexer","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"capacity","comment":"","type_short":"int","constant_value":null}]}
