{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor from a function entry point.  Program context is used to establish the entry context state.\n Analysis is performed during construction.\n@param entryAddr function entry point\n@param analyzer function analysis call-back handler\n@param program program containing function\n@param maintainInstructionResults\n@param monitor task monitor\n@throws CancelledException","static":false,"name":"<init>","comment":"Constructor from a function entry point.  Program context is used to establish the entry context state.\n Analysis is performed during construction.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entryPt","comment":"","type_short":"Address"},{"type_long":"ghidra.util.state.FunctionAnalyzer","name":"analyzer","comment":"function analysis call-back handler","type_short":"FunctionAnalyzer"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program containing function","type_short":"Program"},{"type_long":"boolean","name":"maintainInstructionResults","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for replaying over a specified set of context states indicated via a flowList.\n Analysis is performed during construction.\n@param flowList ordered list of context state entry points\n@param analyzer function analysis call-back handler\n@param entryState context state which feeds into the first point within the flowList\n@param maintainInstructionResults\n@param monitor task monitor\n@throws CancelledException","static":false,"name":"<init>","comment":"Constructor for replaying over a specified set of context states indicated via a flowList.\n Analysis is performed during construction.","params":[{"type_long":"java.util.LinkedList<ghidra.program.model.pcode.SequenceNumber>","name":"flowList","comment":"ordered list of context state entry points","type_short":"LinkedList"},{"type_long":"ghidra.util.state.FunctionAnalyzer","name":"analyzer","comment":"function analysis call-back handler","type_short":"FunctionAnalyzer"},{"type_long":"ghidra.util.state.ContextState","name":"entryState","comment":"context state which feeds into the first point within the flowList","type_short":"ContextState"},{"type_long":"boolean","name":"maintainInstructionResults","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for entry point and a specified entryState\n@param entryAddr function entry point\n@param analyzer function analysis call-back handler\n@param entryState context state which feeds into the entry point\n@param entryState initial ResultState\n@param maintainInstructionResults","static":false,"name":"<init>","comment":"Constructor for entry point and a specified entryState","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"entryPt","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.util.state.FunctionAnalyzer","name":"analyzer","comment":"function analysis call-back handler","type_short":"FunctionAnalyzer"},{"type_long":"ghidra.util.state.ContextState","name":"entryState","comment":"context state which feeds into the entry point","type_short":"ContextState"},{"type_long":"boolean","name":"maintainInstructionResults","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns entry point associated with this results state.","static":false,"name":"getEntryPoint","comment":"Returns entry point associated with this results state.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.SequenceNumber","comment":"","type_short":"SequenceNumber"}},{"javadoc":"Returns set of addresses analyzed with function.\n (In-line functions not included)","static":false,"name":"getExaminedSet","comment":"Returns set of addresses analyzed with function.\n (In-line functions not included)","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Set an assumed register value immediately following construction and prior to flow.\n@param register (context register not permitted)\n@param value","static":false,"name":"assume","comment":"Set an assumed register value immediately following construction and prior to flow.","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"(context register not permitted)","type_short":"Register"},{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processFunction","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addState","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"flowFrom","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.util.state.ContextState","name":"state","comment":"","type_short":"ContextState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addEndState","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"returnPcodeSeq","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.util.state.ContextState","name":"state","comment":"","type_short":"ContextState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getContextStates","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"seq","comment":"","type_short":"SequenceNumber"}],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.util.state.ContextState>","comment":"","type_short":"Iterator"}},{"javadoc":"","static":false,"name":"getContextStateSet","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"seq","comment":"","type_short":"SequenceNumber"}],"throws":[],"return":{"type_long":"ghidra.util.state.ResultsState.ContextStateSet","comment":"","type_short":"ContextStateSet"}},{"javadoc":"","static":false,"name":"createContextStateSet","comment":"","params":[{"type_long":"ghidra.util.state.SequenceRange","name":"seqRange","comment":"","type_short":"SequenceRange"}],"throws":[],"return":{"type_long":"ghidra.util.state.ResultsState.ContextStateSet","comment":"","type_short":"ContextStateSet"}},{"javadoc":"","static":false,"name":"performInlineCall","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"inlineCallAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.util.state.ContextState","comment":"","type_short":"ContextState"}},{"javadoc":"Process an instruction pcode operation after performing simplification on the inputs and operation\n@param pcodeOp\n@param currentState\n@param monitor task monitor\n@return true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.\n@throws CancelledException\n@throws InlineCallException","static":false,"name":"processAndEmulatePCode","comment":"Process an instruction pcode operation after performing simplification on the inputs and operation","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.util.state.ResultsState.InlineCallException","comment":"","type_short":"InlineCallException"}],"return":{"type_long":"boolean","comment":"true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"simplify","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"","type_short":"Varnode"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"","static":false,"name":"simplifyLoad","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"values","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"Generate unused unique varnode","static":true,"name":"getNewUnique","comment":"Generate unused unique varnode","params":[{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"Process an instruction pcode operation represented by a VarnodeOperation.\n@param op\n@param currentState\n@param monitor task monitor\n@return true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.\n@throws CancelledException\n@throws InlineCallException","static":false,"name":"emulateOperation","comment":"Process an instruction pcode operation represented by a VarnodeOperation.","params":[{"type_long":"ghidra.util.state.VarnodeOperation","name":"op","comment":"","type_short":"VarnodeOperation"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.util.state.ResultsState.InlineCallException","comment":"","type_short":"InlineCallException"}],"return":{"type_long":"boolean","comment":"true if state can continue to be propagated, otherwise a new state is\n required due to the processing of a branch operation.","type_short":"boolean"}},{"javadoc":"Check varnode for possible stack read\/write and provide\n stack address varnode replacement.\n@param pcodeOp operation which references stack location as input\n@param offsetValue offset value\n@return a stack offset if appropriate or null.","static":false,"name":"getStackOffset","comment":"Check varnode for possible stack read\/write and provide\n stack address varnode replacement.","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"loadStoreOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"offsetValue","comment":"offset value","type_short":"Varnode"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"a stack offset if appropriate or null.","type_short":"Varnode"}},{"javadoc":"Generate simplified operation\n@param pcodeOp pcode operation\n@param values values associated with pcodeOp inputs\n@return operation output result or simplification of an operation.","static":true,"name":"simplify","comment":"Generate simplified operation","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"pcode operation","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"values","comment":"values associated with pcodeOp inputs","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"operation output result or simplification of an operation.","type_short":"Varnode"}},{"javadoc":"","static":true,"name":"eillimnateCarryOp","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"values","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"","static":true,"name":"combineLogicOrOperation","comment":"","params":[{"type_long":"ghidra.util.state.VarnodeOperation","name":"op","comment":"","type_short":"VarnodeOperation"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"","static":true,"name":"combineDoubleShiftOperation","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"outerPcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"outerInputValues","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"Flip values and generate new VarnodeOperation which contains new pcodeOp\n@param pcodeOp\n@param values\n@return new VarnodeOperation which contains new pcodeOp","static":true,"name":"flipInputs","comment":"Flip values and generate new VarnodeOperation which contains new pcodeOp","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode[]","name":"values","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"}],"throws":[],"return":{"type_long":"ghidra.util.state.VarnodeOperation","comment":"new VarnodeOperation which contains new pcodeOp","type_short":"VarnodeOperation"}},{"javadoc":"","static":true,"name":"isBooleanOutputOperation","comment":"","params":[{"type_long":"ghidra.util.state.VarnodeOperation","name":"op","comment":"","type_short":"VarnodeOperation"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Simplify specified varnode base upon specified andMask.\n@param seq\n@param varnode\n@param andMask\n@return simplified varnode or null if simplification failed","static":true,"name":"simplifyWithIntAndMask","comment":"Simplify specified varnode base upon specified andMask.","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"seq","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"","type_short":"Varnode"},{"type_long":"long","name":"andMask","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"simplified varnode or null if simplification failed","type_short":"Varnode"}},{"javadoc":"","static":false,"name":"handleIndirectFlow","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"destValue","comment":"","type_short":"Varnode"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.program.model.address.Address>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"handleDirectFlow","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"disassemble","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check value assignments for items of interest:\n <ul>\n <li>Frame pointer identification<\/li>\n <li>Tracking of modified registers<\/li>\n <\/ul>\n@param output output varnode\n@param value assigned value\n@param op pcode operation\n@throws CancelledException","static":false,"name":"checkAssignment","comment":"Check value assignments for items of interest:\n \n Frame pointer identification\n Tracking of modified registers\n ","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"output","comment":"output varnode","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"value","comment":"assigned value","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"op","comment":"pcode operation","type_short":"PcodeOp"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkStackOffsetAssignment","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"op","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"value","comment":"","type_short":"Varnode"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns collection of frame pointer candidates.","static":false,"name":"getFramePointerCandidates","comment":"Returns collection of frame pointer candidates.","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.util.state.ResultsState.FramePointerCandidate>","comment":"","type_short":"Collection"}},{"javadoc":"Returns the set of registers which were modified yet preserved.","static":false,"name":"getPreservedRegisters","comment":"Returns the set of registers which were modified yet preserved.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"","type_short":"List"}},{"javadoc":"Returns the set of registers which were modified","static":false,"name":"getModifiedRegisters","comment":"Returns the set of registers which were modified","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"reconcileModifiedRegisters","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isPreserved","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"findOpIndex","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"op","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"loc","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"matchOpPcodeObjectAssignment","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp[]","name":"operandPcode","comment":"","type_short":"ghidra.program.model.pcode.PcodeOp[]"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"loc","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"matchOpObject","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"},{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"loc","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isStackParameterOffset","comment":"","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Check for register corresponding to the specified varnode and add to inputRegs.\n@param addressVarnode register or address varnode which has not been written","static":false,"name":"checkInput","comment":"Check for register corresponding to the specified varnode and add to inputRegs.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"addressVarnode","comment":"register or address varnode which has not been written","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addRegister","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"},{"type_long":"java.util.List<ghidra.program.model.lang.Register>","name":"regList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsRegister","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"},{"type_long":"java.util.List<ghidra.program.model.lang.Register>","name":"regList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns list of registers which are read before written.","static":false,"name":"getInputRegisters","comment":"Returns list of registers which are read before written.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"handleIndirectCall","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.address.Address","name":"indirectPtr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"destValue","comment":"","type_short":"Varnode"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.state.ResultsState.InlineCallException","comment":"","type_short":"InlineCallException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"handleCall","comment":"","params":[{"type_long":"ghidra.program.model.pcode.PcodeOp","name":"pcodeOp","comment":"","type_short":"PcodeOp"},{"type_long":"ghidra.program.model.address.Address","name":"indirectPtr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.state.ResultsState.InlineCallException","comment":"","type_short":"InlineCallException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"applyFunctionAffects","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"calledFrom","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Generate an INDIRECT pcodeop operation representing an unknown state\n for an affectedVarnode resulting from a function call at the specified seq.\n@param seq CALL or CALLIND pcodeop sequence\n@param affectVarnode affected varnode (e.g., return register)\n@return indirect varnode operation","static":false,"name":"getInvalidatedVarnode","comment":"Generate an INDIRECT pcodeop operation representing an unknown state\n for an affectedVarnode resulting from a function call at the specified seq.","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"seq","comment":"CALL or CALLIND pcodeop sequence","type_short":"SequenceNumber"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"affectVarnode","comment":"affected varnode (e.g., return register)","type_short":"Varnode"}],"throws":[],"return":{"type_long":"ghidra.util.state.VarnodeOperation","comment":"indirect varnode operation","type_short":"VarnodeOperation"}},{"javadoc":"","static":false,"name":"applyFunctionPurge","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"calledFrom","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.program.model.address.Address","name":"destAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.util.state.ContextState","name":"currentState","comment":"","type_short":"ContextState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get\/Compute the Purge size from the stack for the function\n@param func function or null\n@return size in bytes that is removed from the stack after the function\n         is called.","static":true,"name":"getFunctionPurge","comment":"Get\/Compute the Purge size from the stack for the function","params":[{"type_long":"ghidra.program.model.listing.Program","name":"functionProgram","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"function or null","type_short":"Function"}],"throws":[],"return":{"type_long":"int","comment":"size in bytes that is removed from the stack after the function\n         is called.","type_short":"int"}},{"javadoc":"Get the default\/assumed stack depth change for this language\n@param depth stack depth to return if the default is unknown for the language\n@return ","static":true,"name":"getDefaultStackDepthChange","comment":"Get the default\/assumed stack depth change for this language","params":[{"type_long":"ghidra.program.model.listing.Program","name":"depthProgram","comment":"","type_short":"Program"},{"type_long":"int","name":"depth","comment":"stack depth to return if the default is unknown for the language","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@return Varnode that represents the stack pointer register","static":false,"name":"getStackPointerVarnode","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"Varnode that represents the stack pointer register","type_short":"Varnode"}},{"javadoc":"","static":true,"name":"pushDownIntAddOffset","comment":"","params":[{"type_long":"ghidra.util.state.VarnodeOperation","name":"op","comment":"","type_short":"VarnodeOperation"},{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"","type_short":"Varnode"}},{"javadoc":"","static":false,"name":"getReturnAddresses","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.SequenceNumber>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"getReturnValues","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.Varnode>","comment":"","type_short":"Set"}},{"javadoc":"","static":true,"name":"getUnsignedOffset","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"v","comment":"","type_short":"Varnode"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":true,"name":"getSignedOffset","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"v","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}}],"name":"ResultsState","comment":"","fields":[{"type_long":"boolean","javadoc":"","static":true,"name":"DEBUG","comment":"","type_short":"boolean","constant_value":null},{"type_long":"long[]","javadoc":"","static":true,"name":"VALUE_MASK","comment":"","type_short":"long[]","constant_value":null},{"type_long":"long[]","javadoc":"","static":true,"name":"SIGN_BIT","comment":"","type_short":"long[]","constant_value":null},{"type_long":"java.util.Iterator<ghidra.util.state.ContextState>","javadoc":"","static":true,"name":"emptyContextStateIterator","comment":"","type_short":"Iterator","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"busy","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.state.FunctionAnalyzer","javadoc":"","static":false,"name":"analyzer","comment":"","type_short":"FunctionAnalyzer","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.program.model.listing.Listing","javadoc":"","static":false,"name":"listing","comment":"","type_short":"Listing","constant_value":null},{"type_long":"ghidra.program.model.address.AddressFactory","javadoc":"","static":false,"name":"addrFactory","comment":"","type_short":"AddressFactory","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"maintainInstructionResults","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.pcode.SequenceNumber","javadoc":"","static":false,"name":"entryPt","comment":"","type_short":"SequenceNumber","constant_value":null},{"type_long":"java.util.LinkedList<ghidra.program.model.pcode.SequenceNumber>","javadoc":"","static":false,"name":"flowList","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"ghidra.program.model.pcode.Varnode","javadoc":"","static":false,"name":"stackVarnode","comment":"","type_short":"Varnode","constant_value":null},{"type_long":"ghidra.util.state.ContextState","javadoc":"","static":false,"name":"entryState","comment":"","type_short":"ContextState","constant_value":null},{"type_long":"ghidra.program.model.listing.Function","javadoc":"","static":false,"name":"currentFunction","comment":"","type_short":"Function","constant_value":null},{"type_long":"ghidra.program.model.lang.PrototypeModel","javadoc":"","static":false,"name":"currentPrototype","comment":"","type_short":"PrototypeModel","constant_value":null},{"type_long":"java.lang.Long","javadoc":"","static":false,"name":"paramBaseStackOffset","comment":"","type_short":"Long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"stackGrowsNegative","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"examinedSet","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"java.util.LinkedList<ghidra.util.state.ResultsState.BranchDestination>","javadoc":"","static":false,"name":"todoList","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.pcode.SequenceNumber,java.util.List<ghidra.util.state.ContextState>>","javadoc":"","static":false,"name":"endStateMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashMap<java.lang.Long,ghidra.program.model.address.Address>","javadoc":"","static":false,"name":"externalThunkMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"inputRegs","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"registersModified","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"registersPreserved","comment":"","type_short":"ArrayList","constant_value":null},{"type_long":"java.util.HashMap<ghidra.program.model.lang.Register,ghidra.util.state.ResultsState.FramePointerCandidate>","javadoc":"","static":false,"name":"framePointerCandidates","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"java.util.HashSet<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"framePointerCandidatesDismissed","comment":"","type_short":"HashSet","constant_value":null},{"type_long":"java.util.LinkedList<ghidra.util.state.ResultsState.ContextStateSet>","javadoc":"","static":false,"name":"savedStates","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"java.util.Comparator<java.lang.Object>","javadoc":"","static":true,"name":"CONTEXT_STATE_SET_SEQUENCE_COMPARATOR","comment":"","type_short":"Comparator","constant_value":null},{"type_long":"long","javadoc":"","static":true,"name":"nextPrivateUnique","comment":"","type_short":"long","constant_value":null}]}
