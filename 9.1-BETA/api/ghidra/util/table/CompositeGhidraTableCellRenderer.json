{"implements":[],"javadoc":"What: A cell renderer that will attempt to use any registered cell renderer and will otherwise\n       default to the parent rendering implementation.\n Why:  Sometimes the need arises to be able to use the default table rendering while adding \n       additional rendering (e.g., to be able to add row coloring).\n How:  Create a cell renderer that extends this class and install that into your table.  Then,\n       override {@link #getTableCellRendererComponent(JTable, Object, Settings, boolean, boolean, int, int)}\n       to call this class' implementation.  Finally, add desired decoration.","static":false,"extends":"ghidra.util.table.GhidraTableCellRenderer","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTableCellRendererComponent","comment":"","params":[{"type_long":"docking.widgets.table.GTableCellRenderingData","name":"data","comment":"","type_short":"GTableCellRenderingData"}],"throws":[],"return":{"type_long":"java.awt.Component","comment":"","type_short":"Component"}},{"javadoc":"","static":false,"name":"getCellRenderer","comment":"","params":[{"type_long":"javax.swing.JTable","name":"table","comment":"","type_short":"JTable"},{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"","type_short":"TableCellRenderer"}}],"name":"CompositeGhidraTableCellRenderer","comment":"What: A cell renderer that will attempt to use any registered cell renderer and will otherwise\n       default to the parent rendering implementation.\n Why:  Sometimes the need arises to be able to use the default table rendering while adding \n       additional rendering (e.g., to be able to add row coloring).\n How:  Create a cell renderer that extends this class and install that into your table.  Then,\n       override #getTableCellRendererComponent(JTable, Object, Settings, boolean, boolean, int, int)\n       to call this class' implementation.  Finally, add desired decoration.","fields":[]}
