{"implements":[],"javadoc":"Provides a depth first search service to directed graphs. \n Once a search has finished information about the search \n can be obtained.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Upon creation a depth first search of the given graph is performed.\n@param graph The graph to search\n@param initialSeeds The vertices used to start the search\n@param getAdditionalSeedsIfNeeded If true, when searching from the initial\n seeds does not find all vertices in the graph, additional start vertices will\n be selected until every vertex is the graph has been found.\n@param goForward Follow edges in their specifed direction\n@param goBackward Follow edges in the opposite of their specified direction.","static":false,"name":"<init>","comment":"Upon creation a depth first search of the given graph is performed.","params":[{"type_long":"ghidra.util.graph.DirectedGraph","name":"graph","comment":"The graph to search","type_short":"DirectedGraph"},{"type_long":"ghidra.util.graph.Vertex[]","name":"initialSeeds","comment":"The vertices used to start the search","type_short":"ghidra.util.graph.Vertex[]"},{"type_long":"boolean","name":"getAdditionalSeedsIfNeeded","comment":"If true, when searching from the initial\n seeds does not find all vertices in the graph, additional start vertices will\n be selected until every vertex is the graph has been found.","type_short":"boolean"},{"type_long":"boolean","name":"goForward","comment":"Follow edges in their specifed direction","type_short":"boolean"},{"type_long":"boolean","name":"goBackward","comment":"Follow edges in the opposite of their specified direction.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return true if the vertex has not yet been discovered in the depth first\n search.","static":false,"name":"isUnseen","comment":"Return true if the vertex has not yet been discovered in the depth first\n search.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return true if the vertex has completed its role in the depth first\n search.","static":false,"name":"isCompleted","comment":"Return true if the vertex has completed its role in the depth first\n search.","params":[{"type_long":"ghidra.util.graph.Vertex","name":"v","comment":"","type_short":"Vertex"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return the back edges found in this depth first search.","static":false,"name":"backEdges","comment":"Return the back edges found in this depth first search.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Return the tree edges in this depth first search.","static":false,"name":"treeEdges","comment":"Return the tree edges in this depth first search.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Edge[]","comment":"","type_short":"ghidra.util.graph.Edge[]"}},{"javadoc":"Return true iff no back edges were found. \n \n Note that if the graph\n is not completely explored the answer is only for the portion\n of the graph expored.","static":false,"name":"isAcyclic","comment":"Return true iff no back edges were found. \n \n Note that if the graph\n is not completely explored the answer is only for the portion\n of the graph expored.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return true iff the every edge is a tree edge. Will always be false\n if the entire graph is not explored.","static":false,"name":"isTree","comment":"Return true iff the every edge is a tree edge. Will always be false\n if the entire graph is not explored.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns a topological sort of the directed graph. \n Return the vertices in the explored \n portion of the graph with the following\n property:\n <ol>\n <li>If the graph is acyclic then v[i] -> v[j] => i < j .<\/li>\n <li>If the graph contains cycles, then the above is true except when\n     (v[i],v[j]) is a back edge.<\/li>\n <\/ol>","static":false,"name":"topologicalSort","comment":"Returns a topological sort of the directed graph. \n Return the vertices in the explored \n portion of the graph with the following\n property:\n \n If the graph is acyclic then v[i] - v[j] = i  j .\n If the graph contains cycles, then the above is true except when\n     (v[i],v[j]) is a back edge.\n ","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.Vertex[]","comment":"","type_short":"ghidra.util.graph.Vertex[]"}},{"javadoc":"Return the seeds used in the depth first search.","static":false,"name":"seedsUsed","comment":"Return the seeds used in the depth first search.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.util.graph.Vertex>","comment":"","type_short":"List"}},{"javadoc":"Returns a spanning tree (in the form of a DirectedGraph). \n No claims that the spanning tree returned has any special \n properties.","static":false,"name":"spanningTree","comment":"Returns a spanning tree (in the form of a DirectedGraph). \n No claims that the spanning tree returned has any special \n properties.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.DirectedGraph","comment":"","type_short":"DirectedGraph"}}],"name":"DepthFirstSearch","comment":"Provides a depth first search service to directed graphs. \n Once a search has finished information about the search \n can be obtained.","fields":[{"type_long":"ghidra.util.graph.DirectedGraph","javadoc":"","static":false,"name":"graph","comment":"","type_short":"DirectedGraph","constant_value":null},{"type_long":"java.util.List<ghidra.util.graph.Vertex>","javadoc":"","static":false,"name":"seedsUsed","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","javadoc":"","static":false,"name":"unseen","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Set<ghidra.util.graph.Vertex>","javadoc":"","static":false,"name":"finished","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Stack<ghidra.util.graph.KeyedObject>","javadoc":"","static":false,"name":"pending","comment":"","type_short":"Stack","constant_value":null},{"type_long":"java.util.LinkedList<ghidra.util.graph.Vertex>","javadoc":"","static":false,"name":"finishListInReverseOrder","comment":"","type_short":"LinkedList","constant_value":null},{"type_long":"java.util.List<ghidra.util.graph.Edge>","javadoc":"","static":false,"name":"backEdges","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<ghidra.util.graph.Edge>","javadoc":"","static":false,"name":"treeEdges","comment":"","type_short":"List","constant_value":null}]}
