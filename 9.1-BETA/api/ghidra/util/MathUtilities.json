{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Perform unsigned division.  Provides proper handling of all 64-bit unsigned\n values.\n@param numerator unsigned numerator\n@param denominator positive divisor\n@return result of unsigned division\n@throws IllegalArgumentException if negative denominator is specified","static":true,"name":"unsignedDivide","comment":"Perform unsigned division.  Provides proper handling of all 64-bit unsigned\n values.","params":[{"type_long":"long","name":"numerator","comment":"unsigned numerator","type_short":"long"},{"type_long":"long","name":"denominator","comment":"positive divisor","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"result of unsigned division","type_short":"long"}},{"javadoc":"Perform unsigned modulo.  Provides proper handling of all 64-bit unsigned\n values.\n@param numerator unsigned numerator\n@param denominator positive divisor\n@return result of unsigned modulo (i.e., remainder)\n@throws IllegalArgumentException if negative denominator is specified","static":true,"name":"unsignedModulo","comment":"Perform unsigned modulo.  Provides proper handling of all 64-bit unsigned\n values.","params":[{"type_long":"long","name":"numerator","comment":"unsigned numerator","type_short":"long"},{"type_long":"long","name":"denominator","comment":"positive divisor","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"result of unsigned modulo (i.e., remainder)","type_short":"long"}},{"javadoc":"Ensures that the given value is within the given range.\n@param value the value to check\n@param min the minimum value allowed\n@param max the maximum value allowed\n@return the clamped value","static":true,"name":"clamp","comment":"Ensures that the given value is within the given range.","params":[{"type_long":"int","name":"value","comment":"the value to check","type_short":"int"},{"type_long":"int","name":"min","comment":"the minimum value allowed","type_short":"int"},{"type_long":"int","name":"max","comment":"the maximum value allowed","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the clamped value","type_short":"int"}},{"javadoc":"","static":true,"name":"main","comment":"","params":[{"type_long":"java.lang.String[]","name":"args","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MathUtilities","comment":"","fields":[]}
