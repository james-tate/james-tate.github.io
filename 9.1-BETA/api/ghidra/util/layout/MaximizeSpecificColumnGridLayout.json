{"implements":["java.awt.LayoutManager"],"javadoc":"<CODE>MaximizeSpecificColumnGridLayout<\/CODE> is a row oriented grid type of layout.\n It lays out rows of information in a table format using a specific number of columns. \n Components are added left to right and top to bottom. The table will try to give each column\n the width that is necessary to display the longest item in that column. The columns with the \n widest desired component size will get reduced first if there isn't enough room. \n The maximizeColumn(int) method allows you to indicate that you want to try to keep the size\n of a column at the preferred size of the widest component in that column as the parent \n container component is resized. Any column that has been maximized won't shrink until the \n non-maximized windows are reduced to a width of zero.\n The intent is that all non-maximized columns will shrink from largest to smallest so that\n they all will become zero width together at which point the maximized columns will begin \n shrinking in a similar manner.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor with no gap between rows or columns.\n@param columnCount the number of columns in this grid","static":false,"name":"<init>","comment":"Constructor with no gap between rows or columns.","params":[{"type_long":"int","name":"columnCount","comment":"the number of columns in this grid","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor.\n@param vgap the gap (in pixels) between rows.\n@param hgap the gap (in pixels) between the two columns.\n@param columnCount the number of columns in this grid","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"int","name":"vgap","comment":"the gap (in pixels) between rows.","type_short":"int"},{"type_long":"int","name":"hgap","comment":"the gap (in pixels) between the two columns.","type_short":"int"},{"type_long":"int","name":"columnCount","comment":"the number of columns in this grid","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows you to indicate that you want to try to keep the size of a column at the preferred \n size of the widest component in that column as the parent container component is resized. \n Any column that has been maximized won't shrink until the non-maximized windows are reduced \n to a width of zero.\n@param column the number (0 based) of the column to keep maximized.","static":false,"name":"maximizeColumn","comment":"Allows you to indicate that you want to try to keep the size of a column at the preferred \n size of the widest component in that column as the parent container component is resized. \n Any column that has been maximized won't shrink until the non-maximized windows are reduced \n to a width of zero.","params":[{"type_long":"int","name":"column","comment":"the number (0 based) of the column to keep maximized.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"preferredLayoutSize","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"getRowHeight","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"},{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"minimumLayoutSize","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"layoutContainer","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTotalWidth","comment":"","params":[{"type_long":"int[]","name":"individualWidths","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getComputedColumnWidths","comment":"","params":[{"type_long":"int","name":"width","comment":"","type_short":"int"},{"type_long":"int[]","name":"desiredColumnWidths","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"getMaximizedCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getDesiredColumnWidths","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"getDesiredMaximizedWidth","comment":"","params":[{"type_long":"int[]","name":"desiredWidths","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"addLayoutComponent","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeLayoutComponent","comment":"","params":[{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"MaximizeSpecificColumnGridLayout","comment":"MaximizeSpecificColumnGridLayout is a row oriented grid type of layout.\n It lays out rows of information in a table format using a specific number of columns. \n Components are added left to right and top to bottom. The table will try to give each column\n the width that is necessary to display the longest item in that column. The columns with the \n widest desired component size will get reduced first if there isn't enough room. \n The maximizeColumn(int) method allows you to indicate that you want to try to keep the size\n of a column at the preferred size of the widest component in that column as the parent \n container component is resized. Any column that has been maximized won't shrink until the \n non-maximized windows are reduced to a width of zero.\n The intent is that all non-maximized columns will shrink from largest to smallest so that\n they all will become zero width together at which point the maximized columns will begin \n shrinking in a similar manner.","fields":[{"type_long":"int","javadoc":"","static":false,"name":"vgap","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"hgap","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"columnCount","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean[]","javadoc":"","static":false,"name":"maximizedColumns","comment":"","type_short":"boolean[]","constant_value":null}]}
