{"implements":["ghidra.program.model.listing.StackFrame"],"javadoc":"<p>Implements a simple stack frame for a function.  Each frame consists of a\n local sections, parameter section, and save information (return address,\n saved registers).\n<\/p>\n <p> When a frame is created, the parameter stack start offset must be set up.\n If the parameter start is >= 0, then the stack grows in the negative\n direction. If the parameter start < 0, then the stack grows in the positive\n direction. When a frame is created the parameter start offset must be\n specified. Later the parameter start offset can be changed, but it must\n remain positive\/negative if the frame was created with a positive\/negative\n value.\n <\/p>\n <p>WARNING! This implementation is deficient and is only used by the UndefinedFunction\n implementation","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new Stack Frame.\n Stack characteristics are established at time of construction \n (e.g., parameter offset, negative-growth, etc.).","static":false,"name":"<init>","comment":"Creates a new Stack Frame.\n Stack characteristics are established at time of construction \n (e.g., parameter offset, negative-growth, etc.).","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A variable owned by this stack changed, notify someone.\n@param stackVar the variable that changed.","static":false,"name":"variableChanged","comment":"A variable owned by this stack changed, notify someone.","params":[{"type_long":"ghidra.program.model.listing.LocalVariableImpl","name":"stackVar","comment":"the variable that changed.","type_short":"LocalVariableImpl"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new stack variable.  \n \n Specified source is always ignored\n and the variable instance returned will never be a parameter.\n@see ghidra.program.model.listing.StackFrame#createVariable(java.lang.String, int, ghidra.program.model.data.DataType, ghidra.program.model.symbol.SourceType)","static":false,"name":"createVariable","comment":"Create a new stack variable.  \n \n Specified source is always ignored\n and the variable instance returned will never be a parameter.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"source","comment":"","type_short":"SourceType"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getStackVariables()","static":false,"name":"getStackVariables","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getLocals()","static":false,"name":"getLocals","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getParameters()","static":false,"name":"getParameters","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getFrameSize()","static":false,"name":"getFrameSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getLocalSize()","static":false,"name":"getLocalSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#growsNegative()","static":false,"name":"growsNegative","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#setLocalSize(int)","static":false,"name":"setLocalSize","comment":"","params":[{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getParameterSize()","static":false,"name":"getParameterSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getParameterCount()","static":false,"name":"getParameterCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#clearVariable(int)","static":false,"name":"clearVariable","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getParameterOffset","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isParameterOffset","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getReturnAddressOffset()","static":false,"name":"getReturnAddressOffset","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#setReturnAddressOffset(int)","static":false,"name":"setReturnAddressOffset","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getVariableContaining(int)","static":false,"name":"getVariableContaining","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"Get the size of the negative portion of the stack\n@return the negative portion size","static":false,"name":"getNegativeSize","comment":"Get the size of the negative portion of the stack","params":[],"throws":[],"return":{"type_long":"int","comment":"the negative portion size","type_short":"int"}},{"javadoc":"Get the size of the positive portion of the stack (including 0)\n@return the positive portion size","static":false,"name":"getPositiveSize","comment":"Get the size of the positive portion of the stack (including 0)","params":[],"throws":[],"return":{"type_long":"int","comment":"the positive portion size","type_short":"int"}},{"javadoc":"Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.\n@return an array of variables defined on the negative portion of the frame.","static":false,"name":"getNegativeVariables","comment":"Get all the stack variables in the negative portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of variables defined on the negative portion of the frame.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Method getAllVariables.\n@return StackVariable[]","static":false,"name":"getAllVariables","comment":"Method getAllVariables.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"StackVariable[]","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get all the stack variables in the positive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.","static":false,"name":"getPositiveVariables","comment":"Get all the stack variables in the positive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Variable[]","comment":"an array of variables defined on the positive portion of the frame.","type_short":"ghidra.program.model.listing.Variable[]"}},{"javadoc":"Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","static":false,"name":"getNegativeCount","comment":"Get a count of all the stack variables in the negative portion of the frame.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is negative.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.\n@return an array of variables defined on the positive portion of the frame.","static":false,"name":"getPositiveCount","comment":"Get all the stack variables in the postive portion of the stack.\n This EXCLUDES any variables defined before the parameter offset if the\n parameter offset is positive.","params":[],"throws":[],"return":{"type_long":"int","comment":"an array of variables defined on the positive portion of the frame.","type_short":"int"}},{"javadoc":"@see ghidra.program.model.listing.StackFrame#getFunction()","static":false,"name":"getFunction","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"","type_short":"Function"}},{"javadoc":"Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.\n@param obj the object to compare for equality.","static":false,"name":"equals","comment":"Returns whether some other stack frame is \"equivalent to\" this one.\n The stack frame is considered equal to another even if they are each\n part of a different function.","params":[{"type_long":"java.lang.Object","name":"obj","comment":"the object to compare for equality.","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"StackFrameImpl","comment":"Implements a simple stack frame for a function.  Each frame consists of a\n local sections, parameter section, and save information (return address,\n saved registers).\n\n  When a frame is created, the parameter stack start offset must be set up.\n If the parameter start is = 0, then the stack grows in the negative\n direction. If the parameter start  0, then the stack grows in the positive\n direction. When a frame is created the parameter start offset must be\n specified. Later the parameter start offset can be changed, but it must\n remain positive\/negative if the frame was created with a positive\/negative\n value.\n \n WARNING! This implementation is deficient and is only used by the UndefinedFunction\n implementation","fields":[{"type_long":"ghidra.program.model.listing.Variable[]","javadoc":"","static":true,"name":"emptyArray","comment":"","type_short":"ghidra.program.model.listing.Variable[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"localSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"returnStart","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","javadoc":"","static":false,"name":"variables","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.program.model.listing.Function","javadoc":"","static":false,"name":"function","comment":"","type_short":"Function","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"paramStart","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"growsNegative","comment":"","type_short":"boolean","constant_value":null}]}
