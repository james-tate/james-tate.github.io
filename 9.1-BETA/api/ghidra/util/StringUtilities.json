{"implements":[],"javadoc":"Class with static methods that deal with string manipulation.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given character is a special character.\n For example a '\\n' or '\\\\'.  A value of 0 is not considered special for this purpose\n as it is handled separately because it has more varied use cases.\n@param c the character\n@return true if the given character is a special character","static":true,"name":"isControlCharacterOrBackslash","comment":"Returns true if the given character is a special character.\n For example a '\\n' or '\\\\'.  A value of 0 is not considered special for this purpose\n as it is handled separately because it has more varied use cases.","params":[{"type_long":"char","name":"c","comment":"the character","type_short":"char"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given character is a special character","type_short":"boolean"}},{"javadoc":"Returns true if the given codePoint (ie. full unicode 32bit character) is a special character.\n For example a '\\n' or '\\\\'.  A value of 0 is not considered special for this purpose\n as it is handled separately because it has more varied use cases.\n@param codePoint the codePoint (ie. character), see {@link String#codePointAt(int)}\n@return true if the given character is a special character","static":true,"name":"isControlCharacterOrBackslash","comment":"Returns true if the given codePoint (ie. full unicode 32bit character) is a special character.\n For example a '\\n' or '\\\\'.  A value of 0 is not considered special for this purpose\n as it is handled separately because it has more varied use cases.","params":[{"type_long":"int","name":"codePoint","comment":"the codePoint (ie. character), see String#codePointAt(int)","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given character is a special character","type_short":"boolean"}},{"javadoc":"Determines if a string is enclosed in double quotes (ASCII 34 (0x22))\n@param str String to test for double-quote enclosure\n@return True if the first and last characters are the double-quote character,\n false otherwise","static":true,"name":"isDoubleQuoted","comment":"Determines if a string is enclosed in double quotes (ASCII 34 (0x22))","params":[{"type_long":"java.lang.String","name":"str","comment":"String to test for double-quote enclosure","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"True if the first and last characters are the double-quote character,\n false otherwise","type_short":"boolean"}},{"javadoc":"If the given string is enclosed in double quotes, extract the inner text.\n Otherwise, return the given string unmodified.\n@param str String to match and extract from\n@return The inner text of a doubly-quoted string, or the original string if not\n double-quoted.","static":true,"name":"extractFromDoubleQuotes","comment":"If the given string is enclosed in double quotes, extract the inner text.\n Otherwise, return the given string unmodified.","params":[{"type_long":"java.lang.String","name":"str","comment":"String to match and extract from","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The inner text of a doubly-quoted string, or the original string if not\n double-quoted.","type_short":"String"}},{"javadoc":"Returns true if the character is in displayable character range\n@param c the character\n@return true if the character is in displayable character range","static":true,"name":"isDisplayable","comment":"Returns true if the character is in displayable character range","params":[{"type_long":"int","name":"c","comment":"the character","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the character is in displayable character range","type_short":"boolean"}},{"javadoc":"Returns true if all the given sequences are either null or only whitespace\n@param sequences the sequences to check\n@return true if all the given sequences are either null or only whitespace.\n@see StringUtils#isNoneBlank(CharSequence...)\n@see StringUtils#isNoneEmpty(CharSequence...)\n@see StringUtils#isAnyBlank(CharSequence...)\n@see StringUtils#isAnyEmpty(CharSequence...)","static":true,"name":"isAllBlank","comment":"Returns true if all the given sequences are either null or only whitespace","params":[{"type_long":"java.lang.CharSequence[]","name":"sequences","comment":"the sequences to check","type_short":"java.lang.CharSequence[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if all the given sequences are either null or only whitespace.","type_short":"boolean"}},{"javadoc":"Converts the character into a string.\n If the character is special, it will actually render the character.\n For example, given '\\n' the output would be \"\\\\n\".\n@param c the character to convert into a string\n@return the converted character","static":true,"name":"characterToString","comment":"Converts the character into a string.\n If the character is special, it will actually render the character.\n For example, given '\\n' the output would be \"\\\\n\".","params":[{"type_long":"char","name":"c","comment":"the character to convert into a string","type_short":"char"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the converted character","type_short":"String"}},{"javadoc":"Returns a count of how many times the 'occur' char appears in the strings.\n@param string the string to look inside\n@param occur the character to look for\/\n@return a count of how many times the 'occur' char appears in the strings","static":true,"name":"countOccurrences","comment":"Returns a count of how many times the 'occur' char appears in the strings.","params":[{"type_long":"java.lang.String","name":"string","comment":"the string to look inside","type_short":"String"},{"type_long":"char","name":"occur","comment":"the character to look for\/","type_short":"char"}],"throws":[],"return":{"type_long":"int","comment":"a count of how many times the 'occur' char appears in the strings","type_short":"int"}},{"javadoc":"","static":true,"name":"equals","comment":"","params":[{"type_long":"java.lang.String","name":"s1","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"s2","comment":"","type_short":"String"},{"type_long":"boolean","name":"caseSensitive","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"endsWithWhiteSpace","comment":"","params":[{"type_long":"java.lang.String","name":"string","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Generate a quoted string from US-ASCII character bytes assuming 1-byte chars.\n <p>\n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).  If a character size other than 1-byte is\n required the alternate form of this method should be used.\n <p>\n The result string will be single quoted (ie. \"'\") if the input byte array is\n 1 byte long, otherwise the result will be double-quoted ('\"').\n@param bytes character string bytes\n@return escaped string for display use","static":true,"name":"toQuotedString","comment":"Generate a quoted string from US-ASCII character bytes assuming 1-byte chars.\n \n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).  If a character size other than 1-byte is\n required the alternate form of this method should be used.\n \n The result string will be single quoted (ie. \"'\") if the input byte array is\n 1 byte long, otherwise the result will be double-quoted ('\"').","params":[{"type_long":"byte[]","name":"bytes","comment":"character string bytes","type_short":"byte[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"escaped string for display use","type_short":"String"}},{"javadoc":"Generate a quoted string from US-ASCII characters, where each character is charSize bytes.\n <p>\n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).\n <p>\n The result string will be single quoted (ie. \"'\") if the input byte array is\n 1 character long (ie. charSize), otherwise the result will be double-quoted ('\"').\n@param bytes array of bytes\n@param charSize number of bytes per character (1, 2, 4).\n@return escaped string for display use","static":true,"name":"toQuotedString","comment":"Generate a quoted string from US-ASCII characters, where each character is charSize bytes.\n \n Special characters and non-printable characters will be escaped using C character escape\n conventions (e.g., \\t, \\n, \\\\uHHHH, etc.).\n \n The result string will be single quoted (ie. \"'\") if the input byte array is\n 1 character long (ie. charSize), otherwise the result will be double-quoted ('\"').","params":[{"type_long":"byte[]","name":"bytes","comment":"array of bytes","type_short":"byte[]"},{"type_long":"int","name":"charSize","comment":"number of bytes per character (1, 2, 4).","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"escaped string for display use","type_short":"String"}},{"javadoc":"","static":true,"name":"appendCharConvertedToEscapeSequence","comment":"","params":[{"type_long":"int","name":"c","comment":"","type_short":"int"},{"type_long":"int","name":"charSize","comment":"","type_short":"int"},{"type_long":"java.lang.StringBuilder","name":"builder","comment":"","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the given string starts with <tt>prefix<\/tt> ignoring case.\n <p>\n Note: This method is equivalent to calling:\n <pre>\n \tstring.regionMatches( true, 0, prefix, 0, prefix.length() );\n <\/pre>\n@param string the string which may contain the prefix\n@param prefix the prefix to test against\n@return true if the given string starts with <tt>prefix<\/tt> ignoring case.","static":true,"name":"startsWithIgnoreCase","comment":"Returns true if the given string starts with prefix ignoring case.\n \n Note: This method is equivalent to calling:\n \n \tstring.regionMatches( true, 0, prefix, 0, prefix.length() );\n ","params":[{"type_long":"java.lang.String","name":"string","comment":"the string which may contain the prefix","type_short":"String"},{"type_long":"java.lang.String","name":"prefix","comment":"the prefix to test against","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given string starts with prefix ignoring case.","type_short":"boolean"}},{"javadoc":"Returns true if the given string ends with <tt>postfix<\/tt>, ignoring case.\n <p>\n Note: This method is equivalent to calling:\n <pre>\n  int startIndex = string.length() - postfix.length();\n \tstring.regionMatches( true, startOffset, postfix, 0, postfix.length() );\n <\/pre>\n@param string the string which may end with <tt>postfix<\/tt>\n@param postfix the string for which to test existence\n@return true if the given string ends with <tt>postfix<\/tt>, ignoring case.","static":true,"name":"endsWithIgnoreCase","comment":"Returns true if the given string ends with postfix, ignoring case.\n \n Note: This method is equivalent to calling:\n \n  int startIndex = string.length() - postfix.length();\n \tstring.regionMatches( true, startOffset, postfix, 0, postfix.length() );\n ","params":[{"type_long":"java.lang.String","name":"string","comment":"the string which may end with postfix","type_short":"String"},{"type_long":"java.lang.String","name":"postfix","comment":"the string for which to test existence","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given string ends with postfix, ignoring case.","type_short":"boolean"}},{"javadoc":"Returns true if all the given <tt>searches<\/tt> are contained in the given string.\n@param toSearch the string to search\n@param searches the strings to find\n@return true if all the given <tt>searches<\/tt> are contained in the given string.","static":true,"name":"containsAll","comment":"Returns true if all the given searches are contained in the given string.","params":[{"type_long":"java.lang.CharSequence","name":"toSearch","comment":"the string to search","type_short":"CharSequence"},{"type_long":"java.lang.CharSequence[]","name":"searches","comment":"the strings to find","type_short":"java.lang.CharSequence[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if all the given searches are contained in the given string.","type_short":"boolean"}},{"javadoc":"Returns true if all the given <tt>searches<\/tt> are contained in the given string,\n ignoring case.\n@param toSearch the string to search\n@param searches the strings to find\n@return true if all the given <tt>searches<\/tt> are contained in the given string.","static":true,"name":"containsAllIgnoreCase","comment":"Returns true if all the given searches are contained in the given string,\n ignoring case.","params":[{"type_long":"java.lang.CharSequence","name":"toSearch","comment":"the string to search","type_short":"CharSequence"},{"type_long":"java.lang.CharSequence[]","name":"searches","comment":"the strings to find","type_short":"java.lang.CharSequence[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if all the given searches are contained in the given string.","type_short":"boolean"}},{"javadoc":"Returns the index of the first whole word occurrence of the search word within\n the given text.  A whole word is defined as the character before and after the occurrence\n must not be a JavaIdentifierPart.\n@param text the text to be searched.\n@param searchWord the word to search for.\n@return the index of the first whole word occurrence of the search word within\n the given text, or -1 if not found.","static":true,"name":"indexOfWord","comment":"Returns the index of the first whole word occurrence of the search word within\n the given text.  A whole word is defined as the character before and after the occurrence\n must not be a JavaIdentifierPart.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to be searched.","type_short":"String"},{"type_long":"java.lang.String","name":"searchWord","comment":"the word to search for.","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"the index of the first whole word occurrence of the search word within\n the given text, or -1 if not found.","type_short":"int"}},{"javadoc":"Returns true if the substring within the text string starting at startIndex and having\n the given length is a whole word. A whole word is defined as the character before and after\n the occurrence must not be a JavaIdentifierPart.\n@param text the text containing the potential word.\n@param startIndex the start index of the potential word within the text.\n@param length the length of the potential word\n@return true if the substring within the text string starting at startIndex and having\n the given length is a whole word.","static":true,"name":"isWholeWord","comment":"Returns true if the substring within the text string starting at startIndex and having\n the given length is a whole word. A whole word is defined as the character before and after\n the occurrence must not be a JavaIdentifierPart.","params":[{"type_long":"java.lang.String","name":"text","comment":"the text containing the potential word.","type_short":"String"},{"type_long":"int","name":"startIndex","comment":"the start index of the potential word within the text.","type_short":"int"},{"type_long":"int","name":"length","comment":"the length of the potential word","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the substring within the text string starting at startIndex and having\n the given length is a whole word.","type_short":"boolean"}},{"javadoc":"Convert tabs in the given string to spaces.\n@param str string containing tabs\n@param tabSize length of the tab\n@return string that has spaces for tabs","static":true,"name":"convertTabsToSpaces","comment":"Convert tabs in the given string to spaces.","params":[{"type_long":"java.lang.String","name":"str","comment":"string containing tabs","type_short":"String"},{"type_long":"int","name":"tabSize","comment":"length of the tab","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"string that has spaces for tabs","type_short":"String"}},{"javadoc":"Parses a string containing multiple lines into an array where each\n element in the array contains only a single line. The \"\\n\" character is\n used as the delimiter for lines.\n <p>\n This methods creates an empty string entry in the result array for initial and trailing\n separator chars, as well as for consecutive separators.\n@param str the string to parse\n@return an array of lines; an empty array if the given value is null or empty\n@see StringUtils#splitPreserveAllTokens(String, char)","static":true,"name":"toLines","comment":"Parses a string containing multiple lines into an array where each\n element in the array contains only a single line. The \"\\n\" character is\n used as the delimiter for lines.\n \n This methods creates an empty string entry in the result array for initial and trailing\n separator chars, as well as for consecutive separators.","params":[{"type_long":"java.lang.String","name":"str","comment":"the string to parse","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"an array of lines; an empty array if the given value is null or empty","type_short":"java.lang.String[]"}},{"javadoc":"Parses a string containing multiple lines into an array where each\n element in the array contains only a single line. The \"\\n\" character is\n used as the delimiter for lines.\n@param s the string to parse\n@param preserveTokens true signals to treat consecutive newlines as multiple lines; false\n        signals to treat consecutive newlines as a single line break\n@return an array of lines; an empty array if the given value is null or empty","static":true,"name":"toLines","comment":"Parses a string containing multiple lines into an array where each\n element in the array contains only a single line. The \"\\n\" character is\n used as the delimiter for lines.","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to parse","type_short":"String"},{"type_long":"boolean","name":"preserveTokens","comment":"true signals to treat consecutive newlines as multiple lines; false\n        signals to treat consecutive newlines as a single line break","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"an array of lines; an empty array if the given value is null or empty","type_short":"java.lang.String[]"}},{"javadoc":"Enforces the given length upon the given string by trimming and then padding as\n necessary.\n@param s the String to fix\n@param pad the pad character to use if padding is required\n@param size the desired size of the string\n@return the fixed string","static":true,"name":"toFixedSize","comment":"Enforces the given length upon the given string by trimming and then padding as\n necessary.","params":[{"type_long":"java.lang.String","name":"s","comment":"the String to fix","type_short":"String"},{"type_long":"char","name":"pad","comment":"the pad character to use if padding is required","type_short":"char"},{"type_long":"int","name":"size","comment":"the desired size of the string","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the fixed string","type_short":"String"}},{"javadoc":"Pads the source string to the specified length, using the filler string\n as the pad. If length is negative, left justifies the string, appending\n the filler; if length is positive, right justifies the source string.\n@param source the original string to pad.\n@param filler the type of characters with which to pad\n@param length the length of padding to add (0 results in no changes)\n@return the padded string","static":true,"name":"pad","comment":"Pads the source string to the specified length, using the filler string\n as the pad. If length is negative, left justifies the string, appending\n the filler; if length is positive, right justifies the source string.","params":[{"type_long":"java.lang.String","name":"source","comment":"the original string to pad.","type_short":"String"},{"type_long":"char","name":"filler","comment":"the type of characters with which to pad","type_short":"char"},{"type_long":"int","name":"length","comment":"the length of padding to add (0 results in no changes)","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the padded string","type_short":"String"}},{"javadoc":"Splits the given string into lines using <code>\\n<\/code> and then pads each string\n with the given pad string.  Finally, the updated lines are formed into a single string.\n <p>\n This is useful for constructing complicated <code>toString()<\/code> representations.\n@param s the input string\n@param indent the indent string; this will be appended as needed\n@return the output string","static":true,"name":"indentLines","comment":"Splits the given string into lines using \\n and then pads each string\n with the given pad string.  Finally, the updated lines are formed into a single string.\n \n This is useful for constructing complicated toString() representations.","params":[{"type_long":"java.lang.String","name":"s","comment":"the input string","type_short":"String"},{"type_long":"java.lang.String","name":"indent","comment":"the indent string; this will be appended as needed","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the output string","type_short":"String"}},{"javadoc":"Finds the word at the given index in the given string. For example, the\n string \"The tree is green\" and the index of 5, the result would be\n \"tree\".\n@param s the string to search\n@param index the index into the string to \"seed\" the word.\n@return String the word contained at the given index.","static":true,"name":"findWord","comment":"Finds the word at the given index in the given string. For example, the\n string \"The tree is green\" and the index of 5, the result would be\n \"tree\".","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to search","type_short":"String"},{"type_long":"int","name":"index","comment":"the index into the string to \"seed\" the word.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String the word contained at the given index.","type_short":"String"}},{"javadoc":"Finds the word at the given index in the given string; if the word\n contains the given charToAllow, then allow it in the string. For example,\n the string \"The tree* is green\" and the index of 5, charToAllow is '*',\n then the result would be \"tree*\".\n <p>\n If the search yields only whitespace, then the empty string will be returned.\n@param s the string to search\n@param index the index into the string to \"seed\" the word.\n@param charsToAllow chars that normally would be considered invalid, e.g., '*' so\n        that the word can be returned with the charToAllow\n@return String the word contained at the given index.","static":true,"name":"findWord","comment":"Finds the word at the given index in the given string; if the word\n contains the given charToAllow, then allow it in the string. For example,\n the string \"The tree* is green\" and the index of 5, charToAllow is '*',\n then the result would be \"tree*\".\n \n If the search yields only whitespace, then the empty string will be returned.","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to search","type_short":"String"},{"type_long":"int","name":"index","comment":"the index into the string to \"seed\" the word.","type_short":"int"},{"type_long":"char[]","name":"charsToAllow","comment":"chars that normally would be considered invalid, e.g., '*' so\n        that the word can be returned with the charToAllow","type_short":"char[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String the word contained at the given index.","type_short":"String"}},{"javadoc":"","static":true,"name":"findWordLocation","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"},{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"char[]","name":"charsToAllow","comment":"","type_short":"char[]"}],"throws":[],"return":{"type_long":"ghidra.util.WordLocation","comment":"","type_short":"WordLocation"}},{"javadoc":"Loosely defined as a character that we would expected to be an normal ascii content meant\n for consumption by a human.  Also, provided allows chars will pass the test.\n@param c the char to check\n@param charsToAllow characters that will cause this method to return true\n@return true if it is a 'word char'","static":true,"name":"isWordChar","comment":"Loosely defined as a character that we would expected to be an normal ascii content meant\n for consumption by a human.  Also, provided allows chars will pass the test.","params":[{"type_long":"char","name":"c","comment":"the char to check","type_short":"char"},{"type_long":"char[]","name":"charsToAllow","comment":"characters that will cause this method to return true","type_short":"char[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if it is a 'word char'","type_short":"boolean"}},{"javadoc":"Finds the starting position of the last word in the given string.\n@param s the string to search\n@return int the starting position of the last word, -1 if not found","static":true,"name":"findLastWordPosition","comment":"Finds the starting position of the last word in the given string.","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to search","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"int the starting position of the last word, -1 if not found","type_short":"int"}},{"javadoc":"Takes a path-like string and retrieves the last non-empty item.  Examples:\n <ul>\n \t\t<li>StringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/\", \"\/\") returns word<\/li>\n \t\t<li>StringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/\", \"\/\") returns word<\/li>\n \t\t<li>StringUtilities.getLastWord(\"This.is.my.last.word\", \".\") returns word<\/li>\n \t\t<li>StringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/MyFile.java\", \".\") returns java<\/li>\n \t\t<li>StringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/MyFile.java\", \"\/\") returns MyFile.java<\/li>\n <\/ul>\n@param s the string from which to get the last word\n@param separator the separator of words\n@return the last word","static":true,"name":"getLastWord","comment":"Takes a path-like string and retrieves the last non-empty item.  Examples:\n \n \t\tStringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/\", \"\/\") returns word\n \t\tStringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/\", \"\/\") returns word\n \t\tStringUtilities.getLastWord(\"This.is.my.last.word\", \".\") returns word\n \t\tStringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/MyFile.java\", \".\") returns java\n \t\tStringUtilities.getLastWord(\"\/This\/is\/my\/last\/word\/MyFile.java\", \"\/\") returns MyFile.java\n ","params":[{"type_long":"java.lang.String","name":"s","comment":"the string from which to get the last word","type_short":"String"},{"type_long":"java.lang.String","name":"separator","comment":"the separator of words","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the last word","type_short":"String"}},{"javadoc":"Converts an integer into a string.\n For example, given an integer 0x41424344,\n the returned string would be \"ABCD\".\n@param value the integer value\n@return the converted string","static":true,"name":"toString","comment":"Converts an integer into a string.\n For example, given an integer 0x41424344,\n the returned string would be \"ABCD\".","params":[{"type_long":"int","name":"value","comment":"the integer value","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the converted string","type_short":"String"}},{"javadoc":"Turn the given data into an attractive string, with the separator of your choosing\n@param collection the data from which a string will be generated\n@param separator the string used to separate elements\n@return a string representation of the given list","static":true,"name":"toString","comment":"Turn the given data into an attractive string, with the separator of your choosing","params":[{"type_long":"java.util.Collection<?>","name":"collection","comment":"the data from which a string will be generated","type_short":"Collection"},{"type_long":"java.lang.String","name":"separator","comment":"the string used to separate elements","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string representation of the given list","type_short":"String"}},{"javadoc":"","static":true,"name":"toStringWithIndent","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Reverse the characters in the given string\n@param s the string to reverse\n@return the reversed string","static":true,"name":"reverse","comment":"Reverse the characters in the given string","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to reverse","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the reversed string","type_short":"String"}},{"javadoc":"Merge two strings into one.\n If one string contains the other, then the largest is returned.\n If both strings are null then null is returned.\n If both strings are empty, the empty string is returned.\n If the original two strings differ, this adds the second string\n to the first separated by a newline.\n@param string1 the first string\n@param string2 the second string\n@return the merged string","static":true,"name":"mergeStrings","comment":"Merge two strings into one.\n If one string contains the other, then the largest is returned.\n If both strings are null then null is returned.\n If both strings are empty, the empty string is returned.\n If the original two strings differ, this adds the second string\n to the first separated by a newline.","params":[{"type_long":"java.lang.String","name":"string1","comment":"the first string","type_short":"String"},{"type_long":"java.lang.String","name":"string2","comment":"the second string","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the merged string","type_short":"String"}},{"javadoc":"Limits the given string to the given <tt>max<\/tt> number of characters.  If the string is\n larger than the given length, then it will be trimmed to fit that length <b>after adding\n ellipses<\/b>\n\n <p>The given <code>max<\/code> value must be at least 4.  This is to ensure that, at a\n minimum, we can display the {@value #ELLIPSES} plus one character.\n@param original The string to be limited\n@param max The maximum number of characters to display (including ellipses, if trimmed).\n@return the trimmed string\n@throws IllegalArgumentException If the given <code>max<\/code> value is less than 5.","static":true,"name":"trim","comment":"Limits the given string to the given max number of characters.  If the string is\n larger than the given length, then it will be trimmed to fit that length after adding\n ellipses\n\n The given max value must be at least 4.  This is to ensure that, at a\n minimum, we can display the  plus one character.","params":[{"type_long":"java.lang.String","name":"original","comment":"The string to be limited","type_short":"String"},{"type_long":"int","name":"max","comment":"The maximum number of characters to display (including ellipses, if trimmed).","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the trimmed string","type_short":"String"}},{"javadoc":"","static":true,"name":"trimTrailingNulls","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Trims the given string the <code>max<\/code> number of characters.  Ellipses will be\n added to signal that content was removed.  Thus, the actual number of removed characters\n will be <code>(s.length() - max) + {@value StringUtilities#ELLIPSES}<\/code> length.\n\n <p>If the string fits within the max, then the string will be returned.\n\n <p>The given <code>max<\/code> value must be at least 5.  This is to ensure that, at a\n minimum, we can display the {@value #ELLIPSES} plus one character from the front and\n back of the string.\n@param s the string to trim\n@param max the max number of characters to allow.\n@return the trimmed string","static":true,"name":"trimMiddle","comment":"Trims the given string the max number of characters.  Ellipses will be\n added to signal that content was removed.  Thus, the actual number of removed characters\n will be (s.length() - max) +  length.\n\n If the string fits within the max, then the string will be returned.\n\n The given max value must be at least 5.  This is to ensure that, at a\n minimum, we can display the  plus one character from the front and\n back of the string.","params":[{"type_long":"java.lang.String","name":"s","comment":"the string to trim","type_short":"String"},{"type_long":"int","name":"max","comment":"the max number of characters to allow.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the trimmed string","type_short":"String"}},{"javadoc":"This method looks for all occurrences of successive asterisks (i.e.,\n \"**\") and replace with a single asterisk, which is an equivalent usage in\n Ghidra. This is necessary due to some symbol names which cause the\n pattern matching process to become unusable. An example string that\n causes this problem is\n \"s_CLSID\\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\\InprocServer3_01001400\".\n@param value The string to be checked.\n@return The updated string.","static":true,"name":"fixMultipleAsterisks","comment":"This method looks for all occurrences of successive asterisks (i.e.,\n \"**\") and replace with a single asterisk, which is an equivalent usage in\n Ghidra. This is necessary due to some symbol names which cause the\n pattern matching process to become unusable. An example string that\n causes this problem is\n \"s_CLSID\\{ADB880A6-D8FF-11CF-9377-00AA003B7A11}\\InprocServer3_01001400\".","params":[{"type_long":"java.lang.String","name":"value","comment":"The string to be checked.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The updated string.","type_short":"String"}},{"javadoc":"Returns true if the character is OK to be contained inside C language string. That\n is, the string should not be tokenized on this char.\n@param c the char\n@return boolean true if it is allows in a C string","static":true,"name":"isValidCLanguageChar","comment":"Returns true if the character is OK to be contained inside C language string. That\n is, the string should not be tokenized on this char.","params":[{"type_long":"char","name":"c","comment":"the char","type_short":"char"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if it is allows in a C string","type_short":"boolean"}},{"javadoc":"Returns true if the given character is within the ascii range.\n@param c the char to check\n@return true if the given character is within the ascii range.","static":true,"name":"isAsciiChar","comment":"Returns true if the given character is within the ascii range.","params":[{"type_long":"char","name":"c","comment":"the char to check","type_short":"char"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given character is within the ascii range.","type_short":"boolean"}},{"javadoc":"Returns true if the given code point is within the ascii range.\n@param codePoint the codePoint to check\n@return true if the given character is within the ascii range.","static":true,"name":"isAsciiChar","comment":"Returns true if the given code point is within the ascii range.","params":[{"type_long":"int","name":"codePoint","comment":"the codePoint to check","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given character is within the ascii range.","type_short":"boolean"}},{"javadoc":"Replaces escaped characters in a string to corresponding control characters.  For example\n a string containing a backslash character followed by a 'n' character would be replaced\n with a single line feed (0x0a) character.  One use for this is to to allow users to\n type strings in a text field and include control characters such as line feeds and tabs.\n\n The string that contains 'a','b','c', '\\', 'n', 'd', '\\', 'u', '0', '0', '0', '1', 'e'  would become\n   'a','b','c',0x0a,'d', 0x01, e\"\n@param str The string to convert escape sequences to control characters.\n@return a new string with escape sequences converted to control characters.\n@see #convertEscapeSequences(String string)","static":true,"name":"convertEscapeSequences","comment":"Replaces escaped characters in a string to corresponding control characters.  For example\n a string containing a backslash character followed by a 'n' character would be replaced\n with a single line feed (0x0a) character.  One use for this is to to allow users to\n type strings in a text field and include control characters such as line feeds and tabs.\n\n The string that contains 'a','b','c', '\\', 'n', 'd', '\\', 'u', '0', '0', '0', '1', 'e'  would become\n   'a','b','c',0x0a,'d', 0x01, e\"","params":[{"type_long":"java.lang.String","name":"str","comment":"The string to convert escape sequences to control characters.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a new string with escape sequences converted to control characters.","type_short":"String"}},{"javadoc":"Attempt to handle character escape sequence.  Note that only a single Java character\n will be produced which limits the range of valid character value.\n@param string string containing escape sequences\n@param escapeSequence escape sequence (e.g., \"\\\\u\")\n@param hexLength number of hex digits expected (1 to 8)\n@param index current position within string\n@param builder the builder into which the results will be added\n@return true if escape sequence processed and added a single character\n to the builder.","static":true,"name":"handleEscapeSequence","comment":"Attempt to handle character escape sequence.  Note that only a single Java character\n will be produced which limits the range of valid character value.","params":[{"type_long":"java.lang.String","name":"string","comment":"string containing escape sequences","type_short":"String"},{"type_long":"java.lang.String","name":"escapeSequence","comment":"escape sequence (e.g., \"\\\\u\")","type_short":"String"},{"type_long":"int","name":"hexLength","comment":"number of hex digits expected (1 to 8)","type_short":"int"},{"type_long":"int","name":"index","comment":"current position within string","type_short":"int"},{"type_long":"java.lang.StringBuilder","name":"builder","comment":"the builder into which the results will be added","type_short":"StringBuilder"}],"throws":[],"return":{"type_long":"boolean","comment":"true if escape sequence processed and added a single character\n to the builder.","type_short":"boolean"}},{"javadoc":"Replaces known control characters in a string to corresponding escape sequences.  For example\n a string containing a line feed character would be converted to backslash character\n followed by an 'n' character.  One use for this is to display strings in a manner to\n easily see the embedded control characters.\n\n The string that contains 'a','b','c',0x0a,'d', 0x01, 'e'  would become\n 'a','b','c', '\\', 'n', 'd', 0x01, 'e'\n@param str The string to convert control characters to escape sequences\n@return a new string with all the control characters converted to escape sequences.","static":true,"name":"convertControlCharsToEscapeSequences","comment":"Replaces known control characters in a string to corresponding escape sequences.  For example\n a string containing a line feed character would be converted to backslash character\n followed by an 'n' character.  One use for this is to display strings in a manner to\n easily see the embedded control characters.\n\n The string that contains 'a','b','c',0x0a,'d', 0x01, 'e'  would become\n 'a','b','c', '\\', 'n', 'd', 0x01, 'e'","params":[{"type_long":"java.lang.String","name":"str","comment":"The string to convert control characters to escape sequences","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a new string with all the control characters converted to escape sequences.","type_short":"String"}},{"javadoc":"Maps known control characters to corresponding escape sequences.  For example\n a line feed character would be converted to backslash '\\\\' character\n followed by an 'n' character.  One use for this is to display strings in a manner to\n easily see the embedded control characters.\n@param codePoint The character to convert to escape sequence string\n@return a new string with equivalent to escape sequence, or original character (as\n a string) if not in the control character mapping.","static":true,"name":"convertCodePointToEscapeSequence","comment":"Maps known control characters to corresponding escape sequences.  For example\n a line feed character would be converted to backslash '\\\\' character\n followed by an 'n' character.  One use for this is to display strings in a manner to\n easily see the embedded control characters.","params":[{"type_long":"int","name":"codePoint","comment":"The character to convert to escape sequence string","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a new string with equivalent to escape sequence, or original character (as\n a string) if not in the control character mapping.","type_short":"String"}},{"javadoc":"Returns true if the specified code point is the 'replacement' code point 0xFFFD,\n which is used when decoding bytes into unicode chars and there was a bad or invalid\n sequence that does not have a mapping. (ie. decoding byte char 0x80 as US-ASCII)\n@param codePoint to test\n@return boolean true if the char is 0xFFFD (ie. UNICODE REPLACEMENT char)","static":true,"name":"isUnicodeReplacementCodePoint","comment":"Returns true if the specified code point is the 'replacement' code point 0xFFFD,\n which is used when decoding bytes into unicode chars and there was a bad or invalid\n sequence that does not have a mapping. (ie. decoding byte char 0x80 as US-ASCII)","params":[{"type_long":"int","name":"codePoint","comment":"to test","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the char is 0xFFFD (ie. UNICODE REPLACEMENT char)","type_short":"boolean"}}],"name":"StringUtilities","comment":"Class with static methods that deal with string manipulation.","fields":[{"type_long":"java.util.Map<java.lang.Character,java.lang.String>","javadoc":"Create the bi-directional mapping between control characters and escape sequences.","static":true,"name":"controlToEscapeStringMap","comment":"Create the bi-directional mapping between control characters and escape sequences.","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<java.lang.String,java.lang.Character>","javadoc":"","static":true,"name":"escapeStringToControlMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ELLIPSES","comment":"","type_short":"String","constant_value":"\"...\""},{"type_long":"java.util.regex.Pattern","javadoc":"","static":true,"name":"DOUBLE_QUOTED_STRING_PATTERN","comment":"","type_short":"Pattern","constant_value":null},{"type_long":"java.lang.String","javadoc":"The platform specific string that is the line separator.","static":true,"name":"LINE_SEPARATOR","comment":"The platform specific string that is the line separator.","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"UNICODE_REPLACEMENT","comment":"","type_short":"int","constant_value":"65533"},{"type_long":"int","javadoc":"Unicode Byte Order Marks (BOM) characters are special characters in the Unicode \n character space that signal endian-ness of the text.\n <p>\n The value for the BigEndian version (0xFEFF) works for both 16 and 32 bit\n character values.\n <p>\n There are separate values for Little Endian Byte Order Marks for 16 and 32 bit\n characters because the 32 bit value is shifted left by 16 bits.","static":true,"name":"UNICODE_BE_BYTE_ORDER_MARK","comment":"Unicode Byte Order Marks (BOM) characters are special characters in the Unicode \n character space that signal endian-ness of the text.\n \n The value for the BigEndian version (0xFEFF) works for both 16 and 32 bit\n character values.\n \n There are separate values for Little Endian Byte Order Marks for 16 and 32 bit\n characters because the 32 bit value is shifted left by 16 bits.","type_short":"int","constant_value":"65279"},{"type_long":"int","javadoc":"","static":true,"name":"UNICODE_LE16_BYTE_ORDER_MARK","comment":"","type_short":"int","constant_value":"65534"},{"type_long":"int","javadoc":"","static":true,"name":"UNICODE_LE32_BYTE_ORDER_MARK","comment":"","type_short":"int","constant_value":"-131072"}]}
