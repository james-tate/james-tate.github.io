{"implements":[],"javadoc":"A utility class to handle running code on the AWT Event Dispatch Thread","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"loadTimeout","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns true if this is the event dispatch thread. Note that this method returns true in\n headless mode because any thread in headless mode can dispatch its own events. In swing\n environments, the swing thread is usually used to dispatch events.\n@return true if this is the event dispatch thread -OR- is in headless mode.","static":true,"name":"isSwingThread","comment":"Returns true if this is the event dispatch thread. Note that this method returns true in\n headless mode because any thread in headless mode can dispatch its own events. In swing\n environments, the swing thread is usually used to dispatch events.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is the event dispatch thread -OR- is in headless mode.","type_short":"boolean"}},{"javadoc":"Wait until AWT event queue (Swing) has been flushed and no more (to a point) events\n are pending.","static":true,"name":"allowSwingToProcessEvents","comment":"Wait until AWT event queue (Swing) has been flushed and no more (to a point) events\n are pending.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A development\/testing time method to make sure the current thread is the swing thread.\n@param errorMessage The message to display when the assert fails","static":true,"name":"assertThisIsTheSwingThread","comment":"A development\/testing time method to make sure the current thread is the swing thread.","params":[{"type_long":"java.lang.String","name":"errorMessage","comment":"The message to display when the assert fails","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calls the given runnable on the Swing thread in the future by putting the request on\n the back of the event queue.\n@param r the runnable","static":true,"name":"runLater","comment":"Calls the given runnable on the Swing thread in the future by putting the request on\n the back of the event queue.","params":[{"type_long":"java.lang.Runnable","name":"r","comment":"the runnable","type_short":"Runnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs the given runnable now if the caller is on the Swing thread.  Otherwise, the \n runnable will be posted later.\n@param r the runnable","static":true,"name":"runIfSwingOrRunLater","comment":"Runs the given runnable now if the caller is on the Swing thread.  Otherwise, the \n runnable will be posted later.","params":[{"type_long":"java.lang.Runnable","name":"r","comment":"the runnable","type_short":"Runnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calls the given suppler on the Swing thread, blocking with a\n {@link SwingUtilities#invokeAndWait(Runnable)} if not on the Swing thread.  \n \n <p>Use this method when you are not on the Swing thread and you need to get a value \n that is managed\/synchronized by the Swing thread.\n\n <pre>\n \t\tString value = runNow(() -> label.getText());\n <\/pre>\n@param s the supplier that will be called on the Swing thread\n@return the result of the supplier\n@see #runNow(Runnable)","static":true,"name":"runNow","comment":"Calls the given suppler on the Swing thread, blocking with a\n SwingUtilities#invokeAndWait(Runnable) if not on the Swing thread.  \n \n Use this method when you are not on the Swing thread and you need to get a value \n that is managed\/synchronized by the Swing thread.\n\n \n \t\tString value = runNow(() - label.getText());\n ","params":[{"type_long":"java.util.function.Supplier<T>","name":"s","comment":"the supplier that will be called on the Swing thread","type_short":"Supplier"}],"throws":[],"return":{"type_long":"T","comment":"the result of the supplier","type_short":"T"}},{"javadoc":"Calls the given runnable on the Swing thread\n@param r the runnable\n@see #runNow(Supplier) if you need to return a value from the Swing thread.","static":true,"name":"runNow","comment":"Calls the given runnable on the Swing thread","params":[{"type_long":"java.lang.Runnable","name":"r","comment":"the runnable","type_short":"Runnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calls the given runnable on the Swing thread\n \n <p>This method will throw an exception if the Swing thread is not available within the\n given timeout.  This method is useful for preventing deadlocks.\n@param r the runnable\n@param timeout the timeout value\n@param unit the time unit of the timeout value\n@throws UnableToSwingException if the timeout was reach waiting for the Swing thread\n@see #runNow(Supplier) if you need to return a value from the Swing thread.","static":true,"name":"runNow","comment":"Calls the given runnable on the Swing thread\n \n This method will throw an exception if the Swing thread is not available within the\n given timeout.  This method is useful for preventing deadlocks.","params":[{"type_long":"java.lang.Runnable","name":"r","comment":"the runnable","type_short":"Runnable"},{"type_long":"long","name":"timeout","comment":"the timeout value","type_short":"long"},{"type_long":"java.util.concurrent.TimeUnit","name":"unit","comment":"the time unit of the timeout value","type_short":"TimeUnit"}],"throws":[{"type_long":"ghidra.util.exception.UnableToSwingException","comment":"if the timeout was reach waiting for the Swing thread","type_short":"UnableToSwingException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"waitFor","comment":"","params":[{"type_long":"java.util.concurrent.CyclicBarrier","name":"barrier","comment":"","type_short":"CyclicBarrier"},{"type_long":"long","name":"timeout","comment":"","type_short":"long"},{"type_long":"java.util.concurrent.TimeUnit","name":"unit","comment":"","type_short":"TimeUnit"}],"throws":[{"type_long":"ghidra.util.exception.UnableToSwingException","comment":"","type_short":"UnableToSwingException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"waitFor","comment":"","params":[{"type_long":"java.util.concurrent.CyclicBarrier","name":"barrier","comment":"","type_short":"CyclicBarrier"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isInHeadlessMode","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"doRun","comment":"","params":[{"type_long":"java.lang.Runnable","name":"r","comment":"","type_short":"Runnable"},{"type_long":"boolean","name":"wait","comment":"","type_short":"boolean"},{"type_long":"java.lang.String","name":"errorMessage","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"Swing","comment":"A utility class to handle running code on the AWT Event Dispatch Thread","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SWING_TIMEOUT_SECONDS_PROPERTY","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"SWING_TIMEOUT_SECONDS_DEFAULT_VALUE","comment":"","type_short":"int","constant_value":"20"},{"type_long":"int","javadoc":"","static":true,"name":"SWING_TIMEOUT_SECONDS_VALUE","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SWING_RUN_ERROR_MSG","comment":"","type_short":"String","constant_value":"\"Unexpected exception running a task in the Swing Thread:  \""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GSWING_THREAD_POOL_NAME","comment":"","type_short":"String","constant_value":"\"GSwing Worker\""}]}
