{"implements":[],"javadoc":"Interface for the GhidraFileChooser data model.\n This allows the GhidraFileChooser to operate\n on files from different sources, other than\n just the local file system.","static":false,"methods":[{"javadoc":"Set the model listener.\n@param l the new model listener","static":false,"name":"setListener","comment":"Set the model listener.","params":[{"type_long":"ghidra.util.filechooser.GhidraFileChooserListener","name":"l","comment":"the new model listener","type_short":"GhidraFileChooserListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the home directory.\n@return the home directory","static":false,"name":"getHomeDirectory","comment":"Returns the home directory.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the home directory","type_short":"File"}},{"javadoc":"Returns the user's desktop directory, as defined by their operating system and\/or their windowing environment, or\n null if there is no desktop directory.<p>\n Example: \"\/home\/the_user\/Desktop\" or \"c:\/Users\/the_user\/Desktop\"\n@return desktop directory","static":false,"name":"getDesktopDirectory","comment":"Returns the user's desktop directory, as defined by their operating system and\/or their windowing environment, or\n null if there is no desktop directory.\n Example: \"\/home\/the_user\/Desktop\" or \"c:\/Users\/the_user\/Desktop\"","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"desktop directory","type_short":"File"}},{"javadoc":"Returns the root drives\/directories.\n On windows, \"C:\\\", \"D:\\\", etc.\n On linux, \"\/\".\n@return the root drives","static":false,"name":"getRoots","comment":"Returns the root drives\/directories.\n On windows, \"C:\\\", \"D:\\\", etc.\n On linux, \"\/\".","params":[],"throws":[],"return":{"type_long":"java.io.File[]","comment":"the root drives","type_short":"java.io.File[]"}},{"javadoc":"Returns an array of the files that \n exist in the specified directory.\n@param directory the directory\n@return an array of files","static":false,"name":"getListing","comment":"Returns an array of the files that \n exist in the specified directory.","params":[{"type_long":"java.io.File","name":"directory","comment":"the directory","type_short":"File"},{"type_long":"java.io.FileFilter","name":"filter","comment":"","type_short":"FileFilter"}],"throws":[],"return":{"type_long":"java.io.File[]","comment":"an array of files","type_short":"java.io.File[]"}},{"javadoc":"Returns an icon for the specified file.\n@param file the file\n@return an icon for the specified file","static":false,"name":"getIcon","comment":"Returns an icon for the specified file.","params":[{"type_long":"java.io.File","name":"file","comment":"the file","type_short":"File"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"an icon for the specified file","type_short":"Icon"}},{"javadoc":"Returns a description for the specified file.\n@param file the file\n@return a description for the specified file","static":false,"name":"getDescription","comment":"Returns a description for the specified file.","params":[{"type_long":"java.io.File","name":"file","comment":"the file","type_short":"File"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a description for the specified file","type_short":"String"}},{"javadoc":"Creates a directory in the specified directory with the specified\n name.\n@param directory the directory in which to create the new directory\n@param name the name of the directory\n@return true if the new directory was create.","static":false,"name":"createDirectory","comment":"Creates a directory in the specified directory with the specified\n name.","params":[{"type_long":"java.io.File","name":"directory","comment":"the directory in which to create the new directory","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"the name of the directory","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the new directory was create.","type_short":"boolean"}},{"javadoc":"Tests whether the file denoted by this abstract pathname is a\n directory.\n@return <code>true<\/code> if and only if the file denoted by this\n          abstract pathname exists <em>and<\/em> is a directory;\n          <code>false<\/code> otherwise","static":false,"name":"isDirectory","comment":"Tests whether the file denoted by this abstract pathname is a\n directory.","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if and only if the file denoted by this\n          abstract pathname exists and is a directory;\n          false otherwise","type_short":"boolean"}},{"javadoc":"Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is <code>\"\/\"<\/code>.  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n <code>\"\\\\\"<\/code>, or if its prefix is <code>\"\\\\\"<\/code>.\n@return <code>true<\/code> if this abstract pathname is absolute,\n          <code>false<\/code> otherwise","static":false,"name":"isAbsolute","comment":"Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is \"\/\".  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n \"\\\\\", or if its prefix is \"\\\\\".","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this abstract pathname is absolute,\n          false otherwise","type_short":"boolean"}},{"javadoc":"Renames the src file to the dest file.\n@param src the file to be renamed\n@param dest the new file\n@return true if the file was renamed","static":false,"name":"renameFile","comment":"Renames the src file to the dest file.","params":[{"type_long":"java.io.File","name":"src","comment":"the file to be renamed","type_short":"File"},{"type_long":"java.io.File","name":"dest","comment":"the new file","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the file was renamed","type_short":"boolean"}},{"javadoc":"Returns the file separator char.\n On windows, '\\'\n On linux, '\/'.\n@return the file separator char","static":false,"name":"getSeparator","comment":"Returns the file separator char.\n On windows, '\\'\n On linux, '\/'.","params":[],"throws":[],"return":{"type_long":"char","comment":"the file separator char","type_short":"char"}}],"name":"GhidraFileChooserModel","comment":"Interface for the GhidraFileChooser data model.\n This allows the GhidraFileChooser to operate\n on files from different sources, other than\n just the local file system.","fields":[]}
