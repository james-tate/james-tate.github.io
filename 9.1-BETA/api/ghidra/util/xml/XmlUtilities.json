{"implements":[],"javadoc":"A set of utility methods for working with XML.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts any special or reserved characters in the specified XML string\n into the equivalent Unicode encoding.\n@param xml the XML string\n@return the encoded XML string","static":true,"name":"escapeElementEntities","comment":"Converts any special or reserved characters in the specified XML string\n into the equivalent Unicode encoding.","params":[{"type_long":"java.lang.String","name":"xml","comment":"the XML string","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the encoded XML string","type_short":"String"}},{"javadoc":"Converts any escaped character entities into their unescaped character\n equivalents. This method is designed to be compatible with the output of\n {@link #escapeElementEntities(String)}.\n@param escapedXMLString The string with escaped data\n@return the unescaped string","static":true,"name":"unEscapeElementEntities","comment":"Converts any escaped character entities into their unescaped character\n equivalents. This method is designed to be compatible with the output of\n #escapeElementEntities(String).","params":[{"type_long":"java.lang.String","name":"escapedXMLString","comment":"The string with escaped data","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the unescaped string","type_short":"String"}},{"javadoc":"Converts the specified XML element into a byte array.\n@param root the root element\n@return the byte array translation of the given element","static":true,"name":"xmlToByteArray","comment":"Converts the specified XML element into a byte array.","params":[{"type_long":"org.jdom.Element","name":"root","comment":"the root element","type_short":"Element"}],"throws":[],"return":{"type_long":"byte[]","comment":"the byte array translation of the given element","type_short":"byte[]"}},{"javadoc":"Converts the specified XML element into a String.\n@param root the root element\n@return String translation of the given element","static":true,"name":"toString","comment":"Converts the specified XML element into a String.","params":[{"type_long":"org.jdom.Element","name":"root","comment":"the root element","type_short":"Element"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String translation of the given element","type_short":"String"}},{"javadoc":"Convert a String into a JDOM {@link Element}.\n <p>\n@param s\n@return \n@throws JDOMException\n@throws IOException","static":true,"name":"fromString","comment":"Convert a String into a JDOM Element.\n ","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[{"type_long":"org.jdom.JDOMException","comment":"","type_short":"JDOMException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"org.jdom.Element","comment":"","type_short":"Element"}},{"javadoc":"Writes a JDOM XML {@link Document} to a {@link File}.\n <p>\n@param doc JDOM XML {@link Document} to write.\n@param dest {@link File} to write to.\n@throws IOException if error when writing file.","static":true,"name":"writeDocToFile","comment":"Writes a JDOM XML Document to a File.\n ","params":[{"type_long":"org.jdom.Document","name":"doc","comment":"JDOM XML Document to write.","type_short":"Document"},{"type_long":"java.io.File","name":"dest","comment":"File to write to.","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if error when writing file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read a File and convert to jdom xml doc.\n <p>\n@param f {@link File} to read\n@return JDOM {@link Document}\n@throws JDOMException if text in file isn't valid XML\n@throws IOException if IO error when reading file.","static":true,"name":"readDocFromFile","comment":"Read a File and convert to jdom xml doc.\n ","params":[{"type_long":"java.io.File","name":"f","comment":"File to read","type_short":"File"}],"throws":[{"type_long":"org.jdom.JDOMException","comment":"if text in file isn't valid XML","type_short":"JDOMException"},{"type_long":"java.io.IOException","comment":"if IO error when reading file.","type_short":"IOException"}],"return":{"type_long":"org.jdom.Document","comment":"JDOM Document","type_short":"Document"}},{"javadoc":"Read a File and convert to jdom xml doc.\n <p>\n@param f {@link ResourceFile} to read\n@return JDOM {@link Document}\n@throws JDOMException if text in file isn't valid XML\n@throws IOException if IO error when reading file.","static":true,"name":"readDocFromFile","comment":"Read a File and convert to jdom xml doc.\n ","params":[{"type_long":"generic.jar.ResourceFile","name":"f","comment":"ResourceFile to read","type_short":"ResourceFile"}],"throws":[{"type_long":"org.jdom.JDOMException","comment":"if text in file isn't valid XML","type_short":"JDOMException"},{"type_long":"java.io.IOException","comment":"if IO error when reading file.","type_short":"IOException"}],"return":{"type_long":"org.jdom.Document","comment":"JDOM Document","type_short":"Document"}},{"javadoc":"Converts the specified byte array into an XML element.\n@param bytes the XML bytes\n@return an XML element","static":true,"name":"byteArrayToXml","comment":"Converts the specified byte array into an XML element.","params":[{"type_long":"byte[]","name":"bytes","comment":"the XML bytes","type_short":"byte[]"}],"throws":[],"return":{"type_long":"org.jdom.Element","comment":"an XML element","type_short":"Element"}},{"javadoc":"Parses the overlay name from the specified address string. Returns null\n if the address string does appear to represent an overlay.\n@param addrStr the address string\n@return the overlay name or null","static":true,"name":"parseOverlayName","comment":"Parses the overlay name from the specified address string. Returns null\n if the address string does appear to represent an overlay.","params":[{"type_long":"java.lang.String","name":"addrStr","comment":"the address string","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the overlay name or null","type_short":"String"}},{"javadoc":"Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.\n@param intStr the string to parse into an integer\n@return the parsed integer.\n@throws NumberFormatException if the given string does not represent a\n             valid integer.","static":true,"name":"parseInt","comment":"Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.","params":[{"type_long":"java.lang.String","name":"intStr","comment":"the string to parse into an integer","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"the parsed integer.","type_short":"int"}},{"javadoc":"Parses the optional specified string as a decimal number, returning its\n integer value.\n <p>\n@param intStr string with integer digits, or empty or null\n@param defaultValue value to return if intStr is missing\n@return integer value of the intStr\n@throws NumberFormatException if intStr could not be parsed or the string\n             specifies a value outside the range of a signed 32 bit\n             integer.","static":true,"name":"parseInt","comment":"Parses the optional specified string as a decimal number, returning its\n integer value.\n ","params":[{"type_long":"java.lang.String","name":"intStr","comment":"string with integer digits, or empty or null","type_short":"String"},{"type_long":"int","name":"defaultValue","comment":"value to return if intStr is missing","type_short":"int"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr could not be parsed or the string\n             specifies a value outside the range of a signed 32 bit\n             integer.","type_short":"NumberFormatException"}],"return":{"type_long":"int","comment":"integer value of the intStr","type_short":"int"}},{"javadoc":"Parses the optional specified string as a decimal number, returning its\n integer value, or defaultValue if the string is null.\n <p>\n@param intStr string with integer digits, or null.\n@param defaultValue value to return if intStr is null.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return integer value of the intStr.\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.","static":true,"name":"parseOptionalBoundedInt","comment":"Parses the optional specified string as a decimal number, returning its\n integer value, or defaultValue if the string is null.\n ","params":[{"type_long":"java.lang.String","name":"intStr","comment":"string with integer digits, or null.","type_short":"String"},{"type_long":"int","name":"defaultValue","comment":"value to return if intStr is null.","type_short":"int"},{"type_long":"int","name":"minValue","comment":"minimum value allowed (inclusive).","type_short":"int"},{"type_long":"int","name":"maxValue","comment":"maximum value allowed (inclusive).","type_short":"int"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr could not be parsed or is out of\n             range.","type_short":"NumberFormatException"}],"return":{"type_long":"int","comment":"integer value of the intStr.","type_short":"int"}},{"javadoc":"Parses the specified string as a decimal number, returning its integer\n value.\n <p>\n@param intStr String with integer digits\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return integer value of the intStr\n@throws NumberFormatException if intStr is null or empty or could not be\n             parsed or is out of range.","static":true,"name":"parseBoundedInt","comment":"Parses the specified string as a decimal number, returning its integer\n value.\n ","params":[{"type_long":"java.lang.String","name":"intStr","comment":"String with integer digits","type_short":"String"},{"type_long":"int","name":"minValue","comment":"minimum value allowed (inclusive)","type_short":"int"},{"type_long":"int","name":"maxValue","comment":"maximum value allowed (inclusive)","type_short":"int"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr is null or empty or could not be\n             parsed or is out of range.","type_short":"NumberFormatException"}],"return":{"type_long":"int","comment":"integer value of the intStr","type_short":"int"}},{"javadoc":"Parses the required attribute as a decimal number, returning its integer\n value.\n <p>\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return integer value of the attribute\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.","static":true,"name":"parseBoundedIntAttr","comment":"Parses the required attribute as a decimal number, returning its integer\n value.\n ","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDom element that contains the attribute","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the name of the xml attribute to parse","type_short":"String"},{"type_long":"int","name":"minValue","comment":"minimum value allowed (inclusive)","type_short":"int"},{"type_long":"int","name":"maxValue","comment":"maximum value allowed (inclusive)","type_short":"int"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr could not be parsed or is out of\n             range.","type_short":"NumberFormatException"}],"return":{"type_long":"int","comment":"integer value of the attribute","type_short":"int"}},{"javadoc":"Parses an optional attribute as a decimal number, returning its integer\n value, or the defaultValue if the attribute is null.\n <p>\n@param ele JDOM element that contains the attribute.\n@param attrName the name of the xml attribute to parse.\n@param defaultValue the default value to return if attribute is missing.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return integer value of the attribute.\n@throws NumberFormatException if the attribute value could not be parsed\n             or is out of range.","static":true,"name":"parseOptionalBoundedIntAttr","comment":"Parses an optional attribute as a decimal number, returning its integer\n value, or the defaultValue if the attribute is null.\n ","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDOM element that contains the attribute.","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the name of the xml attribute to parse.","type_short":"String"},{"type_long":"int","name":"defaultValue","comment":"the default value to return if attribute is missing.","type_short":"int"},{"type_long":"int","name":"minValue","comment":"minimum value allowed (inclusive).","type_short":"int"},{"type_long":"int","name":"maxValue","comment":"maximum value allowed (inclusive).","type_short":"int"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if the attribute value could not be parsed\n             or is out of range.","type_short":"NumberFormatException"}],"return":{"type_long":"int","comment":"integer value of the attribute.","type_short":"int"}},{"javadoc":"Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.\n@param longStr the string to parse into an long\n@return the parsed long.\n@throws NumberFormatException if the given string does not represent a\n             valid long.","static":true,"name":"parseLong","comment":"Parse the given string as either a hex number (if it starts with 0x) or a\n decimal number.","params":[{"type_long":"java.lang.String","name":"longStr","comment":"the string to parse into an long","type_short":"String"}],"throws":[],"return":{"type_long":"long","comment":"the parsed long.","type_short":"long"}},{"javadoc":"Parses the specified string as a decimal number, returning its long\n integer value.\n <p>\n Note, using {@link Long#MIN_VALUE} and\/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n <p>\n@param longStr String with integer digits\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return long integer value of the longStr\n@throws NumberFormatException if intStr is null or empty or could not be\n             parsed or is out of range.","static":true,"name":"parseBoundedLong","comment":"Parses the specified string as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and\/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ","params":[{"type_long":"java.lang.String","name":"longStr","comment":"String with integer digits","type_short":"String"},{"type_long":"long","name":"minValue","comment":"minimum value allowed (inclusive)","type_short":"long"},{"type_long":"long","name":"maxValue","comment":"maximum value allowed (inclusive)","type_short":"long"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr is null or empty or could not be\n             parsed or is out of range.","type_short":"NumberFormatException"}],"return":{"type_long":"long","comment":"long integer value of the longStr","type_short":"long"}},{"javadoc":"Parses the required attribute as a decimal number, returning its long\n integer value.\n <p>\n Note, using {@link Long#MIN_VALUE} and\/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n <p>\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param minValue minimum value allowed (inclusive)\n@param maxValue maximum value allowed (inclusive)\n@return long integer value of the attribute\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.","static":true,"name":"parseBoundedLongAttr","comment":"Parses the required attribute as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and\/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDom element that contains the attribute","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the name of the xml attribute to parse","type_short":"String"},{"type_long":"long","name":"minValue","comment":"minimum value allowed (inclusive)","type_short":"long"},{"type_long":"long","name":"maxValue","comment":"maximum value allowed (inclusive)","type_short":"long"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr could not be parsed or is out of\n             range.","type_short":"NumberFormatException"}],"return":{"type_long":"long","comment":"long integer value of the attribute","type_short":"long"}},{"javadoc":"Parses the required attribute as a decimal number, returning its long\n integer value.\n <p>\n Note, using {@link Long#MIN_VALUE} and\/or {@link Long#MAX_VALUE} as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n <p>\n@param ele JDom element that contains the attribute.\n@param attrName the name of the xml attribute to parse.\n@param defaultValue the default value to return if attribute is missing.\n@param minValue minimum value allowed (inclusive).\n@param maxValue maximum value allowed (inclusive).\n@return long integer value of the attribute.\n@throws NumberFormatException if intStr could not be parsed or is out of\n             range.","static":true,"name":"parseOptionalBoundedLongAttr","comment":"Parses the required attribute as a decimal number, returning its long\n integer value.\n \n Note, using Long#MIN_VALUE and\/or Long#MAX_VALUE as lower\n and upper bounds is problematic and should be avoided as the range check\n will become a NO-OP and always succeed.\n ","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDom element that contains the attribute.","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the name of the xml attribute to parse.","type_short":"String"},{"type_long":"long","name":"defaultValue","comment":"the default value to return if attribute is missing.","type_short":"long"},{"type_long":"long","name":"minValue","comment":"minimum value allowed (inclusive).","type_short":"long"},{"type_long":"long","name":"maxValue","comment":"maximum value allowed (inclusive).","type_short":"long"}],"throws":[{"type_long":"java.lang.NumberFormatException","comment":"if intStr could not be parsed or is out of\n             range.","type_short":"NumberFormatException"}],"return":{"type_long":"long","comment":"long integer value of the attribute.","type_short":"long"}},{"javadoc":"Parses the given string into a boolean value. Acceptable inputs are\n y,n,true,fase. A null input string will return false (useful if optional\n boolean attribute is false by default)\n@param boolStr the string to parse into a boolean value\n@return the boolean result.\n@throws XmlAttributeException if the string in not one of y,n,true,false\n             or null.","static":true,"name":"parseBoolean","comment":"Parses the given string into a boolean value. Acceptable inputs are\n y,n,true,fase. A null input string will return false (useful if optional\n boolean attribute is false by default)","params":[{"type_long":"java.lang.String","name":"boolStr","comment":"the string to parse into a boolean value","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"the boolean result.","type_short":"boolean"}},{"javadoc":"Parses the optional attribute as a boolean value, returning its value or\n the specified defaultValue if missing.\n@param ele JDom element that contains the attribute\n@param attrName the name of the xml attribute to parse\n@param defaultValue boolean value to return if the attribute is not\n            defined\n@return boolean equiv of the attribute string value (\"y\", \"true\"\/\"n\",\n         \"false\")\n@throws IOException if attribute value is not valid boolean string","static":true,"name":"parseOptionalBooleanAttr","comment":"Parses the optional attribute as a boolean value, returning its value or\n the specified defaultValue if missing.","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDom element that contains the attribute","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the name of the xml attribute to parse","type_short":"String"},{"type_long":"boolean","name":"defaultValue","comment":"boolean value to return if the attribute is not\n            defined","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if attribute value is not valid boolean string","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"boolean equiv of the attribute string value (\"y\", \"true\"\/\"n\",\n         \"false\")","type_short":"boolean"}},{"javadoc":"Throws an {@link IOException} with a verbose explanation if the requested\n attribute is not present or is empty.\n <p>\n@param ele JDOM {@link Element} that contains the attribute\n@param attrName the attribute name\n@return String value of the attribute (never null or empty)\n@throws IOException if attribute is missing or empty","static":true,"name":"requireStringAttr","comment":"Throws an IOException with a verbose explanation if the requested\n attribute is not present or is empty.\n ","params":[{"type_long":"org.jdom.Element","name":"ele","comment":"JDOM Element that contains the attribute","type_short":"Element"},{"type_long":"java.lang.String","name":"attrName","comment":"the attribute name","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if attribute is missing or empty","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"String value of the attribute (never null or empty)","type_short":"String"}},{"javadoc":"Tests a string for characters that would cause a problem if added to an\n xml attribute or element.\n@param s a string\n@return boolean true if the string will cause a problem if added to an\n         xml attribute or element.","static":true,"name":"hasInvalidXMLCharacters","comment":"Tests a string for characters that would cause a problem if added to an\n xml attribute or element.","params":[{"type_long":"java.lang.String","name":"s","comment":"a string","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the string will cause a problem if added to an\n         xml attribute or element.","type_short":"boolean"}},{"javadoc":"Create a {@link SAXBuilder} that is not susceptible to XXE.\n \n This configures the builder to ignore external entities.\n@param validate indicates whether validation should occur\n@param needsDTD false to disable doctype declarations altogether\n@return the configured builder","static":true,"name":"createSecureSAXBuilder","comment":"Create a SAXBuilder that is not susceptible to XXE.\n \n This configures the builder to ignore external entities.","params":[{"type_long":"boolean","name":"validate","comment":"indicates whether validation should occur","type_short":"boolean"},{"type_long":"boolean","name":"needsDTD","comment":"false to disable doctype declarations altogether","type_short":"boolean"}],"throws":[],"return":{"type_long":"org.jdom.input.SAXBuilder","comment":"the configured builder","type_short":"SAXBuilder"}},{"javadoc":"Create a {@link SAXParserFactory} that is not susceptible to XXE.\n \n This configures the factory to ignore external entities.\n@param needsDTD false to disable doctype declarations altogether\n@return the configured factory","static":true,"name":"createSecureSAXParserFactory","comment":"Create a SAXParserFactory that is not susceptible to XXE.\n \n This configures the factory to ignore external entities.","params":[{"type_long":"boolean","name":"needsDTD","comment":"false to disable doctype declarations altogether","type_short":"boolean"}],"throws":[],"return":{"type_long":"javax.xml.parsers.SAXParserFactory","comment":"the configured factory","type_short":"SAXParserFactory"}}],"name":"XmlUtilities","comment":"A set of utility methods for working with XML.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LESS_THAN","comment":"","type_short":"String","constant_value":"\"&lt;\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GREATER_THAN","comment":"","type_short":"String","constant_value":"\"&gt;\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"APOSTROPHE","comment":"","type_short":"String","constant_value":"\"&apos;\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"QUOTE","comment":"","type_short":"String","constant_value":"\"&quot;\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"AMPERSAND","comment":"","type_short":"String","constant_value":"\"&amp;\""},{"type_long":"java.util.regex.Pattern","javadoc":"","static":true,"name":"HEX_DIGIT_PATTERN","comment":"","type_short":"Pattern","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FEATURE_DISALLOW_DTD","comment":"","type_short":"String","constant_value":"\"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FEATURE_EXTERNAL_GENERAL_ENTITIES","comment":"","type_short":"String","constant_value":"\"http:\/\/xml.org\/sax\/features\/external-general-entities\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FEATURE_EXTERNAL_PARAMETER_ENTITIES","comment":"","type_short":"String","constant_value":"\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\""}]}
