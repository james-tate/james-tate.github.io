{"implements":[],"javadoc":"Utilities for encoding and decoding XML datatypes for use in specification files that\n are validated by RelaxNG.  This currently includes the SLEIGH\/Decompiler configuration files.\n I.e.\n \t\t.ldef files\n \t\t.pspec files\n \t\t.cspec files\n \t\t.sla files\n  \n  Philosophy here is to use and enforce datatype encodings from XML schemas\n  to try to be as standard as possible and facilitate use of relax grammars etc.  But in decoding\n  possibly be a little more open to deal with resources generated outside of our control.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"decodeBoolean","comment":"","params":[{"type_long":"java.lang.String","name":"val","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"encodeBoolean","comment":"","params":[{"type_long":"boolean","name":"val","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"encodeBooleanAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"boolean","name":"val","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"encodeStringAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"val","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"encodeSignedInteger","comment":"","params":[{"type_long":"long","name":"val","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"encodeUnsignedInteger","comment":"","params":[{"type_long":"long","name":"val","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"encodeSignedIntegerAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"long","name":"val","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"encodeUnsignedIntegerAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"long","name":"val","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"encodeDoubleAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"double","name":"val","comment":"","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"decodeInt","comment":"","params":[{"type_long":"java.lang.String","name":"intString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"decodeLong","comment":"","params":[{"type_long":"java.lang.String","name":"longString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":true,"name":"xmlEscape","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"val","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"xmlEscapeAttribute","comment":"","params":[{"type_long":"java.lang.StringBuilder","name":"buf","comment":"","type_short":"StringBuilder"},{"type_long":"java.lang.String","name":"nm","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"val","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"xmlEscapeWriter","comment":"","params":[{"type_long":"java.io.Writer","name":"writer","comment":"","type_short":"Writer"},{"type_long":"java.lang.String","name":"val","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getXmlHandler","comment":"","params":[],"throws":[],"return":{"type_long":"org.xml.sax.ErrorHandler","comment":"","type_short":"ErrorHandler"}}],"name":"SpecXmlUtils","comment":"Utilities for encoding and decoding XML datatypes for use in specification files that\n are validated by RelaxNG.  This currently includes the SLEIGH\/Decompiler configuration files.\n I.e.\n \t\t.ldef files\n \t\t.pspec files\n \t\t.cspec files\n \t\t.sla files\n  \n  Philosophy here is to use and enforce datatype encodings from XML schemas\n  to try to be as standard as possible and facilitate use of relax grammars etc.  But in decoding\n  possibly be a little more open to deal with resources generated outside of our control.","fields":[]}
