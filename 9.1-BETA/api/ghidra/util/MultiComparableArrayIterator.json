{"implements":[],"javadoc":"<code>MultiComparableArrayIterator<\/code> takes multiple arrays of comparable\n objects and iterates through them simultaneously. The arrays must contain objects\n that are comparable within each array and between the multiple arrays.\n All arrays must be sorted in ascending order when handed to this class. \n Iterating returns the next object(s) from one or more of the arrays based on\n the compareTo() of the next objects in each of the arrays. If a particular\n array doesn't contain the next object, based on all arrays, then a null is \n returned as the next object for that array.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor of a multi-comparable object array iterator for traversing \n multiple comparable object arrays simultaneously.\n <br>Important: The items in each array must be in ascending order.\n@param arrays the array of Comparable object arrays. \n Each array needs to be in ascending order.","static":false,"name":"<init>","comment":"Constructor of a multi-comparable object array iterator for traversing \n multiple comparable object arrays simultaneously.\n Important: The items in each array must be in ascending order.","params":[{"type_long":"T[][]","name":"arrays","comment":"the array of Comparable object arrays. \n Each array needs to be in ascending order.","type_short":"T[][]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor of a multi comparable object array iterator for traversing \n multiple comparable object arrays simultaneously.\n@param arrays the array of Comparable object arrays.\n Each array needs to be in ascending order.\n@param forward true indicates that the iterator return comparable objects from min to max.\n false indicates to iterate backwards (from max to min).","static":false,"name":"<init>","comment":"Constructor of a multi comparable object array iterator for traversing \n multiple comparable object arrays simultaneously.","params":[{"type_long":"T[][]","name":"arrays","comment":"the array of Comparable object arrays.\n Each array needs to be in ascending order.","type_short":"T[][]"},{"type_long":"boolean","name":"forward","comment":"true indicates that the iterator return comparable objects from min to max.\n false indicates to iterate backwards (from max to min).","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines whether or not any of the original arrays has a\n  next object.\n@return true if a next object can be obtained from any of\n the comparable object arrays.","static":false,"name":"hasNext","comment":"Determines whether or not any of the original arrays has a\n  next object.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if a next object can be obtained from any of\n the comparable object arrays.","type_short":"boolean"}},{"javadoc":"Returns the next comparable object(s). The next object could be from any \n one or more of the arrays. The object array returned corresponds to the \n comparable arrays originally passed to the constructor. All objects \n returned are effectively the same as determined by the compareTo() method. \n If the next object for one of the original comparable arrays is not the \n same as the next overall object, then a null is returned in its place.\n@return an array with the next object found for each of the original arrays.\n Some of these may be null, indicating the corresponding comparable array \n didn't possess the next object. However, that comparable array may still \n have objects on subsequent calls.\n There will be as many elements in this array as the number of comparable \n arrays passed to the constructor.","static":false,"name":"next","comment":"Returns the next comparable object(s). The next object could be from any \n one or more of the arrays. The object array returned corresponds to the \n comparable arrays originally passed to the constructor. All objects \n returned are effectively the same as determined by the compareTo() method. \n If the next object for one of the original comparable arrays is not the \n same as the next overall object, then a null is returned in its place.","params":[],"throws":[],"return":{"type_long":"T[]","comment":"an array with the next object found for each of the original arrays.\n Some of these may be null, indicating the corresponding comparable array \n didn't possess the next object. However, that comparable array may still \n have objects on subsequent calls.\n There will be as many elements in this array as the number of comparable \n arrays passed to the constructor.","type_short":"T[]"}}],"name":"MultiComparableArrayIterator","comment":"MultiComparableArrayIterator takes multiple arrays of comparable\n objects and iterates through them simultaneously. The arrays must contain objects\n that are comparable within each array and between the multiple arrays.\n All arrays must be sorted in ascending order when handed to this class. \n Iterating returns the next object(s) from one or more of the arrays based on\n the compareTo() of the next objects in each of the arrays. If a particular\n array doesn't contain the next object, based on all arrays, then a null is \n returned as the next object for that array.","fields":[{"type_long":"T[][]","javadoc":"","static":false,"name":"compArrays","comment":"","type_short":"T[][]","constant_value":null},{"type_long":"T[]","javadoc":"","static":false,"name":"comps","comment":"","type_short":"T[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"indices","comment":"","type_short":"int[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"forward","comment":"","type_short":"boolean","constant_value":null}]}
