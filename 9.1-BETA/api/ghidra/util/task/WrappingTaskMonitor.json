{"implements":["ghidra.util.task.TaskMonitor"],"javadoc":"An implementation of the {@link TaskMonitor} interface that simply wraps a delegate task\n monitor.   This is useful for classes that wish to wrap a task monitor, changing behavior\n as needed by overriding a subset of methods.\n \n <p><b>Synchronization Policy<\/b>:<br>\n We wish for this class to be performant.    Thus, we do not synchronize the methods of this\n class. The {@link #setDelegate(TaskMonitor)} is synchronized to ensure thread visibility\n for the state of the delegate monitor. \n \n <p>When calling {@link #setDelegate(TaskMonitor)} there is the potential for the values being\n transferred to become inconsistent with any new values being set.  We have decided that this\n does not much matter for the overall progress or the messages on the monitor.  However, most\n of the other setter methods could lead to bad behavior if they are inconsistent.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param delegate the delegate task monitor","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"delegate","comment":"the delegate task monitor","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the delegate of this wrapper to be the new value.  The new delegate will be \n initialized with the current values of the existing delegate.\n@param newDelegate the new delegate","static":false,"name":"setDelegate","comment":"Sets the delegate of this wrapper to be the new value.  The new delegate will be \n initialized with the current values of the existing delegate.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"newDelegate","comment":"the new delegate","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isCancelled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setShowProgressValue","comment":"","params":[{"type_long":"boolean","name":"showProgressValue","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMessage","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMessage","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setProgress","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMaximum","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMaximum","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"setIndeterminate","comment":"","params":[{"type_long":"boolean","name":"indeterminate","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isIndeterminate","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"checkCanceled","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"incrementProgress","comment":"","params":[{"type_long":"long","name":"incrementAmount","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getProgress","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addCancelledListener","comment":"","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeCancelledListener","comment":"","params":[{"type_long":"ghidra.util.task.CancelledListener","name":"listener","comment":"","type_short":"CancelledListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setCancelEnabled","comment":"","params":[{"type_long":"boolean","name":"enable","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isCancelEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"clearCanceled","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"WrappingTaskMonitor","comment":"An implementation of the TaskMonitor interface that simply wraps a delegate task\n monitor.   This is useful for classes that wish to wrap a task monitor, changing behavior\n as needed by overriding a subset of methods.\n \n Synchronization Policy:\n We wish for this class to be performant.    Thus, we do not synchronize the methods of this\n class. The #setDelegate(TaskMonitor) is synchronized to ensure thread visibility\n for the state of the delegate monitor. \n \n When calling #setDelegate(TaskMonitor) there is the potential for the values being\n transferred to become inconsistent with any new values being set.  We have decided that this\n does not much matter for the overall progress or the messages on the monitor.  However, most\n of the other setter methods could lead to bad behavior if they are inconsistent.","fields":[{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.util.task.CancelledListener>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"delegate","comment":"","type_short":"TaskMonitor","constant_value":null}]}
