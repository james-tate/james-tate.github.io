{"implements":[],"javadoc":"A monitor that is designed for sub-tasks, where the outer task handles reporting messages and\n progress.  This class is really just for checking cancelled.\n \n <P>This class wants the following methods related to cancelling to work normally:\n <UL>\n  <LI>isCancelled()<\/LI>\n\t<LI>checkCanceled()<\/LI>\n\t<LI>cancel()<\/LI>\n\t<LI>addCancelledListener(CancelledListener)<\/LI>\n\t<LI>removeCancelledListener(CancelledListener)<\/LI>\n\t<LI>addIssueListener(IssueListener)<\/LI>\n\t<LI>removeIssueListener(IssueListener)<\/LI>\n\t<LI>isCancelEnabled()<\/LI>\n\t<\/UL>\t\t\n\n\t<P>The rest of TaskMonitor should be stubbed out.  This means that if any methods are \n\tadded to the TaskMonitor interface, and subsequently implemented in this class's parent,\n\tthen this class needs to override them.","static":false,"extends":"ghidra.util.task.WrappingTaskMonitor","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"delegate","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setShowProgressValue","comment":"","params":[{"type_long":"boolean","name":"showProgressValue","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMessage","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setProgress","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMaximum","comment":"","params":[{"type_long":"long","name":"max","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getMaximum","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"setIndeterminate","comment":"","params":[{"type_long":"boolean","name":"indeterminate","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"incrementProgress","comment":"","params":[{"type_long":"long","name":"incrementAmount","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getProgress","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"setCancelEnabled","comment":"","params":[{"type_long":"boolean","name":"enable","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearCanceled","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"CancelOnlyWrappingTaskMonitor","comment":"A monitor that is designed for sub-tasks, where the outer task handles reporting messages and\n progress.  This class is really just for checking cancelled.\n \n This class wants the following methods related to cancelling to work normally:\n \n  isCancelled()\n\tcheckCanceled()\n\tcancel()\n\taddCancelledListener(CancelledListener)\n\tremoveCancelledListener(CancelledListener)\n\taddIssueListener(IssueListener)\n\tremoveIssueListener(IssueListener)\n\tisCancelEnabled()\n\t\t\t\n\n\tThe rest of TaskMonitor should be stubbed out.  This means that if any methods are \n\tadded to the TaskMonitor interface, and subsequently implemented in this class's parent,\n\tthen this class needs to override them.","fields":[]}
