{"implements":[],"javadoc":"A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n \n <P>Using this class obviates the need for clients to create full class objects to implement\n the {@link Task} interface, which means less boiler-plate code.\n \n <P>An example of usage:\n <pre>\n \t\tMonitoredRunnable r = \n\t\t\tmonitor -> doWork(parameter, monitor);\n\t\tnew TaskBuilder(\"Task Title\", r)\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n <\/pre>\n \n Or,\n \n <pre>\n\t    TaskBuilder.withRunnable(monitor -> doWork(parameter, monitor))\n\t\t\t.setTitle(\"Task Title\")\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n <\/pre>\n \n  Or,\n  \n <pre>\n\t    TaskBuilder.withTask(new AwesomeTask(awesomeStuff)).launchModal();\t\t\n <\/pre>\n \n Or,\n \n <pre>\n\t    {@link TaskLauncher#launch(Task) TaskLauncher.launch}(new AwesomeTask(awesomeStuff));\t\t\n <\/pre>\n  \n \n <p>Note: this class will check to see if it is in a headless environment before launching\n its task.  This makes it safe to use this class in headed or headless environments.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"A convenience method to start a builder using the given runnable.  After calling this\n method you are still required to call {@link #setTitle(String)}. \n \n <p>This method allows for a more attractive fluent API usage than does the constructor \n (see the javadoc header).\n@param r the runnable\n@return this builder","static":true,"name":"withRunnable","comment":"A convenience method to start a builder using the given runnable.  After calling this\n method you are still required to call #setTitle(String). \n \n This method allows for a more attractive fluent API usage than does the constructor \n (see the javadoc header).","params":[{"type_long":"ghidra.util.task.MonitoredRunnable","name":"r","comment":"the runnable","type_short":"MonitoredRunnable"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"A convenience method to start a builder using the given task.  The\n {@link #setTitle(String) title} of the task will be the value of \n {@link Task#getTaskTitle()}. \n \n <p>This method allows for a more attractive fluent API usage than does the constructor \n (see the javadoc header).\n@param t the task\n@return this builder","static":true,"name":"withTask","comment":"A convenience method to start a builder using the given task.  The\n #setTitle(String) of the task will be the value of \n Task#getTaskTitle(). \n \n This method allows for a more attractive fluent API usage than does the constructor \n (see the javadoc header).","params":[{"type_long":"ghidra.util.task.Task","name":"t","comment":"the task","type_short":"Task"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.util.task.MonitoredRunnable","name":"r","comment":"","type_short":"MonitoredRunnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor\n@param title the required title for your task.  This will appear as the title of the\n        task dialog\n@param runnable the runnable that will be called when the task is run","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"java.lang.String","name":"title","comment":"the required title for your task.  This will appear as the title of the\n        task dialog","type_short":"String"},{"type_long":"ghidra.util.task.MonitoredRunnable","name":"runnable","comment":"the runnable that will be called when the task is run","type_short":"MonitoredRunnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the title of this task.  The title must be set before calling any of the \n <code>launch<\/code> methods.\n@param title the title\n@return this builder","static":false,"name":"setTitle","comment":"Sets the title of this task.  The title must be set before calling any of the \n launch methods.","params":[{"type_long":"java.lang.String","name":"title","comment":"the title","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets whether this task reports progress.   The default is <tt>true<\/tt>.\n@param hasProgress true if the task reports progress\n@return this builder","static":false,"name":"setHasProgress","comment":"Sets whether this task reports progress.   The default is true.","params":[{"type_long":"boolean","name":"hasProgress","comment":"true if the task reports progress","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets whether the task can be cancelled.  The default is <tt>true<\/tt>.\n@param canCancel true if the task can be cancelled.\n@return this builder","static":false,"name":"setCanCancel","comment":"Sets whether the task can be cancelled.  The default is true.","params":[{"type_long":"boolean","name":"canCancel","comment":"true if the task can be cancelled.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the component over which the task dialog will be shown.  The default is <tt>null<\/tt>,\n which shows the dialog over the active window.\n@param parent the parent\n@return this builder","static":false,"name":"setParent","comment":"Sets the component over which the task dialog will be shown.  The default is null,\n which shows the dialog over the active window.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"the parent","type_short":"Component"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the amount of time that will pass before showing the dialog.  The default is\n {@link TaskLauncher#INITIAL_DELAY_MS} for non-modal tasks and \n {@link TaskLauncher#INITIAL_MODAL_DELAY_MS} for modal tasks.\n@param delay the delay time\n@return this builder","static":false,"name":"setLaunchDelay","comment":"Sets the amount of time that will pass before showing the dialog.  The default is\n TaskLauncher#INITIAL_DELAY_MS for non-modal tasks and \n TaskLauncher#INITIAL_MODAL_DELAY_MS for modal tasks.","params":[{"type_long":"int","name":"delay","comment":"the delay time","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"The desired width of the dialog.  The default is {@link TaskDialog#DEFAULT_WIDTH}.\n@param width the width\n@return this builder","static":false,"name":"setDialogWidth","comment":"The desired width of the dialog.  The default is TaskDialog#DEFAULT_WIDTH.","params":[{"type_long":"int","name":"width","comment":"the width","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the horizontal text alignment of messages shown in the task dialog.  The \n default is {@link SwingConstants#CENTER}.  Valid values are {@link SwingConstants}\n LEADING, CENTER and TRAILING.\n@param alignment the alignment\n@return this builder","static":false,"name":"setStatusTextAlignment","comment":"Sets the horizontal text alignment of messages shown in the task dialog.  The \n default is SwingConstants#CENTER.  Valid values are SwingConstants\n LEADING, CENTER and TRAILING.","params":[{"type_long":"int","name":"alignment","comment":"the alignment","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Launches the task built by this builder, using a blocking modal dialog.  The task will\n be run in the current thread if in a headless environment.","static":false,"name":"launchModal","comment":"Launches the task built by this builder, using a blocking modal dialog.  The task will\n be run in the current thread if in a headless environment.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Launches the task built by this builder, using a non-blocking dialog.  The task will\n be run in the current thread if in a headless environment.","static":false,"name":"launchNonModal","comment":"Launches the task built by this builder, using a non-blocking dialog.  The task will\n be run in the current thread if in a headless environment.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs the task in a background thread with the given monitor that cannot be null.  This\n is a special case for clients that already have a task monitor widget in their UI and \n they wish to let it show the progress of the given task while not blocking the Swing\n thread.\n@param monitor the task monitor; may not be null","static":false,"name":"launchInBackground","comment":"Runs the task in a background thread with the given monitor that cannot be null.  This\n is a special case for clients that already have a task monitor widget in their UI and \n they wish to let it show the progress of the given task while not blocking the Swing\n thread.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor; may not be null","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"validate","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getDelay","comment":"","params":[{"type_long":"int","name":"userDelay","comment":"","type_short":"int"},{"type_long":"boolean","name":"isModal","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"TaskBuilder","comment":"A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n \n Using this class obviates the need for clients to create full class objects to implement\n the Task interface, which means less boiler-plate code.\n \n An example of usage:\n \n \t\tMonitoredRunnable r = \n\t\t\tmonitor - doWork(parameter, monitor);\n\t\tnew TaskBuilder(\"Task Title\", r)\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n \n \n Or,\n \n \n\t    TaskBuilder.withRunnable(monitor - doWork(parameter, monitor))\n\t\t\t.setTitle(\"Task Title\")\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n \n \n  Or,\n  \n \n\t    TaskBuilder.withTask(new AwesomeTask(awesomeStuff)).launchModal();\t\t\n \n \n Or,\n \n \n\t    TaskLauncher#launch(Task)(new AwesomeTask(awesomeStuff));\t\t\n \n  \n \n Note: this class will check to see if it is in a headless environment before launching\n its task.  This makes it safe to use this class in headed or headless environments.","fields":[{"type_long":"java.lang.String","javadoc":"","static":false,"name":"title","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.util.task.MonitoredRunnable","javadoc":"","static":false,"name":"runnable","comment":"","type_short":"MonitoredRunnable","constant_value":null},{"type_long":"java.awt.Component","javadoc":"","static":false,"name":"parent","comment":"","type_short":"Component","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"launchDelay","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"dialogWidth","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"hasProgress","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"canCancel","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"waitForTaskCompletion","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"statusTextAlignment","comment":"","type_short":"int","constant_value":null}]}
