{"implements":["ghidra.util.search.trie.ByteTrieIfc"],"javadoc":"ByteTrie is a byte-based trie specifically designed to implement the Aho-Corasick\n string search algorithm.\n@param <T> the item storage type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Returns a version id for the trie to lazily schedule\n suffix (failure) pointers.\n@return an auto-incrementing version id","static":true,"name":"getVersionId","comment":"Returns a version id for the trie to lazily schedule\n suffix (failure) pointers.","params":[],"throws":[],"return":{"type_long":"long","comment":"an auto-incrementing version id","type_short":"long"}},{"javadoc":"","static":false,"name":"generateNode","comment":"","params":[{"type_long":"byte","name":"id","comment":"","type_short":"byte"},{"type_long":"ghidra.util.search.trie.ByteTrieNode<T>","name":"parent","comment":"","type_short":"ByteTrieNode"},{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.search.trie.ByteTrieNode<T>","comment":"","type_short":"ByteTrieNode"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns if the trie is empty.\n@return if the trie is empty","static":false,"name":"isEmpty","comment":"Returns if the trie is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"if the trie is empty","type_short":"boolean"}},{"javadoc":"Returns the number of byte sequences in the trie.\n@return the number of byte sequences in the trie","static":false,"name":"size","comment":"Returns the number of byte sequences in the trie.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of byte sequences in the trie","type_short":"int"}},{"javadoc":"Returns the number of nodes in the trie; this is essentially equal\n to the sum of the number of characters in all byte sequences present in\n the trie, minus their shared prefixes.\n@return the number of nodes in the trie","static":false,"name":"numberOfNodes","comment":"Returns the number of nodes in the trie; this is essentially equal\n to the sum of the number of characters in all byte sequences present in\n the trie, minus their shared prefixes.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of nodes in the trie","type_short":"int"}},{"javadoc":"Adds a byte sequence to the trie, with corresponding user item.  Returns\n if the add took place, or if this add was essentially a replacement of\n a previously present value (previous user item is lost forever).\n@param value the byte sequence to insert into the trie\n@param item a user item to store in that location\n@return whether the add took place","static":false,"name":"add","comment":"Adds a byte sequence to the trie, with corresponding user item.  Returns\n if the add took place, or if this add was essentially a replacement of\n a previously present value (previous user item is lost forever).","params":[{"type_long":"byte[]","name":"value","comment":"the byte sequence to insert into the trie","type_short":"byte[]"},{"type_long":"T","name":"item","comment":"a user item to store in that location","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"whether the add took place","type_short":"boolean"}},{"javadoc":"Finds a byte sequence in the trie and returns a node interface object for it,\n or null if not present.\n@param value the byte sequence sought\n@return the node interface if present, or null","static":false,"name":"find","comment":"Finds a byte sequence in the trie and returns a node interface object for it,\n or null if not present.","params":[{"type_long":"byte[]","name":"value","comment":"the byte sequence sought","type_short":"byte[]"}],"throws":[],"return":{"type_long":"ghidra.util.search.trie.ByteTrieNodeIfc<T>","comment":"the node interface if present, or null","type_short":"ByteTrieNodeIfc"}},{"javadoc":"Visits all the nodes in the trie such that the visitation order is properly\n ordered (even though the actual algorithm below is a PREORDER traversal).\n The client is responsible for not performing actions on non-terminal nodes\n as necessary.\n@param monitor a task monitor\n@param op the operation to perform\n@throws CancelledException if the user cancels","static":false,"name":"inorder","comment":"Visits all the nodes in the trie such that the visitation order is properly\n ordered (even though the actual algorithm below is a PREORDER traversal).\n The client is responsible for not performing actions on non-terminal nodes\n as necessary.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor","type_short":"TaskMonitor"},{"type_long":"ghidra.util.search.trie.Op<T>","name":"op","comment":"the operation to perform","type_short":"Op"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Search an array of bytes using the Aho-Corasick multiple string\n trie search algorithm.\n@param text the bytes to search\n@param monitor a task monitor\n@return a list of search results\n@throws CancelledException","static":false,"name":"search","comment":"Search an array of bytes using the Aho-Corasick multiple string\n trie search algorithm.","params":[{"type_long":"byte[]","name":"text","comment":"the bytes to search","type_short":"byte[]"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.util.search.trie.SearchResult<java.lang.Integer,T>>","comment":"a list of search results","type_short":"List"}},{"javadoc":"Search memory using the Aho-Corasick multiple string\n trie search algorithm.\n@param memory the program memory manager\n@param view the address set view to search\n@param monitor a task monitor\n@return a list of search results\n@throws MemoryAccessException if bytes are not available\n@throws CancelledException if the user cancels","static":false,"name":"search","comment":"Search memory using the Aho-Corasick multiple string\n trie search algorithm.","params":[{"type_long":"ghidra.program.model.mem.Memory","name":"memory","comment":"the program memory manager","type_short":"Memory"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"view","comment":"the address set view to search","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes are not available","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<ghidra.util.search.trie.SearchResult<ghidra.program.model.address.Address,T>>","comment":"a list of search results","type_short":"List"}},{"javadoc":"BFS fixup of suffix (failure) pointers, but only if we need to (the \n version id is more advanced than our last suffix fixup id).\n@param monitor a task monitor\n@throws CancelledException if the user cancels","static":false,"name":"fixupSuffixPointers","comment":"BFS fixup of suffix (failure) pointers, but only if we need to (the \n version id is more advanced than our last suffix fixup id).","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find our transition, either our child, or our suffix's child, etc. etc.\n@param ptr the current node pointer\n@param value the next byte value\n@return the proper transition node","static":false,"name":"getTransition","comment":"Find our transition, either our child, or our suffix's child, etc. etc.","params":[{"type_long":"ghidra.util.search.trie.ByteTrieNode<T>","name":"ptr","comment":"the current node pointer","type_short":"ByteTrieNode"},{"type_long":"byte","name":"value","comment":"the next byte value","type_short":"byte"}],"throws":[],"return":{"type_long":"ghidra.util.search.trie.ByteTrieNode<T>","comment":"the proper transition node","type_short":"ByteTrieNode"}}],"name":"ByteTrie","comment":"ByteTrie is a byte-based trie specifically designed to implement the Aho-Corasick\n string search algorithm.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"BUFFER_SIZE","comment":"","type_short":"int","constant_value":"1048576"},{"type_long":"long","javadoc":"","static":true,"name":"GVID","comment":"","type_short":"long","constant_value":null},{"type_long":"ghidra.util.search.trie.ByteTrieNode<T>","javadoc":"","static":false,"name":"root","comment":"","type_short":"ByteTrieNode","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"versionId","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"suffixId","comment":"","type_short":"long","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"size","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"numberOfNodes","comment":"","type_short":"int","constant_value":null}]}
