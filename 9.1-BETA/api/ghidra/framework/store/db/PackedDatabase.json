{"implements":[],"javadoc":"<code>PackedDatabase<\/code> provides a packed form of Database\n which compresses a single version into a file.  \n <br>\n When opening a packed database, a PackedDBHandle is returned \n after first expanding the file into a temporary Database.","static":false,"extends":"db.Database","methods":[{"javadoc":"Constructor for an existing packed database which will be unpacked into\n a temporary dbDir.\n@param packedDbFile existing packed database file.\n@throws IOException","static":false,"name":"<init>","comment":"Constructor for an existing packed database which will be unpacked into\n a temporary dbDir.","params":[{"type_long":"generic.jar.ResourceFile","name":"packedDbFile","comment":"existing packed database file.","type_short":"ResourceFile"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for an existing packed database backed by a unpacking cache\n@param packedDbFile\n@param packedDbLock read lock, null signals read only database\n@param cachedDb\n@param monitor\n@throws CancelledException\n@throws IOException","static":false,"name":"<init>","comment":"Constructor for an existing packed database backed by a unpacking cache","params":[{"type_long":"generic.jar.ResourceFile","name":"packedDbFile","comment":"","type_short":"ResourceFile"},{"type_long":"ghidra.framework.store.local.LockFile","name":"packedDbLock","comment":"read lock, null signals read only database","type_short":"LockFile"},{"type_long":"ghidra.framework.store.db.PackedDatabaseCache.CachedDB","name":"cachedDb","comment":"","type_short":"CachedDB"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor for a new packed database which will be created from an \n open PackedDBHandle.\n@param dbHandle\n@param packedDbFile\n@param itemName\n@param newDatabaseId database ID to be forced for new database or null to generate \n new database ID\n@param monitor\n@throws CancelledException\n@throws IOException","static":false,"name":"<init>","comment":"Constructor for a new packed database which will be created from an \n open PackedDBHandle.","params":[{"type_long":"ghidra.framework.store.db.PackedDBHandle","name":"dbHandle","comment":"","type_short":"PackedDBHandle"},{"type_long":"generic.jar.ResourceFile","name":"packedDbFile","comment":"","type_short":"ResourceFile"},{"type_long":"java.lang.String","name":"itemName","comment":"","type_short":"String"},{"type_long":"java.lang.Long","name":"newDatabaseId","comment":"database ID to be forced for new database or null to generate \n new database ID","type_short":"Long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isReadOnly","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Add new PackedDatabase instance and ensure that all non-disposed\n PackedDatabase instances are properly disposed when the VM shuts-down.\n@param pdb new instance","static":true,"name":"addInstance","comment":"Add new PackedDatabase instance and ensure that all non-disposed\n PackedDatabase instances are properly disposed when the VM shuts-down.","params":[{"type_long":"ghidra.framework.store.db.PackedDatabase","name":"pdb","comment":"new instance","type_short":"PackedDatabase"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a PackedDatabase instance after it has been disposed.\n@param pdb disposed instance","static":true,"name":"removeInstance","comment":"Remove a PackedDatabase instance after it has been disposed.","params":[{"type_long":"ghidra.framework.store.db.PackedDatabase","name":"pdb","comment":"disposed instance","type_short":"PackedDatabase"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a packed database which whose unpacking will be cached if possible\n@param packedDbFile\n@param monitor\n@return packed database which corresponds to the specified packedDbFile\n@throws IOException\n@throws CancelledException","static":true,"name":"getPackedDatabase","comment":"Get a packed database which whose unpacking will be cached if possible","params":[{"type_long":"java.io.File","name":"packedDbFile","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.db.PackedDatabase","comment":"packed database which corresponds to the specified packedDbFile","type_short":"PackedDatabase"}},{"javadoc":"Get a packed database whose unpacking may be cached if possible\n provided doNotCache is false.\n@param packedDbFile\n@param neverCache if true unpacking will never be cache.\n@param monitor\n@return packed database which corresponds to the specified packedDbFile\n@throws IOException\n@throws CancelledException","static":true,"name":"getPackedDatabase","comment":"Get a packed database whose unpacking may be cached if possible\n provided doNotCache is false.","params":[{"type_long":"java.io.File","name":"packedDbFile","comment":"","type_short":"File"},{"type_long":"boolean","name":"neverCache","comment":"if true unpacking will never be cache.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.db.PackedDatabase","comment":"packed database which corresponds to the specified packedDbFile","type_short":"PackedDatabase"}},{"javadoc":"Get a packed database whose unpacking may be cached if possible\n provided doNotCache is false.\n@param packedDbFile\n@param neverCache if true unpacking will never be cache.\n@param monitor\n@return packed database which corresponds to the specified packedDbFile\n@throws IOException\n@throws CancelledException","static":true,"name":"getPackedDatabase","comment":"Get a packed database whose unpacking may be cached if possible\n provided doNotCache is false.","params":[{"type_long":"generic.jar.ResourceFile","name":"packedDbFile","comment":"","type_short":"ResourceFile"},{"type_long":"boolean","name":"neverCache","comment":"if true unpacking will never be cache.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.db.PackedDatabase","comment":"packed database which corresponds to the specified packedDbFile","type_short":"PackedDatabase"}},{"javadoc":"Check for the presence of directory read-only lock\n@param directory\n@return true if read-only lock exists+","static":true,"name":"isReadOnlyPDBDirectory","comment":"Check for the presence of directory read-only lock","params":[{"type_long":"generic.jar.ResourceFile","name":"directory","comment":"","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if read-only lock exists+","type_short":"boolean"}},{"javadoc":"","static":false,"name":"finalize","comment":"","params":[],"throws":[{"type_long":"java.lang.Throwable","comment":"","type_short":"Throwable"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Free resources consumed by this object.\n If there is an associated database handle it will be closed.","static":false,"name":"dispose","comment":"Free resources consumed by this object.\n If there is an associated database handle it will be closed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get 8-digit random hex value for use in naming temporary files.\n@return random string","static":true,"name":"getRandomString","comment":"Get 8-digit random hex value for use in naming temporary files.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"random string","type_short":"String"}},{"javadoc":"Creates a temporary directory which will be used for storing \n the unpacked database files.\n@return temporary database directory\n@throws IOException","static":true,"name":"createDBDir","comment":"Creates a temporary directory which will be used for storing \n the unpacked database files.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.io.File","comment":"temporary database directory","type_short":"File"}},{"javadoc":"Returns the update lock file for the specified packedFile.\n@param packedFile","static":true,"name":"getUpdateLock","comment":"Returns the update lock file for the specified packedFile.","params":[{"type_long":"java.io.File","name":"packedFile","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"ghidra.framework.store.local.LockFile","comment":"","type_short":"LockFile"}},{"javadoc":"Returns the general lock file for the specified packedFile.\n@param packedFile","static":true,"name":"getFileLock","comment":"Returns the general lock file for the specified packedFile.","params":[{"type_long":"java.io.File","name":"packedFile","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"ghidra.framework.store.local.LockFile","comment":"","type_short":"LockFile"}},{"javadoc":"Returns the user defined content type associated with this database.","static":false,"name":"getContentType","comment":"Returns the user defined content type associated with this database.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the storage file associated with this packed database.","static":false,"name":"getPackedFile","comment":"Returns the storage file associated with this packed database.","params":[],"throws":[],"return":{"type_long":"generic.jar.ResourceFile","comment":"","type_short":"ResourceFile"}},{"javadoc":"Deletes the storage file associated with this packed database.\n This method should not be called while the database is open, if\n it is an attempt will be made to close the handle.\n@throws IOException","static":false,"name":"delete","comment":"Deletes the storage file associated with this packed database.\n This method should not be called while the database is open, if\n it is an attempt will be made to close the handle.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deletes the storage file associated with this packed database.\n@throws IOException","static":true,"name":"delete","comment":"Deletes the storage file associated with this packed database.","params":[{"type_long":"java.io.File","name":"packedDbFile","comment":"","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Obtain a lock on the packed database for reading or writing.\n@param lockFile general or update lock file\n@param wait if true, block until lock is obtained.\n@param hold if true, hold lock until released.\n@throws FileInUseException","static":true,"name":"lock","comment":"Obtain a lock on the packed database for reading or writing.","params":[{"type_long":"ghidra.framework.store.local.LockFile","name":"lockFile","comment":"general or update lock file","type_short":"LockFile"},{"type_long":"boolean","name":"wait","comment":"if true, block until lock is obtained.","type_short":"boolean"},{"type_long":"boolean","name":"hold","comment":"if true, hold lock until released.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.FileInUseException","comment":"","type_short":"FileInUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read user content type and name from packed file.\n@throws IOException","static":false,"name":"readContentTypeAndName","comment":"Read user content type and name from packed file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new Database with data provided by an ItemDeserializer.\n@param dir the parent directory which contains the \"Hidden\" database directory.\n@param dbName the unmangled database name\n@param checkinId\n@param packedFile\n@param monitor\n@throws CancelledException","static":true,"name":"unpackDatabase","comment":"Create a new Database with data provided by an ItemDeserializer.","params":[{"type_long":"db.buffers.BufferFileManager","name":"bfMgr","comment":"","type_short":"BufferFileManager"},{"type_long":"long","name":"checkinId","comment":"","type_short":"long"},{"type_long":"java.io.File","name":"packedFile","comment":"","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"refreshDatabase","comment":"","params":[{"type_long":"db.buffers.BufferFileManager","name":"bfMgr","comment":"","type_short":"BufferFileManager"},{"type_long":"long","name":"checkinId","comment":"","type_short":"long"},{"type_long":"generic.jar.ResourceFile","name":"packedFile","comment":"","type_short":"ResourceFile"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Refresh the temporary database from the packed file if it has been updated\n since the previous refresh.\n@param monitor\n@return True if refresh was successful or not required.\n False may be returned if refresh failed due to unpacked files being in use.\n@throws IOException\n@throws CancelledException","static":false,"name":"refreshUnpacking","comment":"Refresh the temporary database from the packed file if it has been updated\n since the previous refresh.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"True if refresh was successful or not required.\n False may be returned if refresh failed due to unpacked files being in use.","type_short":"boolean"}},{"javadoc":"Serialize (i.e., pack) an open database into the specified outputFile.\n@param dbh open database handle\n@param itemName item name to associate with packed content\n@param contentType supported content type\n@param outputFile packed output file to be created\n@param monitor progress monitor\n@throws IOException\n@throws CancelledException if monitor cancels operation","static":true,"name":"packDatabase","comment":"Serialize (i.e., pack) an open database into the specified outputFile.","params":[{"type_long":"db.DBHandle","name":"dbh","comment":"open database handle","type_short":"DBHandle"},{"type_long":"java.lang.String","name":"itemName","comment":"item name to associate with packed content","type_short":"String"},{"type_long":"java.lang.String","name":"contentType","comment":"supported content type","type_short":"String"},{"type_long":"java.io.File","name":"outputFile","comment":"packed output file to be created","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if monitor cancels operation","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a packed file from an existing Database.\n@param name database name\n@param contentType user content type\n@param bfMgr buffer file manager for existing database\n@param version buffer file version to be packed\n@param outputFile packed storage file to be created\n@param monitor\n@throws IOException\n@throws CancelledException","static":true,"name":"packDatabase","comment":"Create a packed file from an existing Database.","params":[{"type_long":"java.lang.String","name":"name","comment":"database name","type_short":"String"},{"type_long":"java.lang.String","name":"contentType","comment":"user content type","type_short":"String"},{"type_long":"java.io.File","name":"dbFile","comment":"","type_short":"File"},{"type_long":"java.io.File","name":"outputFile","comment":"packed storage file to be created","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Using the temporary unpacked database, update the packed storage file\n using the latest buffer file version.\n@param monitor\n@throws CancelledException\n@throws IOException","static":false,"name":"packDatabase","comment":"Using the temporary unpacked database, update the packed storage file\n using the latest buffer file version.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"open","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBHandle","comment":"","type_short":"DBHandle"}},{"javadoc":"","static":false,"name":"openForUpdate","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBHandle","comment":"","type_short":"DBHandle"}},{"javadoc":"Attempt to remove all old temporary databases.\n Those still open by an existing process should \n not be removed by the operating system.","static":true,"name":"cleanupOldTempDatabases","comment":"Attempt to remove all old temporary databases.\n Those still open by an existing process should \n not be removed by the operating system.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"PackedDatabase","comment":"PackedDatabase provides a packed form of Database\n which compresses a single version into a file.  \n \n When opening a packed database, a PackedDBHandle is returned \n after first expanding the file into a temporary Database.","fields":[{"type_long":"java.lang.String","javadoc":"Presence of the directory lock file will prevent the creation or\n modification of any packed database files contained within that directory\n or any sub-directory.","static":true,"name":"READ_ONLY_DIRECTORY_LOCK_FILE","comment":"Presence of the directory lock file will prevent the creation or\n modification of any packed database files contained within that directory\n or any sub-directory.","type_short":"String","constant_value":"\".dbDirLock\""},{"type_long":"java.util.Random","javadoc":"","static":true,"name":"RANDOM","comment":"","type_short":"Random","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEMPDB_PREFIX","comment":"","type_short":"String","constant_value":"\"tmp\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEMPDB_EXT","comment":"","type_short":"String","constant_value":"\".pdb\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEMPDB_DIR_PREFIX","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEMPDB_DIR_EXT","comment":"","type_short":"String","constant_value":"\".pdb.db\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"UPDATE_LOCK_TYPE","comment":"","type_short":"String","constant_value":"\"u\""},{"type_long":"int","javadoc":"","static":true,"name":"LOCK_TIMEOUT","comment":"","type_short":"int","constant_value":"30000"},{"type_long":"long","javadoc":"","static":true,"name":"ONE_WEEK_MS","comment":"","type_short":"long","constant_value":"604800000"},{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.framework.store.db.PackedDatabase>","javadoc":"","static":true,"name":"pdbInstances","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"generic.jar.ResourceFile","javadoc":"","static":false,"name":"packedDbFile","comment":"","type_short":"ResourceFile","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isCached","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"itemName","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"contentType","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.framework.store.local.LockFile","javadoc":"","static":false,"name":"packedDbLock","comment":"","type_short":"LockFile","constant_value":null},{"type_long":"ghidra.framework.store.local.LockFile","javadoc":"","static":false,"name":"updateLock","comment":"","type_short":"LockFile","constant_value":null},{"type_long":"ghidra.framework.store.db.PackedDBHandle","javadoc":"","static":false,"name":"dbHandle","comment":"","type_short":"PackedDBHandle","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"dbTime","comment":"","type_short":"long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isReadOnly","comment":"","type_short":"boolean","constant_value":null}]}
