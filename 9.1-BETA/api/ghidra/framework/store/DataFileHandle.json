{"implements":[],"javadoc":"<code>DataFileHandle<\/code> provides a random-access handle to a file.","static":false,"methods":[{"javadoc":"Returns true if this data file handle is open read-only.\n@throws IOException if an I\/O error occurs.","static":false,"name":"isReadOnly","comment":"Returns true if this data file handle is open read-only.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Reads <code>b.length<\/code> bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.\n@param b the buffer into which the data is read.\n@exception EOFException if this file reaches the end before reading\n               all the bytes.\n@exception IOException if an I\/O error occurs.","static":false,"name":"read","comment":"Reads b.length bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.","params":[{"type_long":"byte[]","name":"b","comment":"the buffer into which the data is read.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reads exactly <code>len<\/code> bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.\n@param b the buffer into which the data is read.\n@param off the start offset of the data.\n@param len the number of bytes to read.\n@exception EOFException if this file reaches the end before reading\n               all the bytes.\n@exception IOException if an I\/O error occurs.","static":false,"name":"read","comment":"Reads exactly len bytes from this file into the byte \n array, starting at the current file pointer. This method reads \n repeatedly from the file until the requested number of bytes are \n read. This method blocks until the requested number of bytes are \n read, the end of the stream is detected, or an exception is thrown.","params":[{"type_long":"byte[]","name":"b","comment":"the buffer into which the data is read.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the start offset of the data.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to read.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempts to skip over <code>n<\/code> bytes of input discarding the \n skipped bytes. \n <p>\n \n This method may skip over some smaller number of bytes, possibly zero. \n This may result from any of a number of conditions; reaching end of \n file before <code>n<\/code> bytes have been skipped is only one \n possibility. This method never throws an <code>EOFException<\/code>. \n The actual number of bytes skipped is returned.  If <code>n<\/code> \n is negative, no bytes are skipped.\n@param n the number of bytes to be skipped.\n@return the actual number of bytes skipped.\n@exception IOException if an I\/O error occurs.","static":false,"name":"skipBytes","comment":"Attempts to skip over n bytes of input discarding the \n skipped bytes. \n \n \n This method may skip over some smaller number of bytes, possibly zero. \n This may result from any of a number of conditions; reaching end of \n file before n bytes have been skipped is only one \n possibility. This method never throws an EOFException. \n The actual number of bytes skipped is returned.  If n \n is negative, no bytes are skipped.","params":[{"type_long":"int","name":"n","comment":"the number of bytes to be skipped.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"the actual number of bytes skipped.","type_short":"int"}},{"javadoc":"Writes the specified byte to this file. The write starts at \n the current file pointer.\n@param b the <code>byte<\/code> to be written.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes the specified byte to this file. The write starts at \n the current file pointer.","params":[{"type_long":"int","name":"b","comment":"the byte to be written.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes <code>b.length<\/code> bytes from the specified byte array \n to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes b.length bytes from the specified byte array \n to this file, starting at the current file pointer.","params":[{"type_long":"byte[]","name":"b","comment":"the data.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes <code>len<\/code> bytes from the specified byte array \n starting at offset <code>off<\/code> to this file.\n@param b the data.\n@param off the start offset in the data.\n@param len the number of bytes to write.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes len bytes from the specified byte array \n starting at offset off to this file.","params":[{"type_long":"byte[]","name":"b","comment":"the data.","type_short":"byte[]"},{"type_long":"int","name":"off","comment":"the start offset in the data.","type_short":"int"},{"type_long":"int","name":"len","comment":"the number of bytes to write.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the file-pointer offset, measured from the beginning of this \n file, at which the next read or write occurs.  The offset may be \n set beyond the end of the file. Setting the offset beyond the end \n of the file does not change the file length.  The file length will \n change only by writing after the offset has been set beyond the end \n of the file.\n@param pos the offset position, measured in bytes from the \n                   beginning of the file, at which to set the file \n                   pointer.\n@exception IOException if <code>pos<\/code> is less than \n                          <code>0<\/code> or if an I\/O error occurs.","static":false,"name":"seek","comment":"Sets the file-pointer offset, measured from the beginning of this \n file, at which the next read or write occurs.  The offset may be \n set beyond the end of the file. Setting the offset beyond the end \n of the file does not change the file length.  The file length will \n change only by writing after the offset has been set beyond the end \n of the file.","params":[{"type_long":"long","name":"pos","comment":"the offset position, measured in bytes from the \n                   beginning of the file, at which to set the file \n                   pointer.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the length of this file.\n@return the length of this file, measured in bytes.\n@exception IOException if an I\/O error occurs.","static":false,"name":"length","comment":"Returns the length of this file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"the length of this file, measured in bytes.","type_short":"long"}},{"javadoc":"Sets the length of this file.\n\n <p> If the present length of the file as returned by the\n <code>length<\/code> method is greater than the <code>newLength<\/code>\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the <code>getFilePointer<\/code> method is greater\n then <code>newLength<\/code> then after this method returns the offset\n will be equal to <code>newLength<\/code>.\n\n <p> If the present length of the file as returned by the\n <code>length<\/code> method is smaller than the <code>newLength<\/code>\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.\n@param newLength The desired length of the file\n@exception IOException If an I\/O error occurs","static":false,"name":"setLength","comment":"Sets the length of this file.\n\n  If the present length of the file as returned by the\n length method is greater than the newLength\n argument then the file will be truncated.  In this case, if the file\n offset as returned by the getFilePointer method is greater\n then newLength then after this method returns the offset\n will be equal to newLength.\n\n  If the present length of the file as returned by the\n length method is smaller than the newLength\n argument then the file will be extended.  In this case, the contents of\n the extended portion of the file are not defined.","params":[{"type_long":"long","name":"newLength","comment":"The desired length of the file","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Closes this random access file stream and releases any system \n resources associated with the stream. A closed random access \n file cannot perform input or output operations and cannot be \n reopened.\n@exception IOException if an I\/O error occurs.","static":false,"name":"close","comment":"Closes this random access file stream and releases any system \n resources associated with the stream. A closed random access \n file cannot perform input or output operations and cannot be \n reopened.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataFileHandle","comment":"DataFileHandle provides a random-access handle to a file.","fields":[]}
