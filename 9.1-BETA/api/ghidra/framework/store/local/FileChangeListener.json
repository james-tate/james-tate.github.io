{"implements":[],"javadoc":"Defines a file change listener interface.","static":false,"methods":[{"javadoc":"Used to notify a listener that the specified file has been modified.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.\n@param file the modified file.\n@param haveLock is true if a file lock has been granted (LockFile was\n supplied at time of construction).","static":false,"name":"fileModified","comment":"Used to notify a listener that the specified file has been modified.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.","params":[{"type_long":"java.io.File","name":"file","comment":"the modified file.","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Used to notify a listener that the specified file has been removed.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.\n@param file the removed file.","static":false,"name":"fileRemoved","comment":"Used to notify a listener that the specified file has been removed.\n If the file watcher was created with a lock file, the lock will be set\n on behalf of the caller.  This method should not attempt to alter the \n lock.","params":[{"type_long":"java.io.File","name":"file","comment":"the removed file.","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FileChangeListener","comment":"Defines a file change listener interface.","fields":[]}
