{"implements":[],"javadoc":"<code>IndexedLocalFileSystem<\/code> implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).","static":false,"extends":"ghidra.framework.store.local.IndexedLocalFileSystem","methods":[{"javadoc":"Constructor.\n@param file path path for root directory.\n@param isVersioned if true item versioning will be enabled.\n@param readOnly if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException\n@param enableAsyncronousDispatching if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.\n@throws FileNotFoundException if specified rootPath does not exist\n@throws IOException if error occurs while reading\/writing index files","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"","type_short":"String"},{"type_long":"boolean","name":"isVersioned","comment":"if true item versioning will be enabled.","type_short":"boolean"},{"type_long":"boolean","name":"readOnly","comment":"if true modifications within this file-system will not be allowed\n and result in an ReadOnlyException","type_short":"boolean"},{"type_long":"boolean","name":"enableAsyncronousDispatching","comment":"if true a separate dispatch thread will be used\n to notify listeners.  If false, blocking notification will be performed.","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if error occurs while reading\/writing index files","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct existing indexed filesystem with an empty index.\n This can be used to prepare for rebuilding the filesystem index.\n@param rootPath\n@throws IOException","static":false,"name":"<init>","comment":"Construct existing indexed filesystem with an empty index.\n This can be used to prepare for rebuilding the filesystem index.","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getIndexImplementationVersion","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"formatIndexItem","comment":"","params":[{"type_long":"ghidra.framework.store.local.IndexedLocalFileSystem.Item","name":"item","comment":"","type_short":"Item"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"parseIndexItem","comment":"","params":[{"type_long":"ghidra.framework.store.local.IndexedLocalFileSystem.Folder","name":"parent","comment":"","type_short":"Folder"},{"type_long":"java.lang.String","name":"entry","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.store.local.IndexedLocalFileSystem.Item","comment":"","type_short":"Item"}},{"javadoc":"","static":false,"name":"fileIdChanged","comment":"","params":[{"type_long":"ghidra.util.PropertyFile","name":"pfile","comment":"","type_short":"PropertyFile"},{"type_long":"java.lang.String","name":"oldFileId","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFileIdMap","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.HashMap<java.lang.String,ghidra.framework.store.local.IndexedLocalFileSystem.Item>","comment":"","type_short":"HashMap"}},{"javadoc":"","static":false,"name":"mapFileID","comment":"","params":[{"type_long":"java.lang.String","name":"fileId","comment":"","type_short":"String"},{"type_long":"ghidra.framework.store.local.IndexedLocalFileSystem.Item","name":"item","comment":"","type_short":"Item"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"unmapFileID","comment":"","params":[{"type_long":"java.lang.String","name":"fileId","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getItem","comment":"","params":[{"type_long":"java.lang.String","name":"fileID","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.lang.UnsupportedOperationException","comment":"","type_short":"UnsupportedOperationException"}],"return":{"type_long":"ghidra.framework.store.FolderItem","comment":"","type_short":"FolderItem"}},{"javadoc":"Get the V0 indexed-file-system instance.  File system storage should first be \n pre-qualified as an having indexed storage using the {@link #isIndexed(String)} method\n and have the correct version.\n@param rootPath\n@param isVersioned\n@param readOnly\n@param enableAsyncronousDispatching\n@return file-system instance\n@throws IOException","static":true,"name":"getFileSystem","comment":"Get the V0 indexed-file-system instance.  File system storage should first be \n pre-qualified as an having indexed storage using the #isIndexed(String) method\n and have the correct version.","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"","type_short":"String"},{"type_long":"boolean","name":"isVersioned","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"readOnly","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"enableAsyncronousDispatching","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.store.local.IndexedV1LocalFileSystem","comment":"file-system instance","type_short":"IndexedV1LocalFileSystem"}},{"javadoc":"Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.\n@param rootDir\n@throws IOException","static":true,"name":"rebuild","comment":"Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.","params":[{"type_long":"java.io.File","name":"rootDir","comment":"","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"IndexedV1LocalFileSystem","comment":"IndexedLocalFileSystem implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).","fields":[{"type_long":"int","javadoc":"","static":true,"name":"INDEX_VERSION","comment":"","type_short":"int","constant_value":"1"},{"type_long":"java.util.HashMap<java.lang.String,ghidra.framework.store.local.IndexedLocalFileSystem.Item>","javadoc":"","static":false,"name":"fileIdMap","comment":"","type_short":"HashMap","constant_value":null}]}
