{"implements":[],"javadoc":"<code>FileSystem<\/code> provides a hierarchical view and management of a \n set of files and folders.","static":false,"methods":[{"javadoc":"Get user name associated with this filesystem.  In the case of a remote filesystem\n this will correspond to the name used during login\/authentication.  A null value may \n be returned if user name unknown.","static":false,"name":"getUserName","comment":"Get user name associated with this filesystem.  In the case of a remote filesystem\n this will correspond to the name used during login\/authentication.  A null value may \n be returned if user name unknown.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns true if the file-system requires check-outs when\n modifying folder items.","static":false,"name":"isVersioned","comment":"Returns true if the file-system requires check-outs when\n modifying folder items.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if file-system is on-line.","static":false,"name":"isOnline","comment":"Returns true if file-system is on-line.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if file-system is read-only.\n@throws IOException","static":false,"name":"isReadOnly","comment":"Returns true if file-system is read-only.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the number of folder items contained within this file-system.\n@throws IOException\n@throws UnsupportedOperationException if file-system does not support this operation","static":false,"name":"getItemCount","comment":"Returns the number of folder items contained within this file-system.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.lang.UnsupportedOperationException","comment":"if file-system does not support this operation","type_short":"UnsupportedOperationException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns a list of the folder item names contained in the given folder.\n@param folderPath the path of the folder.\n@return a list of folder item names.\n@throws IOException","static":false,"name":"getItemNames","comment":"Returns a list of the folder item names contained in the given folder.","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"the path of the folder.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"a list of folder item names.","type_short":"java.lang.String[]"}},{"javadoc":"Returns the FolderItem in the given folder with the given name\n@param folderPath the folder path containing the item.\n@param name the name of the item.\n@return the FolderItem with the given folderPath and name, or null if it doesn't exist.\n@throws IOException if IO error occurs.","static":false,"name":"getItem","comment":"Returns the FolderItem in the given folder with the given name","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"the folder path containing the item.","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"the name of the item.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error occurs.","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.store.FolderItem","comment":"the FolderItem with the given folderPath and name, or null if it doesn't exist.","type_short":"FolderItem"}},{"javadoc":"Returns the FolderItem specified by its unique File-ID\n@param fileID the items unique file ID\n@return the FolderItem with the given folderPath and name, or null if it doesn't exist.\n@throws IOException if IO error occurs.\n@throws UnsupportedOperationException if file-system does not support this operation","static":false,"name":"getItem","comment":"Returns the FolderItem specified by its unique File-ID","params":[{"type_long":"java.lang.String","name":"fileID","comment":"the items unique file ID","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error occurs.","type_short":"IOException"},{"type_long":"java.lang.UnsupportedOperationException","comment":"if file-system does not support this operation","type_short":"UnsupportedOperationException"}],"return":{"type_long":"ghidra.framework.store.FolderItem","comment":"the FolderItem with the given folderPath and name, or null if it doesn't exist.","type_short":"FolderItem"}},{"javadoc":"Return a list of subfolders (by name) that are stored within the specified folder path.\n@throws FileNotFoundException if folder path does not exist.\n@throws IOException if IO error occurs.","static":false,"name":"getFolderNames","comment":"Return a list of subfolders (by name) that are stored within the specified folder path.","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error occurs.","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Creates a new subfolder within the specified parent folder.\n@param parentPath folder path of parent\n@param folderName name of new subfolder\n@throws DuplicateFileException if a folder exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException thrown if an IO error occurs.","static":false,"name":"createFolder","comment":"Creates a new subfolder within the specified parent folder.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"folder path of parent","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"name of new subfolder","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the name does not have\n all alphanumerics","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create a new database item within the specified parent folder using the contents\n of the specified BufferFile.\n@param parentPath folder path of parent\n@param name new database name\n@param fileID file ID to be associated with new database or null\n@param bufferFile data source\n@param comment version comment (used for versioned file system only)\n@param contentType application defined content type\n@param resetDatabaseId if true database ID will be reset for new Database\n@param monitor allows the database copy to be monitored and cancelled.\n@param user name of user creating item (required for versioned item)\n@return new DatabaseItem\n@throws FileNotFoundException thrown if parent folder does not exist.\n@throws DuplicateFileException if a folder item exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor","static":false,"name":"createDatabase","comment":"Create a new database item within the specified parent folder using the contents\n of the specified BufferFile.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"folder path of parent","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"new database name","type_short":"String"},{"type_long":"java.lang.String","name":"fileID","comment":"file ID to be associated with new database or null","type_short":"String"},{"type_long":"db.buffers.BufferFile","name":"bufferFile","comment":"data source","type_short":"BufferFile"},{"type_long":"java.lang.String","name":"comment","comment":"version comment (used for versioned file system only)","type_short":"String"},{"type_long":"java.lang.String","name":"contentType","comment":"application defined content type","type_short":"String"},{"type_long":"boolean","name":"resetDatabaseId","comment":"if true database ID will be reset for new Database","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"allows the database copy to be monitored and cancelled.","type_short":"TaskMonitor"},{"type_long":"java.lang.String","name":"user","comment":"name of user creating item (required for versioned item)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the name does not have\n all alphanumerics","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if cancelled by monitor","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.DatabaseItem","comment":"new DatabaseItem","type_short":"DatabaseItem"}},{"javadoc":"Create a new empty database item within the specified parent folder. \n If this is a versioned file-system, the associated item is checked-out.\n The resulting checkoutId can be obtained from the returned buffer file.\n@param parentPath folder path of parent\n@param name new database name\n@param fileID file ID to be associated with new database or null\n@param bufferFile data source\n@param contentType application defined content type\n@param bufferSize buffer size.  If copying an existing BufferFile, the buffer \n size must be the same as the source file.\n@param user name of user creating item (required for versioned item)\n@param projectPath path of project in which database is checked-out (required for versioned item)\n@return an empty BufferFile open for read-write.\n@throws FileNotFoundException thrown if parent folder does not exist.\n@throws DuplicateFileException if a folder item exists with this name\n@throws InvalidNameException if the name does not have\n all alphanumerics\n@throws IOException if an IO error occurs.","static":false,"name":"createDatabase","comment":"Create a new empty database item within the specified parent folder. \n If this is a versioned file-system, the associated item is checked-out.\n The resulting checkoutId can be obtained from the returned buffer file.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"folder path of parent","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"new database name","type_short":"String"},{"type_long":"java.lang.String","name":"fileID","comment":"file ID to be associated with new database or null","type_short":"String"},{"type_long":"java.lang.String","name":"contentType","comment":"application defined content type","type_short":"String"},{"type_long":"int","name":"bufferSize","comment":"buffer size.  If copying an existing BufferFile, the buffer \n size must be the same as the source file.","type_short":"int"},{"type_long":"java.lang.String","name":"user","comment":"name of user creating item (required for versioned item)","type_short":"String"},{"type_long":"java.lang.String","name":"projectPath","comment":"path of project in which database is checked-out (required for versioned item)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the name does not have\n all alphanumerics","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"db.buffers.ManagedBufferFile","comment":"an empty BufferFile open for read-write.","type_short":"ManagedBufferFile"}},{"javadoc":"Creates a new empty data file within the specified parent folder.\n@param parentPath folder path of parent\n@param name new data file name\n@param inputStream source data\n@param comment version comment (used for versioned file system only)\n@param contentType application defined content type\n@param monitor progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)\n@return new data file\n@throws DuplicateFileException Thrown if a folderItem with that name already exists.\n@throws InvalidNameException if the name has illegal characters.\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor","static":false,"name":"createDataFile","comment":"Creates a new empty data file within the specified parent folder.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"folder path of parent","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"new data file name","type_short":"String"},{"type_long":"java.io.InputStream","name":"istream","comment":"","type_short":"InputStream"},{"type_long":"java.lang.String","name":"comment","comment":"version comment (used for versioned file system only)","type_short":"String"},{"type_long":"java.lang.String","name":"contentType","comment":"application defined content type","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the name has illegal characters.\n all alphanumerics","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if cancelled by monitor","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.DataFileItem","comment":"new data file","type_short":"DataFileItem"}},{"javadoc":"Creates a new file item from a packed file.\n The content\/item type must be determined from the input stream.\n@param parentPath folder path of parent\n@param name new data file name\n@param packedFile packed file data\n@param monitor progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)\n@param user name of user creating item (required for versioned item)\n@return new item\n@throws InvalidNameException if the name has illegal characters.\n all alphanumerics\n@throws IOException if an IO error occurs.\n@throws CancelledException if cancelled by monitor","static":false,"name":"createFile","comment":"Creates a new file item from a packed file.\n The content\/item type must be determined from the input stream.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"folder path of parent","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"new data file name","type_short":"String"},{"type_long":"java.io.File","name":"packedFile","comment":"packed file data","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor (used for cancel support, \n progress not used since length of input stream is unknown)","type_short":"TaskMonitor"},{"type_long":"java.lang.String","name":"user","comment":"name of user creating item (required for versioned item)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the name has illegal characters.\n all alphanumerics","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if cancelled by monitor","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.store.FolderItem","comment":"new item","type_short":"FolderItem"}},{"javadoc":"Delete the specified folder.\n@param folderPath path of folder to be deleted\n@throws FolderNotEmptyException Thrown if the folder is not empty.\n@throws FileNotFoundException if there is no folder with the given path name.\n@throws IOException if error occured during delete.","static":false,"name":"deleteFolder","comment":"Delete the specified folder.","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"path of folder to be deleted","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if error occured during delete.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Move the specified folder to the path specified by newFolderPath. \n The moved folder must not be an ancestor of the new Parent.\n@param parentPath path of parent folder that the moving folder currently resides in.\n@param folderName name of the folder within the parentPath to be moved.\n@param newParentPath path to where the folder is to be moved.\n@throws FileNotFoundException if the moved folder does not exist.\n@throws DuplicateFileException if folder with the same name exists within the new parent folder\n@throws FileInUseException if any file within this folder or its decendents are in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the new FolderPath contains an illegal file name.\n@throws IllegalArgumentException if new Parent is invalid.","static":false,"name":"moveFolder","comment":"Move the specified folder to the path specified by newFolderPath. \n The moved folder must not be an ancestor of the new Parent.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"path of parent folder that the moving folder currently resides in.","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"name of the folder within the parentPath to be moved.","type_short":"String"},{"type_long":"java.lang.String","name":"newParentPath","comment":"path to where the folder is to be moved.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the new FolderPath contains an illegal file name.","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Renames the specified folder to a new name.\n@param parentPath the parent folder of the folder to be renamed.\n@param folderName the current name of the folder to be renamed.\n@param newFolderName the name the folder to be renamed to.\n@throws FileNotFoundException if the folder to be renamed does not exist.\n@throws DuplicateFileException if folder with the new name already exists.\n@throws FileInUseException if any file within this folder or its decendents are in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the new FolderName contains an illegal file name.","static":false,"name":"renameFolder","comment":"Renames the specified folder to a new name.","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"the parent folder of the folder to be renamed.","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"the current name of the folder to be renamed.","type_short":"String"},{"type_long":"java.lang.String","name":"newFolderName","comment":"the name the folder to be renamed to.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if the new FolderName contains an illegal file name.","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Moves the specified item to a new folder.\n@param folderPath path of folder containing the item.\n@param name name of the item to be moved.\n@param newFolderPath path of folder where item is to be moved.\n@throws FileNotFoundException if the item does not exist.\n@throws DuplicateFileException if item with the same name exists within the new parent folder.\n@throws FileInUseException if the item is in-use or checked-out\n@throws IOException if an IO error occurs.\n@throws InvalidNameException if the newName is invalid","static":false,"name":"moveItem","comment":"Moves the specified item to a new folder.","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"path of folder containing the item.","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"name of the item to be moved.","type_short":"String"},{"type_long":"java.lang.String","name":"newFolderPath","comment":"path of folder where item is to be moved.","type_short":"String"},{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.InvalidNameException","comment":"if the newName is invalid","type_short":"InvalidNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the given listener to be notified of file system changes.\n@param listener the listener to be added.","static":false,"name":"addFileSystemListener","comment":"Adds the given listener to be notified of file system changes.","params":[{"type_long":"ghidra.framework.store.FileSystemListener","name":"listener","comment":"the listener to be added.","type_short":"FileSystemListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the listener from being notified of file system changes.\n@param listener","static":false,"name":"removeFileSystemListener","comment":"Removes the listener from being notified of file system changes.","params":[{"type_long":"ghidra.framework.store.FileSystemListener","name":"listener","comment":"","type_short":"FileSystemListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the folder specified by the path exists.\n@param folderPath the name of the folder to check for existence.\n@return true if the folder exists.\n@throws IOException if an IO error occurs.","static":false,"name":"folderExists","comment":"Returns true if the folder specified by the path exists.","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"the name of the folder to check for existence.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the folder exists.","type_short":"boolean"}},{"javadoc":"Returns true if the file exists\n@param folderPath the folderPath of the folder that may contain the file.\n@param name the name of the file to check for existence.\n@throws IOException if an IO error occurs.","static":false,"name":"fileExists","comment":"Returns true if the file exists","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"the folderPath of the folder that may contain the file.","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"the name of the file to check for existence.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs.","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this file system is shared","static":false,"name":"isShared","comment":"Returns true if this file system is shared","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Cleanup & release resources","static":false,"name":"dispose","comment":"Cleanup  release resources","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FileSystem","comment":"FileSystem provides a hierarchical view and management of a \n set of files and folders.","fields":[{"type_long":"char","javadoc":"Character used to separate folder and item names within a path string.","static":true,"name":"SEPARATOR_CHAR","comment":"Character used to separate folder and item names within a path string.","type_short":"char","constant_value":"\/"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SEPARATOR","comment":"","type_short":"String","constant_value":null}]}
