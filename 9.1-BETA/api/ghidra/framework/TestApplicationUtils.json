{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the directory that contains the source code repository\n@return the directory that contains the source code repository","static":true,"name":"getCurrentRepoDirectory","comment":"Returns the directory that contains the source code repository","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the directory that contains the source code repository","type_short":"File"}},{"javadoc":"Returns a directory that contains all repos for a given git clone. This directory name \n is unique to the active clone collection, which makes it useful for creating unique \n temporary directories to allow multiple simultaneous test runs.\n@return the parent dir of the current repo","static":true,"name":"getRepoContainerDirectory","comment":"Returns a directory that contains all repos for a given git clone. This directory name \n is unique to the active clone collection, which makes it useful for creating unique \n temporary directories to allow multiple simultaneous test runs.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the parent dir of the current repo","type_short":"File"}},{"javadoc":"Returns the directory containing the installation of this application.   The value returned\n here will either be an actual installation directory or the parent directory of a cloned\n repository.  This method will work in the various modes of operation, including:\n <ul>\n \t<li><u>Development Mode<\/u> - running from a repo clone, from inside of an IDE or the \n command-line.   In this mode a sample directory structure is:\n <pre>\n \t\t\/...\/git_repos\/ghidra_clone\/ghidra\/Ghidra\/Features\/Base\/src\/...\n \n \t\twhich means this method will return 'ghidra_clone'\n <\/pre>\n  <\/li>\n  <li><u>Batch Testing Mode<\/u> - running from a test server, but not from inside a \n  complete build.  This mode uses jar files for the compiled source code, but is running \n  from within the structure of a cloned repo.  In this mode a sample directory structure is:\n <pre>\n \t\t\/...\/git_repos\/ghidra_clone\/ghidra\/Ghidra\/Features\/Base\/src\/...\n \n \t\twhich means this method will return 'ghidra_clone'\n <\/pre>\n  <\/li>\n  <li><u>Eclipse Release Development Mode<\/u> - running from a full application release.  \n  This mode uses jar files from the installation for dependencies.  The user test files \n  are run from within an Eclipse that has been linked with the application installation.\n  In this mode a sample directory structure is:\n <pre>\n \t\t\/...\/Software\/ghidra_10.0\/Ghidra\/Features\/Base\/lib\/Base.jar\n \n \t\twhich means this method will return 'ghidra_10.0'\n <\/pre>\n  <\/li>\n <\/ul>\n@return the installation directory","static":true,"name":"getInstallationDirectory","comment":"Returns the directory containing the installation of this application.   The value returned\n here will either be an actual installation directory or the parent directory of a cloned\n repository.  This method will work in the various modes of operation, including:\n \n \tDevelopment Mode - running from a repo clone, from inside of an IDE or the \n command-line.   In this mode a sample directory structure is:\n \n \t\t\/...\/git_repos\/ghidra_clone\/ghidra\/Ghidra\/Features\/Base\/src\/...\n \n \t\twhich means this method will return 'ghidra_clone'\n \n  \n  Batch Testing Mode - running from a test server, but not from inside a \n  complete build.  This mode uses jar files for the compiled source code, but is running \n  from within the structure of a cloned repo.  In this mode a sample directory structure is:\n \n \t\t\/...\/git_repos\/ghidra_clone\/ghidra\/Ghidra\/Features\/Base\/src\/...\n \n \t\twhich means this method will return 'ghidra_clone'\n \n  \n  Eclipse Release Development Mode - running from a full application release.  \n  This mode uses jar files from the installation for dependencies.  The user test files \n  are run from within an Eclipse that has been linked with the application installation.\n  In this mode a sample directory structure is:\n \n \t\t\/...\/Software\/ghidra_10.0\/Ghidra\/Features\/Base\/lib\/Base.jar\n \n \t\twhich means this method will return 'ghidra_10.0'\n \n  \n ","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the installation directory","type_short":"File"}},{"javadoc":"Creates a folder that is unique for the current installation. This allows clients to \n have multiple clones (for development mode) or multiple installations (for release mode)\n on their machine, running tests from each repo simultaneously.\n@return a folder that is unique for the current installation","static":true,"name":"getUniqueTempFolder","comment":"Creates a folder that is unique for the current installation. This allows clients to \n have multiple clones (for development mode) or multiple installations (for release mode)\n on their machine, running tests from each repo simultaneously.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"a folder that is unique for the current installation","type_short":"File"}}],"name":"TestApplicationUtils","comment":"","fields":[]}
