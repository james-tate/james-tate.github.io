{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a {@link Iterable} sequence of all the {@link DomainFile}s that exist under\n the specified {@link DomainFolder folder}.\n@param folder\n@return ","static":true,"name":"descendantFiles","comment":"Returns a Iterable sequence of all the DomainFiles that exist under\n the specified DomainFolder.","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"","type_short":"DomainFolder"}],"throws":[],"return":{"type_long":"java.lang.Iterable<ghidra.framework.model.DomainFile>","comment":"","type_short":"Iterable"}},{"javadoc":"Returns a {@link Iterable} sequence of all the {@link DomainFolders}s that exist under\n the specified {@link DomainFolder folder}.\n@param folder\n@return ","static":true,"name":"descendantFolders","comment":"Returns a Iterable sequence of all the DomainFolderss that exist under\n the specified DomainFolder.","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"","type_short":"DomainFolder"}],"throws":[],"return":{"type_long":"java.lang.Iterable<ghidra.framework.model.DomainFolder>","comment":"","type_short":"Iterable"}},{"javadoc":"Returns a Ghidra {@link DomainFolder} with the matching path, creating\n any missing parent folders as needed.\n <p>\n@param currentFolder starting {@link DomainFolder}.\n@param path relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.\n@return {@link DomainFolder} that the path points to.\n@throws InvalidNameException if bad name\n@throws IOException if problem when creating folder","static":true,"name":"createDomainFolderPath","comment":"Returns a Ghidra DomainFolder with the matching path, creating\n any missing parent folders as needed.\n ","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"currentFolder","comment":"starting DomainFolder.","type_short":"DomainFolder"},{"type_long":"java.lang.String","name":"path","comment":"relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"if bad name","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"if problem when creating folder","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"DomainFolder that the path points to.","type_short":"DomainFolder"}},{"javadoc":"Returns a Ghidra {@link DomainFolder} with the matching path, or null if not found.\n <p>\n@param currentFolder starting {@link DomainFolder}.\n@param path relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.\n@return {@link DomainFolder} that the path points to or null if not found.","static":true,"name":"lookupDomainPath","comment":"Returns a Ghidra DomainFolder with the matching path, or null if not found.\n ","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"currentFolder","comment":"starting DomainFolder.","type_short":"DomainFolder"},{"type_long":"java.lang.String","name":"path","comment":"relative path to the desired DomainFolder, using forward slashes\n as separators.  Empty string ok, multiple slashes in a row treated as single slash,\n trailing slashes ignored.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"DomainFolder that the path points to or null if not found.","type_short":"DomainFolder"}},{"javadoc":"Returns a unique name in a Ghidra {@link DomainFolder}.\n@param folder {@link DomainFolder} to check for child name collisions.\n@param baseName String base name of the file or folder\n@return \"baseName\" if no collisions, or \"baseNameNNN\" (where NNN is an incrementing\n integer value) when collisions are found, or null if there are more than 1000 collisions.","static":true,"name":"getUniqueName","comment":"Returns a unique name in a Ghidra DomainFolder.","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"DomainFolder to check for child name collisions.","type_short":"DomainFolder"},{"type_long":"java.lang.String","name":"baseName","comment":"String base name of the file or folder","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"\"baseName\" if no collisions, or \"baseNameNNN\" (where NNN is an incrementing\n integer value) when collisions are found, or null if there are more than 1000 collisions.","type_short":"String"}}],"name":"ProjectDataUtils","comment":"","fields":[]}
