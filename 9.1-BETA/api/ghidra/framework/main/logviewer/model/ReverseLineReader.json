{"implements":[],"javadoc":"Reads in a single line of text from a given input file, in reverse order. \n \n CONOPS:\n \t1. Start at a given position in the file and read BUFFER_SIZE bytes into a byte array\n  2. From the end of the array, read a character\n  3. If the character represents a newline (or carriage return), the line is finished, so return.\n  4. If not, continue reading.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"@param encoding\n@param raf\n@throws IOException","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"encoding","comment":"","type_short":"String"},{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"","type_short":"RandomAccessFile"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Moves the file pointer to the given byte location.\n@param position","static":false,"name":"setFilePos","comment":"Moves the file pointer to the given byte location.","params":[{"type_long":"long","name":"position","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reads a single line from the current file pointer position, in reverse.  To do this we do\n the following:\n \n 1. Read a 'large enough' number of bytes into a buffer (enough to guarantee a full line of\n    text.\n 2. Move backwards through the bytes just read until a newline or carriage return is found.\n 3. Throw away the rest of the bytes and return the line found.\n@return \n@throws IOException","static":false,"name":"readLine","comment":"Reads a single line from the current file pointer position, in reverse.  To do this we do\n the following:\n \n 1. Read a 'large enough' number of bytes into a buffer (enough to guarantee a full line of\n    text.\n 2. Move backwards through the bytes just read until a newline or carriage return is found.\n 3. Throw away the rest of the bytes and return the line found.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Converts the contents of the output stream to a string.\n@return \n@throws UnsupportedEncodingException","static":false,"name":"bufToString","comment":"Converts the contents of the output stream to a string.","params":[],"throws":[{"type_long":"java.io.UnsupportedEncodingException","comment":"","type_short":"UnsupportedEncodingException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"ReverseLineReader","comment":"Reads in a single line of text from a given input file, in reverse order. \n \n CONOPS:\n \t1. Start at a given position in the file and read BUFFER_SIZE bytes into a byte array\n  2. From the end of the array, read a character\n  3. If the character represents a newline (or carriage return), the line is finished, so return.\n  4. If not, continue reading.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"BUFFER_SIZE","comment":"","type_short":"int","constant_value":"8192"},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"encoding","comment":"","type_short":"String","constant_value":null},{"type_long":"java.io.ByteArrayOutputStream","javadoc":"","static":false,"name":"baos","comment":"","type_short":"ByteArrayOutputStream","constant_value":null},{"type_long":"java.io.RandomAccessFile","javadoc":"","static":false,"name":"raf","comment":"","type_short":"RandomAccessFile","constant_value":null}]}
