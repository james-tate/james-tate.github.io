{"implements":[],"javadoc":"{@link Task} that handles deleting {@link DomainFile files} and {@link DomainFolder folders}\n from the project.\n <p>\n This task will iterate all the files and folders specified by the user to weed out\n common problem issues (read-only files, checked-out files), ask the user to confirm,\n and then perform the actual delete operations.\n <p>\n This task will show a summary dialog if there were multiple files involved or any errors\n encountered.\n <p>","static":false,"extends":"ghidra.util.task.Task","methods":[{"javadoc":"Creates a new task to delete the specified files and folders.\n@param files - the {@link DomainFile files} the user requested to be deleted, or null.\n@param folders - the {@link DomainFolder folders} the user requested to be deleted, or null.\n@param parentComponent - parent java awt component that will be parent of the message dialogs and such.","static":false,"name":"<init>","comment":"Creates a new task to delete the specified files and folders.","params":[{"type_long":"java.util.List<ghidra.framework.model.DomainFile>","name":"files","comment":"- the DomainFile the user requested to be deleted, or null.","type_short":"List"},{"type_long":"java.util.List<ghidra.framework.model.DomainFolder>","name":"folders","comment":"- the DomainFolder the user requested to be deleted, or null.","type_short":"List"},{"type_long":"java.awt.Component","name":"parentComponent","comment":"- parent java awt component that will be parent of the message dialogs and such.","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"run","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasErrors","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"confirmUserSkipFailedPreprocessedFiles","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"confirmDeleteFiles","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"showErrorSummary","comment":"","params":[{"type_long":"boolean","name":"wasCancelled","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"showResults","comment":"","params":[{"type_long":"boolean","name":"hasErrors","comment":"","type_short":"boolean"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempts to delete the folders listed in {@link #foldersToDelete} (in reverse\n lexical order to delete child folders first before attempting to delete the\n containing parent folders).\n <p>\n Errors are saved into {@link #foldersToDelete} as the value that the folder maps to.\n <p>\n@param monitor\n@throws CancelledException","static":false,"name":"deleteFolders","comment":"Attempts to delete the folders listed in #foldersToDelete (in reverse\n lexical order to delete child folders first before attempting to delete the\n containing parent folders).\n \n Errors are saved into #foldersToDelete as the value that the folder maps to.\n ","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempts to delete the files listed in {@link #filesToDelete}.\n <p>\n Errors are saved into {@link #filesToDelete} as the value that the file maps to.\n <p>\n@param monitor\n@throws CancelledException","static":false,"name":"deleteFiles","comment":"Attempts to delete the files listed in #filesToDelete.\n \n Errors are saved into #filesToDelete as the value that the file maps to.\n ","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Iterates over the user-supplied files and folders, saving the discovered files and\n subfolders and their files into {@link #filesToDelete} and {@link #foldersToDelete}.\n@param monitor\n@return ","static":false,"name":"preprocessStartFilesAndFolders","comment":"Iterates over the user-supplied files and folders, saving the discovered files and\n subfolders and their files into #filesToDelete and #foldersToDelete.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"preprocessFolder","comment":"","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"","type_short":"DomainFolder"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"preprocessFile","comment":"","params":[{"type_long":"ghidra.framework.model.DomainFile","name":"file","comment":"","type_short":"DomainFile"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ProjectDataDeleteTask","comment":"Task that handles deleting DomainFile and DomainFolder\n from the project.\n \n This task will iterate all the files and folders specified by the user to weed out\n common problem issues (read-only files, checked-out files), ask the user to confirm,\n and then perform the actual delete operations.\n \n This task will show a summary dialog if there were multiple files involved or any errors\n encountered.\n ","fields":[{"type_long":"java.awt.Component","javadoc":"","static":false,"name":"parentComponent","comment":"","type_short":"Component","constant_value":null},{"type_long":"java.util.List<ghidra.framework.model.DomainFile>","javadoc":"","static":false,"name":"startFiles","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<ghidra.framework.model.DomainFolder>","javadoc":"","static":false,"name":"startFolders","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Set<ghidra.framework.model.DomainFile>","javadoc":"Files that failed during the preprocess phase because they were checked out","static":false,"name":"failPreprocessCheckedOut","comment":"Files that failed during the preprocess phase because they were checked out","type_short":"Set","constant_value":null},{"type_long":"java.util.Set<ghidra.framework.model.DomainFile>","javadoc":"Files that failed during the preprocess phase because they were marked read-only.","static":false,"name":"failPreprocessReadOnly","comment":"Files that failed during the preprocess phase because they were marked read-only.","type_short":"Set","constant_value":null},{"type_long":"java.util.Set<ghidra.framework.model.DomainFile>","javadoc":"A lookup {@link Set set} of the {@link #failPreprocessReadOnly read-only} files\n found during the preprocess phase, if the user has chosen to override the read-only\n status.","static":false,"name":"readOnlyOverride","comment":"A lookup Set of the #failPreprocessReadOnly files\n found during the preprocess phase, if the user has chosen to override the read-only\n status.","type_short":"Set","constant_value":null},{"type_long":"java.util.Map<ghidra.framework.model.DomainFile,java.lang.String>","javadoc":"The files that are queued up to be deleted, pointing to the string error message\n that was encountered during the actual delete operation, or null if no error.","static":false,"name":"filesToDelete","comment":"The files that are queued up to be deleted, pointing to the string error message\n that was encountered during the actual delete operation, or null if no error.","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<ghidra.framework.model.DomainFolder,java.lang.String>","javadoc":"The folders that are queued up to be deleted  , pointing to the string error message\n that was encountered during the actual delete operation, or null if no error.","static":false,"name":"foldersToDelete","comment":"The folders that are queued up to be deleted  , pointing to the string error message\n that was encountered during the actual delete operation, or null if no error.","type_short":"Map","constant_value":null},{"type_long":"int","javadoc":"The number of files that encountered an error during the delete operation.","static":false,"name":"erroredFileCount","comment":"The number of files that encountered an error during the delete operation.","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"The number of folders that encountered an error during the delete operation.","static":false,"name":"erroredFolderCount","comment":"The number of folders that encountered an error during the delete operation.","type_short":"int","constant_value":null},{"type_long":"long","javadoc":"The number of milliseconds used during preprocessing and delete operations.","static":false,"name":"elapsedTime","comment":"The number of milliseconds used during preprocessing and delete operations.","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"Count of the number of bytes occupied by files that were successfully deleted.","static":false,"name":"fileBytesDeleted","comment":"Count of the number of bytes occupied by files that were successfully deleted.","type_short":"long","constant_value":null}]}
