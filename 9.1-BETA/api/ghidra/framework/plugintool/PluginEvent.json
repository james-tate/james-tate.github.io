{"implements":[],"javadoc":"Event generated by a plugin.\n <p>\n A PluginEvent should be annotate with a {@link ToolEventName} if it may be\n passed between multiple tools via a {@link ToolConnection}.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Returns the tool event name corresponding to the given pluginEventClass.\n If no corresponding tool event exists, null will be returned.","static":true,"name":"lookupToolEventName","comment":"Returns the tool event name corresponding to the given pluginEventClass.\n If no corresponding tool event exists, null will be returned.","params":[{"type_long":"java.lang.Class<?>","name":"pluginEventClass","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Constructor\n@param sourceName source name of the event\n@param eventName name of event","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"java.lang.String","name":"sourceName","comment":"source name of the event","type_short":"String"},{"type_long":"java.lang.String","name":"eventName","comment":"name of event","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if this event has been annotated with a {@link ToolEventName} which\n makes it available for passing to another tool via a {@link ToolConnection}.\n@return true if event can be utilized as a cross-tool event","static":false,"name":"isToolEvent","comment":"Determine if this event has been annotated with a ToolEventName which\n makes it available for passing to another tool via a ToolConnection.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if event can be utilized as a cross-tool event","type_short":"boolean"}},{"javadoc":"Get the optional cross-tool event name which has been established via\n a {@link ToolEventName} annotation which makes it available for\n passing as an external tool via a {@link ToolConnection}.\n This name may differ from the {@link #getEventName()}.s\n@return tool event name or null if not permitted as a cross-tool event","static":false,"name":"getToolEventName","comment":"Get the optional cross-tool event name which has been established via\n a ToolEventName annotation which makes it available for\n passing as an external tool via a ToolConnection.\n This name may differ from the #getEventName().s","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"tool event name or null if not permitted as a cross-tool event","type_short":"String"}},{"javadoc":"Get the plugin event name.","static":false,"name":"getEventName","comment":"Get the plugin event name.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the name of the plugin immediately responsible for firing this\n event.","static":false,"name":"getSourceName","comment":"Returns the name of the plugin immediately responsible for firing this\n event.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"setSourceName","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setTriggerEvent","comment":"","params":[{"type_long":"ghidra.framework.plugintool.PluginEvent","name":"triggerEvent","comment":"","type_short":"PluginEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTriggerEvent","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.plugintool.PluginEvent","comment":"","type_short":"PluginEvent"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDetails","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"PluginEvent","comment":"Event generated by a plugin.\n \n A PluginEvent should be annotate with a ToolEventName if it may be\n passed between multiple tools via a ToolConnection.","fields":[{"type_long":"java.lang.String","javadoc":"Name of event source when plugin event is passed to\n another tool as cross-tool event.","static":true,"name":"EXTERNAL_SOURCE_NAME","comment":"Name of event source when plugin event is passed to\n another tool as cross-tool event.","type_short":"String","constant_value":"\"External Tool\""},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"eventName","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"sourceName","comment":"","type_short":"String","constant_value":null},{"type_long":"ghidra.framework.plugintool.PluginEvent","javadoc":"","static":false,"name":"triggerEvent","comment":"","type_short":"PluginEvent","constant_value":null}]}
