{"implements":["ghidra.util.classfinder.ExtensionPoint"],"javadoc":"NOTE:  ALL ContentHandler CLASSES MUST END IN \"ContentHandler\".  If not,\n the ClassSearcher will not find them.\n \n <code>ContentHandler<\/code> defines an application interface for converting \n between a specific domain object implementation and folder item storage. \n This interface also defines a method which provides an appropriate icon \n corresponding to the content.","static":false,"methods":[{"javadoc":"Creates a new folder item within a specified file-system.\n If fs is versioned, the resulting item is marked as checked-out\n within the versioned file-system.  The specified domainObj\n will become associated with the newly created database.\n@param fs the file system in which to create the folder item\n@param userfs file system which contains associated user data\n@param path the path of the folder item\n@param name the name of the new folder item\n@param domainObject the domain object to store in the newly created folder item\n@param monitor the monitor that allows the user to cancel\n@return checkout ID for new item\n@throws IOException if an i\/o error occurs\n@throws InvalidNameException if the specified name contains invalid characters\n@throws CancelledException if the user cancels","static":false,"name":"createFile","comment":"Creates a new folder item within a specified file-system.\n If fs is versioned, the resulting item is marked as checked-out\n within the versioned file-system.  The specified domainObj\n will become associated with the newly created database.","params":[{"type_long":"ghidra.framework.store.FileSystem","name":"fs","comment":"the file system in which to create the folder item","type_short":"FileSystem"},{"type_long":"ghidra.framework.store.FileSystem","name":"userfs","comment":"file system which contains associated user data","type_short":"FileSystem"},{"type_long":"java.lang.String","name":"path","comment":"the path of the folder item","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"the name of the new folder item","type_short":"String"},{"type_long":"ghidra.framework.model.DomainObject","name":"domainObject","comment":"the domain object to store in the newly created folder item","type_short":"DomainObject"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor that allows the user to cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an i\/o error occurs","type_short":"IOException"},{"type_long":"ghidra.util.InvalidNameException","comment":"if the specified name contains invalid characters","type_short":"InvalidNameException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"}],"return":{"type_long":"long","comment":"checkout ID for new item","type_short":"long"}},{"javadoc":"Open a folder item for immutable use.  If any changes are attempted on the\n returned object, an IllegalStateException state exception may be thrown.\n@param item stored folder item\n@param consumer consumer of the returned object\n@param version version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION (-1) should be specified when not opening a specific\n file version.\n@param minChangeVersion the minimum version which should be included in the \n change set for the returned object. A value of -1 indicates the default change\n set.\n@param monitor the monitor that allows the user to cancel\n@return immutable domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.","static":false,"name":"getImmutableObject","comment":"Open a folder item for immutable use.  If any changes are attempted on the\n returned object, an IllegalStateException state exception may be thrown.","params":[{"type_long":"ghidra.framework.store.FolderItem","name":"item","comment":"stored folder item","type_short":"FolderItem"},{"type_long":"java.lang.Object","name":"consumer","comment":"consumer of the returned object","type_short":"Object"},{"type_long":"int","name":"version","comment":"version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION (-1) should be specified when not opening a specific\n file version.","type_short":"int"},{"type_long":"int","name":"minChangeVersion","comment":"the minimum version which should be included in the \n change set for the returned object. A value of -1 indicates the default change\n set.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor that allows the user to cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if a folder item access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if operation is cancelled by user","type_short":"CancelledException"},{"type_long":"ghidra.util.exception.VersionException","comment":"if unable to handle file content due to version \n difference which could not be handled.","type_short":"VersionException"}],"return":{"type_long":"ghidra.framework.data.DomainObjectAdapter","comment":"immutable domain object","type_short":"DomainObjectAdapter"}},{"javadoc":"Open a folder item for read-only use.  While changes are permitted on the\n returned object, the original folder item may not be overwritten \/ updated.\n@param item stored folder item\n@param version version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION should be specified when not opening a specific\n file version.\n@param okToUpgrade if true a version upgrade to the content will be done\n if necessary.\n@param consumer consumer of the returned object\n@param monitor the monitor that allows the user to cancel\n@return read-only domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.","static":false,"name":"getReadOnlyObject","comment":"Open a folder item for read-only use.  While changes are permitted on the\n returned object, the original folder item may not be overwritten \/ updated.","params":[{"type_long":"ghidra.framework.store.FolderItem","name":"item","comment":"stored folder item","type_short":"FolderItem"},{"type_long":"int","name":"version","comment":"version of the stored folder item to be opened.\n DomainFile.DEFAULT_VERSION should be specified when not opening a specific\n file version.","type_short":"int"},{"type_long":"boolean","name":"okToUpgrade","comment":"if true a version upgrade to the content will be done\n if necessary.","type_short":"boolean"},{"type_long":"java.lang.Object","name":"consumer","comment":"consumer of the returned object","type_short":"Object"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor that allows the user to cancel","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if a folder item access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.VersionException","comment":"if unable to handle file content due to version \n difference which could not be handled.","type_short":"VersionException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if operation is cancelled by user","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.data.DomainObjectAdapter","comment":"read-only domain object","type_short":"DomainObjectAdapter"}},{"javadoc":"Open a folder item for update.  Changes made to the returned object may be\n saved to the original folder item.\n@param item stored folder item\n@param userfs file system which contains associated user data\n@param checkoutId an appropriate checout ID required to update the specified \n folder item.\n@param okToUpgrade if true a version upgrade to the content will be done\n if necessary.\n@param okToRecover if true an attempt to recover any unsaved changes resulting from\n a crash will be attempted.\n@param consumer consumer of the returned object\n@param monitor cancelable task monitor\n@return updateable domain object\n@throws IOException if a folder item access error occurs\n@throws CancelledException if operation is cancelled by user\n@throws VersionException if unable to handle file content due to version \n difference which could not be handled.","static":false,"name":"getDomainObject","comment":"Open a folder item for update.  Changes made to the returned object may be\n saved to the original folder item.","params":[{"type_long":"ghidra.framework.store.FolderItem","name":"item","comment":"stored folder item","type_short":"FolderItem"},{"type_long":"ghidra.framework.store.FileSystem","name":"userfs","comment":"file system which contains associated user data","type_short":"FileSystem"},{"type_long":"long","name":"checkoutId","comment":"an appropriate checout ID required to update the specified \n folder item.","type_short":"long"},{"type_long":"boolean","name":"okToUpgrade","comment":"if true a version upgrade to the content will be done\n if necessary.","type_short":"boolean"},{"type_long":"boolean","name":"okToRecover","comment":"if true an attempt to recover any unsaved changes resulting from\n a crash will be attempted.","type_short":"boolean"},{"type_long":"java.lang.Object","name":"consumer","comment":"consumer of the returned object","type_short":"Object"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"cancelable task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if a folder item access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if operation is cancelled by user","type_short":"CancelledException"},{"type_long":"ghidra.util.exception.VersionException","comment":"if unable to handle file content due to version \n difference which could not be handled.","type_short":"VersionException"}],"return":{"type_long":"ghidra.framework.data.DomainObjectAdapter","comment":"updateable domain object","type_short":"DomainObjectAdapter"}},{"javadoc":"Returns the object change data which includes changes made to the specified\n olderVersion through to the specified newerVersion.\n@param versionedFolderItem versioned folder item\n@param olderVersion the older version number\n@param newerVersion the newer version number\n@return the set of changes that were made\n@throws VersionException if a database version change prevents reading of data.\n@throws IOException if a folder item access error occurs","static":false,"name":"getChangeSet","comment":"Returns the object change data which includes changes made to the specified\n olderVersion through to the specified newerVersion.","params":[{"type_long":"ghidra.framework.store.FolderItem","name":"versionedFolderItem","comment":"versioned folder item","type_short":"FolderItem"},{"type_long":"int","name":"olderVersion","comment":"the older version number","type_short":"int"},{"type_long":"int","name":"newerVersion","comment":"the newer version number","type_short":"int"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if a database version change prevents reading of data.","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if a folder item access error occurs","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.ChangeSet","comment":"the set of changes that were made","type_short":"ChangeSet"}},{"javadoc":"Get an instance of a suitable merge manager to be used during the merge of a Versioned \n object which has been modified by another user since it was last merged\n or checked-out.\n@param resultsObj object to which merge results should be written\n@param sourceObj object which contains user's changes to be merged\n@param originalObj object which corresponds to checked-out version state\n@param latestObj object which corresponds to latest version with which\n the sourceObj must be merged.\n@return merge manager","static":false,"name":"getMergeManager","comment":"Get an instance of a suitable merge manager to be used during the merge of a Versioned \n object which has been modified by another user since it was last merged\n or checked-out.","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"resultsObj","comment":"object to which merge results should be written","type_short":"DomainObject"},{"type_long":"ghidra.framework.model.DomainObject","name":"sourceObj","comment":"object which contains user's changes to be merged","type_short":"DomainObject"},{"type_long":"ghidra.framework.model.DomainObject","name":"originalObj","comment":"object which corresponds to checked-out version state","type_short":"DomainObject"},{"type_long":"ghidra.framework.model.DomainObject","name":"latestObj","comment":"object which corresponds to latest version with which\n the sourceObj must be merged.","type_short":"DomainObject"}],"throws":[],"return":{"type_long":"ghidra.framework.data.DomainObjectMergeManager","comment":"merge manager","type_short":"DomainObjectMergeManager"}},{"javadoc":"Returns true if the content type is always private \n (i.e., can not be added to the versioned filesystem).","static":false,"name":"isPrivateContentType","comment":"Returns true if the content type is always private \n (i.e., can not be added to the versioned filesystem).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns list of unique content-types supported.\n A minimum of one content-type will be returned. If more than one\n is returned, these are considered equivalent aliases.","static":false,"name":"getContentType","comment":"Returns list of unique content-types supported.\n A minimum of one content-type will be returned. If more than one\n is returned, these are considered equivalent aliases.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"A string that is meant to be presented to the user.","static":false,"name":"getContentTypeDisplayString","comment":"A string that is meant to be presented to the user.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the Icon associated with this handlers content type.","static":false,"name":"getIcon","comment":"Returns the Icon associated with this handlers content type.","params":[],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"","type_short":"Icon"}},{"javadoc":"Returns the name of the default tool that should be used to open this content type","static":false,"name":"getDefaultToolName","comment":"Returns the name of the default tool that should be used to open this content type","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns domain object implementation class supported.","static":false,"name":"getDomainObjectClass","comment":"Returns domain object implementation class supported.","params":[],"throws":[],"return":{"type_long":"java.lang.Class<? extends ghidra.framework.model.DomainObject>","comment":"","type_short":"Class"}},{"javadoc":"Create user data file associated with existing content.\n This facilitates the lazy creation of the user data file.\n@param associatedDomainObj associated domain object corresponding to this content handler\n@param userDbh user data handle\n@param userfs private user data filesystem\n@param monitor task monitor\n@throws IOException if an access error occurs\n@throws CancelledException if operation is cancelled by user","static":false,"name":"saveUserDataFile","comment":"Create user data file associated with existing content.\n This facilitates the lazy creation of the user data file.","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"associatedDomainObj","comment":"associated domain object corresponding to this content handler","type_short":"DomainObject"},{"type_long":"db.DBHandle","name":"userDbh","comment":"user data handle","type_short":"DBHandle"},{"type_long":"ghidra.framework.store.FileSystem","name":"userfs","comment":"private user data filesystem","type_short":"FileSystem"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if operation is cancelled by user","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if an access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove user data file associated with an existing folder item.\n@param item folder item\n@param userFilesystem\n@throws IOException if an access error occurs","static":false,"name":"removeUserDataFile","comment":"Remove user data file associated with an existing folder item.","params":[{"type_long":"ghidra.framework.store.FolderItem","name":"item","comment":"folder item","type_short":"FolderItem"},{"type_long":"ghidra.framework.store.FileSystem","name":"userFilesystem","comment":"","type_short":"FileSystem"}],"throws":[{"type_long":"java.io.IOException","comment":"if an access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ContentHandler","comment":"NOTE:  ALL ContentHandler CLASSES MUST END IN \"ContentHandler\".  If not,\n the ClassSearcher will not find them.\n \n ContentHandler defines an application interface for converting \n between a specific domain object implementation and folder item storage. \n This interface also defines a method which provides an appropriate icon \n corresponding to the content.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"UNKNOWN_CONTENT","comment":"","type_short":"String","constant_value":"\"Unknown-File\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MISSING_CONTENT","comment":"","type_short":"String","constant_value":"\"Missing-File\""}]}
