{"implements":[],"javadoc":"<code>RepositoryServerHandle<\/code> provides access to a repository server.","static":false,"methods":[{"javadoc":"@returns true if server allows anonymous access.\n Individual repositories must grant anonymous access separately.\n@throws IOException if an IO error occurs","static":false,"name":"anonymousAccessAllowed","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@returns true if user has restricted read-only access to server (e.g., anonymous user)\n@throws IOException if an IO error occurs","static":false,"name":"isReadOnly","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create a new repository on the server.  The newly created RepositoryHandle will contain \n a unique project ID for the client.\n@param name repository name.\n This ID will be used to identify and maintain checkout data.\n@return handle to new repository.\n@throws DuplicateFileException\n@throws UserAccessException\n@throws IOException if an IO error occurs","static":false,"name":"createRepository","comment":"Create a new repository on the server.  The newly created RepositoryHandle will contain \n a unique project ID for the client.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.\n This ID will be used to identify and maintain checkout data.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.remote.RepositoryHandle","comment":"handle to new repository.","type_short":"RepositoryHandle"}},{"javadoc":"Get a handle to an existing repository.\n@param name repository name.\n@return repository handle or null if repository does not exist.\n@throws UserAccessException if user does not have permission to access repository\n@throws IOException if an IO error occurs","static":false,"name":"getRepository","comment":"Get a handle to an existing repository.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.remote.RepositoryHandle","comment":"repository handle or null if repository does not exist.","type_short":"RepositoryHandle"}},{"javadoc":"Delete a repository.\n@param name repository name.\n@throws UserAccessException if user does not have permission to delete repository\n@throws IOException if an IO error occurs","static":false,"name":"deleteRepository","comment":"Delete a repository.","params":[{"type_long":"java.lang.String","name":"name","comment":"repository name.","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a list of all repository names which are accessable by the current user.\n@throws IOException if an IO error occurs","static":false,"name":"getRepositoryNames","comment":"Returns a list of all repository names which are accessable by the current user.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Returns current user for which this handle belongs.\n@throws IOException if an IO error occurs","static":false,"name":"getUser","comment":"Returns current user for which this handle belongs.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns a list of all known users.\n@throws IOException if an IO error occurs","static":false,"name":"getAllUsers","comment":"Returns a list of all known users.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Returns true if the user's password can be changed.\n@throws IOException if an IO error occurs","static":false,"name":"canSetPassword","comment":"Returns true if the user's password can be changed.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the amount of time in milliseconds until the \n user's password will expire.\n@return time until expiration or -1 if it will not expire\n@throws IOException if an IO error occurs","static":false,"name":"getPasswordExpiration","comment":"Returns the amount of time in milliseconds until the \n user's password will expire.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"long","comment":"time until expiration or -1 if it will not expire","type_short":"long"}},{"javadoc":"Set the password for the user.\n@param saltedSHA256PasswordHash SHA256 salted password hash\n@returns true if password changed\n@throws IOException if an IO error occurs\n@see HashUtilities#getSaltedHash(\"SHA-256\", char[])","static":false,"name":"setPassword","comment":"Set the password for the user.","params":[{"type_long":"char[]","name":"saltedSHA256PasswordHash","comment":"SHA256 salted password hash","type_short":"char[]"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Verify that server is alive and connected.\n@throws IOException if connection verification fails","static":false,"name":"connected","comment":"Verify that server is alive and connected.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if connection verification fails","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RepositoryServerHandle","comment":"RepositoryServerHandle provides access to a repository server.","fields":[]}
