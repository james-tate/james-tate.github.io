{"implements":[],"javadoc":"<code>ApplicationKeyManagerUtils<\/code> provides public methods for utilizing\n the application PKI key management, including access to trusted issuers\n (i.e., CA certificates), token signing and validation, and the ability to\n generate keystores for testing or when a self-signed certificate will\n suffice.\n <p>\n <b>NOTE:<\/b> This class makes direct use of classes within the\n {@link sun.security.x509} package thus breaking portability. While this is\n not preferred, the ability to generate X.509 certificates and keystores\n appears to be absent from the standard java\/javax packages.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sign the supplied token byte array using an installed certificate from\n one of the specified authorities\n@param authorities trusted certificate authorities\n@param token token byte array\n@return signed token object\n@throws NoSuchAlgorithmException\n@throws SignatureException\n@throws CertificateException","static":true,"name":"getSignedToken","comment":"Sign the supplied token byte array using an installed certificate from\n one of the specified authorities","params":[{"type_long":"java.security.Principal[]","name":"authorities","comment":"trusted certificate authorities","type_short":"java.security.Principal[]"},{"type_long":"byte[]","name":"token","comment":"token byte array","type_short":"byte[]"}],"throws":[{"type_long":"java.security.NoSuchAlgorithmException","comment":"","type_short":"NoSuchAlgorithmException"},{"type_long":"java.security.SignatureException","comment":"","type_short":"SignatureException"},{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"ghidra.net.SignedToken","comment":"signed token object","type_short":"SignedToken"}},{"javadoc":"Verify that the specified sigBytes reflect my signature of the specified\n token.\n@param authorities trusted certificate authorities\n@param token byte array token\n@param signature token signature\n@return true if signature is my signature\n@throws NoSuchAlgorithmException\n@throws SignatureException\n@throws CertificateException","static":true,"name":"isMySignature","comment":"Verify that the specified sigBytes reflect my signature of the specified\n token.","params":[{"type_long":"java.security.Principal[]","name":"authorities","comment":"trusted certificate authorities","type_short":"java.security.Principal[]"},{"type_long":"byte[]","name":"token","comment":"byte array token","type_short":"byte[]"},{"type_long":"byte[]","name":"signature","comment":"token signature","type_short":"byte[]"}],"throws":[{"type_long":"java.security.NoSuchAlgorithmException","comment":"","type_short":"NoSuchAlgorithmException"},{"type_long":"java.security.SignatureException","comment":"","type_short":"SignatureException"},{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"boolean","comment":"true if signature is my signature","type_short":"boolean"}},{"javadoc":"Returns a list of trusted issuers (i.e., CA certificates) as established\n by the {@link ApplicationTrustManagerFactory}.\n@throws CertificateException","static":true,"name":"getTrustedIssuers","comment":"Returns a list of trusted issuers (i.e., CA certificates) as established\n by the ApplicationTrustManagerFactory.","params":[],"throws":[{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"javax.security.auth.x500.X500Principal[]","comment":"","type_short":"javax.security.auth.x500.X500Principal[]"}},{"javadoc":"Validate a client certificate ensuring that it is not expired and is\n trusted based upon the active trust managers.\n@param certChain X509 certificate chain\n@param authType authentication type (i.e., \"RSA\")\n@throws CertificateException","static":true,"name":"validateClient","comment":"Validate a client certificate ensuring that it is not expired and is\n trusted based upon the active trust managers.","params":[{"type_long":"java.security.cert.X509Certificate[]","name":"certChain","comment":"X509 certificate chain","type_short":"java.security.cert.X509Certificate[]"},{"type_long":"java.lang.String","name":"authType","comment":"authentication type (i.e., \"RSA\")","type_short":"String"}],"throws":[{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Pack order list of certs to create a certificate chain array\n@param certs certificates which makeup the ordered certificate chain. Null\n            certificate elements will be skipped.\n@return array of certificates","static":true,"name":"getCertificateChain","comment":"Pack order list of certs to create a certificate chain array","params":[{"type_long":"java.security.cert.Certificate[]","name":"certs","comment":"certificates which makeup the ordered certificate chain. Null\n            certificate elements will be skipped.","type_short":"java.security.cert.Certificate[]"}],"throws":[],"return":{"type_long":"java.security.cert.Certificate[]","comment":"array of certificates","type_short":"java.security.cert.Certificate[]"}},{"javadoc":"Generate self-signed PKI X509 keystore containing both a signing key\/cert\n and an encrypting key\/cert.  Default certificte extension specifies key usage of \n Signing which is appropriate for SSL DHE or ECDHE cipher suites.\n@param keyFile keystore file or null if not to be stored\n@param keystoreType keystore type (e.g., \"JKS\", \"PKCS12\")\n@param protectedPassphrase passphrase for protecting key and keystore\n@param alias for key\/cert\n@param certExtensions specifies certificate extensions to be set or null for default\n            key usage extension. Only a single alias may be specified when\n            this argument is not null.\n@param dn distinguished name for principal key holder\n@param caSignerKeyEntry certificate issuer\/authority (CA) private key entry or null\n            for self-signed\n@param durationDays number of days from now when certificate shall expire\n@return newly generated keystore\n@throws KeyStoreException error occurred generating keystore","static":true,"name":"createKeyStore","comment":"Generate self-signed PKI X509 keystore containing both a signing key\/cert\n and an encrypting key\/cert.  Default certificte extension specifies key usage of \n Signing which is appropriate for SSL DHE or ECDHE cipher suites.","params":[{"type_long":"java.io.File","name":"keyFile","comment":"keystore file or null if not to be stored","type_short":"File"},{"type_long":"java.lang.String","name":"keystoreType","comment":"keystore type (e.g., \"JKS\", \"PKCS12\")","type_short":"String"},{"type_long":"char[]","name":"protectedPassphrase","comment":"passphrase for protecting key and keystore","type_short":"char[]"},{"type_long":"java.lang.String","name":"alias","comment":"for key\/cert","type_short":"String"},{"type_long":"sun.security.x509.CertificateExtensions","name":"certExtensions","comment":"specifies certificate extensions to be set or null for default\n            key usage extension. Only a single alias may be specified when\n            this argument is not null.","type_short":"CertificateExtensions"},{"type_long":"java.lang.String","name":"dn","comment":"distinguished name for principal key holder","type_short":"String"},{"type_long":"java.security.KeyStore.PrivateKeyEntry","name":"caSignerKeyEntry","comment":"certificate issuer\/authority (CA) private key entry or null\n            for self-signed","type_short":"PrivateKeyEntry"},{"type_long":"int","name":"durationDays","comment":"number of days from now when certificate shall expire","type_short":"int"}],"throws":[{"type_long":"java.security.KeyStoreException","comment":"error occurred generating keystore","type_short":"KeyStoreException"}],"return":{"type_long":"java.security.KeyStore","comment":"newly generated keystore","type_short":"KeyStore"}},{"javadoc":"Generate a new keypair\/certificate and add it to the specified keyStore.\n Default certificate extension specifies key usage of digital-signature which is appropriate\n for SSL (i.e., DHE or ECDHE cipher suites) and other authentication uses.\n@param keyStore key store\n@param generator key pair generator\n@param alias keypair\/certificate alias\n@param dn principal distinguished name\n@param certExtensions certificate extensions with key usage\n@param protectedPassphrase key protection passphrase\n@param caSignerKeyEntry certificate issuer\/authority (CA) private key\n            entry or null for self-signed\n@param durationDays number of days from now when certificate shall expire\n@throws KeyStoreException error occurred generating keystore","static":true,"name":"addNewKeyPair","comment":"Generate a new keypair\/certificate and add it to the specified keyStore.\n Default certificate extension specifies key usage of digital-signature which is appropriate\n for SSL (i.e., DHE or ECDHE cipher suites) and other authentication uses.","params":[{"type_long":"java.security.KeyStore","name":"keyStore","comment":"key store","type_short":"KeyStore"},{"type_long":"java.lang.String","name":"alias","comment":"keypair\/certificate alias","type_short":"String"},{"type_long":"java.lang.String","name":"dn","comment":"principal distinguished name","type_short":"String"},{"type_long":"sun.security.x509.CertificateExtensions","name":"certExtensions","comment":"certificate extensions with key usage","type_short":"CertificateExtensions"},{"type_long":"char[]","name":"protectedPassphrase","comment":"key protection passphrase","type_short":"char[]"},{"type_long":"java.security.KeyStore.PrivateKeyEntry","name":"caSignerKeyEntry","comment":"certificate issuer\/authority (CA) private key\n            entry or null for self-signed","type_short":"PrivateKeyEntry"},{"type_long":"int","name":"durationDays","comment":"number of days from now when certificate shall expire","type_short":"int"}],"throws":[{"type_long":"java.security.GeneralSecurityException","comment":"","type_short":"GeneralSecurityException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Export all X.509 certificates contained within keystore to the specified outFile.\n@param keystore\n@param outFile output file\n@throws IOException\n@throws KeyStoreException\n@throws CertificateEncodingException","static":true,"name":"exportX509Certificates","comment":"Export all X.509 certificates contained within keystore to the specified outFile.","params":[{"type_long":"java.security.KeyStore","name":"keystore","comment":"","type_short":"KeyStore"},{"type_long":"java.io.File","name":"outFile","comment":"output file","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.security.KeyStoreException","comment":"","type_short":"KeyStoreException"},{"type_long":"java.security.cert.CertificateEncodingException","comment":"","type_short":"CertificateEncodingException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Export all X.509 certificates contained within keystore to the specified outFile.\n@param keystore\n@param outFile output file\n@param password keystore password\n@throws CertificateException\n@throws NoSuchAlgorithmException\n@throws FileNotFoundException\n@throws KeyStoreException\n@throws CertificateEncodingException","static":true,"name":"exportKeystore","comment":"Export all X.509 certificates contained within keystore to the specified outFile.","params":[{"type_long":"java.security.KeyStore","name":"keystore","comment":"","type_short":"KeyStore"},{"type_long":"java.io.File","name":"outFile","comment":"output file","type_short":"File"},{"type_long":"char[]","name":"password","comment":"keystore password","type_short":"char[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"java.security.KeyStoreException","comment":"","type_short":"KeyStoreException"},{"type_long":"java.security.NoSuchAlgorithmException","comment":"","type_short":"NoSuchAlgorithmException"},{"type_long":"java.security.cert.CertificateException","comment":"","type_short":"CertificateException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ApplicationKeyManagerUtils","comment":"ApplicationKeyManagerUtils provides public methods for utilizing\n the application PKI key management, including access to trusted issuers\n (i.e., CA certificates), token signing and validation, and the ability to\n generate keystores for testing or when a self-signed certificate will\n suffice.\n \n NOTE: This class makes direct use of classes within the\n sun.security.x509 package thus breaking portability. While this is\n not preferred, the ability to generate X.509 certificates and keystores\n appears to be absent from the standard java\/javax packages.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_SIGNING_ALGORITHM","comment":"","type_short":"String","constant_value":"\"SHA1withRSA\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_AUTH_TYPE","comment":"","type_short":"String","constant_value":"\"RSA\""},{"type_long":"int","javadoc":"","static":true,"name":"MILLISECONDS_PER_DAY","comment":"","type_short":"int","constant_value":"86400000"}]}
