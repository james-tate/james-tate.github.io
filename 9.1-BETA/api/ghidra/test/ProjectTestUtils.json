{"implements":[],"javadoc":"Ghidra framework and program test utilities","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open the project for the given directory and name.\n If the project does not exist, create one. \n Only once instance of a given project may be open at any given\n point in time.  Be sure to close the project if you will be\n re-opening.\n@param directory directory for the project\n@param name name of the project\n@return the project\n@throws IOException if there was a problem creating the project\n@throws LockException if the project is already open\n@throws IllegalArgumentException if the name has illegal characters such that a URL could\n not be created","static":true,"name":"getProject","comment":"Open the project for the given directory and name.\n If the project does not exist, create one. \n Only once instance of a given project may be open at any given\n point in time.  Be sure to close the project if you will be\n re-opening.","params":[{"type_long":"java.lang.String","name":"directory","comment":"directory for the project","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"name of the project","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem creating the project","type_short":"IOException"},{"type_long":"ghidra.framework.store.LockException","comment":"if the project is already open","type_short":"LockException"}],"return":{"type_long":"ghidra.framework.model.Project","comment":"the project","type_short":"Project"}},{"javadoc":"Remove entire project.  Note: this will not remove the parent <code>directory<\/code> of\n the project.\n@param directory directory of the project.\n@param name The name of the project to delete\n@return True if the project was deleted.","static":true,"name":"deleteProject","comment":"Remove entire project.  Note: this will not remove the parent directory of\n the project.","params":[{"type_long":"java.lang.String","name":"directory","comment":"directory of the project.","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"The name of the project to delete","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"True if the project was deleted.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"deleteLockFile","comment":"","params":[{"type_long":"java.io.File","name":"lockFile","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"deleteDir","comment":"","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Create an empty program file within the specified project folder.\n@param proj active project.\n@param progName name of program and domain file to be created.\n@param langType a specified language, or 0 if it does not matter.\n@param folder domain folder within the specified project which the\n user has permission to write.  If null, the root data folder will be used.\n@return new domain file.","static":true,"name":"createProgramFile","comment":"Create an empty program file within the specified project folder.","params":[{"type_long":"ghidra.framework.model.Project","name":"proj","comment":"active project.","type_short":"Project"},{"type_long":"java.lang.String","name":"progName","comment":"name of program and domain file to be created.","type_short":"String"},{"type_long":"ghidra.program.model.lang.Language","name":"language","comment":"","type_short":"Language"},{"type_long":"ghidra.program.model.lang.CompilerSpec","name":"compilerSpec","comment":"","type_short":"CompilerSpec"},{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"domain folder within the specified project which the\n user has permission to write.  If null, the root data folder will be used.","type_short":"DomainFolder"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.program.model.lang.LanguageNotFoundException","comment":"","type_short":"LanguageNotFoundException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"new domain file.","type_short":"DomainFile"}},{"javadoc":"Launch a tool.\n@param project the project to which the tool belongs\n@param toolName name of the tool to get from the active workspace.\n If null, launch a new empty tool in the active workspace.","static":true,"name":"getTool","comment":"Launch a tool.","params":[{"type_long":"ghidra.framework.model.Project","name":"project","comment":"the project to which the tool belongs","type_short":"Project"},{"type_long":"java.lang.String","name":"toolName","comment":"name of the tool to get from the active workspace.\n If null, launch a new empty tool in the active workspace.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.Tool","comment":"","type_short":"Tool"}},{"javadoc":"Save a tool to the project tool chest.\n@param project The project which with the tool is associated.\n@param tool The tool to be saved\n@return The tool template for the given tool.\n@throws DuplicateNameException","static":true,"name":"saveTool","comment":"Save a tool to the project tool chest.","params":[{"type_long":"ghidra.framework.model.Project","name":"project","comment":"The project which with the tool is associated.","type_short":"Project"},{"type_long":"ghidra.framework.model.Tool","name":"tool","comment":"The tool to be saved","type_short":"Tool"}],"throws":[],"return":{"type_long":"ghidra.framework.model.ToolTemplate","comment":"The tool template for the given tool.","type_short":"ToolTemplate"}},{"javadoc":"Remove the specified tool if it exists.\n@param project\n@param toolName\n@return true if it existed and was removed from the local tool chest.","static":true,"name":"deleteTool","comment":"Remove the specified tool if it exists.","params":[{"type_long":"ghidra.framework.model.Project","name":"project","comment":"","type_short":"Project"},{"type_long":"java.lang.String","name":"toolName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if it existed and was removed from the local tool chest.","type_short":"boolean"}}],"name":"ProjectTestUtils","comment":"Ghidra framework and program test utilities","fields":[{"type_long":"java.util.Set<java.lang.String>","javadoc":"Names that can be ignored when deleting files during cleanup","static":true,"name":"ignoredDeleteNames","comment":"Names that can be ignored when deleting files during cleanup","type_short":"Set","constant_value":null}]}
