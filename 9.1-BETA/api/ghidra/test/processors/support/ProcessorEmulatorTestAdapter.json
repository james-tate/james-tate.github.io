{"implements":["ghidra.test.processors.support.ExecutionListener"],"javadoc":"<code>ProcessorEmulatorTestAdapter<\/code> provides an abstract JUnit test implementation\n for processor-specific test cases.  All test cases which extend this class must have a\n class name which ends with 'EmulatorTest' and starts with the processor designator which\n will be used to identify associated test binaries within either the processor module's\n data\/pcodetests\/ directory or the Ghidra\/Test\/TestResources\/data\/pcodetests\/ directory generally \n contained within the binary repository (e.g., ghidra.bin).\n <p>\n Within the pcodetests directory all files and folders which start with the prefix\n <processor-designator>_pcodetest* will be processed.  All files contained within a matching\n subdirectory will be treated as related binaries and imported.  Any *.gzf file will be\n imported but assumed to be pre-analyzed.  Binary files to be imported and analyzed must\n utilize the *.out file extension.\n <p>\n JUnit X86EmulatorTest could utilize the following binary file naming strategy:\n <pre>\n pcodetests\/X86_PCodeTests\n - binary1.o\n - binary2.o\n - binary3.gzf\n pcodetests\/X86_PCodeTests\/data (could be used for any associated files not to be imported)\n - binary3.o\n - binary3.d\n\n or, a single binary file could suffice:\n - pcodetests\/X86_PCodeTest.out\n <\/pre>\n\n Any *.out binary found will be imported and analyzed.  The resulting program will\n be stored as a gzf in the test-output cache directory.  These cached files will be used\n instead of a test resource binary if that binary's md5 checksum has not changed since its cached\n gzf was created.  This use of cache files will allow the tests to run quickly on subsequent\n executions.  If re-analysis is required, the cache will need to be cleared manually.\n \n NOTES:\n 1. Dummy Test Methods must be added for all known test groups.  See bottom of this file.  This\n    all allows for the single test trace mode execution to work within Eclipse.\n 2. Trace logging disabled by default when all test groups are run (see buildEmulatorTestSuite method).\n    Specific traceLevel and traceLog file controlled via environment properties\n    EmuTestTraceLevel and EmuTestTraceFile.\n 3. The TestInfo structure must be properly maintained within the datatype archive EmuTesting.gdt\n    and field naming consistent with use in PCodeTestControlBlock.java\n 4. The {@link #initializeState(EmulatorTestRunner, Program)} may be overriden to initialize the\n    register values if needed.  This should be based upon symbols or other program information\n    if possible since hardcoded constants may not track future builds of a test binaries.  \n    An attempt is made to initialize the stack pointer automatically based upon well known\n    stack initialization symbols.","static":false,"extends":"junit.framework.TestCase","methods":[{"javadoc":"","static":true,"name":"cleanupTempData","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"deleteResultFilesOnStartup","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"initializeSharedResources","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"languageID","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"compilerSpecID","comment":"","type_short":"String"},{"type_long":"java.lang.String[]","name":"regDumpSetNames","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"ghidra.program.model.lang.LanguageNotFoundException","comment":"","type_short":"LanguageNotFoundException"},{"type_long":"ghidra.program.model.lang.CompilerSpecNotFoundException","comment":"","type_short":"CompilerSpecNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"languageID","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"compilerSpecID","comment":"","type_short":"String"},{"type_long":"java.lang.String[]","name":"regDumpSetNames","comment":"","type_short":"java.lang.String[]"},{"type_long":"java.lang.String[]","name":"floatRegSetNames","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"ghidra.program.model.lang.LanguageNotFoundException","comment":"","type_short":"LanguageNotFoundException"},{"type_long":"ghidra.program.model.lang.CompilerSpecNotFoundException","comment":"","type_short":"CompilerSpecNotFoundException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRegisters","comment":"","params":[{"type_long":"java.lang.String[]","name":"regNames","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register[]","comment":"","type_short":"ghidra.program.model.lang.Register[]"}},{"javadoc":"","static":false,"name":"setIgnoredBlocks","comment":"","params":[{"type_long":"java.lang.String[]","name":"blockNames","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRestrictedSearchSet","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"","static":true,"name":"getCause","comment":"","params":[{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"java.lang.Throwable","comment":"","type_short":"Throwable"}},{"javadoc":"","static":true,"name":"getTestFailure","comment":"","params":[{"type_long":"java.lang.Class<?>","name":"emulatorTestClass","comment":"","type_short":"Class"},{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"junit.framework.Test","comment":"","type_short":"Test"}},{"javadoc":"Create TestSuite based upon available test groups contained within binary\n test files associated with target processor.\n@param emulatorTestClass test which extends <code>ProcessorEmulatorTestAdapter<\/code>\n and whose name ends with \"EmulatorTest\".\n@return test suite","static":true,"name":"buildEmulatorTestSuite","comment":"Create TestSuite based upon available test groups contained within binary\n test files associated with target processor.","params":[{"type_long":"java.lang.Class<?>","name":"emulatorTestClass","comment":"test which extends ProcessorEmulatorTestAdapter\n and whose name ends with \"EmulatorTest\".","type_short":"Class"}],"throws":[],"return":{"type_long":"junit.framework.Test","comment":"test suite","type_short":"Test"}},{"javadoc":"","static":false,"name":"log","comment":"","params":[{"type_long":"ghidra.test.processors.support.PCodeTestGroup","name":"testGroup","comment":"","type_short":"PCodeTestGroup"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"log","comment":"","params":[{"type_long":"ghidra.test.processors.support.PCodeTestGroup","name":"testGroup","comment":"","type_short":"PCodeTestGroup"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"},{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCallAddress","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"logState","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logState","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"emulatorTestRunner","comment":"","type_short":"EmulatorTestRunner"},{"type_long":"ghidra.program.model.address.Address","name":"dumpAddr","comment":"","type_short":"Address"},{"type_long":"int","name":"dumpSize","comment":"","type_short":"int"},{"type_long":"int","name":"elementSize","comment":"","type_short":"int"},{"type_long":"ghidra.test.processors.support.EmulatorTestRunner.DumpFormat","name":"elementFormat","comment":"","type_short":"DumpFormat"},{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logUnimplemented","comment":"","params":[{"type_long":"java.util.TreeSet<java.lang.String>","name":"unimplementedSet","comment":"","type_short":"TreeSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"flipBytes","comment":"","params":[{"type_long":"byte[]","name":"bytes","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"formatAssignmentString","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"byte[]","name":"values","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"logRead","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"byte[]","name":"values","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logWrite","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"byte[]","name":"values","comment":"","type_short":"byte[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"stepCompleted","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts the stack trace into a string","static":true,"name":"exceptionToString","comment":"Converts the stack trace into a string","params":[{"type_long":"java.lang.Throwable","name":"t","comment":"","type_short":"Throwable"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"findTestResourceDirectory","comment":"","params":[{"type_long":"java.lang.String","name":"relativeModulePath","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setUp","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getRelativeModulePath","comment":"","params":[{"type_long":"generic.jar.ResourceFile","name":"myModuleRootDirectory","comment":"","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"initializeLog","comment":"","params":[{"type_long":"java.lang.Class<?>","name":"testClass","comment":"","type_short":"Class"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"}],"return":{"type_long":"ghidra.test.processors.support.ProcessorEmulatorTestAdapter.LogData","comment":"","type_short":"LogData"}},{"javadoc":"","static":false,"name":"tearDown","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Single unit test which handles named test group specified during test\n instantiation.","static":false,"name":"runTest","comment":"Single unit test which handles named test group specified during test\n instantiation.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkStackPointerValue","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"findAnyMatchingSymbol","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String[]","name":"names","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"","type_short":"Symbol"}},{"javadoc":"","static":false,"name":"initStackPointer","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"},{"type_long":"ghidra.program.model.lang.Register","name":"spReg","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get symbol name which defines initial stack pointer offset\n@return stack symbol or null","static":false,"name":"getPreferredStackSymbolName","comment":"Get symbol name which defines initial stack pointer offset","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"stack symbol or null","type_short":"String"}},{"javadoc":"","static":false,"name":"failTest","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"},{"type_long":"java.lang.String","name":"msg","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"checkInstructionDecodeFailure","comment":"","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"","type_short":"EmulatorTestRunner"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the maximum defined memory address ignoring any overlays which have been defined.\n@return max defined physical address","static":true,"name":"getMaxDefinedMemoryAddress","comment":"Get the maximum defined memory address ignoring any overlays which have been defined.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"max defined physical address","type_short":"Address"}},{"javadoc":"Get the processor designator used to identify test binary files\/folder.\n The default implementation requires the JUnit test class name to end with\n \"EmulatorTest\" where the portion of the name proceeding this suffix will be\n used as the processor designator\n@return processor designator","static":false,"name":"getProcessorDesignator","comment":"Get the processor designator used to identify test binary files\/folder.\n The default implementation requires the JUnit test class name to end with\n \"EmulatorTest\" where the portion of the name proceeding this suffix will be\n used as the processor designator","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"processor designator","type_short":"String"}},{"javadoc":"Get CUint file designator if use of A, B, C... is not suitable.\n@param fileIndex file index within sorted list\n@param filePath binary file path\n@return short file designator for use in qualified test name","static":false,"name":"buildTestFileDesignator","comment":"Get CUint file designator if use of A, B, C... is not suitable.","params":[{"type_long":"int","name":"fileIndex","comment":"file index within sorted list","type_short":"int"},{"type_long":"java.lang.String","name":"filePath","comment":"binary file path","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"short file designator for use in qualified test name","type_short":"String"}},{"javadoc":"Invoked for each program immediately prior to executing a test group.\n By default this method will initialize the register states based upon the \n specific register values\/context stored at the test group function entry point.\n Such register values may have been established via the processor specification,\n loader or analyzers.  A specific test may override or extend\n this behavior for other registers as needed.\n@param testRunner emulator group test runner\/facilitator\n@param program\n@throws Exception if initialization criteria has not been satisfied","static":false,"name":"initializeState","comment":"Invoked for each program immediately prior to executing a test group.\n By default this method will initialize the register states based upon the \n specific register values\/context stored at the test group function entry point.\n Such register values may have been established via the processor specification,\n loader or analyzers.  A specific test may override or extend\n this behavior for other registers as needed.","params":[{"type_long":"ghidra.test.processors.support.EmulatorTestRunner","name":"testRunner","comment":"emulator group test runner\/facilitator","type_short":"EmulatorTestRunner"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[{"type_long":"java.lang.Exception","comment":"if initialization criteria has not been satisfied","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invoked immediately following import allow byte processing prior to\n control structure identification.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.\n@param program\n@throws Exception","static":false,"name":"postImport","comment":"Invoked immediately following import allow byte processing prior to\n control structure identification.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invoked prior to analysis to allow analysis options or other pre-analysis\n inspection\/modification to be performed.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.\n@param program\n@throws Exception","static":false,"name":"preAnalyze","comment":"Invoked prior to analysis to allow analysis options or other pre-analysis\n inspection\/modification to be performed.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invoked for non-gzf files immediately after the analyze method to\n perform any follow-up changes of inspection of the program.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.\n@param program\n@throws Exception","static":false,"name":"postAnalyze","comment":"Invoked for non-gzf files immediately after the analyze method to\n perform any follow-up changes of inspection of the program.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invoked for non-gzf files to perform auto-analysis.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.\n@param program\n@throws Exception","static":false,"name":"analyze","comment":"Invoked for non-gzf files to perform auto-analysis.\n NOTE: This method will only be invoked once during the first test setup\n for all test binaries found.  This method will not be invoked\n during subsequent tests since the analyzed program will be cached.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.test.processors.support.PCodeTestControlBlock","name":"testControlBlock","comment":"","type_short":"PCodeTestControlBlock"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setAnalysisOptions","comment":"","params":[{"type_long":"ghidra.framework.options.Options","name":"analysisOptions","comment":"","type_short":"Options"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addFunctionStartDisassemblyPoint","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"functionAddr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"functionName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSet","name":"disassembleStarts","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create symbol at known function location if missing","static":false,"name":"createSymbol","comment":"Create symbol at known function location if missing","params":[{"type_long":"ghidra.program.model.address.Address","name":"functionAddr","comment":"","type_short":"Address"},{"type_long":"java.lang.String","name":"functionName","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the loader class which should be used.  A null value should be\n return to use the preferred loader.\n@return loader class or null","static":false,"name":"getLoaderClass","comment":"Get the loader class which should be used.  A null value should be\n return to use the preferred loader.","params":[],"throws":[],"return":{"type_long":"java.lang.Class<? extends ghidra.app.util.opinion.Loader>","comment":"loader class or null","type_short":"Class"}},{"javadoc":"","static":false,"name":"findBinaryTestFiles","comment":"","params":[{"type_long":"java.io.File","name":"testResourceDir","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.test.processors.support.PCodeTestFile>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getFiles","comment":"","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"},{"type_long":"java.util.List<java.lang.String>","name":"list","comment":"","type_short":"List"},{"type_long":"java.lang.String","name":"pathPrefix","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getGzfProgram","comment":"","params":[{"type_long":"java.lang.String","name":"gzfProgName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"","static":false,"name":"getGzfProgram","comment":"","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"},{"type_long":"java.lang.String","name":"gzfProgName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"@return true if test run should fail up-front if binary contains disassembly errors","static":false,"name":"failOnDisassemblyErrors","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if test run should fail up-front if binary contains disassembly errors","type_short":"boolean"}},{"javadoc":"@return true if test run should fail up-front if binary contains relocation errors","static":false,"name":"failOnRelocationErrors","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if test run should fail up-front if binary contains relocation errors","type_short":"boolean"}},{"javadoc":"","static":false,"name":"checkForProgramIssues","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String","name":"resourceFilePath","comment":"","type_short":"String"},{"type_long":"ghidra.test.processors.support.PCodeTestControlBlock","name":"testControlBlock","comment":"","type_short":"PCodeTestControlBlock"},{"type_long":"ghidra.test.processors.support.PCodeTestResults","name":"testResults","comment":"","type_short":"PCodeTestResults"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"ingestTestBinaries","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cleanupResidualSegmentData","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[{"type_long":"ghidra.framework.store.LockException","comment":"","type_short":"LockException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"sortTestControlBlocks","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getUniqueGlobalSymbol","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"","type_short":"Symbol"}},{"javadoc":"","static":false,"name":"buildTestFileDigest","comment":"","params":[{"type_long":"java.util.HashSet<java.lang.String>","name":"duplicateTests","comment":"","type_short":"HashSet"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Force proper code address alignment to compensate for address encoding schemes (e.g., Thumb mode)\n@param offset\n@param alignment\n@return ","static":true,"name":"alignAddressOffset","comment":"Force proper code address alignment to compensate for address encoding schemes (e.g., Thumb mode)","params":[{"type_long":"long","name":"offset","comment":"","type_short":"long"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Force proper code address alignment to compensate for address encoding schemes (e.g., Thumb mode)\n@param addr\n@param alignment\n@return ","static":true,"name":"alignAddress","comment":"Force proper code address alignment to compensate for address encoding schemes (e.g., Thumb mode)","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"alignment","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"test_asm","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BIOPS_DOUBLE","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BIOPS_FLOAT","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BIOPS_LONGLONG","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BIOPS","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BIOPS2","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_BitManipulation","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_DecisionMaking","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_GlobalVariables","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_IterativeProcessingDoWhile","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_IterativeProcessingFor","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_IterativeProcessingWhile","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_misc","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_ParameterPassing1","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_ParameterPassing2","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_ParameterPassing3","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_PointerManipulation","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"test_StructUnionManipulation","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ProcessorEmulatorTestAdapter","comment":"ProcessorEmulatorTestAdapter provides an abstract JUnit test implementation\n for processor-specific test cases.  All test cases which extend this class must have a\n class name which ends with 'EmulatorTest' and starts with the processor designator which\n will be used to identify associated test binaries within either the processor module's\n data\/pcodetests\/ directory or the Ghidra\/Test\/TestResources\/data\/pcodetests\/ directory generally \n contained within the binary repository (e.g., ghidra.bin).\n \n Within the pcodetests directory all files and folders which start with the prefix\n processor-designator_pcodetest* will be processed.  All files contained within a matching\n subdirectory will be treated as related binaries and imported.  Any *.gzf file will be\n imported but assumed to be pre-analyzed.  Binary files to be imported and analyzed must\n utilize the *.out file extension.\n \n JUnit X86EmulatorTest could utilize the following binary file naming strategy:\n \n pcodetests\/X86_PCodeTests\n - binary1.o\n - binary2.o\n - binary3.gzf\n pcodetests\/X86_PCodeTests\/data (could be used for any associated files not to be imported)\n - binary3.o\n - binary3.d\n\n or, a single binary file could suffice:\n - pcodetests\/X86_PCodeTest.out\n \n\n Any *.out binary found will be imported and analyzed.  The resulting program will\n be stored as a gzf in the test-output cache directory.  These cached files will be used\n instead of a test resource binary if that binary's md5 checksum has not changed since its cached\n gzf was created.  This use of cache files will allow the tests to run quickly on subsequent\n executions.  If re-analysis is required, the cache will need to be cleared manually.\n \n NOTES:\n 1. Dummy Test Methods must be added for all known test groups.  See bottom of this file.  This\n    all allows for the single test trace mode execution to work within Eclipse.\n 2. Trace logging disabled by default when all test groups are run (see buildEmulatorTestSuite method).\n    Specific traceLevel and traceLog file controlled via environment properties\n    EmuTestTraceLevel and EmuTestTraceFile.\n 3. The TestInfo structure must be properly maintained within the datatype archive EmuTesting.gdt\n    and field naming consistent with use in PCodeTestControlBlock.java\n 4. The #initializeState(EmulatorTestRunner, Program) may be overriden to initialize the\n    register values if needed.  This should be based upon symbols or other program information\n    if possible since hardcoded constants may not track future builds of a test binaries.  \n    An attempt is made to initialize the stack pointer automatically based upon well known\n    stack initialization symbols.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BATCH_MODE_OUTPUT_DIR","comment":"","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"DEFAULT_PROCESSOR_TEST_MODULE","comment":"","type_short":"String","constant_value":"\"Test\/TestResources\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEST_INFO_STRUCT_NAME","comment":"","type_short":"String","constant_value":"\"TestInfo\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GROUP_INFO_STRUCT_NAME","comment":"","type_short":"String","constant_value":"\"GroupInfo\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PCODE_TEST_FILE_BASE_REGEX","comment":"","type_short":"String","constant_value":"\"_PCodeTest.*\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EMULATOR_TEST_SUFFIX","comment":"","type_short":"String","constant_value":"\"EmulatorTest\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EMULATOR_TRACE_LEVEL_PROPERTY","comment":"","type_short":"String","constant_value":"\"EmuTestTraceLevel\""},{"type_long":"int","javadoc":"","static":true,"name":"traceLevel","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.Map<java.lang.Class<?>,ghidra.test.processors.support.ProcessorEmulatorTestAdapter.LogData>","javadoc":"","static":true,"name":"logDataMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.lang.Class<?>","javadoc":"","static":true,"name":"lastTestClass","comment":"","type_short":"Class","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"EMULATOR_TRACE_DISABLE_PROPERTY","comment":"","type_short":"String","constant_value":"\"EmuTestTraceDisable\""},{"type_long":"boolean","javadoc":"","static":true,"name":"traceDisabled","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"MAX_REGDUMP_WIDTH","comment":"","type_short":"int","constant_value":"80"},{"type_long":"int","javadoc":"","static":true,"name":"EXECUTION_TIMEOUT_MS","comment":"","type_short":"int","constant_value":"240000"},{"type_long":"int","javadoc":"","static":true,"name":"MAX_EXECUTION_STEPS","comment":"","type_short":"int","constant_value":"2000000"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GZF_FILE_EXT","comment":"","type_short":"String","constant_value":"\".gzf\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BINARY_FILE_EXT","comment":"","type_short":"String","constant_value":"\".out\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEST_OUTPUT_PATH","comment":"","type_short":"String","constant_value":"\"test-output\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"GZF_CACHEDIR_NAME","comment":"","type_short":"String","constant_value":"\"cache\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LOG_DIR_NAME","comment":"","type_short":"String","constant_value":"\"logs\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"RESULTS_DIR_NAME","comment":"","type_short":"String","constant_value":"\"results\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEST_RESOURCE_PATH","comment":"","type_short":"String","constant_value":"\"data\/pcodetests\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"FAILURE_RESULT_NAME","comment":"","type_short":"String","constant_value":"\"failure\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEST_PREFIX","comment":"","type_short":"String","constant_value":"\"test_\""},{"type_long":"java.io.File","javadoc":"","static":true,"name":"outputDir","comment":"","type_short":"File","constant_value":null},{"type_long":"java.io.File","javadoc":"","static":true,"name":"resourcesCacheDir","comment":"","type_short":"File","constant_value":null},{"type_long":"java.io.File","javadoc":"","static":true,"name":"logDir","comment":"","type_short":"File","constant_value":null},{"type_long":"java.io.File","javadoc":"","static":true,"name":"resultsDir","comment":"","type_short":"File","constant_value":null},{"type_long":"ghidra.test.processors.support.PCodeTestCombinedTestResults","javadoc":"","static":true,"name":"combinedResults","comment":"","type_short":"PCodeTestCombinedTestResults","constant_value":null},{"type_long":"java.lang.Runnable","javadoc":"","static":true,"name":"resultsWriter","comment":"","type_short":"Runnable","constant_value":null},{"type_long":"boolean","javadoc":"","static":true,"name":"initialized","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"processorDesignator","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.Map<java.lang.String,java.util.List<ghidra.test.processors.support.PCodeTestControlBlock>>","javadoc":"","static":true,"name":"testControlBlocksMap","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.List<ghidra.test.processors.support.PCodeTestControlBlock>","javadoc":"","static":false,"name":"testControlBlocks","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.HashMap<java.lang.String,ghidra.test.processors.support.PCodeTestGroup>","javadoc":"","static":false,"name":"testGroupMap","comment":"","type_short":"HashMap","constant_value":null},{"type_long":"ghidra.program.model.lang.Language","javadoc":"","static":false,"name":"language","comment":"","type_short":"Language","constant_value":null},{"type_long":"ghidra.program.model.lang.CompilerSpec","javadoc":"","static":false,"name":"compilerSpec","comment":"","type_short":"CompilerSpec","constant_value":null},{"type_long":"ghidra.program.model.lang.Register[]","javadoc":"","static":false,"name":"regDumpSet","comment":"","type_short":"ghidra.program.model.lang.Register[]","constant_value":null},{"type_long":"java.util.Set<ghidra.program.model.lang.Register>","javadoc":"","static":false,"name":"floatRegSet","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Set<java.lang.String>","javadoc":"","static":false,"name":"ignoredBlocks","comment":"","type_short":"Set","constant_value":null},{"type_long":"ghidra.test.TestEnv","javadoc":"","static":false,"name":"env","comment":"","type_short":"TestEnv","constant_value":null},{"type_long":"ghidra.test.processors.support.ProcessorEmulatorTestAdapter.LogData","javadoc":"","static":false,"name":"logData","comment":"","type_short":"LogData","constant_value":null},{"type_long":"java.util.Collection<generic.jar.ResourceFile>","javadoc":"","static":false,"name":"applicationRootDirectories","comment":"","type_short":"Collection","constant_value":null},{"type_long":"java.io.File","javadoc":"","static":false,"name":"resourcesTestDataDir","comment":"","type_short":"File","constant_value":null},{"type_long":"ghidra.program.model.data.FileDataTypeManager","javadoc":"","static":false,"name":"archiveDtMgr","comment":"","type_short":"FileDataTypeManager","constant_value":null},{"type_long":"ghidra.program.model.data.Structure","javadoc":"","static":false,"name":"testInfoStruct","comment":"","type_short":"Structure","constant_value":null},{"type_long":"ghidra.program.model.data.Structure","javadoc":"","static":false,"name":"groupInfoStruct","comment":"","type_short":"Structure","constant_value":null},{"type_long":"ghidra.program.model.lang.ParallelInstructionLanguageHelper","javadoc":"","static":false,"name":"parallelHelper","comment":"","type_short":"ParallelInstructionLanguageHelper","constant_value":null},{"type_long":"boolean","javadoc":"","static":true,"name":"deleteResultFilesOnStartup","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.Map<java.lang.Class<?>,ghidra.test.processors.support.ProcessorEmulatorTestAdapter.MyTestFailure>","javadoc":"","static":true,"name":"testFailureMap","comment":"","type_short":"Map","constant_value":null}]}
