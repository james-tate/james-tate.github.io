{"implements":[],"javadoc":"Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the <em>file pointer<\/em>.\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"checkOpen","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a random access file stream to read from, and optionally to\n write to, the file specified by the {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.\n\n <p>\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.\n <p>\n\n <a name=\"mode\"><p> The <tt>mode<\/tt> argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n <blockquote><table summary=\"Access mode permitted values and meanings\">\n <tr><th><p align=\"left\">Value<\/p><\/th><th><p align=\"left\">Meaning<\/p><\/th><\/tr>\n <tr><td valign=\"top\"><tt>\"r\"<\/tt><\/td>\n     <td> Open for reading only.  Invoking any of the <tt>write<\/tt>\n     methods of the resulting object will cause an {@link java.io.IOException} to be thrown. <\/td><\/tr>\n <tr><td valign=\"top\"><tt>\"rw\"<\/tt><\/td>\n     <td> Open for reading and writing.  If the file does not already\n     exist then an attempt will be made to create it. <\/td><\/tr>\n <tr><td valign=\"top\"><tt>\"rws\"<\/tt><\/td>\n     <td> Open for reading and writing, as with <tt>\"rw\"<\/tt>, and also\n     require that every update to the file's content or metadata be\n     written synchronously to the underlying storage device.  <\/td><\/tr>\n <tr><td valign=\"top\"><tt>\"rwd\"&nbsp;&nbsp;<\/tt><\/td>\n     <td> Open for reading and writing, as with <tt>\"rw\"<\/tt>, and also\n     require that every update to the file's content be written\n     synchronously to the underlying storage device. <\/td><\/tr>\n <\/table><\/blockquote>\n@param file the file object\n@param mode the access mode, as described\n                    <a href=\"#mode\">above<\/a>\n@exception IllegalArgumentException if the mode argument is not equal\n               to one of <tt>\"r\"<\/tt>, <tt>\"rw\"<\/tt>, <tt>\"rws\"<\/tt>, or\n               <tt>\"rwd\"<\/tt>\n@exception FileNotFoundException that name cannot be created, or if some other error occurs\n            while opening or creating the file","static":false,"name":"<init>","comment":"Creates a random access file stream to read from, and optionally to\n write to, the file specified by the File argument.  A new FileDescriptor object is created to represent this file connection.\n\n \n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.\n \n\n  The mode argument specifies the access mode\n in which the file is to be opened.  The permitted values and their\n meanings are:\n\n \n ValueMeaning\n \"r\"\n      Open for reading only.  Invoking any of the write\n     methods of the resulting object will cause an java.io.IOException to be thrown. \n \"rw\"\n      Open for reading and writing.  If the file does not already\n     exist then an attempt will be made to create it. \n \"rws\"\n      Open for reading and writing, as with \"rw\", and also\n     require that every update to the file's content or metadata be\n     written synchronously to the underlying storage device.  \n \"rwd\"\n      Open for reading and writing, as with \"rw\", and also\n     require that every update to the file's content be written\n     synchronously to the underlying storage device. \n ","params":[{"type_long":"java.io.File","name":"file","comment":"the file object","type_short":"File"},{"type_long":"java.lang.String","name":"mode","comment":"the access mode, as described\n                    above","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"finalize","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n <p>\n If this file has an associated channel then the channel is closed as well.\n@exception IOException if an I\/O error occurs.","static":false,"name":"close","comment":"Closes this random access file stream and releases any system\n resources associated with the stream. A closed random access\n file cannot perform input or output operations and cannot be\n reopened.\n \n If this file has an associated channel then the channel is closed as well.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the length of this file.\n@return the length of this file, measured in bytes.\n@exception IOException if an I\/O error occurs.","static":false,"name":"length","comment":"Returns the length of this file.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"the length of this file, measured in bytes.","type_short":"long"}},{"javadoc":"Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.\n@param pos the offset position, measured in bytes from the\n                   beginning of the file, at which to set the file\n                   pointer.\n@throws IOException\n@exception IOException if <code>pos<\/code> is less than\n                          <code>0<\/code> or if an I\/O error occurs.","static":false,"name":"seek","comment":"Sets the file-pointer offset, measured from the beginning of this\n file, at which the next read or write occurs.  The offset may be\n set beyond the end of the file. Setting the offset beyond the end\n of the file does not change the file length.  The file length will\n change only by writing after the offset has been set beyond the end\n of the file.","params":[{"type_long":"long","name":"pos","comment":"the offset position, measured in bytes from the\n                   beginning of the file, at which to set the file\n                   pointer.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This method reads a byte from the file, starting from the current file pointer.\n <p>\n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.\n@return the next byte of this file as a signed eight-bit\n             <code>byte<\/code>.\n@exception EOFException if this file has reached the end.\n@exception IOException if an I\/O error occurs.","static":false,"name":"readByte","comment":"This method reads a byte from the file, starting from the current file pointer.\n \n This method blocks until the byte is read, the end of the stream\n is detected, or an exception is thrown.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte","comment":"the next byte of this file as a signed eight-bit\n             byte.","type_short":"byte"}},{"javadoc":"Reads up to <code>b.length<\/code> bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.\n@param b the buffer into which the data is read.\n@return the total number of bytes read into the buffer, or\n             <code>-1<\/code> if there is no more data because the end of\n             this file has been reached.\n@exception IOException if an I\/O error occurs.","static":false,"name":"read","comment":"Reads up to b.length bytes of data from this file\n into an array of bytes. This method blocks until at least one byte\n of input is available.","params":[{"type_long":"byte[]","name":"b","comment":"the buffer into which the data is read.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             this file has been reached.","type_short":"int"}},{"javadoc":"Reads up to <code>len<\/code> bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.\n@param b the buffer into which the data is read.\n@param off the start offset of the data.\n@param len the maximum number of bytes read.\n@return the total number of bytes read into the buffer, or\n             <code>-1<\/code> if there is no more data because the end of\n             the file has been reached.\n@exception IOException if an I\/O error occurs.","static":false,"name":"read","comment":"Reads up to len bytes of data from this file into an\n array of bytes. This method blocks until at least one byte of input\n is available.","params":[{"type_long":"byte[]","name":"b","comment":"the buffer into which the data is read.","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the file has been reached.","type_short":"int"}},{"javadoc":"Writes a byte to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes a byte to this file, starting at the current file pointer.","params":[{"type_long":"byte","name":"b","comment":"the data.","type_short":"byte"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes <code>b.length<\/code> bytes from the specified byte array\n to this file, starting at the current file pointer.\n@param b the data.\n@exception IOException if an I\/O error occurs.","static":false,"name":"write","comment":"Writes b.length bytes from the specified byte array\n to this file, starting at the current file pointer.","params":[{"type_long":"byte[]","name":"b","comment":"the data.","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Writes a sub array as a sequence of bytes.\n@param b the data to be written\n@param offset the start offset in the data\n@param length the number of bytes that are written\n@exception IOException If an I\/O error has occurred.","static":false,"name":"write","comment":"Writes a sub array as a sequence of bytes.","params":[{"type_long":"byte[]","name":"b","comment":"the data to be written","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"the start offset in the data","type_short":"int"},{"type_long":"int","name":"length","comment":"the number of bytes that are written","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Ensures that enough bytes are cached to\n satisfy the next request to read.","static":false,"name":"ensure","comment":"Ensures that enough bytes are cached to\n satisfy the next request to read.","params":[{"type_long":"int","name":"bytesNeeded","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"swapInLast","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GhidraRandomAccessFile","comment":"Instances of this class support both reading and writing to a\n random access file. A random access file behaves like a large\n array of bytes stored in the file system. There is a kind of cursor,\n or index into the implied array, called the file pointer.\n This implementation relies on java.net.RandomAccessFile,\n but adds buffering to limit the amount.","fields":[{"type_long":"byte[]","javadoc":"","static":true,"name":"EMPTY","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"BUFFER_SIZE","comment":"","type_short":"int","constant_value":"1048576"},{"type_long":"java.io.File","javadoc":"","static":false,"name":"file","comment":"","type_short":"File","constant_value":null},{"type_long":"java.io.RandomAccessFile","javadoc":"","static":false,"name":"randomAccessFile","comment":"","type_short":"RandomAccessFile","constant_value":null},{"type_long":"byte[]","javadoc":"","static":false,"name":"buffer","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"bufferOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"bufferFileStartIndex","comment":"","type_short":"long","constant_value":null},{"type_long":"byte[]","javadoc":"","static":false,"name":"lastbuffer","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"lastbufferOffset","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"lastbufferFileStartIndex","comment":"","type_short":"long","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"open","comment":"","type_short":"boolean","constant_value":null}]}
