{"implements":["ghidra.app.util.bin.ByteProvider"],"javadoc":"A {@link ByteProvider} implementation that wraps an {@link InputStream}, allowing\n data to be read, as long as there are no operations that request data from a previous\n offset.\n <p>\n In other words, this ByteProvider can only be used to read data at ever increasing offsets.\n <p>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.io.InputStream","name":"inputStream","comment":"","type_short":"InputStream"},{"type_long":"long","name":"length","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFile","comment":"","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"","static":false,"name":"getUnderlyingInputStream","comment":"","params":[],"throws":[],"return":{"type_long":"java.io.InputStream","comment":"","type_short":"InputStream"}},{"javadoc":"","static":false,"name":"getInputStream","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.io.InputStream","comment":"","type_short":"InputStream"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getAbsolutePath","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"length","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"isValidIndex","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"readByte","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"","static":false,"name":"readBytes","comment":"","params":[{"type_long":"long","name":"index","comment":"","type_short":"long"},{"type_long":"long","name":"len","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}}],"name":"InputStreamByteProvider","comment":"A ByteProvider implementation that wraps an InputStream, allowing\n data to be read, as long as there are no operations that request data from a previous\n offset.\n \n In other words, this ByteProvider can only be used to read data at ever increasing offsets.\n ","fields":[{"type_long":"java.io.InputStream","javadoc":"","static":false,"name":"inputStream","comment":"","type_short":"InputStream","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"length","comment":"","type_short":"long","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"currentIndex","comment":"","type_short":"long","constant_value":null}]}
