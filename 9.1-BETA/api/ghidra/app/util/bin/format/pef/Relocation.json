{"implements":["ghidra.app.util.bin.StructConverter"],"javadoc":"The high-order 7 bits for the currently defined relocation opcode values.\n \n Binary values indicated by \"x\" are \"don't care\" \n operands. For example, any combination of the high-order 7 bits that starts \n with two zero bits (00) indicates the RelocBySectDWithSkip instruction. \n \n Relocation instructions are stored in 2-byte relocation blocks. Most instructions \n take up one block that combines an opcode and related arguments. Instructions \n that are larger than 2 bytes have an opcode and some of the operands in the \n first 2-byte block, with other operands in the following 2-byte blocks. The \n opcode occupies the upper (higher-order) bits of the block that contains it. \n Relocation instructions can be decoded from the high-order 7 bits of their first \n block. \n \n All currently defined relocation instructions relocate locations as words \n (that is, 4-byte values).","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isMatch","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pef.ImportStateCache","name":"importState","comment":"","type_short":"ImportStateCache"},{"type_long":"ghidra.app.util.bin.format.pef.RelocationState","name":"relocState","comment":"","type_short":"RelocationState"},{"type_long":"ghidra.app.util.bin.format.pef.ContainerHeader","name":"header","comment":"","type_short":"ContainerHeader"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getOpcode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getSizeInBytes","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"Relocation","comment":"The high-order 7 bits for the currently defined relocation opcode values.\n \n Binary values indicated by \"x\" are \"don't care\" \n operands. For example, any combination of the high-order 7 bits that starts \n with two zero bits (00) indicates the RelocBySectDWithSkip instruction. \n \n Relocation instructions are stored in 2-byte relocation blocks. Most instructions \n take up one block that combines an opcode and related arguments. Instructions \n that are larger than 2 bytes have an opcode and some of the operands in the \n first 2-byte block, with other operands in the following 2-byte blocks. The \n opcode occupies the upper (higher-order) bits of the block that contains it. \n Relocation instructions can be decoded from the high-order 7 bits of their first \n block. \n \n All currently defined relocation instructions relocate locations as words \n (that is, 4-byte values).","fields":[{"type_long":"int","javadoc":"","static":false,"name":"opcode","comment":"","type_short":"int","constant_value":null}]}
