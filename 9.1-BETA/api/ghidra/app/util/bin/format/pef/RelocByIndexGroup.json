{"implements":[],"javadoc":"See Apple's -- PEFBinaryFormat.h","static":false,"extends":"ghidra.app.util.bin.format.pef.Relocation","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isMatch","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getSubopcode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getIndex","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.pef.ImportStateCache","name":"importState","comment":"","type_short":"ImportStateCache"},{"type_long":"ghidra.app.util.bin.format.pef.RelocationState","name":"relocState","comment":"","type_short":"RelocationState"},{"type_long":"ghidra.app.util.bin.format.pef.ContainerHeader","name":"header","comment":"","type_short":"ContainerHeader"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RelocByIndexGroup","comment":"See Apple's -- PEFBinaryFormat.h","fields":[{"type_long":"int","javadoc":"This \"RelocSmByImport\" (SYMB) instruction adds the address of the imported symbol \n whose index is held in <code>index<\/code> to the word pointed to by \n <code>relocAddress<\/code>. After the addition, <code>relocAddress<\/code> \n points to just past the modified word, and <code>importindex<\/code> \n is set to <code>index+1<\/code>.","static":true,"name":"kPEFRelocSmByImport","comment":"This \"RelocSmByImport\" (SYMB) instruction adds the address of the imported symbol \n whose index is held in index to the word pointed to by \n relocAddress. After the addition, relocAddress \n points to just past the modified word, and importindex \n is set to index+1.","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"This \"RelocSmSetSectC\" (CDIS) instruction sets the variable <code>sectionC<\/code> \n to the memory address of the instantiated section \n specified by <code>index<\/code>.","static":true,"name":"kPEFRelocSmSetSectC","comment":"This \"RelocSmSetSectC\" (CDIS) instruction sets the variable sectionC \n to the memory address of the instantiated section \n specified by index.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"This \"RelocSmSetSectD\" (DTIS) instruction sets the variable <code>sectionD<\/code>\n to the memory adddress of the instantiated section \n specified by <code>index<\/code>.","static":true,"name":"kPEFRelocSmSetSectD","comment":"This \"RelocSmSetSectD\" (DTIS) instruction sets the variable sectionD\n to the memory adddress of the instantiated section \n specified by index.","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"This \"RelocSmBySection\" (SECN) instruction adds the address of the instantiated \n section specified by <code>index<\/code> to the word \n pointed to by <code>relocAddress<\/code>. After\n execution, <code>relocAddress<\/code> points to just \n past the modified word.","static":true,"name":"kPEFRelocSmBySection","comment":"This \"RelocSmBySection\" (SECN) instruction adds the address of the instantiated \n section specified by index to the word \n pointed to by relocAddress. After\n execution, relocAddress points to just \n past the modified word.","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":false,"name":"subopcode","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"index","comment":"","type_short":"int","constant_value":null}]}
