{"implements":[],"javadoc":"Import options exposed by the {@link DWARFAnalyzer}","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.\n@return boolean true if the DWARF importer should tag items with their source code location\n info.","static":false,"name":"isOutputSourceLocationInfo","comment":"Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the DWARF importer should tag items with their source code location\n info.","type_short":"boolean"}},{"javadoc":"Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.\n@param output_DWARF_location_info boolean to set","static":false,"name":"setOutputSourceLocationInfo","comment":"Option to control tagging data types and functions with their source code\n location (ie. filename : line number ) if the information is present in the DWARF record.","params":[{"type_long":"boolean","name":"output_DWARF_location_info","comment":"boolean to set","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control tagging data types and functions with their DWARF DIE\n record number.\n@return boolean true if the DWARF importer should tag items with their DIE record\n number.","static":false,"name":"isOutputDIEInfo","comment":"Option to control tagging data types and functions with their DWARF DIE\n record number.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the DWARF importer should tag items with their DIE record\n number.","type_short":"boolean"}},{"javadoc":"Option to control tagging data types and functions with their DWARF DIE\n record number.\n@param output_DWARF_die_info boolean to set","static":false,"name":"setOutputDIEInfo","comment":"Option to control tagging data types and functions with their DWARF DIE\n record number.","params":[{"type_long":"boolean","name":"output_DWARF_die_info","comment":"boolean to set","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control eliding typedef creation if the dest type has the same name.\n@return boolean true if the DWARF importer should skip creating a typedef if its\n dest has the same name.","static":false,"name":"isElideTypedefsWithSameName","comment":"Option to control eliding typedef creation if the dest type has the same name.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if the DWARF importer should skip creating a typedef if its\n dest has the same name.","type_short":"boolean"}},{"javadoc":"Option to control eliding typedef creation if the dest type has the same name.\n@param elide_typedefs_with_same_name boolean to set","static":false,"name":"setElideTypedefsWithSameName","comment":"Option to control eliding typedef creation if the dest type has the same name.","params":[{"type_long":"boolean","name":"elide_typedefs_with_same_name","comment":"boolean to set","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to turn on\/off the import of data types.\n@return boolean true if import should import data types.","static":false,"name":"isImportDataTypes","comment":"Option to turn on\/off the import of data types.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if import should import data types.","type_short":"boolean"}},{"javadoc":"Option to turn on\/off the import of data types.\n@param importDataTypes boolean to set","static":false,"name":"setImportDataTypes","comment":"Option to turn on\/off the import of data types.","params":[{"type_long":"boolean","name":"importDataTypes","comment":"boolean to set","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to turn on\/off the import of funcs.\n@return boolean true if import should import funcs.","static":false,"name":"isImportFuncs","comment":"Option to turn on\/off the import of funcs.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean true if import should import funcs.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setImportFuncs","comment":"","params":[{"type_long":"boolean","name":"output_Funcs","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to skip DWARF import if the DWARF record count is too large.\n@return integer count of the max number of DWARF records that will be attempted to import.","static":false,"name":"getImportLimitDIECount","comment":"Option to skip DWARF import if the DWARF record count is too large.","params":[],"throws":[],"return":{"type_long":"int","comment":"integer count of the max number of DWARF records that will be attempted to import.","type_short":"int"}},{"javadoc":"Option to skip DWARF import if the DWARF record count is too large.\n@param import_limit_die_count integer record count","static":false,"name":"setImportLimitDIECount","comment":"Option to skip DWARF import if the DWARF record count is too large.","params":[{"type_long":"int","name":"import_limit_die_count","comment":"integer record count","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control how long DWARF symbol names are allowed to be before being truncated.\n@return integer max length of symbol names from DWARF.","static":false,"name":"getNameLengthCutoff","comment":"Option to control how long DWARF symbol names are allowed to be before being truncated.","params":[],"throws":[],"return":{"type_long":"int","comment":"integer max length of symbol names from DWARF.","type_short":"int"}},{"javadoc":"Option to control how long DWARF symbol names are allowed to be before being truncated.\n@param name_length_cutoff integer max length.","static":false,"name":"setNameLengthCutoff","comment":"Option to control how long DWARF symbol names are allowed to be before being truncated.","params":[{"type_long":"int","name":"name_length_cutoff","comment":"integer max length.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.\n@return boolean flag","static":false,"name":"isPreloadAllDIEs","comment":"Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag","type_short":"boolean"}},{"javadoc":"Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.\n@param b boolean flag to set","static":false,"name":"setPreloadAllDIEs","comment":"Option to cause the DWARF parser to load all DWARF records into memory, instead of\n processing one compile unit at a time.  Needed to handle binaries created by some\n toolchains.  The import pre-check will warn the user if this needs to be turned on.","params":[{"type_long":"boolean","name":"b","comment":"boolean flag to set","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control tagging inlined-functions with comments.\n@return boolean flag.","static":false,"name":"isOutputInlineFuncComments","comment":"Option to control tagging inlined-functions with comments.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setOutputInlineFuncComments","comment":"","params":[{"type_long":"boolean","name":"output_InlineFunc_comments","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control tagging lexical blocks with Ghidra comments.\n@return boolean flag.","static":false,"name":"isOutputLexicalBlockComments","comment":"Option to control tagging lexical blocks with Ghidra comments.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag.","type_short":"boolean"}},{"javadoc":"Option to control tagging lexical blocks with Ghidra comments.\n@param output_LexicalBlock_comments boolean flag to set.","static":false,"name":"setOutputLexicalBlockComments","comment":"Option to control tagging lexical blocks with Ghidra comments.","params":[{"type_long":"boolean","name":"output_LexicalBlock_comments","comment":"boolean flag to set.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control a feature that copies anonymous types into a structure's \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure's field's\n name.\n@return boolean flag.","static":false,"name":"isCopyRenameAnonTypes","comment":"Option to control a feature that copies anonymous types into a structure's \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure's field's\n name.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag.","type_short":"boolean"}},{"javadoc":"Option to control a feature that copies anonymous types into a structure's \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure's field's\n name.\n@param b boolean flag to set.","static":false,"name":"setCopyRenameAnonTypes","comment":"Option to control a feature that copies anonymous types into a structure's \"namespace\"\n CategoryPath and giving that anonymous type a new name based on the structure's field's\n name.","params":[{"type_long":"boolean","name":"b","comment":"boolean flag to set.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.\n@return boolean flag.","static":false,"name":"isCreateFuncSignatures","comment":"Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag.","type_short":"boolean"}},{"javadoc":"Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.\n@param createFuncSignatures boolean flag to set.","static":false,"name":"setCreateFuncSignatures","comment":"Option to control creating FunctionSignature datatypes for each function defintion\n found in the DWARF debug data.","params":[{"type_long":"boolean","name":"createFuncSignatures","comment":"boolean flag to set.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Option to organize imported datatypes into sub-folders based on their source file name.\n@return boolean flag","static":false,"name":"isOrganizeTypesBySourceFile","comment":"Option to organize imported datatypes into sub-folders based on their source file name.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"boolean flag","type_short":"boolean"}},{"javadoc":"Option to organize imported datatypes into sub-folders based on their source file name.\n@param organizeTypesBySourceFile boolean flag to set.","static":false,"name":"setOrganizeTypesBySourceFile","comment":"Option to organize imported datatypes into sub-folders based on their source file name.","params":[{"type_long":"boolean","name":"organizeTypesBySourceFile","comment":"boolean flag to set.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DWARFImportOptions","comment":"Import options exposed by the DWARFAnalyzer","fields":[{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_IMPORT_LIMIT_DIE_COUNT","comment":"","type_short":"int","constant_value":"2000000"},{"type_long":"boolean","javadoc":"","static":false,"name":"outputDWARFLocationInfo","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"outputDWARFDIEInfo","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"elideTypedefsWithSameName","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"importDataTypes","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"importFuncs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"importLimitDIECount","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"nameLengthCutoff","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"preloadAllDIEs","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"outputInlineFuncComments","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"outputLexicalBlockComments","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"copyRenameAnonTypes","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"createFuncSignatures","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"organizeTypesBySourceFile","comment":"","type_short":"boolean","constant_value":null}]}
