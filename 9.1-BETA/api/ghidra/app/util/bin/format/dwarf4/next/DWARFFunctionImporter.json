{"implements":[],"javadoc":"Iterates through all DIEAs in a {@link DWARFProgram} and creates Ghidra functions\n and variables.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"hasDWARFProgModule","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"prog","comment":"","type_short":"Program"},{"type_long":"java.lang.String","name":"progModuleName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFProgram","name":"prog","comment":"","type_short":"DWARFProgram"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeManager","name":"dwarfDTM","comment":"","type_short":"DWARFDataTypeManager"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","name":"importOptions","comment":"","type_short":"DWARFImportOptions"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportSummary","name":"importSummary","comment":"","type_short":"DWARFImportSummary"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"shouldProcess","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"importFunctions","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"logImportErrorSummary","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBadSubprogramDef","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"markAllChildrenAsProcessed","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"die","comment":"","type_short":"DebugInfoEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processSubprogram","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processFuncChildren","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"","type_short":"DWARFFunction"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new {@link DWARFVariable} from the specified {@link DIEAggregate DIEA} and\n as a child of the specified function (if not null).\n <p>\n Used to process DW_TAG_variable as well as DW_TAG_formal_parameters.\n@param diea - the diea that specifies the variable\n@param dfunc - function that contains this variable, or null if static variable\n@param lexicalStart - not used by any caller\n@param firstUseAddr offset dfunc or -1 if formal parameter\n@return \n@throws IOException\n@throws InvalidInputException","static":false,"name":"processVariable","comment":"Creates a new DWARFVariable from the specified DIEAggregate and\n as a child of the specified function (if not null).\n \n Used to process DW_TAG_variable as well as DW_TAG_formal_parameters.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"- the diea that specifies the variable","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"- function that contains this variable, or null if static variable","type_short":"DWARFFunction"},{"type_long":"ghidra.program.model.address.Address","name":"lexicalStart","comment":"- not used by any caller","type_short":"Address"},{"type_long":"long","name":"firstUseAddr","comment":"offset dfunc or -1 if formal parameter","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","comment":"","type_short":"DWARFVariable"}},{"javadoc":"Process lexical block entries.\n@param entry DIE\n@param unit current compilation unit\n@param frameBase Location list of the current frame\n@param function parent function of the lexical block\n@throws IOException\n@throws InvalidInputException\n@throws DWARFExpressionException","static":false,"name":"processLexicalBlock","comment":"Process lexical block entries.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"","type_short":"DWARFFunction"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processInlinedSubroutine","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"","type_short":"DWARFFunction"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a function def signature for the function and adds it as a comment, either\n EOL or PRE depending on how small the inline func is.\n@param diea\n@param blockStart\n@param blockEnd","static":false,"name":"addCommentsForInlineFunc","comment":"Constructs a function def signature for the function and adds it as a comment, either\n EOL or PRE depending on how small the inline func is.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"},{"type_long":"ghidra.program.model.address.Address","name":"blockStart","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"blockEnd","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Appends a comment at the specified address\n@param address the address to set the PRE comment\n@param commentType ie. CodeUnit.PRE_COMMENT\n@param comment the PRE comment\n@param sep the characters to use to separate existing comments\n@return true if the comment was successfully set","static":false,"name":"appendComment","comment":"Appends a comment at the specified address","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to set the PRE comment","type_short":"Address"},{"type_long":"int","name":"commentType","comment":"ie. CodeUnit.PRE_COMMENT","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"the PRE comment","type_short":"String"},{"type_long":"java.lang.String","name":"sep","comment":"the characters to use to separate existing comments","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the comment was successfully set","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toAddr","comment":"","params":[{"type_long":"java.lang.Number","name":"offset","comment":"","type_short":"Number"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Set external entry point.  If declared external add as entry pointer, otherwise\n clear as entry point if previously addeds.\n@param external true if declared external and false otherwise\n@param address address of the entry point","static":false,"name":"setExternalEntryPoint","comment":"Set external entry point.  If declared external add as entry pointer, otherwise\n clear as entry point if previously addeds.","params":[{"type_long":"boolean","name":"external","comment":"true if declared external and false otherwise","type_short":"boolean"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"address of the entry point","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isArrayDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.Array","name":"arrayDT","comment":"","type_short":"Array"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isStructDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.Structure","name":"structDT","comment":"","type_short":"Structure"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isPointerDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.Pointer","name":"pdt","comment":"","type_short":"Pointer"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isSimpleDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isEnumDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.Enum","name":"enumDT","comment":"","type_short":"Enum"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isDataTypeCompatibleWithExistingData","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createVariable","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","name":"dni","comment":"","type_short":"DWARFNameInfo"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Data","comment":"","type_short":"Data"}},{"javadoc":"","static":false,"name":"outputGlobal","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.data.DataType","name":"baseDataType","comment":"","type_short":"DataType"},{"type_long":"boolean","name":"external","comment":"","type_short":"boolean"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFSourceInfo","name":"sourceInfo","comment":"","type_short":"DWARFSourceInfo"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFNameInfo","name":"dni","comment":"","type_short":"DWARFNameInfo"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the location that corresponds to the entry point of the function If\n there is only a single location, assume it applies to whole function\n@param locList\n@param funcAddr\n@return the byte array corresponding to the location expression","static":true,"name":"getTopLocation","comment":"Get the location that corresponds to the entry point of the function If\n there is only a single location, assume it applies to whole function","params":[{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFLocation>","name":"locList","comment":"","type_short":"List"},{"type_long":"long","name":"funcAddr","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFLocation","comment":"the byte array corresponding to the location expression","type_short":"DWARFLocation"}},{"javadoc":"","static":true,"name":"findFirstUse","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"currentProgram","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"long","name":"funcAddr","comment":"","type_short":"long"},{"type_long":"long","name":"firstUseAddr","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Move an address range into a fragment.\n@param cu current compile unit\n@param name name of the fragment\n@param start start address of the fragment\n@param end end address of the fragment\n@param fileID offset of the file name in the debug_line section","static":false,"name":"moveIntoFragment","comment":"Move an address range into a fragment.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of the fragment","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the fragment","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"end address of the fragment","type_short":"Address"},{"type_long":"java.lang.String","name":"fileName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"For some DWARF debugger strategies, the storage location provided for a formal parameter is NOT the initial storage\n of the parameter and does not match the calling convention.  If the storage location provided is in the local variable\n range for the function, this is an indication the storage does not represent the calling convention\n@param dfunc is the DWARF function data to test\n@return true if the storage locations represent the calling convention","static":false,"name":"buildVariable","comment":"For some DWARF debugger strategies, the storage location provided for a formal parameter is NOT the initial storage\n of the parameter and does not match the calling convention.  If the storage location provided is in the local variable\n range for the function, this is an indication the storage does not represent the calling convention","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"dvar","comment":"","type_short":"DWARFVariable"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"true if the storage locations represent the calling convention","type_short":"Variable"}},{"javadoc":"","static":false,"name":"buildReturnVariable","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"dvar","comment":"","type_short":"DWARFVariable"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Variable","comment":"","type_short":"Variable"}},{"javadoc":"","static":false,"name":"buildParameter","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"int","name":"i","comment":"","type_short":"int"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"dvar","comment":"","type_short":"DWARFVariable"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"funcDIEA","comment":"","type_short":"DIEAggregate"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.Parameter","comment":"","type_short":"Parameter"}},{"javadoc":"","static":false,"name":"buildVarnodes","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"dvar","comment":"","type_short":"DWARFVariable"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode[]","comment":"","type_short":"ghidra.program.model.pcode.Varnode[]"}},{"javadoc":"","static":false,"name":"checkThisParameter","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"var","comment":"","type_short":"DWARFVariable"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"outputFunction","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"","type_short":"DWARFFunction"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createFunction","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFFunction","name":"dfunc","comment":"","type_short":"DWARFFunction"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"","type_short":"Function"}},{"javadoc":"Changes the names of the parameters in the array to unique names that won't conflict with\n any other names in the function's namespace when the parameters are used to replace\n the existing parameters in the function. Appends an integer number to\n the base name if necessary to create a unique name in the function's namespace.\n@param function the function\n@param parameters the parameters that need names that won't conflict. These should be\n Impl objects and not DB objects since their names will be changed within this method.\n@throws InvalidInputException invalid parameter name\n@throws DuplicateNameException (should not occur on non-DB parameter)","static":false,"name":"setUniqueParameterNames","comment":"Changes the names of the parameters in the array to unique names that won't conflict with\n any other names in the function's namespace when the parameters are used to replace\n the existing parameters in the function. Appends an integer number to\n the base name if necessary to create a unique name in the function's namespace.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"the function","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Parameter[]","name":"parameters","comment":"the parameters that need names that won't conflict. These should be\n Impl objects and not DB objects since their names will be changed within this method.","type_short":"ghidra.program.model.listing.Parameter[]"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"(should not occur on non-DB parameter)","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"invalid parameter name","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get a unique parameter name for a parameter when all parameter names are being replaced.\n If the specified name is  a default parameter name then the original default name passed\n in is returned.\n@param symbolTable the symbol table containing symbols for the indicated namespace\n@param namespace the namespace containing symbol names to check.\n@param baseName the base name to append with an integer number if necessary\n to create a unique name.\n@param namesNotToBeUsed set of names that should not be used when determining a unique name.\n@return a unique parameter name","static":true,"name":"getUniqueReplacementParameterName","comment":"Get a unique parameter name for a parameter when all parameter names are being replaced.\n If the specified name is  a default parameter name then the original default name passed\n in is returned.","params":[{"type_long":"ghidra.program.model.symbol.SymbolTable","name":"symbolTable","comment":"the symbol table containing symbols for the indicated namespace","type_short":"SymbolTable"},{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.util.Set<java.lang.String>","name":"namesNotToBeUsed","comment":"set of names that should not be used when determining a unique name.","type_short":"Set"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a unique parameter name","type_short":"String"}},{"javadoc":"Gets a unique name in the indicated namespace by appending an integer number if necessary\n and ignoring any conflicts with existing parameters.\n@param symbolTable the symbol table containing symbols for the indicated namespace\n@param namespace the namespace containing symbol names to check.\n@param baseName the base name to append with an integer number if necessary to create a\n unique name.\n@param namesNotToBeUsed set of names that should not be used when determining a unique name.\n@return an unused unique name within the namespace ignoring current parameter names and\n that doesn't conflict with any in the set of names not to be used.","static":true,"name":"getUniqueNameIgnoringCurrentParameters","comment":"Gets a unique name in the indicated namespace by appending an integer number if necessary\n and ignoring any conflicts with existing parameters.","params":[{"type_long":"ghidra.program.model.symbol.SymbolTable","name":"symbolTable","comment":"the symbol table containing symbols for the indicated namespace","type_short":"SymbolTable"},{"type_long":"ghidra.program.model.symbol.Namespace","name":"namespace","comment":"the namespace containing symbol names to check.","type_short":"Namespace"},{"type_long":"java.lang.String","name":"baseName","comment":"the base name to append with an integer number if necessary to create a\n unique name.","type_short":"String"},{"type_long":"java.util.Set<java.lang.String>","name":"namesNotToBeUsed","comment":"set of names that should not be used when determining a unique name.","type_short":"Set"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"an unused unique name within the namespace ignoring current parameter names and\n that doesn't conflict with any in the set of names not to be used.","type_short":"String"}},{"javadoc":"","static":true,"name":"areAllParamaters","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.symbol.Symbol>","name":"symbols","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"commitPrototype","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Variable","name":"returnVariable","comment":"","type_short":"Variable"},{"type_long":"java.util.ArrayList<ghidra.program.model.listing.Parameter>","name":"params","comment":"","type_short":"ArrayList"},{"type_long":"ghidra.program.model.lang.PrototypeModel","name":"protoModel","comment":"","type_short":"PrototypeModel"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"commitLocal","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFFunctionImporter.DWARFVariable","name":"dvar","comment":"","type_short":"DWARFVariable"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"processLabel","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"diea","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DWARFFunctionImporter","comment":"Iterates through all DIEAs in a DWARFProgram and creates Ghidra functions\n and variables.","fields":[{"type_long":"int","javadoc":"Inline funcs shorter than this value receive comments at EOL instead of PRE\n (ie. inline funcs that reduce down to a single operand or operand value)","static":true,"name":"INLINE_FUNC_SHORT_LEN","comment":"Inline funcs shorter than this value receive comments at EOL instead of PRE\n (ie. inline funcs that reduce down to a single operand or operand value)","type_short":"int","constant_value":"8"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFProgram","javadoc":"","static":false,"name":"prog","comment":"","type_short":"DWARFProgram","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"currentProgram","comment":"","type_short":"Program","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFDataTypeManager","javadoc":"","static":false,"name":"dwarfDTM","comment":"","type_short":"DWARFDataTypeManager","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportOptions","javadoc":"","static":false,"name":"importOptions","comment":"","type_short":"DWARFImportOptions","constant_value":null},{"type_long":"ghidra.program.model.listing.ProgramModule","javadoc":"","static":false,"name":"rootModule","comment":"","type_short":"ProgramModule","constant_value":null},{"type_long":"java.util.Set<java.lang.Long>","javadoc":"","static":false,"name":"processedOffsets","comment":"","type_short":"Set","constant_value":null},{"type_long":"java.util.Map<ghidra.program.model.address.Address,java.lang.String>","javadoc":"","static":false,"name":"functionsProcessed","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Set<ghidra.program.model.address.Address>","javadoc":"","static":false,"name":"variablesProcesesed","comment":"","type_short":"Set","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFImportSummary","javadoc":"","static":false,"name":"importSummary","comment":"","type_short":"DWARFImportSummary","constant_value":null}]}
