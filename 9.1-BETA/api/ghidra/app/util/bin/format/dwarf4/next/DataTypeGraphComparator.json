{"implements":[],"javadoc":"Compares two {@link DataType} directed graphs, calling a\n {@link DataTypePairObserver#observe(DataType, DataType) method} that can observe each\n DataType pair that occupy equivalent positions in each graph.\n <p>\n The first\/left DataType graph is assumed to be composed of {@link DataTypeImpl} instances,\n and the second\/right DataType graph is assumed to be composed of DataType DB instances.\n <p>\n Only DataTypes in the left graph are followed and may lead to a possible match with\n the right graph.\n <p>\n This class is used to help transfer mappings that point to impl DataTypes to also point them\n at the resultant 'db' DataTypes that are created by the DataTypeManager.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Compares two {@link DataType datatypes} graphs, calling the observer callback\n for each paired DataType that occupy equivalent positions in each graph.\n <p>\n@param preDT - Original (impl) DataType from before submitting to DataTypeManager.\n@param postDT - Result DataType from the DataTypeManager\n@param observer - Callback called for each position in the preDT graph that has a matching\n position in the postDT graph.","static":true,"name":"compare","comment":"Compares two DataType graphs, calling the observer callback\n for each paired DataType that occupy equivalent positions in each graph.\n ","params":[{"type_long":"ghidra.program.model.data.DataType","name":"preDT","comment":"- Original (impl) DataType from before submitting to DataTypeManager.","type_short":"DataType"},{"type_long":"ghidra.program.model.data.DataType","name":"postDT","comment":"- Result DataType from the DataTypeManager","type_short":"DataType"},{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DataTypeGraphComparator.DataTypePairObserver","name":"observer","comment":"- Callback called for each position in the preDT graph that has a matching\n position in the postDT graph.","type_short":"DataTypePairObserver"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DataTypeGraphComparator.DataTypePairObserver","name":"observer","comment":"","type_short":"DataTypePairObserver"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.DataType","name":"preDT","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.data.DataType","name":"postDT","comment":"","type_short":"DataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.Pointer","name":"pre","comment":"","type_short":"Pointer"},{"type_long":"ghidra.program.model.data.Pointer","name":"post","comment":"","type_short":"Pointer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.Enum","name":"pre","comment":"","type_short":"Enum"},{"type_long":"ghidra.program.model.data.Enum","name":"post","comment":"","type_short":"Enum"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.Array","name":"pre","comment":"","type_short":"Array"},{"type_long":"ghidra.program.model.data.Array","name":"post","comment":"","type_short":"Array"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.TypeDef","name":"pre","comment":"","type_short":"TypeDef"},{"type_long":"ghidra.program.model.data.TypeDef","name":"post","comment":"","type_short":"TypeDef"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.FunctionDefinition","name":"pre","comment":"","type_short":"FunctionDefinition"},{"type_long":"ghidra.program.model.data.FunctionDefinition","name":"post","comment":"","type_short":"FunctionDefinition"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.Structure","name":"pre","comment":"","type_short":"Structure"},{"type_long":"ghidra.program.model.data.Structure","name":"post","comment":"","type_short":"Structure"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"compare","comment":"","params":[{"type_long":"ghidra.program.model.data.Union","name":"pre","comment":"","type_short":"Union"},{"type_long":"ghidra.program.model.data.Union","name":"post","comment":"","type_short":"Union"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataTypeGraphComparator","comment":"Compares two DataType directed graphs, calling a\n DataTypePairObserver#observe(DataType, DataType) that can observe each\n DataType pair that occupy equivalent positions in each graph.\n \n The first\/left DataType graph is assumed to be composed of DataTypeImpl instances,\n and the second\/right DataType graph is assumed to be composed of DataType DB instances.\n \n Only DataTypes in the left graph are followed and may lead to a possible match with\n the right graph.\n \n This class is used to help transfer mappings that point to impl DataTypes to also point them\n at the resultant 'db' DataTypes that are created by the DataTypeManager.","fields":[{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DataTypeGraphComparator.DataTypePairObserver","javadoc":"","static":false,"name":"observer","comment":"","type_short":"DataTypePairObserver","constant_value":null},{"type_long":"java.util.IdentityHashMap<ghidra.program.model.data.DataType,ghidra.program.model.data.DataType>","javadoc":"Object instance identity map used to prevent recursive loops when following\n DataType pointers and such.  DataType path\/name mapping can't be used because\n there is no guarantee that impl DataType's have unique names.\n <p>\n Using a Map as a Set because there is no IdentityHashSet. (the value of the map entry\n is not used, just the key set)","static":false,"name":"visitedTypes","comment":"Object instance identity map used to prevent recursive loops when following\n DataType pointers and such.  DataType path\/name mapping can't be used because\n there is no guarantee that impl DataType's have unique names.\n \n Using a Map as a Set because there is no IdentityHashSet. (the value of the map entry\n is not used, just the key set)","type_short":"IdentityHashMap","constant_value":null}]}
