{"implements":[],"javadoc":"DIEAggregate groups related {@link DebugInfoEntry} records together in a single interface\n for querying attribute values.\n <p>\n Information about program elements are written into the .debug_info as partial snapshots\n of the element, with later follow-up records that more fully specify the program element.\n <p>\n (For instance, a declaration-only DIE that introduces the name of a structure type\n will be found at the beginning of a compilation unit, followed later by a DIE that\n specifies the contents of the structure type)\n <p>\n A DIEAggregate groups these {@link DebugInfoEntry} records under one interface so a fully\n specified view of the program element can be presented.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a {@link DIEAggregate} starting from a 'head' {@link DebugInfoEntry} instance.\n <p>\n DW_AT_abstract_origin and DW_AT_specification attributes are followed to find the previous\n {@link DebugInfoEntry} instances.\n <p>\n@param die starting DIE record\n@return new {@link DIEAggregate} made up of the starting DIE and all DIEs that it points\n to via abstract_origin and spec attributes.","static":true,"name":"createFromHead","comment":"Creates a DIEAggregate starting from a 'head' DebugInfoEntry instance.\n \n DW_AT_abstract_origin and DW_AT_specification attributes are followed to find the previous\n DebugInfoEntry instances.\n ","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"die","comment":"starting DIE record","type_short":"DebugInfoEntry"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"new DIEAggregate made up of the starting DIE and all DIEs that it points\n to via abstract_origin and spec attributes.","type_short":"DIEAggregate"}},{"javadoc":"Creates a new {@link DIEAggregate} from the contents of the specified DIEA, using\n all the source's {@link DebugInfoEntry} fragments except for the head fragment\n which is skipped.\n <p>\n Used when a DIEA is composed of a head DIE with a different TAG type than the rest of\n the DIEs.  (ie. a dw_tag_call_site -> dw_tag_sub DIEA)\n@param source\n@return ","static":true,"name":"createSkipHead","comment":"Creates a new DIEAggregate from the contents of the specified DIEA, using\n all the source's DebugInfoEntry fragments except for the head fragment\n which is skipped.\n \n Used when a DIEA is composed of a head DIE with a different TAG type than the rest of\n the DIEs.  (ie. a dw_tag_call_site - dw_tag_sub DIEA)","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","name":"source","comment":"","type_short":"DIEAggregate"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"Create a {@link DIEAggregate} from a single {@link DebugInfoEntry DIE}.\n <p>\n Mainly useful early in the {@link DWARFCompilationUnit}'s bootstrapping process\n when it needs to read values from DIEs.\n <p>\n@param die\n@return ","static":true,"name":"createSingle","comment":"Create a DIEAggregate from a single DebugInfoEntry.\n \n Mainly useful early in the DWARFCompilationUnit's bootstrapping process\n when it needs to read values from DIEs.\n ","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"die","comment":"","type_short":"DebugInfoEntry"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"Private ctor to force use of the static factory methods {@link #createFromHead(DebugInfoEntry)}\n and {@link #createSingle(DebugInfoEntry)}.\n@param die","static":false,"name":"<init>","comment":"Private ctor to force use of the static factory methods #createFromHead(DebugInfoEntry)\n and #createSingle(DebugInfoEntry).","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry[]","name":"fragments","comment":"","type_short":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Used during creation process to add new DebugInfoEntry elements as they are found by\n following links in the current set of DIEs.\n <p>\n Adds the new DIE fragment to the front of the fragment array list, which is reversed\n from how it needs to be when this DIEA is being used.  The caller needs to\n call {@link #flipFragments()} after the build phase to reverse the order of the\n DIE fragments list so that querying for attribute values will return the correct values.\n@param newDIE","static":false,"name":"addFragment","comment":"Used during creation process to add new DebugInfoEntry elements as they are found by\n following links in the current set of DIEs.\n \n Adds the new DIE fragment to the front of the fragment array list, which is reversed\n from how it needs to be when this DIEA is being used.  The caller needs to\n call #flipFragments() after the build phase to reverse the order of the\n DIE fragments list so that querying for attribute values will return the correct values.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","name":"newDIE","comment":"","type_short":"DebugInfoEntry"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"flipFragments","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFragmentCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getOffset","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getOffsets","comment":"","params":[],"throws":[],"return":{"type_long":"long[]","comment":"","type_short":"long[]"}},{"javadoc":"Returns true if any of the {@link DebugInfoEntry DIEs} that makeup this aggregate\n have the specified offset.\n@param offset DIE offset to search for\n@return true if this {@link DIEAggregate} has a fragment DIE at that offset.","static":false,"name":"hasOffset","comment":"Returns true if any of the DebugInfoEntry that makeup this aggregate\n have the specified offset.","params":[{"type_long":"long","name":"offset","comment":"DIE offset to search for","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this DIEAggregate has a fragment DIE at that offset.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDeclOffset","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns {@link #getOffset()} as a hex string.\n@return ","static":false,"name":"getHexOffset","comment":"Returns #getOffset() as a hex string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getTag","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getCompilationUnit","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFCompilationUnit","comment":"","type_short":"DWARFCompilationUnit"}},{"javadoc":"","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.next.DWARFProgram","comment":"","type_short":"DWARFProgram"}},{"javadoc":"Returns the last {@link DebugInfoEntry DIE} fragment, ie. the decl DIE.\n@return ","static":false,"name":"getLastFragment","comment":"Returns the last DebugInfoEntry fragment, ie. the decl DIE.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","comment":"","type_short":"DebugInfoEntry"}},{"javadoc":"Returns the first {@link DebugInfoEntry DIE} fragment, ie. the spec or abstract_origin\n DIE.\n@return ","static":false,"name":"getHeadFragment","comment":"Returns the first DebugInfoEntry fragment, ie. the spec or abstract_origin\n DIE.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","comment":"","type_short":"DebugInfoEntry"}},{"javadoc":"","static":false,"name":"getDeclParent","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"","static":false,"name":"getParent","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"Returns the depth of the head fragment, where depth is defined as\n the distance between the DIE and the root DIE of the owning compilation\n unit.\n <p>\n The root die would return 0, the children of the root will return 1, etc.\n <p>\n This value matches the nesting value shown when dumping DWARF\n info using 'readelf'.\n@return ","static":false,"name":"getDepth","comment":"Returns the depth of the head fragment, where depth is defined as\n the distance between the DIE and the root DIE of the owning compilation\n unit.\n \n The root die would return 0, the children of the root will return 1, etc.\n \n This value matches the nesting value shown when dumping DWARF\n info using 'readelf'.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"findAttribute","comment":"","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate.AttrInfo","comment":"","type_short":"AttrInfo"}},{"javadoc":"Finds a {@link DWARFAttributeValue attribute} with a matching {@link DWARFAttribute} type\n <p>\n Returns null if the attribute does not exist or is wrong java class type.\n <p>\n Attributes are searched for in each fragment in this aggregate, starting with the\n 'head' fragment, progressing toward the 'decl' fragment.\n <p>\n@param attribute See {@link DWARFAttribute}\n@param clazz must be derived from {@link DWARFAttributeValue}\n@return ","static":false,"name":"getAttribute","comment":"Finds a DWARFAttributeValue with a matching DWARFAttribute type\n \n Returns null if the attribute does not exist or is wrong java class type.\n \n Attributes are searched for in each fragment in this aggregate, starting with the\n 'head' fragment, progressing toward the 'decl' fragment.\n ","params":[{"type_long":"int","name":"attribute","comment":"See DWARFAttribute","type_short":"int"},{"type_long":"java.lang.Class<T>","name":"clazz","comment":"must be derived from DWARFAttributeValue","type_short":"Class"}],"throws":[],"return":{"type_long":"T","comment":"","type_short":"T"}},{"javadoc":"","static":false,"name":"getAttribute","comment":"","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFAttributeValue","comment":"","type_short":"DWARFAttributeValue"}},{"javadoc":"Returns the value of the requested attribute, or -defaultValue- if the\n attribute is missing.\n@param attribute\n@param defaultValue\n@return ","static":false,"name":"getLong","comment":"Returns the value of the requested attribute, or -defaultValue- if the\n attribute is missing.","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"long","name":"defaultValue","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the boolean value of the requested attribute, or -defaultValue- if\n the attribute is missing or not the correct type.\n <p>\n@param attribute\n@param defaultValue\n@return ","static":false,"name":"getBool","comment":"Returns the boolean value of the requested attribute, or -defaultValue- if\n the attribute is missing or not the correct type.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"boolean","name":"defaultValue","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the string value of the requested attribute, or -defaultValue- if\n the attribute is missing or not the correct type.\n <p>\n@param attribute\n@param defaultValue\n@return ","static":false,"name":"getString","comment":"Returns the string value of the requested attribute, or -defaultValue- if\n the attribute is missing or not the correct type.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"java.lang.String","name":"defaultValue","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the string value of the {@link DWARFAttribute#DW_AT_name dw_at_name} attribute,\n or null if it is missing.\n <p>\n@return ","static":false,"name":"getName","comment":"Returns the string value of the DWARFAttribute#DW_AT_name attribute,\n or null if it is missing.\n ","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns the unsigned long integer value of the requested attribute, or -defaultValue-\n if the attribute is missing.\n <p>\n The 'unsigned'ness of this method refers to how the binary value is read from\n the dwarf information (ie. a value with the high bit set is not treated as signed).\n <p>\n The -defaultValue- parameter can accept a negative value.\n@param attribute\n@param defaultValue\n@return ","static":false,"name":"getUnsignedLong","comment":"Returns the unsigned long integer value of the requested attribute, or -defaultValue-\n if the attribute is missing.\n \n The 'unsigned'ness of this method refers to how the binary value is read from\n the dwarf information (ie. a value with the high bit set is not treated as signed).\n \n The -defaultValue- parameter can accept a negative value.","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"long","name":"defaultValue","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the {@link DebugInfoEntry die} instance pointed to by the requested attribute,\n or null if the attribute does not exist.\n <p>\n@param attribute\n@return ","static":false,"name":"getRefDIE","comment":"Returns the DebugInfoEntry instance pointed to by the requested attribute,\n or null if the attribute does not exist.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry","comment":"","type_short":"DebugInfoEntry"}},{"javadoc":"","static":false,"name":"getRef","comment":"","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"Returns the DIE pointed to by a DW_AT_containing_type attribute.\n@return DIEA pointed to by the DW_AT_containing_type attribute, or null if not present.","static":false,"name":"getContainingTypeRef","comment":"Returns the DIE pointed to by a DW_AT_containing_type attribute.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"DIEA pointed to by the DW_AT_containing_type attribute, or null if not present.","type_short":"DIEAggregate"}},{"javadoc":"","static":false,"name":"getTypeRef","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf4.DIEAggregate","comment":"","type_short":"DIEAggregate"}},{"javadoc":"","static":false,"name":"hasAttribute","comment":"","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the signed integer value of the requested attribute after resolving\n any DWARF expression opcodes.\n <p>\n@param attribute\n@param defaultValue\n@return \n@throws IOException\n@throws DWARFExpressionException","static":false,"name":"parseInt","comment":"Returns the signed integer value of the requested attribute after resolving\n any DWARF expression opcodes.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"int","name":"defaultValue","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the unsigned integer value of the requested attribute after resolving\n any DWARF expression opcodes.\n <p>\n@param attribute\n@param defaultValue\n@return \n@throws IOException\n@throws DWARFExpressionException","static":false,"name":"parseUnsignedLong","comment":"Returns the unsigned integer value of the requested attribute after resolving\n any DWARF expression opcodes.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"long","name":"defaultValue","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"assertValidInt","comment":"","params":[{"type_long":"long","name":"l","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"assertValidUInt","comment":"","params":[{"type_long":"long","name":"l","comment":"","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the unsigned integer value of the requested attribute after resolving\n any DWARF expression opcodes.\n@param attribute\n@param defaultValue\n@return \n@throws IOException\n@throws DWARFExpressionException","static":false,"name":"parseDataMemberOffset","comment":"Returns the unsigned integer value of the requested attribute after resolving\n any DWARF expression opcodes.","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"},{"type_long":"int","name":"defaultValue","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the location list info specified in the attribute.\n <p>\n Numeric attributes are treated as offsets into the debug_loc section.\n <p>\n Blob attributes are treated as a single location record for the current CU, using the\n blob bytes as the DWARF expression of the location record.\n <p>\n@param attribute\n@return \n@throws IOException","static":false,"name":"getAsLocation","comment":"Returns the location list info specified in the attribute.\n \n Numeric attributes are treated as offsets into the debug_loc section.\n \n Blob attributes are treated as a single location record for the current CU, using the\n blob bytes as the DWARF expression of the location record.\n ","params":[{"type_long":"int","name":"attribute","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFLocation>","comment":"","type_short":"List"}},{"javadoc":"Evaluate the DWARFExpression located in the DWARFLocation object in the context of\n this DIEA.\n <p>\n@param location\n@return \n@throws IOException\n@throws DWARFExpressionException","static":false,"name":"evaluateLocation","comment":"Evaluate the DWARFExpression located in the DWARFLocation object in the context of\n this DIEA.\n ","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.DWARFLocation","name":"location","comment":"","type_short":"DWARFLocation"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.app.util.bin.format.dwarf4.expression.DWARFExpressionException","comment":"","type_short":"DWARFExpressionException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Return a list of DWARF locations read from the debug_loc section.\n@param offset offset into the debug_loc section\n@return list of DWARF locations (address range and location expression)\n@throws IOException if an I\/O error occurs","static":false,"name":"readDebugLocList","comment":"Return a list of DWARF locations read from the debug_loc section.","params":[{"type_long":"long","name":"offset","comment":"offset into the debug_loc section","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFLocation>","comment":"list of DWARF locations (address range and location expression)","type_short":"List"}},{"javadoc":"","static":false,"name":"_exprBytesAsLocation","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.dwarf4.attribs.DWARFBlobAttribute","name":"attr","comment":"","type_short":"DWARFBlobAttribute"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFLocation>","comment":"","type_short":"List"}},{"javadoc":"Returns true if this DIE has a DW_AT_declaration attribute and\n does NOT have a matching inbound DW_AT_specification reference.\n <p>\n@return ","static":false,"name":"isDanglingDeclaration","comment":"Returns true if this DIE has a DW_AT_declaration attribute and\n does NOT have a matching inbound DW_AT_specification reference.\n ","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this DIE has a DW_AT_declaration attribute.\n@return ","static":false,"name":"isPartialDeclaration","comment":"Returns true if this DIE has a DW_AT_declaration attribute.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isNamedType","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the children of this DIE are within a new namespace.\n <p>\n Ie. Namespaces, subprogram, class, interface, struct, union, enum\n@return ","static":false,"name":"isNameSpaceContainer","comment":"Returns true if the children of this DIE are within a new namespace.\n \n Ie. Namespaces, subprogram, class, interface, struct, union, enum","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this DIE defines a structure-like element (class, struct, interface, union).\n@return ","static":false,"name":"isStructureType","comment":"Returns true if this DIE defines a structure-like element (class, struct, interface, union).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isFuncDefType","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Parses a range list from the debug_ranges section.\n See DWARF4 Section 2.17.3 (Non-Contiguous Address Ranges).\n <p>\n This method is similar to {@link DWARFLocation#parseLocationList(long, DebugInfoEntry)}\n and may have the same gotchas that need to be ported over.\n <p>\n@param attribute attribute ie. {@link DWARFAttribute#DW_AT_ranges}\n@param debug_ranges debug_ranges section byte provider\n@return list of ranges\n@throws IOException if an I\/O error occurs","static":false,"name":"parseDebugRange","comment":"Parses a range list from the debug_ranges section.\n See DWARF4 Section 2.17.3 (Non-Contiguous Address Ranges).\n \n This method is similar to DWARFLocation#parseLocationList(long, DebugInfoEntry)\n and may have the same gotchas that need to be ported over.\n ","params":[{"type_long":"int","name":"attribute","comment":"attribute ie. DWARFAttribute#DW_AT_ranges","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf4.DWARFRange>","comment":"list of ranges","type_short":"List"}},{"javadoc":"Returns the value of the DW_AT_low_pc attribute, if it exists.\n@param defaultValue\n@return ","static":false,"name":"getLowPC","comment":"Returns the value of the DW_AT_low_pc attribute, if it exists.","params":[{"type_long":"long","name":"defaultValue","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the value of the DW_AT_high_pc attribute, adjusted\n if necessary by the value of DW_AT_low_pc.\n <p>\n@return \n@throws IOException if the DW_AT_high_pc attribute isn't a numeric\n attribute, or if the DW_AT_low_pc value is needed and is not present.","static":false,"name":"getHighPC","comment":"Returns the value of the DW_AT_high_pc attribute, adjusted\n if necessary by the value of DW_AT_low_pc.\n ","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if the DW_AT_high_pc attribute isn't a numeric\n attribute, or if the DW_AT_low_pc value is needed and is not present.","type_short":"IOException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"DIEAggregate","comment":"DIEAggregate groups related DebugInfoEntry records together in a single interface\n for querying attribute values.\n \n Information about program elements are written into the .debug_info as partial snapshots\n of the element, with later follow-up records that more fully specify the program element.\n \n (For instance, a declaration-only DIE that introduces the name of a structure type\n will be found at the beginning of a compilation unit, followed later by a DIE that\n specifies the contents of the structure type)\n \n A DIEAggregate groups these DebugInfoEntry records under one interface so a fully\n specified view of the program element can be presented.","fields":[{"type_long":"int","javadoc":"Sanity check upper limit on how many DIE records can be in a aggregate.","static":true,"name":"MAX_FRAGMENT_COUNT","comment":"Sanity check upper limit on how many DIE records can be in a aggregate.","type_short":"int","constant_value":"20"},{"type_long":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry[]","javadoc":"A list of {@link DebugInfoEntry DIEs} that make up this DWARF program element, with\n the 'head'-most listed first, followed by earlier less specified DIEs, ending with\n the first 'decl' DIE in the last element.\n <p>\n For example:<p>\n [0] - head<br>\n [1] - specification<br>\n [2] - decl<br>\n <p>\n A primitive array is used instead of a java.util.List because of memory constraint issues\n and also that the set of fragments does not change after the bootstrap process in\n {@link #createFromHead(DebugInfoEntry) createFromHead()}.","static":false,"name":"fragments","comment":"A list of DebugInfoEntry that make up this DWARF program element, with\n the 'head'-most listed first, followed by earlier less specified DIEs, ending with\n the first 'decl' DIE in the last element.\n \n For example:\n [0] - head\n [1] - specification\n [2] - decl\n \n A primitive array is used instead of a java.util.List because of memory constraint issues\n and also that the set of fragments does not change after the bootstrap process in\n #createFromHead(DebugInfoEntry).","type_short":"ghidra.app.util.bin.format.dwarf4.DebugInfoEntry[]","constant_value":null}]}
