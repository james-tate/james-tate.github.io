{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the size in bytes of the statement information for this \n compilation unit (not including the total_length field itself).\n@return size in bytes of the statement information","static":false,"name":"getTotalLength","comment":"Returns the size in bytes of the statement information for this \n compilation unit (not including the total_length field itself).","params":[],"throws":[],"return":{"type_long":"int","comment":"size in bytes of the statement information","type_short":"int"}},{"javadoc":"Returns the version identifier for the statement information format.\n@return the version identifier for the statement information format","static":false,"name":"getVersion","comment":"Returns the version identifier for the statement information format.","params":[],"throws":[],"return":{"type_long":"int","comment":"the version identifier for the statement information format","type_short":"int"}},{"javadoc":"Returns the number of bytes following the prologue_length field to the \n beginning of the first byte of the statement program itself.\n@return the number of bytes following the prologue_length","static":false,"name":"getPrologueLength","comment":"Returns the number of bytes following the prologue_length field to the \n beginning of the first byte of the statement program itself.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of bytes following the prologue_length","type_short":"int"}},{"javadoc":"Returns the size in bytes of the smallest target machine instruction. \n Statement program opcodes that alter the address register first \n multiply their operands by this value.\n@return the size in bytes of the smallest target machine instruction","static":false,"name":"getMinimumInstructionLength","comment":"Returns the size in bytes of the smallest target machine instruction. \n Statement program opcodes that alter the address register first \n multiply their operands by this value.","params":[],"throws":[],"return":{"type_long":"int","comment":"the size in bytes of the smallest target machine instruction","type_short":"int"}},{"javadoc":"Returns the initial value of the is_stmt register.\n@return the initial value of the is_stmt register","static":false,"name":"isDefaultIsStatement","comment":"Returns the initial value of the is_stmt register.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"the initial value of the is_stmt register","type_short":"boolean"}},{"javadoc":"Returns the line base value.\n This parameter affects the meaning of the special opcodes. See below.\n@return the line base value","static":false,"name":"getLineBase","comment":"Returns the line base value.\n This parameter affects the meaning of the special opcodes. See below.","params":[],"throws":[],"return":{"type_long":"int","comment":"the line base value","type_short":"int"}},{"javadoc":"Returns the line range value.\n This parameter affects the meaning of the special opcodes. See below.\n@return the line range value","static":false,"name":"getLineRange","comment":"Returns the line range value.\n This parameter affects the meaning of the special opcodes. See below.","params":[],"throws":[],"return":{"type_long":"int","comment":"the line range value","type_short":"int"}},{"javadoc":"Returns the number assigned to the first special opcode.\n@return the number assigned to the first special opcode","static":false,"name":"getOpcodeBase","comment":"Returns the number assigned to the first special opcode.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number assigned to the first special opcode","type_short":"int"}},{"javadoc":"return the array for each of the standard opcodes\n@return the array for each of the standard opcodes","static":false,"name":"getStandardOpcodeLengths","comment":"return the array for each of the standard opcodes","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"the array for each of the standard opcodes","type_short":"byte[]"}},{"javadoc":"@return each path that was searched for included source files","static":false,"name":"getIncludeDirectories","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"each path that was searched for included source files","type_short":"List"}},{"javadoc":"@return an entry for each source file that contributed to the statement","static":false,"name":"getFileNames","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf.line.FileEntry>","comment":"an entry for each source file that contributed to the statement","type_short":"List"}},{"javadoc":"Returns the file entry at the given index.\n@param fileIndex the file index\n@return the file entry at the given index","static":false,"name":"getFileNameByIndex","comment":"Returns the file entry at the given index.","params":[{"type_long":"int","name":"fileIndex","comment":"the file index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.dwarf.line.FileEntry","comment":"the file entry at the given index","type_short":"FileEntry"}},{"javadoc":"The directory index represents an entry in the \n include directories section. If the directoryIndex\n is LEB128(0), then the file was found in the current\n directory.\n@param directoryIndex the directory index\n@return the directory or current directory","static":false,"name":"getDirectoryByIndex","comment":"The directory index represents an entry in the \n include directories section. If the directoryIndex\n is LEB128(0), then the file was found in the current\n directory.","params":[{"type_long":"ghidra.app.util.bin.format.dwarf.line.LEB128","name":"directoryIndex","comment":"the directory index","type_short":"LEB128"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the directory or current directory","type_short":"String"}}],"name":"StatementProgramPrologue","comment":"","fields":[{"type_long":"int","javadoc":"","static":true,"name":"TOTAL_LENGTH_FIELD_LEN","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"PRE_PROLOGUE_LEN","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":false,"name":"totalLength","comment":"","type_short":"int","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"version","comment":"","type_short":"short","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"prologueLength","comment":"","type_short":"int","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"minimumInstructionLength","comment":"","type_short":"byte","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"defaultIsStatement","comment":"","type_short":"boolean","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"lineBase","comment":"","type_short":"byte","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"lineRange","comment":"","type_short":"byte","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"opcodeBase","comment":"","type_short":"byte","constant_value":null},{"type_long":"byte[]","javadoc":"","static":false,"name":"standardOpcodeLengths","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"java.util.List<java.lang.String>","javadoc":"","static":false,"name":"includeDirectories","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.dwarf.line.FileEntry>","javadoc":"","static":false,"name":"fileNames","comment":"","type_short":"List","constant_value":null}]}
