{"implements":[],"javadoc":"Constants for the flags field of the mach_header","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns string representation of the flag values.","static":true,"name":"getFlags","comment":"Returns string representation of the flag values.","params":[{"type_long":"int","name":"flags","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"","type_short":"List"}}],"name":"MachHeaderFlags","comment":"Constants for the flags field of the mach_header","fields":[{"type_long":"int","javadoc":"the object file has no undefined references.","static":true,"name":"MH_NOUNDEFS","comment":"the object file has no undefined references.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"the object file is the output of an incremental \n link against a base file and can't be link \n edited again.","static":true,"name":"MH_INCRLINK","comment":"the object file is the output of an incremental \n link against a base file and can't be link \n edited again.","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"the object file is input for the dynamic \n linker and can't be staticly link edited again.","static":true,"name":"MH_DYLDLINK","comment":"the object file is input for the dynamic \n linker and can't be staticly link edited again.","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"the object file's undefined references \n are bound by the dynamic linker when loaded.","static":true,"name":"MH_BINDATLOAD","comment":"the object file's undefined references \n are bound by the dynamic linker when loaded.","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"the file has its dynamic undefined references \n prebound.","static":true,"name":"MH_PREBOUND","comment":"the file has its dynamic undefined references \n prebound.","type_short":"int","constant_value":"16"},{"type_long":"int","javadoc":"the file has its read-only and read-write \n segments split.","static":true,"name":"MH_SPLIT_SEGS","comment":"the file has its read-only and read-write \n segments split.","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"the shared library init routine is to be \n run lazily via catching memory faults to its \n writeable segments (obsolete).","static":true,"name":"MH_LAZY_INIT","comment":"the shared library init routine is to be \n run lazily via catching memory faults to its \n writeable segments (obsolete).","type_short":"int","constant_value":"64"},{"type_long":"int","javadoc":"the image is using two-level name space bindings.","static":true,"name":"MH_TWOLEVEL","comment":"the image is using two-level name space bindings.","type_short":"int","constant_value":"128"},{"type_long":"int","javadoc":"the executable is forcing all images to use \n flat name space bindings.","static":true,"name":"MH_FORCE_FLAT","comment":"the executable is forcing all images to use \n flat name space bindings.","type_short":"int","constant_value":"256"},{"type_long":"int","javadoc":"this umbrella guarantees no multiple defintions \n of symbols in its sub-images so the two-level \n namespace hints can always be used.","static":true,"name":"MH_NOMULTIDEFS","comment":"this umbrella guarantees no multiple defintions \n of symbols in its sub-images so the two-level \n namespace hints can always be used.","type_short":"int","constant_value":"512"},{"type_long":"int","javadoc":"do not have dyld notify the prebinding \n agent about this executable.","static":true,"name":"MH_NOFIXPREBINDING","comment":"do not have dyld notify the prebinding \n agent about this executable.","type_short":"int","constant_value":"1024"},{"type_long":"int","javadoc":"the binary is not prebound but can have \n its prebinding redone. only used when \n MH_PREBOUND is not set.","static":true,"name":"MH_PREBINDABLE","comment":"the binary is not prebound but can have \n its prebinding redone. only used when \n MH_PREBOUND is not set.","type_short":"int","constant_value":"2048"},{"type_long":"int","javadoc":"indicates that this binary binds to all \n two-level namespace modules of its dependent \n libraries. only used when MH_PREBINDABLE and \n MH_TWOLEVEL are both set.","static":true,"name":"MH_ALLMODSBOUND","comment":"indicates that this binary binds to all \n two-level namespace modules of its dependent \n libraries. only used when MH_PREBINDABLE and \n MH_TWOLEVEL are both set.","type_short":"int","constant_value":"4096"},{"type_long":"int","javadoc":"safe to divide up the sections into \n sub-sections via symbols for dead code \n stripping.","static":true,"name":"MH_SUBSECTIONS_VIA_SYMBOLS","comment":"safe to divide up the sections into \n sub-sections via symbols for dead code \n stripping.","type_short":"int","constant_value":"8192"},{"type_long":"int","javadoc":"the binary has been canonicalized via the unprebind operation.","static":true,"name":"MH_CANONICAL","comment":"the binary has been canonicalized via the unprebind operation.","type_short":"int","constant_value":"16384"},{"type_long":"int","javadoc":"the final linked image contains external weak symbols.","static":true,"name":"MH_WEAK_DEFINES","comment":"the final linked image contains external weak symbols.","type_short":"int","constant_value":"32768"},{"type_long":"int","javadoc":"the final linked image uses weak symbols.","static":true,"name":"MH_BINDS_TO_WEAK","comment":"the final linked image uses weak symbols.","type_short":"int","constant_value":"65536"},{"type_long":"int","javadoc":"when this bit is set, all stacks in the task \n will be given stack execution privilege.\n only used in MH_EXECUTE filetypes.","static":true,"name":"MH_ALLOW_STACK_EXECUTION","comment":"when this bit is set, all stacks in the task \n will be given stack execution privilege.\n only used in MH_EXECUTE filetypes.","type_short":"int","constant_value":"131072"},{"type_long":"int","javadoc":"When this bit is set, the binary declares it is safe for use in\n processes with uid zero","static":true,"name":"MH_ROOT_SAFE","comment":"When this bit is set, the binary declares it is safe for use in\n processes with uid zero","type_short":"int","constant_value":"262144"},{"type_long":"int","javadoc":"When this bit is set, the binary declares it is safe for use in\n processes when issetugid() is true","static":true,"name":"MH_SETUID_SAFE","comment":"When this bit is set, the binary declares it is safe for use in\n processes when issetugid() is true","type_short":"int","constant_value":"524288"},{"type_long":"int","javadoc":"When this bit is set on a dylib, the static linker does not need to\n examine dependent dylibs to see if any are re-exported","static":true,"name":"MH_NO_REEXPORTED_DYLIBS","comment":"When this bit is set on a dylib, the static linker does not need to\n examine dependent dylibs to see if any are re-exported","type_short":"int","constant_value":"1048576"},{"type_long":"int","javadoc":"When this bit is set, the OS will load the main executable at a\n random address.  Only used in MH_EXECUTE filetypes.","static":true,"name":"MH_PIE","comment":"When this bit is set, the OS will load the main executable at a\n random address.  Only used in MH_EXECUTE filetypes.","type_short":"int","constant_value":"2097152"},{"type_long":"int","javadoc":"Only for use on dylibs. \n When linking against a dylib that\n has this bit set, the static linker will automatically not create a\n LC_LOAD_DYLIB load command to the\n dylib if no symbols are being referenced from the dylib.","static":true,"name":"MH_DEAD_STRIPPABLE_DYLIB","comment":"Only for use on dylibs. \n When linking against a dylib that\n has this bit set, the static linker will automatically not create a\n LC_LOAD_DYLIB load command to the\n dylib if no symbols are being referenced from the dylib.","type_short":"int","constant_value":"4194304"},{"type_long":"int","javadoc":"Contains a section of type S_THREAD_LOCAL_VARIABLES.","static":true,"name":"MH_HAS_TLV_DESCRIPTORS","comment":"Contains a section of type S_THREAD_LOCAL_VARIABLES.","type_short":"int","constant_value":"8388608"},{"type_long":"int","javadoc":"When this bit is set, the OS will run the main executable\n with a non-executable heap even on platforms ( e.g., i386 )\n that don't require it.\n Only used in MH_EXECUTE file types.","static":true,"name":"MH_NO_HEAP_EXECUTION","comment":"When this bit is set, the OS will run the main executable\n with a non-executable heap even on platforms ( e.g., i386 )\n that don't require it.\n Only used in MH_EXECUTE file types.","type_short":"int","constant_value":"16777216"},{"type_long":"int","javadoc":"","static":true,"name":"MH_APP_EXTENSION_SAFE","comment":"","type_short":"int","constant_value":"33554432"}]}
