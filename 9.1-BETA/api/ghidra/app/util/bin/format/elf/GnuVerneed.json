{"implements":["ghidra.app.util.bin.StructConverter"],"javadoc":"Version dependency section.\n <pre>\n typedef struct {\n   Elf32_Half\tvn_version;\t\t\/\/Version of structure\n   Elf32_Half\tvn_cnt;\t\t\t\/\/Number of associated aux entries\n   Elf32_Word\tvn_file;\t\t\/\/Offset of filename for this dependency\n   Elf32_Word\tvn_aux;\t\t\t\/\/Offset in bytes to vernaux array\n   Elf32_Word\tvn_next;\t\t\/\/Offset in bytes to next verneed entry\n } Elf32_Verneed;\n \n typedef struct {\n   Elf64_Half\tvn_version;\t\t\/\/Version of structure\n   Elf64_Half\tvn_cnt;\t\t\t\/\/Number of associated aux entries\n   Elf64_Word\tvn_file;\t\t\/\/Offset of filename for this dependency\n   Elf64_Word\tvn_aux;\t\t\t\/\/Offset in bytes to vernaux array\n   Elf64_Word\tvn_next;\t\t\/\/Offset in bytes to next verneed entry\n } Elf64_Verneed;\n \n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getVersion","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getCnt","comment":"","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getFile","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getAux","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getNext","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.app.util.bin.StructConverter#toDataType()","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}}],"name":"GnuVerneed","comment":"Version dependency section.\n \n typedef struct {\n   Elf32_Half\tvn_version;\t\t\/\/Version of structure\n   Elf32_Half\tvn_cnt;\t\t\t\/\/Number of associated aux entries\n   Elf32_Word\tvn_file;\t\t\/\/Offset of filename for this dependency\n   Elf32_Word\tvn_aux;\t\t\t\/\/Offset in bytes to vernaux array\n   Elf32_Word\tvn_next;\t\t\/\/Offset in bytes to next verneed entry\n } Elf32_Verneed;\n \n typedef struct {\n   Elf64_Half\tvn_version;\t\t\/\/Version of structure\n   Elf64_Half\tvn_cnt;\t\t\t\/\/Number of associated aux entries\n   Elf64_Word\tvn_file;\t\t\/\/Offset of filename for this dependency\n   Elf64_Word\tvn_aux;\t\t\t\/\/Offset in bytes to vernaux array\n   Elf64_Word\tvn_next;\t\t\/\/Offset in bytes to next verneed entry\n } Elf64_Verneed;\n \n ","fields":[{"type_long":"short","javadoc":"","static":false,"name":"vn_version","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"vn_cnt","comment":"","type_short":"short","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"vn_file","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"vn_aux","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"vn_next","comment":"","type_short":"int","constant_value":null}]}
