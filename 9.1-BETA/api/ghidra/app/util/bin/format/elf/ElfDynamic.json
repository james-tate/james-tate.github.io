{"implements":["ghidra.app.util.bin.ByteArrayConverter"],"javadoc":"A class to represent the Elf32_Dyn data structure.\n \n <pre>\n typedef  int32_t  Elf32_Sword;\n typedef uint32_t  Elf32_Word;\n typedef uint32_t  Elf32_Addr;\n \n  typedef struct {\n      Elf32_Sword     d_tag;\n      union {\n          Elf32_Word  d_val;\n          Elf32_Addr  d_ptr;\n      } d_un;\n  } Elf32_Dyn;\n \n typedef   int64_t  Elf64_Sxword;\n typedef  uint64_t  Elf64_Xword;\n typedef  uint64_t  Elf64_Addr;\n \n typedef struct {\n     Elf64_Sxword\t   d_tag;     \/\/Dynamic entry type\n     union {\n         Elf64_Xword d_val;     \/\/Integer value\n         Elf64_Addr  d_ptr;     \/\/Address value\n     } d_un;\n } Elf64_Dyn;\n \n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createElfDynamic","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"elf","comment":"","type_short":"ElfHeader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.elf.ElfDynamic","comment":"","type_short":"ElfDynamic"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initElfDynamic","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"elf","comment":"","type_short":"ElfHeader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new ELF dynamic with the specified tag and value.\n@param tag the tag (or type) of this dynamic\n@param value the value (or pointer) of this dynamic\n@param is32bit true if this object is a 32-bit dynamic, false if 64-bit dynamic","static":false,"name":"<init>","comment":"Constructs a new ELF dynamic with the specified tag and value.","params":[{"type_long":"int","name":"tag","comment":"the tag (or type) of this dynamic","type_short":"int"},{"type_long":"long","name":"value","comment":"the value (or pointer) of this dynamic","type_short":"long"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"elf","comment":"","type_short":"ElfHeader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new ELF dynamic with the specified (enum) tag and value.\n@param tag the (enum) tag (or type) of this dynamic\n@param value the value (or pointer) of this dynamic\n@param is32bit true if this object is a 32-bit dynamic, false if 64-bit dynamic","static":false,"name":"<init>","comment":"Constructs a new ELF dynamic with the specified (enum) tag and value.","params":[{"type_long":"ghidra.app.util.bin.format.elf.ElfDynamicType","name":"tag","comment":"the (enum) tag (or type) of this dynamic","type_short":"ElfDynamicType"},{"type_long":"long","name":"value","comment":"the value (or pointer) of this dynamic","type_short":"long"},{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","name":"elf","comment":"","type_short":"ElfHeader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the value that controls the interpretation of the \n the d_val and\/or d_ptr.\n@return the tag (or type) of this dynamic","static":false,"name":"getTag","comment":"Returns the value that controls the interpretation of the \n the d_val and\/or d_ptr.","params":[],"throws":[],"return":{"type_long":"int","comment":"the tag (or type) of this dynamic","type_short":"int"}},{"javadoc":"Returns the enum value that controls the interpretation of the \n the d_val and\/or d_ptr (or null if unknown).\n@return the enum tag (or type) of this dynamic or null if unknown","static":false,"name":"getTagType","comment":"Returns the enum value that controls the interpretation of the \n the d_val and\/or d_ptr (or null if unknown).","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.elf.ElfDynamicType","comment":"the enum tag (or type) of this dynamic or null if unknown","type_short":"ElfDynamicType"}},{"javadoc":"Returns the object whose integer values represent various interpretations.\n For example, if d_tag == DT_SYMTAB, then d_val holds the address of the symbol table.\n But, if d_tag == DT_SYMENT, then d_val holds the size of each symbol entry.\n@return the Elf32_Word object represent integer values with various interpretations","static":false,"name":"getValue","comment":"Returns the object whose integer values represent various interpretations.\n For example, if d_tag == DT_SYMTAB, then d_val holds the address of the symbol table.\n But, if d_tag == DT_SYMENT, then d_val holds the size of each symbol entry.","params":[],"throws":[],"return":{"type_long":"long","comment":"the Elf32_Word object represent integer values with various interpretations","type_short":"long"}},{"javadoc":"Sets the value of this dynamic. The value could be an address or a number.\n@param value the new value dynamic","static":false,"name":"setValue","comment":"Sets the value of this dynamic. The value could be an address or a number.","params":[{"type_long":"long","name":"value","comment":"the new value dynamic","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the value of this dynamic. The value could be an address or a number.\n@param value the new value dynamic","static":false,"name":"setValue","comment":"Sets the value of this dynamic. The value could be an address or a number.","params":[{"type_long":"int","name":"value","comment":"the new value dynamic","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method for getting a string representing the d_tag value.\n For example, if d_tag == DT_SYMTAB, then this method returns \"DT_SYMTAB\".\n@return a string representing the d_tag value","static":false,"name":"getTagAsString","comment":"A convenience method for getting a string representing the d_tag value.\n For example, if d_tag == DT_SYMTAB, then this method returns \"DT_SYMTAB\".","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string representing the d_tag value","type_short":"String"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)","static":false,"name":"toBytes","comment":"","params":[{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"write","comment":"","params":[{"type_long":"byte[]","name":"data","comment":"","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[{"type_long":"java.lang.ArrayIndexOutOfBoundsException","comment":"","type_short":"ArrayIndexOutOfBoundsException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the size in bytes of this object.","static":false,"name":"sizeof","comment":"Returns the size in bytes of this object.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"ElfDynamic","comment":"A class to represent the Elf32_Dyn data structure.\n \n \n typedef  int32_t  Elf32_Sword;\n typedef uint32_t  Elf32_Word;\n typedef uint32_t  Elf32_Addr;\n \n  typedef struct {\n      Elf32_Sword     d_tag;\n      union {\n          Elf32_Word  d_val;\n          Elf32_Addr  d_ptr;\n      } d_un;\n  } Elf32_Dyn;\n \n typedef   int64_t  Elf64_Sxword;\n typedef  uint64_t  Elf64_Xword;\n typedef  uint64_t  Elf64_Addr;\n \n typedef struct {\n     Elf64_Sxword\t   d_tag;     \/\/Dynamic entry type\n     union {\n         Elf64_Xword d_val;     \/\/Integer value\n         Elf64_Addr  d_ptr;     \/\/Address value\n     } d_un;\n } Elf64_Dyn;\n \n ","fields":[{"type_long":"ghidra.app.util.bin.format.elf.ElfHeader","javadoc":"","static":false,"name":"elf","comment":"","type_short":"ElfHeader","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"d_tag","comment":"","type_short":"int","constant_value":null},{"type_long":"long","javadoc":"","static":false,"name":"d_val","comment":"","type_short":"long","constant_value":null}]}
