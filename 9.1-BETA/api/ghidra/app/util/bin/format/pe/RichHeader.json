{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.format.Writeable"],"javadoc":"The \"Rich\" header contains encoded metadata about the tool chain used to generate the binary.\n This class decodes and writes the Rich header (if it exists).","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Create and returns the Rich header found from the given reader.  The reader should be\n positioned directly after the DOS header.\n@param reader The reader to read the PE with.\n@return The Rich header associated with the given reader.","static":true,"name":"createRichHeader","comment":"Create and returns the Rich header found from the given reader.  The reader should be\n positioned directly after the DOS header.","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"The reader to read the PE with.","type_short":"FactoryBundledWithBinaryReader"}],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.RichHeader","comment":"The Rich header associated with the given reader.","type_short":"RichHeader"}},{"javadoc":"Do not directly call this constructor.\n <p>  \n Use {@link #createRichHeader(FactoryBundledWithBinaryReader)}","static":false,"name":"<init>","comment":"Do not directly call this constructor.\n   \n Use #createRichHeader(FactoryBundledWithBinaryReader)","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initRichHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"binaryReader","comment":"","type_short":"FactoryBundledWithBinaryReader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"parse","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the offset of the Rich header.\n@return the offset of the Rich header, or -1 if a Rich header was not found.","static":false,"name":"getOffset","comment":"Gets the offset of the Rich header.","params":[],"throws":[],"return":{"type_long":"int","comment":"the offset of the Rich header, or -1 if a Rich header was not found.","type_short":"int"}},{"javadoc":"Gets the size of the Rich header.\n@return the size of the Rich header.  Will be 0 if a Rich header was not found.","static":false,"name":"getSize","comment":"Gets the size of the Rich header.","params":[],"throws":[],"return":{"type_long":"int","comment":"the size of the Rich header.  Will be 0 if a Rich header was not found.","type_short":"int"}},{"javadoc":"Gets the Rich header mask.\n@return the Rich header mask, or -1 if a Rich header was not found.","static":false,"name":"getMask","comment":"Gets the Rich header mask.","params":[],"throws":[],"return":{"type_long":"int","comment":"the Rich header mask, or -1 if a Rich header was not found.","type_short":"int"}},{"javadoc":"Gets the Rich header records.\n@return the Rich header records.  Could be empty if a Rich header was not found.","static":false,"name":"getRecords","comment":"Gets the Rich header records.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.rich.RichHeaderRecord[]","comment":"the Rich header records.  Could be empty if a Rich header was not found.","type_short":"ghidra.app.util.bin.format.pe.rich.RichHeaderRecord[]"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"","static":false,"name":"write","comment":"","params":[{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"","type_short":"RandomAccessFile"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RichHeader","comment":"The \"Rich\" header contains encoded metadata about the tool chain used to generate the binary.\n This class decodes and writes the Rich header (if it exists).","fields":[{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_RICH_SIGNATURE","comment":"","type_short":"int","constant_value":"1751345490"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_DANS_SIGNATURE","comment":"","type_short":"int","constant_value":"1399742788"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"IMAGE_RICH_HEADER\""},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.RichTable","javadoc":"","static":false,"name":"table","comment":"","type_short":"RichTable","constant_value":null}]}
