{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.format.pe.OffsetValidator"],"javadoc":"A class to represent the <b><code>IMAGE_NT_HEADERS32<\/code><\/b> and\n IMAGE_NT_HEADERS64 structs as defined in \n <code>winnt.h<\/code>.\n <pre>\n typedef struct _IMAGE_NT_HEADERS {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n };\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new NT header.\n@param reader the binary reader\n@param index the index into the reader to the start of the NT header\n@param advancedProcess if true, information rafside of the base header will be processed\n@param parseCliHeaders if true, CLI headers are parsed (if present)\n@throws InvalidNTHeaderException if the bytes the specified index\n do not constitute an accurate NT header.","static":true,"name":"createNTHeader","comment":"Constructs a new NT header.","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"the binary reader","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"the index into the reader to the start of the NT header","type_short":"int"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","name":"layout","comment":"","type_short":"SectionLayout"},{"type_long":"boolean","name":"advancedProcess","comment":"if true, information rafside of the base header will be processed","type_short":"boolean"},{"type_long":"boolean","name":"parseCliHeaders","comment":"if true, CLI headers are parsed (if present)","type_short":"boolean"}],"throws":[{"type_long":"ghidra.app.util.bin.format.pe.InvalidNTHeaderException","comment":"if the bytes the specified index\n do not constitute an accurate NT header.","type_short":"InvalidNTHeaderException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.NTHeader","comment":"","type_short":"NTHeader"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initNTHeader","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","name":"layout","comment":"","type_short":"SectionLayout"},{"type_long":"boolean","name":"advancedProcess","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"parseCliHeaders","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.app.util.bin.format.pe.InvalidNTHeaderException","comment":"","type_short":"InvalidNTHeaderException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isRVAResoltionSectionAligned","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the file header.\n@return the file header","static":false,"name":"getFileHeader","comment":"Returns the file header.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.FileHeader","comment":"the file header","type_short":"FileHeader"}},{"javadoc":"Returns the optional header.\n@return the optional header","static":false,"name":"getOptionalHeader","comment":"Returns the optional header.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.OptionalHeader","comment":"the optional header","type_short":"OptionalHeader"}},{"javadoc":"@see ghidra.app.util.bin.StructConverter#toDataType()","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Converts a relative virtual address (RVA) into a pointer.\n@see #rvaToPointer(long)","static":false,"name":"rvaToPointer","comment":"Converts a relative virtual address (RVA) into a pointer.","params":[{"type_long":"int","name":"rva","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param rva the relative virtual address\n@return the pointer into binary image, 0 if not valid","static":false,"name":"rvaToPointer","comment":"","params":[{"type_long":"long","name":"rva","comment":"the relative virtual address","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"the pointer into binary image, 0 if not valid","type_short":"long"}},{"javadoc":"","static":false,"name":"checkPointer","comment":"","params":[{"type_long":"long","name":"ptr","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"checkRVA","comment":"","params":[{"type_long":"long","name":"rva","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Converts a virtual address (VA) into a pointer.\n@see #vaToPointer(long)","static":false,"name":"vaToPointer","comment":"Converts a virtual address (VA) into a pointer.","params":[{"type_long":"int","name":"va","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@param va the virtual address\n@return the pointer into binary image, 0 if not valid","static":false,"name":"vaToPointer","comment":"","params":[{"type_long":"long","name":"va","comment":"the virtual address","type_short":"long"}],"throws":[],"return":{"type_long":"long","comment":"the pointer into binary image, 0 if not valid","type_short":"long"}},{"javadoc":"@throws InvalidNTHeaderException\n@throws IOException","static":false,"name":"parse","comment":"","params":[],"throws":[{"type_long":"ghidra.app.util.bin.format.pe.InvalidNTHeaderException","comment":"","type_short":"InvalidNTHeaderException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"writeHeader","comment":"","params":[{"type_long":"java.io.RandomAccessFile","name":"raf","comment":"","type_short":"RandomAccessFile"},{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"shouldParseCliHeaders","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"NTHeader","comment":"A class to represent the IMAGE_NT_HEADERS32 and\n IMAGE_NT_HEADERS64 structs as defined in \n winnt.h.\n \n typedef struct _IMAGE_NT_HEADERS {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n };\n ","fields":[{"type_long":"java.lang.String","javadoc":"The name to use when converting into a structure data type.","static":true,"name":"NAME","comment":"The name to use when converting into a structure data type.","type_short":"String","constant_value":"\"IMAGE_NT_HEADERS32\""},{"type_long":"int","javadoc":"The size of the NT header signature.","static":true,"name":"SIZEOF_SIGNATURE","comment":"The size of the NT header signature.","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"MAX_SANE_COUNT","comment":"","type_short":"int","constant_value":"65536"},{"type_long":"int","javadoc":"","static":false,"name":"signature","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.FileHeader","javadoc":"","static":false,"name":"fileHeader","comment":"","type_short":"FileHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.OptionalHeader","javadoc":"","static":false,"name":"optionalHeader","comment":"","type_short":"OptionalHeader","constant_value":null},{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","javadoc":"","static":false,"name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"index","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"advancedProcess","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"parseCliHeaders","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.app.util.bin.format.pe.PortableExecutable.SectionLayout","javadoc":"","static":false,"name":"layout","comment":"","type_short":"SectionLayout","constant_value":null}]}
