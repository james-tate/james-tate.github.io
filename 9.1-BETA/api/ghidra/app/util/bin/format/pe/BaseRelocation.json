{"implements":["ghidra.app.util.bin.StructConverter","ghidra.app.util.bin.ByteArrayConverter"],"javadoc":"A class to represent the <code>IMAGE_BASE_RELOCATION<\/code>\n data structure defined in <b><code>winnt.h<\/code><\/b>.\n <pre>\n typedef struct _IMAGE_BASE_RELOCATION {\n     DWORD   VirtualAddress;\n     DWORD   SizeOfBlock;\n \/\/  WORD    TypeOffset[1];\n } IMAGE_BASE_RELOCATION;\n typedef IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createBaseRelocation","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.BaseRelocation","comment":"","type_short":"BaseRelocation"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initBaseRelocation","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"virtualAddress","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a relocation to this base relocation block.\n@param type the relocation type\n@param offset the relocation offset","static":false,"name":"addRelocation","comment":"Adds a relocation to this base relocation block.","params":[{"type_long":"int","name":"type","comment":"the relocation type","type_short":"int"},{"type_long":"int","name":"offset","comment":"the relocation offset","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the base address of the relocations in this block.\n@return the base address of the relocations in this block","static":false,"name":"getVirtualAddress","comment":"Returns the base address of the relocations in this block.","params":[],"throws":[],"return":{"type_long":"int","comment":"the base address of the relocations in this block","type_short":"int"}},{"javadoc":"Returns the size (in bytes) of this relocation block.\n@return the size (in bytes) of this relocation block","static":false,"name":"getSizeOfBlock","comment":"Returns the size (in bytes) of this relocation block.","params":[],"throws":[],"return":{"type_long":"int","comment":"the size (in bytes) of this relocation block","type_short":"int"}},{"javadoc":"Returns the number of relocation in this block.\n@return the number of relocation in this block","static":false,"name":"getCount","comment":"Returns the number of relocation in this block.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of relocation in this block","type_short":"int"}},{"javadoc":"Returns the lower 12 bits of the offset.\n@param index the ith relocation\n@return int the offset of the relocation","static":false,"name":"getOffset","comment":"Returns the lower 12 bits of the offset.","params":[{"type_long":"int","name":"index","comment":"the ith relocation","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"int the offset of the relocation","type_short":"int"}},{"javadoc":"Returns the upper 4 bits of the offset.\n@param index the ith relocation\n@return int the type of the relocation\n,","static":false,"name":"getType","comment":"Returns the upper 4 bits of the offset.","params":[{"type_long":"int","name":"index","comment":"the ith relocation","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"int the type of the relocation\n,","type_short":"int"}},{"javadoc":"@see ghidra.app.util.bin.StructConverter#toDataType()","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)","static":false,"name":"toBytes","comment":"","params":[{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}}],"name":"BaseRelocation","comment":"A class to represent the IMAGE_BASE_RELOCATION\n data structure defined in winnt.h.\n \n typedef struct _IMAGE_BASE_RELOCATION {\n     DWORD   VirtualAddress;\n     DWORD   SizeOfBlock;\n \/\/  WORD    TypeOffset[1];\n } IMAGE_BASE_RELOCATION;\n typedef IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;\n ","fields":[{"type_long":"java.lang.String","javadoc":"The name to use when converting into a structure data type.","static":true,"name":"NAME","comment":"The name to use when converting into a structure data type.","type_short":"String","constant_value":"\"IMAGE_BASE_RELOCATION\""},{"type_long":"int","javadoc":"The size of the <code>IMAGE_BASE_RELOCATION<\/code> in bytes.","static":true,"name":"IMAGE_SIZEOF_BASE_RELOCATION","comment":"The size of the IMAGE_BASE_RELOCATION in bytes.","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_NOOP","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_ABSOLUTE","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_HIGH","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_LOW","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_HIGHLOW","comment":"","type_short":"int","constant_value":"3"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_HIGHADJ","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_MIPS_JMPADDR","comment":"","type_short":"int","constant_value":"5"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_SECTION","comment":"","type_short":"int","constant_value":"6"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_REL32","comment":"","type_short":"int","constant_value":"7"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_MIPS_JMPADDR16","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_IA64_IMM64","comment":"","type_short":"int","constant_value":"9"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_DIR64","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"IMAGE_REL_BASED_HIGH3ADJ","comment":"","type_short":"int","constant_value":"11"},{"type_long":"java.lang.String[]","javadoc":"Names of the available base relocations.","static":true,"name":"TYPE_STRINGS","comment":"Names of the available base relocations.","type_short":"java.lang.String[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"virtualAddress","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"sizeOfBlock","comment":"","type_short":"int","constant_value":null},{"type_long":"java.util.List<ghidra.app.util.bin.format.pe.BaseRelocation.TypeOffset>","javadoc":"","static":false,"name":"typeOffsetList","comment":"","type_short":"List","constant_value":null}]}
