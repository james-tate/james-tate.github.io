{"implements":[],"javadoc":"A class to represent the Object Module Format (OMF) Source Module File data structure. \n <br>\n This class describes the code segments that receive code from a source file.\n <br>\n short cSeg \t\t- Number of segments that receive code from the source file.\n <br>\n short pad \t\t- pad field to maintain alignment\n <br>\n int [] baseSrcLn - array of offsets for the line or address mapping for each segment that receives code from the source file.\n <br>\n int [] starts \t- starting addresses within the segment of the first byte of code from the module.\n <br>\n int [] ends \t\t- ending addresses of the code from the module.\n <br>\n byte cbName \t\t- count or number of bytes in source file name.\n <br>\n String name \t\t- name of source file.\n <br>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"createOMFSrcModuleFile","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"ptr","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.bin.format.pe.debug.OMFSrcModuleFile","comment":"","type_short":"OMFSrcModuleFile"}},{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initOMFSrcModuleFile","comment":"","params":[{"type_long":"ghidra.app.util.bin.format.FactoryBundledWithBinaryReader","name":"reader","comment":"","type_short":"FactoryBundledWithBinaryReader"},{"type_long":"int","name":"ptr","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array of the source module lines.\n@return an array of the source module lines","static":false,"name":"getOMFSrcModuleLines","comment":"Returns an array of the source module lines.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine[]","comment":"an array of the source module lines","type_short":"ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine[]"}},{"javadoc":"Returns an array of offsets for the line or address mapping for each segment \n that receives code from the source file.\n@return an array of offsets for the line or address mapping for each segment","static":false,"name":"getBaseSrcLn","comment":"Returns an array of offsets for the line or address mapping for each segment \n that receives code from the source file.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"an array of offsets for the line or address mapping for each segment","type_short":"int[]"}},{"javadoc":"Returns the number of segments that receive code from the source file.\n@return the number of segments that receive code from the source file","static":false,"name":"getSegmentCount","comment":"Returns the number of segments that receive code from the source file.","params":[],"throws":[],"return":{"type_long":"short","comment":"the number of segments that receive code from the source file","type_short":"short"}},{"javadoc":"Returns the ending addresses of the code from the module.\n@return the ending addresses of the code from the module","static":false,"name":"getEnds","comment":"Returns the ending addresses of the code from the module.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"the ending addresses of the code from the module","type_short":"int[]"}},{"javadoc":"Returns the name of source file.\n@return the name of source file","static":false,"name":"getName","comment":"Returns the name of source file.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of source file","type_short":"String"}},{"javadoc":"Returns the pad field to maintain alignment.\n@return the pad field to maintain alignment","static":false,"name":"getPad","comment":"Returns the pad field to maintain alignment.","params":[],"throws":[],"return":{"type_long":"short","comment":"the pad field to maintain alignment","type_short":"short"}},{"javadoc":"Returns the starting addresses within the segment of the first byte of code from the module.\n@return the starting addresses within the segment of the first byte of code from the module","static":false,"name":"getStarts","comment":"Returns the starting addresses within the segment of the first byte of code from the module.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"the starting addresses within the segment of the first byte of code from the module","type_short":"int[]"}}],"name":"OMFSrcModuleFile","comment":"A class to represent the Object Module Format (OMF) Source Module File data structure. \n \n This class describes the code segments that receive code from a source file.\n \n short cSeg \t\t- Number of segments that receive code from the source file.\n \n short pad \t\t- pad field to maintain alignment\n \n int [] baseSrcLn - array of offsets for the line or address mapping for each segment that receives code from the source file.\n \n int [] starts \t- starting addresses within the segment of the first byte of code from the module.\n \n int [] ends \t\t- ending addresses of the code from the module.\n \n byte cbName \t\t- count or number of bytes in source file name.\n \n String name \t\t- name of source file.\n ","fields":[{"type_long":"short","javadoc":"","static":false,"name":"cSeg","comment":"","type_short":"short","constant_value":null},{"type_long":"short","javadoc":"","static":false,"name":"pad","comment":"","type_short":"short","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"baseSrcLn","comment":"","type_short":"int[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"starts","comment":"","type_short":"int[]","constant_value":null},{"type_long":"int[]","javadoc":"","static":false,"name":"ends","comment":"","type_short":"int[]","constant_value":null},{"type_long":"byte","javadoc":"","static":false,"name":"cbName","comment":"","type_short":"byte","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.ArrayList<ghidra.app.util.bin.format.pe.debug.OMFSrcModuleLine>","javadoc":"","static":false,"name":"moduleLineList","comment":"","type_short":"ArrayList","constant_value":null}]}
