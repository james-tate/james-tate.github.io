{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param serviceProvider the service provider used to access DataTypeManagers\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@return the data type that is created as a result of parsing; null if there was a problem\n@see #parseSignature(DataTypeManagerService, Program, String)\n@see #parseSignature(DataTypeManagerService, Program, String, boolean)","static":true,"name":"parseSignature","comment":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).","params":[{"type_long":"ghidra.framework.plugintool.ServiceProvider","name":"serviceProvider","comment":"the service provider used to access DataTypeManagers","type_short":"ServiceProvider"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program against which data types will be resolved","type_short":"Program"},{"type_long":"java.lang.String","name":"signatureText","comment":"the signature to parse","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.FunctionDefinitionDataType","comment":"the data type that is created as a result of parsing; null if there was a problem","type_short":"FunctionDefinitionDataType"}},{"javadoc":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param service the service used to access DataTypeManagers or null to use only the program's\n data type manager.\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@return the data type that is created as a result of parsing; null if there was a problem\n@see #parseSignature(DataTypeManagerService, Program, String, boolean)","static":true,"name":"parseSignature","comment":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).","params":[{"type_long":"ghidra.app.services.DataTypeManagerService","name":"service","comment":"the service used to access DataTypeManagers or null to use only the program's\n data type manager.","type_short":"DataTypeManagerService"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program against which data types will be resolved","type_short":"Program"},{"type_long":"java.lang.String","name":"signatureText","comment":"the signature to parse","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.FunctionDefinitionDataType","comment":"the data type that is created as a result of parsing; null if there was a problem","type_short":"FunctionDefinitionDataType"}},{"javadoc":"Split function signature into three parts:\n [0]= part before function name\n [1]= function name\n [2]= parameter body after function name\n@param signature\n@return parts array or null if split failed","static":true,"name":"splitFunctionSignature","comment":"Split function signature into three parts:\n [0]= part before function name\n [1]= function name\n [2]= parameter body after function name","params":[{"type_long":"java.lang.String","name":"signature","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"parts array or null if split failed","type_short":"java.lang.String[]"}},{"javadoc":"Get a temporary name of a specified length (tttt....)\n@param length\n@return temporary name string","static":true,"name":"getTempName","comment":"Get a temporary name of a specified length (tttt....)","params":[{"type_long":"int","name":"length","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"temporary name string","type_short":"String"}},{"javadoc":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param service the service used to access DataTypeManagers or null to use only the program's\n data type manager.\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@param handleExceptions true signals that this method should deal with exceptions, \n        showing error messages as necessary; false signals to throw any encountered\n        parsing exceptions.  This allows clients to perform exception handling that\n        better matches their workflow.\n@return the data type that is created as a result of parsing; null if there was a problem","static":true,"name":"parseSignature","comment":"Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).","params":[{"type_long":"ghidra.app.services.DataTypeManagerService","name":"service","comment":"the service used to access DataTypeManagers or null to use only the program's\n data type manager.","type_short":"DataTypeManagerService"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program against which data types will be resolved","type_short":"Program"},{"type_long":"java.lang.String","name":"signatureText","comment":"the signature to parse","type_short":"String"},{"type_long":"boolean","name":"handleExceptions","comment":"true signals that this method should deal with exceptions, \n        showing error messages as necessary; false signals to throw any encountered\n        parsing exceptions.  This allows clients to perform exception handling that\n        better matches their workflow.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.app.util.cparser.C.ParseException","comment":"","type_short":"ParseException"}],"return":{"type_long":"ghidra.program.model.data.FunctionDefinitionDataType","comment":"the data type that is created as a result of parsing; null if there was a problem","type_short":"FunctionDefinitionDataType"}},{"javadoc":"","static":true,"name":"getDataTypeManagers","comment":"","params":[{"type_long":"ghidra.app.services.DataTypeManagerService","name":"service","comment":"","type_short":"DataTypeManagerService"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataTypeManager[]","comment":"","type_short":"ghidra.program.model.data.DataTypeManager[]"}},{"javadoc":"Given a throwable, attempt pull out the significant error parts to generate a \n user-friendly error message.\n@param t the throwable to examine, originating from the {@link CParser}.\n@param functionString the full function signature text that was parsed by the parser.\n@return a user-friendly error message, or null if this class did not know how to \n         handle the given exception.","static":true,"name":"handleParseProblem","comment":"Given a throwable, attempt pull out the significant error parts to generate a \n user-friendly error message.","params":[{"type_long":"java.lang.Throwable","name":"t","comment":"the throwable to examine, originating from the CParser.","type_short":"Throwable"},{"type_long":"java.lang.String","name":"functionString","comment":"the full function signature text that was parsed by the parser.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a user-friendly error message, or null if this class did not know how to \n         handle the given exception.","type_short":"String"}},{"javadoc":"","static":true,"name":"generateTokenErrorMessage","comment":"","params":[{"type_long":"ghidra.app.util.cparser.C.TokenMgrError","name":"e","comment":"","type_short":"TokenMgrError"},{"type_long":"java.lang.String","name":"functionString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"getTokenMgrErrorIndexOfInvalidText","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"functionString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"getTokenMgrErrorIndexUsingErrorColumn","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"generateParseExceptionMessage","comment":"","params":[{"type_long":"ghidra.app.util.cparser.C.ParseException","name":"pe","comment":"","type_short":"ParseException"},{"type_long":"java.lang.String","name":"functionString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"generateParsingExceptionMessage","comment":"","params":[{"type_long":"java.lang.String","name":"errorMessage","comment":"","type_short":"String"},{"type_long":"int","name":"errorIndex","comment":"","type_short":"int"},{"type_long":"java.lang.String","name":"functionString","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"CParserUtils","comment":"","fields":[]}
