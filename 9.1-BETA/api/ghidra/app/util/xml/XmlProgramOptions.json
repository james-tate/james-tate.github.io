{"implements":[],"javadoc":"A class to hold XML options.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an array of importer options representing\n the flags in this class.\n@param isAddToProgram if true then adding to existing program\n@return the array of importer options","static":false,"name":"getOptions","comment":"Returns an array of importer options representing\n the flags in this class.","params":[{"type_long":"boolean","name":"isAddToProgram","comment":"if true then adding to existing program","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.Option>","comment":"the array of importer options","type_short":"List"}},{"javadoc":"Sets the options. This method is not for defining the options, but\n rather for setting the values of options. If invalid options\n are passed in, then OptionException should be thrown.\n@param options the option values for XML\n@throws OptionException if invalid options are passed in","static":false,"name":"setOptions","comment":"Sets the options. This method is not for defining the options, but\n rather for setting the values of options. If invalid options\n are passed in, then OptionException should be thrown.","params":[{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"the option values for XML","type_short":"List"}],"throws":[{"type_long":"ghidra.app.util.OptionException","comment":"if invalid options are passed in","type_short":"OptionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if importing to an existing program.\n Importing to an existing program creates a new\n set of potential conflicts. For example, memory block\n may collide. When this options is true, additional\n options are visible.\n@return true if importing to an existing program","static":false,"name":"isAddToProgram","comment":"Returns true if importing to an existing program.\n Importing to an existing program creates a new\n set of potential conflicts. For example, memory block\n may collide. When this options is true, additional\n options are visible.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if importing to an existing program","type_short":"boolean"}},{"javadoc":"If true, then instructions should be read\/written.\n@return true if instructions should be read\/written","static":false,"name":"isInstructions","comment":"If true, then instructions should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if instructions should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then comments should be read\/written.\n@return true if comments should be read\/written","static":false,"name":"isComments","comment":"If true, then comments should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if comments should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then data should be read\/written.\n@return true if data should be read\/written","static":false,"name":"isData","comment":"If true, then data should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if data should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then equates should be read\/written.\n@return true if equates should be read\/written","static":false,"name":"isEquates","comment":"If true, then equates should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if equates should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then functions should be read\/written.\n@return true if functions should be read\/written","static":false,"name":"isFunctions","comment":"If true, then functions should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if functions should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then memory blocks should be read\/written.\n@return true if memory blocks should be read\/written","static":false,"name":"isMemoryBlocks","comment":"If true, then memory blocks should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if memory blocks should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then memory contents should be read\/written.\n@return true if memory contents should be read\/written","static":false,"name":"isMemoryContents","comment":"If true, then memory contents should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if memory contents should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then properties should be read\/written.\n@return true if properties should be read\/written","static":false,"name":"isProperties","comment":"If true, then properties should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if properties should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then references (memory, stack, external) should be read\/written.\n@return true if references should be read\/written","static":false,"name":"isReferences","comment":"If true, then references (memory, stack, external) should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if references should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then symbols should be read\/written.\n@return true if symbols should be read\/written","static":false,"name":"isSymbols","comment":"If true, then symbols should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if symbols should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then program trees should be read\/written.\n@return true if program trees should be read\/written","static":false,"name":"isTrees","comment":"If true, then program trees should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if program trees should be read\/written","type_short":"boolean"}},{"javadoc":"Sets instructions to be read\/written.\n@param b true if instructions should read\/written","static":false,"name":"setInstructions","comment":"Sets instructions to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if instructions should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets comments to be read\/written.\n@param b true if comments should read\/written","static":false,"name":"setComments","comment":"Sets comments to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if comments should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets data to be read\/written.\n@param b true if data should read\/written","static":false,"name":"setData","comment":"Sets data to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if data should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets equates to be read\/written.\n@param b true if equates should read\/written","static":false,"name":"setEquates","comment":"Sets equates to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if equates should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets functions to be read\/written.\n@param b true if functions should read\/written","static":false,"name":"setFunctions","comment":"Sets functions to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if functions should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets memory blocks to be read\/written.\n@param b true if memory blocks should read\/written","static":false,"name":"setMemoryBlocks","comment":"Sets memory blocks to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if memory blocks should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets memory contents to be read\/written.\n@param b true if memory contents should read\/written","static":false,"name":"setMemoryContents","comment":"Sets memory contents to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if memory contents should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets properties to be read\/written.\n@param b true if properties should read\/written","static":false,"name":"setProperties","comment":"Sets properties to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if properties should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets references to be read\/written.\n@param b true if references should read\/written","static":false,"name":"setReferences","comment":"Sets references to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if references should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets symbols to be read\/written.\n@param b true if symbols should read\/written","static":false,"name":"setSymbols","comment":"Sets symbols to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if symbols should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets program trees to be read\/written.\n@param b true if program trees should read\/written","static":false,"name":"setTrees","comment":"Sets program trees to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if program trees should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If true, then bookmarks should be read\/written.\n@return true if bookmarks should be read\/written","static":false,"name":"isBookmarks","comment":"If true, then bookmarks should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if bookmarks should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then registers should be read\/written.\n@return true if registers should be read\/written","static":false,"name":"isRegisters","comment":"If true, then registers should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if registers should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then the relocation table should be read\/written.\n@return true if the relocation table should be read\/written","static":false,"name":"isRelocationTable","comment":"If true, then the relocation table should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the relocation table should be read\/written","type_short":"boolean"}},{"javadoc":"Sets bookmarks to be read\/written.\n@param b true if bookmarks should read\/written","static":false,"name":"setBookmarks","comment":"Sets bookmarks to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if bookmarks should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets registers to be read\/written.\n@param b true if registers should read\/written","static":false,"name":"setRegisters","comment":"Sets registers to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if registers should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets relocation tables to be read\/written.\n@param b true if relocation table should read\/written","static":false,"name":"setRelocationTable","comment":"Sets relocation tables to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if relocation table should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If true, then the entry points should be read\/written.\n@return true if the entry points should be read\/written","static":false,"name":"isEntryPoints","comment":"If true, then the entry points should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the entry points should be read\/written","type_short":"boolean"}},{"javadoc":"If true, then the external libraries should be read\/written.\n@return true if the external libraries should be read\/written","static":false,"name":"isExternalLibraries","comment":"If true, then the external libraries should be read\/written.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the external libraries should be read\/written","type_short":"boolean"}},{"javadoc":"Sets entry points to be read\/written.\n@param b true if entry points should read\/written","static":false,"name":"setEntryPoints","comment":"Sets entry points to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if entry points should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets external libraries to be read\/written.\n@param b true if external libraries should read\/written","static":false,"name":"setExternalLibraries","comment":"Sets external libraries to be read\/written.","params":[{"type_long":"boolean","name":"b","comment":"true if external libraries should read\/written","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If true, then property conflicts will be overwritten.\n@return true if property conflicts will be overwritten","static":false,"name":"isOverwritePropertyConflicts","comment":"If true, then property conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if property conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"If true, then bookmark conflicts will be overwritten.\n@return true if bookmark conflicts will be overwritten","static":false,"name":"isOverwriteBookmarkConflicts","comment":"If true, then bookmark conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if bookmark conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"If true, then symbol conflicts will be overwritten.\n@return true if symbol conflicts will be overwritten","static":false,"name":"isOverwriteSymbolConflicts","comment":"If true, then symbol conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if symbol conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"If true, then reference conflicts will be overwritten.\n@return true if reference conflicts will be overwritten","static":false,"name":"isOverwriteReferenceConflicts","comment":"If true, then reference conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if reference conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"If true, then memory conflicts will be overwritten.\n@return true if memory conflicts will be overwritten","static":false,"name":"isOverwriteMemoryConflicts","comment":"If true, then memory conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if memory conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"If true, then data conflicts will be overwritten.\n@return true if data conflicts will be overwritten","static":false,"name":"isOverwriteDataConflicts","comment":"If true, then data conflicts will be overwritten.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if data conflicts will be overwritten","type_short":"boolean"}},{"javadoc":"Sets bookmark conflicts to always be overwritten.\n@param b true if bookmark conflicts should always be overwritten","static":false,"name":"setOverwriteBookmarkConflicts","comment":"Sets bookmark conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if bookmark conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets memory conflicts to always be overwritten.\n@param b true if memory conflicts should always be overwritten","static":false,"name":"setOverwriteMemoryConflicts","comment":"Sets memory conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if memory conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets data conflicts to always be overwritten.\n@param b true if data conflicts should always be overwritten","static":false,"name":"setOverwriteDataConflicts","comment":"Sets data conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if data conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets property conflicts to always be overwritten.\n@param b true if property conflicts should always be overwritten","static":false,"name":"setOverwritePropertyConflicts","comment":"Sets property conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if property conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets reference conflicts to always be overwritten.\n@param b true if reference conflicts should always be overwritten","static":false,"name":"setOverwriteReferenceConflicts","comment":"Sets reference conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if reference conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets symbol conflicts to always be overwritten.\n@param b true if symbol conflicts should always be overwritten","static":false,"name":"setOverwriteSymbolConflicts","comment":"Sets symbol conflicts to always be overwritten.","params":[{"type_long":"boolean","name":"b","comment":"true if symbol conflicts should always be overwritten","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setAddToProgram","comment":"","params":[{"type_long":"boolean","name":"addToProgram","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"XmlProgramOptions","comment":"A class to hold XML options.","fields":[{"type_long":"long","javadoc":"Flag to indicate reading\/writing memory blocks","static":true,"name":"OPT_MEMORY_BLOCKS","comment":"Flag to indicate reading\/writing memory blocks","type_short":"long","constant_value":"1"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing memory contents","static":true,"name":"OPT_MEMORY_CONTENTS","comment":"Flag to indicate reading\/writing memory contents","type_short":"long","constant_value":"2"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing instructions","static":true,"name":"OPT_CODE","comment":"Flag to indicate reading\/writing instructions","type_short":"long","constant_value":"4"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing data","static":true,"name":"OPT_DATA","comment":"Flag to indicate reading\/writing data","type_short":"long","constant_value":"8"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing symbols","static":true,"name":"OPT_SYMBOLS","comment":"Flag to indicate reading\/writing symbols","type_short":"long","constant_value":"16"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing equates","static":true,"name":"OPT_EQUATES","comment":"Flag to indicate reading\/writing equates","type_short":"long","constant_value":"32"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing comments","static":true,"name":"OPT_COMMENTS","comment":"Flag to indicate reading\/writing comments","type_short":"long","constant_value":"64"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing properties","static":true,"name":"OPT_PROPERTIES","comment":"Flag to indicate reading\/writing properties","type_short":"long","constant_value":"128"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing trees","static":true,"name":"OPT_TREES","comment":"Flag to indicate reading\/writing trees","type_short":"long","constant_value":"256"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing empty program tree nodes","static":true,"name":"OPT_EMPTY_TREE_NODES","comment":"Flag to indicate reading\/writing empty program tree nodes","type_short":"long","constant_value":"512"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing references","static":true,"name":"OPT_REFERENCES","comment":"Flag to indicate reading\/writing references","type_short":"long","constant_value":"1024"},{"type_long":"long","javadoc":"Flag to indicate reading\/writing functions","static":true,"name":"OPT_FUNCTIONS","comment":"Flag to indicate reading\/writing functions","type_short":"long","constant_value":"2048"},{"type_long":"long","javadoc":"Used to signify that symbols should be overwritten when\n necessary. This value is not being included in\n the <code>ALL<\/code> constant.","static":true,"name":"OVERWRITE_SYMBOLS","comment":"Used to signify that symbols should be overwritten when\n necessary. This value is not being included in\n the ALL constant.","type_short":"long","constant_value":"536870912"},{"type_long":"long","javadoc":"Used to signify that references should be overwritten when\n necessary. This value is not being included in\n the <code>ALL<\/code> constant.","static":true,"name":"OVERWRITE_REFS","comment":"Used to signify that references should be overwritten when\n necessary. This value is not being included in\n the ALL constant.","type_short":"long","constant_value":"1073741824"},{"type_long":"long","javadoc":"Used to signify that an existing program is being\n updated. This value is not being included in\n the <code>ALL<\/code> constant.","static":true,"name":"ADD_2_PROG","comment":"Used to signify that an existing program is being\n updated. This value is not being included in\n the ALL constant.","type_short":"long","constant_value":"2147483648"},{"type_long":"boolean","javadoc":"","static":false,"name":"addToProgram","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"memoryBlocks","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"memoryContents","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwriteMemoryConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"instructions","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwriteDataConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"data","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"symbols","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwriteSymbolConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"equates","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"comments","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"properties","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwritePropertyConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"bookmarks","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwriteBookmarkConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"trees","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"references","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"overwriteReferenceConflicts","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"functions","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"registers","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"relocationTable","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"entryPoints","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"externalLibraries","comment":"","type_short":"boolean","constant_value":null}]}
