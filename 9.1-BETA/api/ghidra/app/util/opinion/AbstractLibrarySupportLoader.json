{"implements":[],"javadoc":"An abstract {@link Loader} that provides a framework to conveniently load {@link Program}s with\n support for linking against libraries contained in other {@link Program}s.\n Subclasses are responsible for the actual load.\n <p>","static":false,"extends":"ghidra.app.util.opinion.AbstractProgramLoader","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Loads bytes in a particular format into the given {@link Program}.\n@param provider The bytes to load.\n@param loadSpec The {@link LoadSpec} to use during load.\n@param options The load options.\n@param program The {@link Program} to load into.\n@param monitor A cancelable task monitor.\n@param log The message log.\n@throws IOException if there was an IO-related problem loading.\n@throws CancelledException if the user cancelled the load.","static":false,"name":"load","comment":"Loads bytes in a particular format into the given Program.","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"The bytes to load.","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"The LoadSpec to use during load.","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"The load options.","type_short":"List"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"The Program to load into.","type_short":"Program"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"A cancelable task monitor.","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"The message log.","type_short":"MessageLog"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was an IO-related problem loading.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"loadProgram","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"java.lang.String","name":"programName","comment":"","type_short":"String"},{"type_long":"ghidra.framework.model.DomainFolder","name":"programFolder","comment":"","type_short":"DomainFolder"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"java.lang.Object","name":"consumer","comment":"","type_short":"Object"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.util.List<ghidra.program.model.listing.Program>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"loadProgramInto","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDefaultOptions","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"ghidra.framework.model.DomainObject","name":"domainObject","comment":"","type_short":"DomainObject"},{"type_long":"boolean","name":"loadIntoProgram","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.Option>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"validateOptions","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getTier","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.opinion.LoaderTier","comment":"","type_short":"LoaderTier"}},{"javadoc":"","static":false,"name":"getTierPriority","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"postLoadProgramFixups","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"loadedPrograms","comment":"","type_short":"List"},{"type_long":"ghidra.framework.model.DomainFolder","name":"folder","comment":"","type_short":"DomainFolder"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"messageLog","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Specifies if the library filenames specified by this loader should be exact case match\n or case-insensitive.\n <p>\n Derived loader classes should override this method and specify if the OS that normally\n handles this type of binary is case-insensitive.\n <p>\n@return - true if case-insensitive or false if case-sensitive.","static":false,"name":"isCaseInsensitiveLibraryFilenames","comment":"Specifies if the library filenames specified by this loader should be exact case match\n or case-insensitive.\n \n Derived loader classes should override this method and specify if the OS that normally\n handles this type of binary is case-insensitive.\n ","params":[],"throws":[],"return":{"type_long":"boolean","comment":"- true if case-insensitive or false if case-sensitive.","type_short":"boolean"}},{"javadoc":"Returns the path the loaded {@link ByteProvider} is located in.\n <p>\n Special case when the ByteProvider specifies a {@link FSRL}, try to get the 'real'\n path on the local filesystem, otherwise return null.\n@param provider The {@link ByteProvider}.\n@return The path the loaded {@link ByteProvider} is located in.","static":false,"name":"getProviderFilePath","comment":"Returns the path the loaded ByteProvider is located in.\n \n Special case when the ByteProvider specifies a FSRL, try to get the 'real'\n path on the local filesystem, otherwise return null.","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"The ByteProvider.","type_short":"ByteProvider"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"The path the loaded ByteProvider is located in.","type_short":"String"}},{"javadoc":"Attempts to import all libraries listed in {@code unprocessedLibs}, placing the newly\n created {@link DomainObject} instances in {@code programList}.\n@param programFolder The domain folder where the new program will be stored, if null\n   the program should not be pre-saved. NOTE: the newly imported libraries will not be written\n   to this folder yet, that is handled in a later follow on step.\n@param paths A list of paths on the local filesystem to search for library files.\n@param loadSpec The {@link LoadSpec}.\n@param options The load options.\n@param log The log.\n@param consumer A consumer object for {@link DomainObject}s generated.\n@param unprocessedLibs A list of libraries that need to be loaded.\n@param processedLibs A list of libraries that have been loaded (used to prevent the same \n   library from being processed more than once)\n@param programList A list to hold newly loaded programs and libraries.  Any program\n      added to the list is the callers responsibility to release.\n@param monitor A cancelable task monitor.\n@throws IOException if there was an IO-related problem loading.\n@throws CancelledException if the user cancelled the load.","static":false,"name":"loadLibraries","comment":"Attempts to import all libraries listed in , placing the newly\n created DomainObject instances in .","params":[{"type_long":"ghidra.framework.model.DomainFolder","name":"programFolder","comment":"The domain folder where the new program will be stored, if null\n   the program should not be pre-saved. NOTE: the newly imported libraries will not be written\n   to this folder yet, that is handled in a later follow on step.","type_short":"DomainFolder"},{"type_long":"java.util.List<java.lang.String>","name":"paths","comment":"A list of paths on the local filesystem to search for library files.","type_short":"List"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"The LoadSpec.","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"The load options.","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"The log.","type_short":"MessageLog"},{"type_long":"java.lang.Object","name":"consumer","comment":"A consumer object for DomainObjects generated.","type_short":"Object"},{"type_long":"java.util.Set<java.lang.String>","name":"unprocessedLibs","comment":"A list of libraries that need to be loaded.","type_short":"Set"},{"type_long":"java.util.Set<java.lang.String>","name":"processedLibs","comment":"A list of libraries that have been loaded (used to prevent the same \n   library from being processed more than once)","type_short":"Set"},{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"programList","comment":"A list to hold newly loaded programs and libraries.  Any program\n      added to the list is the callers responsibility to release.","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"A cancelable task monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was an IO-related problem loading.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"programs","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isCreateExportSymbolFiles","comment":"","params":[{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isLoadLibraries","comment":"","params":[{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"doLoad","comment":"","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"},{"type_long":"java.lang.String","name":"programName","comment":"","type_short":"String"},{"type_long":"ghidra.framework.model.DomainFolder","name":"programFolder","comment":"","type_short":"DomainFolder"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"},{"type_long":"java.lang.Object","name":"consumer","comment":"","type_short":"Object"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.util.Set<java.lang.String>","name":"unprocessedLibraries","comment":"","type_short":"Set"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"For each program in the programs list, fix up its external Library entries so\n that they point to a path in the ghidra project.\n <p>\n Other programs in the programs list are matched first, then the\n ghidraLibSearchFolders are searched for matches.\n@param programs the list of programs to resolve against each other.  Programs not saved\n to the project will be considered as a valid external library.\n@param domainFolder the {@link DomainFolder} folder within which imported libraries will\n be searched.  This folder will be searched if a library is not found within the\n list of programs supplied.  If null, only the list of programs will be considered.\n@param saveIfModified flag to have this method save any programs it modifies\n@param messageLog log for messages.\n@param monitor the task monitor\n@throws IOException if there was an IO-related problem resolving.\n@throws CancelledException if the user cancelled the load.","static":false,"name":"resolveExternalLibs","comment":"For each program in the programs list, fix up its external Library entries so\n that they point to a path in the ghidra project.\n \n Other programs in the programs list are matched first, then the\n ghidraLibSearchFolders are searched for matches.","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"programs","comment":"the list of programs to resolve against each other.  Programs not saved\n to the project will be considered as a valid external library.","type_short":"List"},{"type_long":"ghidra.framework.model.DomainFolder","name":"domainFolder","comment":"the DomainFolder folder within which imported libraries will\n be searched.  This folder will be searched if a library is not found within the\n list of programs supplied.  If null, only the list of programs will be considered.","type_short":"DomainFolder"},{"type_long":"boolean","name":"saveIfModified","comment":"flag to have this method save any programs it modifies","type_short":"boolean"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"messageLog","comment":"log for messages.","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load.","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was an IO-related problem resolving.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Fix up program's external Library entries so\n that they point to a path in the ghidra project.\n <p>\n Other programs in the progsByName map are matched first, then the\n ghidraLibSearchFolders are searched for matches.\n@param program the program whose Library entries are to be resolved.  An open transaction\n on program is required.\n@param progsByName map of recently imported programs to be considered\n first when resolving external Libraries.  Programs not saved to the project\n will be ignored.\n@param domainFolder the {@link DomainFolder} folder within which imported libraries will\n be searched.  This folder will be searched if a library is not found within the\n progsByName map.  If null, only progsByName will be considered.\n@param messageLog log for messages.\n@param monitor the task monitor\n@throws CancelledException if the user cancelled the load.","static":false,"name":"resolveExternalLibs","comment":"Fix up program's external Library entries so\n that they point to a path in the ghidra project.\n \n Other programs in the progsByName map are matched first, then the\n ghidraLibSearchFolders are searched for matches.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program whose Library entries are to be resolved.  An open transaction\n on program is required.","type_short":"Program"},{"type_long":"java.util.Map<java.lang.String,ghidra.program.model.listing.Program>","name":"progsByName","comment":"map of recently imported programs to be considered\n first when resolving external Libraries.  Programs not saved to the project\n will be ignored.","type_short":"Map"},{"type_long":"ghidra.framework.model.DomainFolder","name":"domainFolder","comment":"the DomainFolder folder within which imported libraries will\n be searched.  This folder will be searched if a library is not found within the\n progsByName map.  If null, only progsByName will be considered.","type_short":"DomainFolder"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"messageLog","comment":"log for messages.","type_short":"MessageLog"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find the libPathFilename within the specified importFolder.  This method will handle\n relative path normalization.\n <p>\n If libPathFilename is a simple name without any path separators, only the\n importFolder folder will be searched.\n <p>\n If libPathFilename has a path, it will be treated as a relative path under\n {@code importFolder} and if found that DomainFile will be returned.\n <p>\n If libPathFilename has a path and it wasn't found under importFolder, the\n filename part of libPathFilename will be used to search the importFolder for matches.\n <p>\n@param libPathFilename String path with filename of the library to find\n@param domainFolder {@link DomainFolder} folder within which imported libraries will\n be searched.  If null this method will return null.\n@return found {@link DomainFile} or null if not found","static":false,"name":"findAlreadyImportedLibrary","comment":"Find the libPathFilename within the specified importFolder.  This method will handle\n relative path normalization.\n \n If libPathFilename is a simple name without any path separators, only the\n importFolder folder will be searched.\n \n If libPathFilename has a path, it will be treated as a relative path under\n  and if found that DomainFile will be returned.\n \n If libPathFilename has a path and it wasn't found under importFolder, the\n filename part of libPathFilename will be used to search the importFolder for matches.\n ","params":[{"type_long":"java.lang.String","name":"libPathFilename","comment":"String path with filename of the library to find","type_short":"String"},{"type_long":"ghidra.framework.model.DomainFolder","name":"domainFolder","comment":"DomainFolder folder within which imported libraries will\n be searched.  If null this method will return null.","type_short":"DomainFolder"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"found DomainFile or null if not found","type_short":"DomainFile"}},{"javadoc":"","static":true,"name":"appendPath","comment":"","params":[{"type_long":"java.lang.String[]","name":"pathStrs","comment":"","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Searches the local filesystem for the specified library file, returning a List\n of possible candidate files.\n <p>\n Each importPath directory will be searched for the library file in order.\n <p>\n If the library file specifies a path, it is treated as a relative subdirectory of\n each importPath directory that is searched, and if not found, the filename part of\n the library is used to search just the importPath directory.\n <p>\n If the library specifies a path, its native path is searched on the local filesystem.\n <p>\n@param libPathFilename - either a path_and_filename, or just a filename of a library\n that should be searched for.\n@param importPaths - list of filesystem paths on the local computer that will be\n searched.\n@return a List of Files (possibly empty, never null) that match the requested filename.","static":false,"name":"findLibraryFileToImport","comment":"Searches the local filesystem for the specified library file, returning a List\n of possible candidate files.\n \n Each importPath directory will be searched for the library file in order.\n \n If the library file specifies a path, it is treated as a relative subdirectory of\n each importPath directory that is searched, and if not found, the filename part of\n the library is used to search just the importPath directory.\n \n If the library specifies a path, its native path is searched on the local filesystem.\n ","params":[{"type_long":"java.lang.String","name":"libPathFilename","comment":"- either a path_and_filename, or just a filename of a library\n that should be searched for.","type_short":"String"},{"type_long":"java.util.List<java.lang.String>","name":"importPaths","comment":"- list of filesystem paths on the local computer that will be\n searched.","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<java.io.File>","comment":"a List of Files (possibly empty, never null) that match the requested filename.","type_short":"List"}},{"javadoc":"Imports a library file into a ghidra project.\n@param libName the name of the library to import\n@param libFolder the library folder\n@param libFile the library file to load\n@param loadSpec the {@link LoadSpec}\n@param options the load options\n@param log the message log\n@param consumer consumer object for the {@link Program} generated\n@param unprocessedLibs list of libraries that need to be loaded\n@param programList list of programs to add the imported library to\n@param monitor the task monitor\n@return true if the load was successful\n@throws CancelledException if the user cancelled the load operation\n@throws IOException if there was an error during the load","static":false,"name":"importLibrary","comment":"Imports a library file into a ghidra project.","params":[{"type_long":"java.lang.String","name":"libName","comment":"the name of the library to import","type_short":"String"},{"type_long":"ghidra.framework.model.DomainFolder","name":"libFolder","comment":"the library folder","type_short":"DomainFolder"},{"type_long":"java.io.File","name":"libFile","comment":"the library file to load","type_short":"File"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"the LoadSpec","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"the load options","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"the message log","type_short":"MessageLog"},{"type_long":"java.lang.Object","name":"consumer","comment":"consumer object for the Program generated","type_short":"Object"},{"type_long":"java.util.Set<java.lang.String>","name":"unprocessedLibs","comment":"list of libraries that need to be loaded","type_short":"Set"},{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"programList","comment":"list of programs to add the imported library to","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load operation","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was an error during the load","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the load was successful","type_short":"boolean"}},{"javadoc":"Imports a library file into a ghidra project. Use this method if you already have\n a {@link ByteProvider} available.\n@param libName the name of the library to import\n@param libFolder the library folder\n@param libFile the library file to load\n@param provider the byte provider\n@param loadSpec the {@link LoadSpec}\n@param options the load options\n@param log the message log\n@param consumer consumer object for the {@link Program} generated\n@param unprocessedLibs list of libraries that need to be loaded\n@param programList list of programs to add the imported library to\n@param monitor the task monitor\n@return true if the load was successful\n@throws CancelledException if the user cancelled the load operation\n@throws IOException if there was an error during the load","static":false,"name":"importLibrary","comment":"Imports a library file into a ghidra project. Use this method if you already have\n a ByteProvider available.","params":[{"type_long":"java.lang.String","name":"libName","comment":"the name of the library to import","type_short":"String"},{"type_long":"ghidra.framework.model.DomainFolder","name":"libFolder","comment":"the library folder","type_short":"DomainFolder"},{"type_long":"java.io.File","name":"libFile","comment":"the library file to load","type_short":"File"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"the byte provider","type_short":"ByteProvider"},{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"the LoadSpec","type_short":"LoadSpec"},{"type_long":"java.util.List<ghidra.app.util.Option>","name":"options","comment":"the load options","type_short":"List"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"the message log","type_short":"MessageLog"},{"type_long":"java.lang.Object","name":"consumer","comment":"consumer object for the Program generated","type_short":"Object"},{"type_long":"java.util.Set<java.lang.String>","name":"unprocessedLibs","comment":"list of libraries that need to be loaded","type_short":"Set"},{"type_long":"java.util.List<ghidra.program.model.listing.Program>","name":"programList","comment":"list of programs to add the imported library to","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load operation","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"if there was an error during the load","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if the load was successful","type_short":"boolean"}},{"javadoc":"Creates the library exports file, if necessary\n@param libName the name of the library\n@param libFile the library file\n@param log the message log\n@param monitor the task monitor\n@param size the language size\n@param program the loaded library program","static":false,"name":"createExportsFile","comment":"Creates the library exports file, if necessary","params":[{"type_long":"java.lang.String","name":"libName","comment":"the name of the library","type_short":"String"},{"type_long":"java.io.File","name":"libFile","comment":"the library file","type_short":"File"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"the message log","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"},{"type_long":"int","name":"size","comment":"the language size","type_short":"int"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the loaded library program","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getLoadSpec","comment":"","params":[{"type_long":"ghidra.app.util.opinion.LoadSpec","name":"loadSpec","comment":"","type_short":"LoadSpec"},{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"","type_short":"ByteProvider"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.opinion.LoadSpec","comment":"","type_short":"LoadSpec"}},{"javadoc":"Applies the library symbol table to the {@link Program} being loaded. For example, if you \n load \"mfc42.dll\", it will create the named symbols along with the ordinals.\n@param program The program being loaded.\n@param log The message log.\n@param monitor A cancelable task monitor.\n@throws CancelledException if the user cancelled the load.","static":false,"name":"applyLibrarySymbols","comment":"Applies the library symbol table to the Program being loaded. For example, if you \n load \"mfc42.dll\", it will create the named symbols along with the ordinals.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"The program being loaded.","type_short":"Program"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"The message log.","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"A cancelable task monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the load.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Applies the library symbol table to the imported symbols of the specified\n {@link Program}. Symbols may also be demangled (although this could be a mistake).\n@param program The {@link Program} whose imports should be resolved.\n@param log import message log\n@param monitor task monitor, if cancelled partial results may exist","static":false,"name":"applyImports","comment":"Applies the library symbol table to the imported symbols of the specified\n Program. Symbols may also be demangled (although this could be a mistake).","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"The Program whose imports should be resolved.","type_short":"Program"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"import message log","type_short":"MessageLog"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor, if cancelled partial results may exist","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getRidOfVersionAlias","comment":"","params":[{"type_long":"java.lang.String","name":"version","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isVersionMatch","comment":"","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"p","comment":"","type_short":"DomainObject"},{"type_long":"ghidra.app.util.opinion.LibrarySymbolTable","name":"symtab","comment":"","type_short":"LibrarySymbolTable"},{"type_long":"ghidra.app.util.importer.MessageLog","name":"log","comment":"","type_short":"MessageLog"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getExternalReferences","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ReferenceManager","name":"rm","comment":"","type_short":"ReferenceManager"},{"type_long":"java.lang.String","name":"externalName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ExternalReference[]","comment":"","type_short":"ghidra.program.model.symbol.ExternalReference[]"}},{"javadoc":"Ensures library files from case-insensitive\/case-sensitive OS's are handled correctly.\n <p>\n For loaders that handle binaries from insensitive OS's (ie. Windows), the supplied\n libFile parameter will be searched for in a case-insensitive manner.\n <p>\n For loaders that handle binaries from sensitive OS's (ie. Linux), the supplied\n libFile parameter will be returned unchanged, and the success or failure of matching\n the libFile to the actual file on the filesystem will depend on the host OS's\n case-sensitivity.\n <p>\n@param libFile File to match in a OS specific manner\n@return Matched File (which may or may not exist on the filesystem) or\n null if the file name case is mis-matched or bad.","static":false,"name":"resolveLibraryFile","comment":"Ensures library files from case-insensitive\/case-sensitive OS's are handled correctly.\n \n For loaders that handle binaries from insensitive OS's (ie. Windows), the supplied\n libFile parameter will be searched for in a case-insensitive manner.\n \n For loaders that handle binaries from sensitive OS's (ie. Linux), the supplied\n libFile parameter will be returned unchanged, and the success or failure of matching\n the libFile to the actual file on the filesystem will depend on the host OS's\n case-sensitivity.\n ","params":[{"type_long":"java.io.File","name":"libFile","comment":"File to match in a OS specific manner","type_short":"File"}],"throws":[],"return":{"type_long":"java.io.File","comment":"Matched File (which may or may not exist on the filesystem) or\n null if the file name case is mis-matched or bad.","type_short":"File"}}],"name":"AbstractLibrarySupportLoader","comment":"An abstract Loader that provides a framework to conveniently load Programs with\n support for linking against libraries contained in other Programs.\n Subclasses are responsible for the actual load.\n ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"SYM_OPTION_NAME","comment":"","type_short":"String","constant_value":"\"Create Export Symbol Files\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LIB_OPTION_NAME","comment":"","type_short":"String","constant_value":"\"Load External Libraries\""},{"type_long":"boolean","javadoc":"","static":true,"name":"IS_CREATE_EXPORT_SYMBOL_FILES_DEFAULT","comment":"","type_short":"boolean","constant_value":"true"},{"type_long":"boolean","javadoc":"","static":true,"name":"IS_LOAD_LIBRARIES_DEFAULT","comment":"","type_short":"boolean","constant_value":"false"}]}
