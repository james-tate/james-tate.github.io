{"implements":[],"javadoc":"","static":false,"extends":"java.io.Reader","methods":[{"javadoc":"Creates a buffering character-input stream that uses an input buffer of\n the specified size.\n@param in A Reader\n@param sz Input-buffer size\n@exception IllegalArgumentException If sz is <= 0","static":false,"name":"<init>","comment":"Creates a buffering character-input stream that uses an input buffer of\n the specified size.","params":[{"type_long":"java.io.Reader","name":"in","comment":"A Reader","type_short":"Reader"},{"type_long":"int","name":"sz","comment":"Input-buffer size","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a buffering character-input stream that uses a default-sized\n input buffer.\n@param in A Reader","static":false,"name":"<init>","comment":"Creates a buffering character-input stream that uses a default-sized\n input buffer.","params":[{"type_long":"java.io.Reader","name":"in","comment":"A Reader","type_short":"Reader"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks to make sure that the stream has not been closed","static":false,"name":"ensureOpen","comment":"Checks to make sure that the stream has not been closed","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Fills the input buffer, taking the mark into account if it is valid.","static":false,"name":"fill","comment":"Fills the input buffer, taking the mark into account if it is valid.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reads a single character.\n@return The character read, as an integer in the range 0 to 65535 (\n         <tt>0x00-0xffff<\/tt>), or -1 if the end of the stream has been\n         reached\n@exception IOException If an I\/O error occurs","static":false,"name":"read","comment":"Reads a single character.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"The character read, as an integer in the range 0 to 65535 (\n         0x00-0xffff), or -1 if the end of the stream has been\n         reached","type_short":"int"}},{"javadoc":"Reads characters into a portion of an array, reading from the underlying\n stream if necessary.","static":false,"name":"read1","comment":"Reads characters into a portion of an array, reading from the underlying\n stream if necessary.","params":[{"type_long":"char[]","name":"cbuf","comment":"","type_short":"char[]"},{"type_long":"int","name":"off","comment":"","type_short":"int"},{"type_long":"int","name":"len","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Reads characters into a portion of an array.\n \n <p>\n This method implements the general contract of the corresponding\n <code>{@link Reader#read(char[], int, int) read}<\/code> method of the\n <code>{@link Reader}<\/code> class. As an additional convenience, it\n attempts to read as many characters as possible by repeatedly invoking\n the <code>read<\/code> method of the underlying stream. This iterated\n <code>read<\/code> continues until one of the following conditions becomes\n true:\n <ul>\n \n <li>The specified number of characters have been read,\n \n <li>The <code>read<\/code> method of the underlying stream returns\n <code>-1<\/code>, indicating end-of-file, or\n \n <li>The <code>ready<\/code> method of the underlying stream returns\n <code>false<\/code>, indicating that further input requests would block.\n \n <\/ul>\n If the first <code>read<\/code> on the underlying stream returns\n <code>-1<\/code> to indicate end-of-file then this method returns\n <code>-1<\/code>. Otherwise this method returns the number of characters\n actually read.\n \n <p>\n Subclasses of this class are encouraged, but not required, to attempt to\n read as many characters as possible in the same fashion.\n \n <p>\n Ordinarily this method takes characters from this stream's character\n buffer, filling it from the underlying stream as necessary. If, however,\n the buffer is empty, the mark is not valid, and the requested length is\n at least as large as the buffer, then this method will read characters\n directly from the underlying stream into the given array. Thus redundant\n <code>BufferedReader<\/code>s will not copy data unnecessarily.\n@param cbuf Destination buffer\n@param off Offset at which to start storing characters\n@param len Maximum number of characters to read\n@return The number of characters read, or -1 if the end of the stream has\n         been reached\n@exception IOException If an I\/O error occurs","static":false,"name":"read","comment":"Reads characters into a portion of an array.\n \n \n This method implements the general contract of the corresponding\n Reader#read(char[], int, int) method of the\n Reader class. As an additional convenience, it\n attempts to read as many characters as possible by repeatedly invoking\n the read method of the underlying stream. This iterated\n read continues until one of the following conditions becomes\n true:\n \n \n The specified number of characters have been read,\n \n The read method of the underlying stream returns\n -1, indicating end-of-file, or\n \n The ready method of the underlying stream returns\n false, indicating that further input requests would block.\n \n \n If the first read on the underlying stream returns\n -1 to indicate end-of-file then this method returns\n -1. Otherwise this method returns the number of characters\n actually read.\n \n \n Subclasses of this class are encouraged, but not required, to attempt to\n read as many characters as possible in the same fashion.\n \n \n Ordinarily this method takes characters from this stream's character\n buffer, filling it from the underlying stream as necessary. If, however,\n the buffer is empty, the mark is not valid, and the requested length is\n at least as large as the buffer, then this method will read characters\n directly from the underlying stream into the given array. Thus redundant\n BufferedReaders will not copy data unnecessarily.","params":[{"type_long":"char[]","name":"cbuf","comment":"Destination buffer","type_short":"char[]"},{"type_long":"int","name":"off","comment":"Offset at which to start storing characters","type_short":"int"},{"type_long":"int","name":"len","comment":"Maximum number of characters to read","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"The number of characters read, or -1 if the end of the stream has\n         been reached","type_short":"int"}},{"javadoc":"Reads a line of text. A line is considered to be terminated by any one of\n a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.\n@param ignoreLF If true, the next '\\n' will be skipped\n@return A String containing the contents of the line, not including any\n         line-termination characters, or null if the end of the stream has\n         been reached\n@see java.io.LineNumberReader#readLine()\n@exception IOException If an I\/O error occurs","static":false,"name":"readLine","comment":"Reads a line of text. A line is considered to be terminated by any one of\n a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.","params":[{"type_long":"boolean","name":"ignoreLF","comment":"If true, the next '\\n' will be skipped","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"A String containing the contents of the line, not including any\n         line-termination characters, or null if the end of the stream has\n         been reached","type_short":"String"}},{"javadoc":"Reads a line of text. A line is considered to be terminated by any one of\n a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.\n@return A String containing the contents of the line, not including any\n         line-termination characters, or null if the end of the stream has\n         been reached\n@exception IOException If an I\/O error occurs","static":false,"name":"readLine","comment":"Reads a line of text. A line is considered to be terminated by any one of\n a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String","comment":"A String containing the contents of the line, not including any\n         line-termination characters, or null if the end of the stream has\n         been reached","type_short":"String"}},{"javadoc":"Skips characters.\n@param n The number of characters to skip\n@return The number of characters actually skipped\n@exception IllegalArgumentException If <code>n<\/code> is negative.\n@exception IOException If an I\/O error occurs","static":false,"name":"skip","comment":"Skips characters.","params":[{"type_long":"long","name":"n","comment":"The number of characters to skip","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"long","comment":"The number of characters actually skipped","type_short":"long"}},{"javadoc":"Tells whether this stream is ready to be read. A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.\n@exception IOException If an I\/O error occurs","static":false,"name":"ready","comment":"Tells whether this stream is ready to be read. A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Tells whether this stream supports the mark() operation, which it does.","static":false,"name":"markSupported","comment":"Tells whether this stream supports the mark() operation, which it does.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Marks the present position in the stream. Subsequent calls to reset()\n will attempt to reposition the stream to this point.\n@param readAheadLimit Limit on the number of characters that may be read while still\n            preserving the mark. An attempt to reset the stream after\n            reading characters up to this limit or beyond may fail. A\n            limit value larger than the size of the input buffer will\n            cause a new buffer to be allocated whose size is no smaller\n            than limit. Therefore large values should be used with care.\n@exception IllegalArgumentException If readAheadLimit is < 0\n@exception IOException If an I\/O error occurs","static":false,"name":"mark","comment":"Marks the present position in the stream. Subsequent calls to reset()\n will attempt to reposition the stream to this point.","params":[{"type_long":"int","name":"readAheadLimit","comment":"Limit on the number of characters that may be read while still\n            preserving the mark. An attempt to reset the stream after\n            reading characters up to this limit or beyond may fail. A\n            limit value larger than the size of the input buffer will\n            cause a new buffer to be allocated whose size is no smaller\n            than limit. Therefore large values should be used with care.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Resets the stream to the most recent mark.\n@exception IOException If the stream has never been marked, or if the mark has\n                been invalidated","static":false,"name":"reset","comment":"Resets the stream to the most recent mark.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BoundedBufferedReader","comment":"","fields":[{"type_long":"java.io.Reader","javadoc":"","static":false,"name":"in","comment":"","type_short":"Reader","constant_value":null},{"type_long":"char[]","javadoc":"","static":false,"name":"cb","comment":"","type_short":"char[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"nChars","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"nextChar","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"INVALIDATED","comment":"","type_short":"int","constant_value":"-2"},{"type_long":"int","javadoc":"","static":true,"name":"UNMARKED","comment":"","type_short":"int","constant_value":"-1"},{"type_long":"int","javadoc":"","static":false,"name":"markedChar","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"readAheadLimit","comment":"","type_short":"int","constant_value":null},{"type_long":"boolean","javadoc":"If the next character is a line feed, skip it","static":false,"name":"skipLF","comment":"If the next character is a line feed, skip it","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"The skipLF flag when the mark was set","static":false,"name":"markedSkipLF","comment":"The skipLF flag when the mark was set","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"defaultCharBufferSize","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"defaultExpectedLineLength","comment":"","type_short":"int","constant_value":null}]}
