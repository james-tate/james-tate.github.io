{"implements":[],"javadoc":"Factory and utility methods for working with {@link Loader}s.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets all supported {@link LoadSpec}s for loading the given {@link ByteProvider}.\n@param provider The {@link ByteProvider} to load.\n@param loaderFilter A {@link Predicate} that will filter out undesired {@link Loader}s.\n@return A {@link Map} of {@link Loader}s to their respective {@link LoadSpec}s.  It is safe\n   to assume that every {@link Loader} in the {@link Map} will have at least one \n   {@link LoadSpec}.","static":true,"name":"getSupportedLoadSpecs","comment":"Gets all supported LoadSpecs for loading the given ByteProvider.","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"The ByteProvider to load.","type_short":"ByteProvider"},{"type_long":"java.util.function.Predicate<ghidra.app.util.opinion.Loader>","name":"loaderFilter","comment":"A Predicate that will filter out undesired Loaders.","type_short":"Predicate"}],"throws":[],"return":{"type_long":"java.util.Map<ghidra.app.util.opinion.Loader,java.util.Collection<ghidra.app.util.opinion.LoadSpec>>","comment":"A Map of Loaders to their respective LoadSpecs.  It is safe\n   to assume that every Loader in the Map will have at least one \n   LoadSpec.","type_short":"Map"}},{"javadoc":"Gets all supported {@link LoadSpec}s for loading the given {@link ByteProvider}.\n@param provider The {@link ByteProvider} to load.\n@return A {@link Map} of {@link Loader}s to their respective {@link LoadSpec}s.  It is safe\n   to assume that every {@link Loader} in the {@link Map} will have at least one \n   {@link LoadSpec}.","static":true,"name":"getAllSupportedLoadSpecs","comment":"Gets all supported LoadSpecs for loading the given ByteProvider.","params":[{"type_long":"ghidra.app.util.bin.ByteProvider","name":"provider","comment":"The ByteProvider to load.","type_short":"ByteProvider"}],"throws":[],"return":{"type_long":"java.util.Map<ghidra.app.util.opinion.Loader,java.util.Collection<ghidra.app.util.opinion.LoadSpec>>","comment":"A Map of Loaders to their respective LoadSpecs.  It is safe\n   to assume that every Loader in the Map will have at least one \n   LoadSpec.","type_short":"Map"}},{"javadoc":"Gets all known {@link Loader}s' names.\n@return All known {@link Loader}s' names.","static":true,"name":"getAllLoaderNames","comment":"Gets all known Loaders' names.","params":[],"throws":[],"return":{"type_long":"java.util.Collection<java.lang.String>","comment":"All known Loaders' names.","type_short":"Collection"}},{"javadoc":"Gets the {@link Loader} {@link Class} that corresponds to the given simple {@link Class}\n name.\n@param name The name of the {@link Loader} to get the {@link Class} of.\n@return The {@link Loader} {@link Class} that corresponds to the given simple {@link Class}\n   name.","static":true,"name":"getLoaderClassByName","comment":"Gets the Loader Class that corresponds to the given simple Class\n name.","params":[{"type_long":"java.lang.String","name":"name","comment":"The name of the Loader to get the Class of.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.Class<? extends ghidra.app.util.opinion.Loader>","comment":"The Loader Class that corresponds to the given simple Class\n   name.","type_short":"Class"}},{"javadoc":"Gets an instance of every known {@link Loader}.\n@return An instance of every known {@link Loader}.","static":true,"name":"getAllLoaders","comment":"Gets an instance of every known Loader.","params":[],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.app.util.opinion.Loader>","comment":"An instance of every known Loader.","type_short":"Collection"}}],"name":"LoaderService","comment":"Factory and utility methods for working with Loaders.","fields":[{"type_long":"java.util.function.Predicate<ghidra.app.util.opinion.Loader>","javadoc":"","static":true,"name":"ACCEPT_ALL","comment":"","type_short":"Predicate","constant_value":null}]}
