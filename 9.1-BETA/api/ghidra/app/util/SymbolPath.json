{"implements":["java.lang.Comparable"],"javadoc":"A convenience object for parsing a namespace path to a symbol.\n <P>\n For example, if a SymbolPath is constructed with \"foo::bar::baz\", then \"baz\" is the\n name of a symbol in the \"bar\" namespace, which is in the \"foo\" namespace.\n <P>\n <LI>{@link #getName()} will return \"baz\".\n <LI>{@link #getParentPath()} will return \"foo:bar\".\n <LI>{@link #getPath()} will return \"foo::bar::baz\".","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a SymbolPath from a string containing NAMESPACE_DELIMITER (\"::\") sequences to\n separate the namespace names.  This is the only constructor that employs special\n string-based namespace parsing.\n@param symbolPathString the string to parse as a sequence of namespace names separated by\n \"::\".","static":false,"name":"<init>","comment":"Construct a SymbolPath from a string containing NAMESPACE_DELIMITER (\"::\") sequences to\n separate the namespace names.  This is the only constructor that employs special\n string-based namespace parsing.","params":[{"type_long":"java.lang.String","name":"symbolPathString","comment":"the string to parse as a sequence of namespace names separated by\n \"::\".","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a SymbolPath from an array of strings where each string is the name of a namespace\n in the symbol path.\n@param symbolPath the array of names of namespaces.","static":false,"name":"<init>","comment":"Construct a SymbolPath from an array of strings where each string is the name of a namespace\n in the symbol path.","params":[{"type_long":"java.lang.String[]","name":"symbolPath","comment":"the array of names of namespaces.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a SymbolPath from a list of strings where each string is the name of a namespace\n in the symbol path.\n@param symbolList the array of names of namespaces.\n@throws IllegalArgumentException if the given list is null or empty.","static":false,"name":"<init>","comment":"Construct a SymbolPath from a list of strings where each string is the name of a namespace\n in the symbol path.","params":[{"type_long":"java.util.List<java.lang.String>","name":"symbolList","comment":"the array of names of namespaces.","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new SymbolPath for the given symbol.\n@param symbol the symbol to get a SymbolPath for.","static":false,"name":"<init>","comment":"Constructs a new SymbolPath for the given symbol.","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"the symbol to get a SymbolPath for.","type_short":"Symbol"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new SymbolPath for the given symbol with the option to exclude a beginning\n library name.\n@param symbol the symbol to get a SymbolPath for.\n@param excludeLibrary if true, any library name at the front of the path will be removed.","static":false,"name":"<init>","comment":"Constructs a new SymbolPath for the given symbol with the option to exclude a beginning\n library name.","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"the symbol to get a SymbolPath for.","type_short":"Symbol"},{"type_long":"boolean","name":"excludeLibrary","comment":"if true, any library name at the front of the path will be removed.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a Symbol from a parent SymbolPath and a symbol name.\n@param parent the parent SymbolPath. Can be null if the name is in the global space.\n@param name the name of the symbol. This can't be null;","static":false,"name":"<init>","comment":"Creates a Symbol from a parent SymbolPath and a symbol name.","params":[{"type_long":"ghidra.app.util.SymbolPath","name":"parent","comment":"the parent SymbolPath. Can be null if the name is in the global space.","type_short":"SymbolPath"},{"type_long":"java.lang.String","name":"name","comment":"the name of the symbol. This can't be null;","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a new SymbolPath in which invalid characters are replaced\n with underscores.\n@return the new SymbolPath with replaced characters.","static":false,"name":"replaceInvalidChars","comment":"Returns a new SymbolPath in which invalid characters are replaced\n with underscores.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.SymbolPath","comment":"the new SymbolPath with replaced characters.","type_short":"SymbolPath"}},{"javadoc":"Returns the name of the symbol;\n@return the symbol name as string without any path information.","static":false,"name":"getName","comment":"Returns the name of the symbol;","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the symbol name as string without any path information.","type_short":"String"}},{"javadoc":"Returns the SymbolPath for the parent namespace or null if the parent is the global space.\n@return the SymbolPath for the parent namespace or null if the parent is the global space.","static":false,"name":"getParent","comment":"Returns the SymbolPath for the parent namespace or null if the parent is the global space.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.SymbolPath","comment":"the SymbolPath for the parent namespace or null if the parent is the global space.","type_short":"SymbolPath"}},{"javadoc":"Returns null if the parent is null or global; otherwise returns the path as a string of the\n parent namespace path.\n@return the path of the parent namespace as string. Returns null if the parent is null or global.","static":false,"name":"getParentPath","comment":"Returns null if the parent is null or global; otherwise returns the path as a string of the\n parent namespace path.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the path of the parent namespace as string. Returns null if the parent is null or global.","type_short":"String"}},{"javadoc":"Returns the full symbol path as a string.\n@return the SymbolPath for the complete name as string, including namespace.","static":false,"name":"getPath","comment":"Returns the full symbol path as a string.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the SymbolPath for the complete name as string, including namespace.","type_short":"String"}},{"javadoc":"Creates a new SymbolPath composed of the list of names in this path followed by the\n list of names in the given path.\n@param path the path of names to append to this path.\n@return a new SymbolPath that appends the given path to this path.","static":false,"name":"append","comment":"Creates a new SymbolPath composed of the list of names in this path followed by the\n list of names in the given path.","params":[{"type_long":"ghidra.app.util.SymbolPath","name":"path","comment":"the path of names to append to this path.","type_short":"SymbolPath"}],"throws":[],"return":{"type_long":"ghidra.app.util.SymbolPath","comment":"a new SymbolPath that appends the given path to this path.","type_short":"SymbolPath"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns a list of names of the symbols in the symbol path, starting with the name just\n below the global namespace.\n@return a list of names of the symbols in the symbol path.","static":false,"name":"asList","comment":"Returns a list of names of the symbols in the symbol path, starting with the name just\n below the global namespace.","params":[],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"a list of names of the symbols in the symbol path.","type_short":"List"}},{"javadoc":"Returns an array of names of the symbols in the symbol path, starting with the name just\n below the global namespace.\n@return an array of names of the symbols in the symbol path.","static":false,"name":"asArray","comment":"Returns an array of names of the symbols in the symbol path, starting with the name just\n below the global namespace.","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"an array of names of the symbols in the symbol path.","type_short":"java.lang.String[]"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"addToList","comment":"","params":[{"type_long":"java.util.List<java.lang.String>","name":"list","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Some existing code might include \"Global\" at the beginning of their path.  This\n method will eliminate any \"Global\" at the beginning of the path.\n@param path the path to check for \"Global\"\n@return the given path if it is not global; otherwise returns null.","static":false,"name":"checkGlobal","comment":"Some existing code might include \"Global\" at the beginning of their path.  This\n method will eliminate any \"Global\" at the beginning of the path.","params":[{"type_long":"ghidra.app.util.SymbolPath","name":"path","comment":"the path to check for \"Global\"","type_short":"SymbolPath"}],"throws":[],"return":{"type_long":"ghidra.app.util.SymbolPath","comment":"the given path if it is not global; otherwise returns null.","type_short":"SymbolPath"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.app.util.SymbolPath","name":"o","comment":"","type_short":"SymbolPath"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"SymbolPath","comment":"A convenience object for parsing a namespace path to a symbol.\n \n For example, if a SymbolPath is constructed with \"foo::bar::baz\", then \"baz\" is the\n name of a symbol in the \"bar\" namespace, which is in the \"foo\" namespace.\n \n #getName() will return \"baz\".\n #getParentPath() will return \"foo:bar\".\n #getPath() will return \"foo::bar::baz\".","fields":[{"type_long":"ghidra.app.util.SymbolPath","javadoc":"","static":false,"name":"parentPath","comment":"","type_short":"SymbolPath","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"symbolName","comment":"","type_short":"String","constant_value":null}]}
