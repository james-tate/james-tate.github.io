{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"diffLines","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"left","comment":"","type_short":"DataTypeDiffInput"},{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"right","comment":"","type_short":"DataTypeDiffInput"}],"throws":[],"return":{"type_long":"ghidra.app.util.html.diff.DataTypeDiff","comment":"","type_short":"DataTypeDiff"}},{"javadoc":"","static":true,"name":"diffHeader","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"left","comment":"","type_short":"DataTypeDiffInput"},{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"right","comment":"","type_short":"DataTypeDiffInput"}],"throws":[],"return":{"type_long":"ghidra.app.util.html.diff.DataTypeDiff","comment":"","type_short":"DataTypeDiff"}},{"javadoc":"","static":true,"name":"padLines","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"leftLines","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"rightLines","comment":"","type_short":"DiffLines"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"diffBody","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"left","comment":"","type_short":"DataTypeDiffInput"},{"type_long":"ghidra.app.util.html.diff.DataTypeDiffInput","name":"right","comment":"","type_short":"DataTypeDiffInput"}],"throws":[],"return":{"type_long":"ghidra.app.util.html.diff.DataTypeDiff","comment":"","type_short":"DataTypeDiff"}},{"javadoc":"walk both lists, processing the lines and adding blank lines to align the data","static":true,"name":"alignRows","comment":"walk both lists, processing the lines and adding blank lines to align the data","params":[{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"leftValidator","comment":"","type_short":"DiffLinesValidator"},{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"rightValidator","comment":"","type_short":"DiffLinesValidator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"validateNextLine","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"validator1","comment":"","type_short":"DiffLinesValidator"},{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"validator2","comment":"","type_short":"DiffLinesValidator"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a line that matches the given line that occurs later in the 'other' validator; \n returns null if no suitable match is found.\n@param source the validator that has a line which needs matching\n@param sourceLine the line that needs matching\n@param other the validator in which to find a match for the given line\n@return a line that matches the given line that occurs later in the 'other' validator; \n \t\t   returns null if no suitable match is found.","static":true,"name":"findNextMatch","comment":"Returns a line that matches the given line that occurs later in the 'other' validator; \n returns null if no suitable match is found.","params":[{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"source","comment":"the validator that has a line which needs matching","type_short":"DiffLinesValidator"},{"type_long":"ghidra.app.util.html.ValidatableLine","name":"sourceLine","comment":"the line that needs matching","type_short":"ValidatableLine"},{"type_long":"ghidra.app.util.html.diff.DiffLinesValidator","name":"other","comment":"the validator in which to find a match for the given line","type_short":"DiffLinesValidator"}],"throws":[],"return":{"type_long":"java.lang.Integer","comment":"a line that matches the given line that occurs later in the 'other' validator; \n \t\t   returns null if no suitable match is found.","type_short":"Integer"}},{"javadoc":"Removes empty rows that are no longer necessary for alignment (it may add new empty rows)","static":true,"name":"removeExcessEmptyRows","comment":"Removes empty rows that are no longer necessary for alignment (it may add new empty rows)","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"leftLines","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"rightLines","comment":"","type_short":"DiffLines"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"condenseSharedRange","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"left","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"right","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"newLeft","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"newRight","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"start","comment":"","type_short":"int"},{"type_long":"int","name":"end","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"findEndOfDistinctLines","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"left","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"right","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"start","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Copies from the source to the destination all lines that are not placeholders.  If the \n two input lists are not the same after the copy, then the smaller list is padded with\n placeholder lines.","static":true,"name":"condenseSubRange","comment":"Copies from the source to the destination all lines that are not placeholders.  If the \n two input lists are not the same after the copy, then the smaller list is padded with\n placeholder lines.","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"leftSource","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"rightSource","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"leftDestination","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"rightDestination","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"start","comment":"","type_short":"int"},{"type_long":"int","name":"end","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"copyLine","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"from","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"to","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"copyRealLines","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"from","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"to","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"copyRealLines","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"from","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"to","comment":"","type_short":"DiffLines"},{"type_long":"int","name":"start","comment":"","type_short":"int"},{"type_long":"int","name":"end","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"padSmaller","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"leftDestination","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"rightDestination","comment":"","type_short":"DiffLines"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"highlightDiffLineDiferences","comment":"","params":[{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"left","comment":"","type_short":"DiffLines"},{"type_long":"ghidra.app.util.html.diff.DiffLines","name":"right","comment":"","type_short":"DiffLines"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"highlightDifferences","comment":"","params":[{"type_long":"java.util.List<ghidra.app.util.html.ValidatableLine>","name":"left","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.app.util.html.ValidatableLine>","name":"right","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataTypeDiffBuilder","comment":"","fields":[{"type_long":"java.lang.String","javadoc":"HACK: for some reason when opening the HTML document with '&#47;', all text until the\n next HTML tag is not displayed.  So, we put in a dummy tag and all is well.\n Java 1.5.0_12","static":true,"name":"EMPTY_TAG","comment":"HACK: for some reason when opening the HTML document with '', all text until the\n next HTML tag is not displayed.  So, we put in a dummy tag and all is well.\n Java 1.5.0_12","type_short":"String","constant_value":"\"<I><\/I>\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BR","comment":"","type_short":"String","constant_value":"\"<BR>\""}]}
