{"implements":["ghidra.program.model.listing.CodeUnit"],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a pseudo code unit within a program\n@param program the program this code unit is in.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space","static":false,"name":"<init>","comment":"Creates a pseudo code unit within a program","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program this code unit is in.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the minimum address of this code unit.","type_short":"Address"},{"type_long":"int","name":"length","comment":"the length  of this code unit.","type_short":"int"},{"type_long":"ghidra.program.model.mem.MemBuffer","name":"memBuffer","comment":"the memory buffer where bytes can be obtained for this code unit.","type_short":"MemBuffer"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if code unit length causes wrap within space","type_short":"AddressOverflowException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a pseudo code unit within a program\n@param program the program this code unit is in.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param cacheLength the number of memBuffer bytes to be available within this CodeUnit MemBuffer\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space","static":false,"name":"<init>","comment":"Creates a pseudo code unit within a program","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program this code unit is in.","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the minimum address of this code unit.","type_short":"Address"},{"type_long":"int","name":"length","comment":"the length  of this code unit.","type_short":"int"},{"type_long":"int","name":"cacheLength","comment":"the number of memBuffer bytes to be available within this CodeUnit MemBuffer","type_short":"int"},{"type_long":"ghidra.program.model.mem.MemBuffer","name":"memBuffer","comment":"the memory buffer where bytes can be obtained for this code unit.","type_short":"MemBuffer"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if code unit length causes wrap within space","type_short":"AddressOverflowException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a pseudo code unit without a program.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space","static":false,"name":"<init>","comment":"Creates a pseudo code unit without a program.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the minimum address of this code unit.","type_short":"Address"},{"type_long":"int","name":"length","comment":"the length  of this code unit.","type_short":"int"},{"type_long":"ghidra.program.model.mem.MemBuffer","name":"memBuffer","comment":"the memory buffer where bytes can be obtained for this code unit.","type_short":"MemBuffer"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if code unit length causes wrap within space","type_short":"AddressOverflowException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a pseudo code unit without a program.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param cacheLength the number of memBuffer bytes to be available within this CodeUnit MemBuffer\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space","static":false,"name":"<init>","comment":"Creates a pseudo code unit without a program.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"the minimum address of this code unit.","type_short":"Address"},{"type_long":"int","name":"length","comment":"the length  of this code unit.","type_short":"int"},{"type_long":"int","name":"cacheLength","comment":"the number of memBuffer bytes to be available within this CodeUnit MemBuffer","type_short":"int"},{"type_long":"ghidra.program.model.mem.MemBuffer","name":"memBuffer","comment":"the memory buffer where bytes can be obtained for this code unit.","type_short":"MemBuffer"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"if code unit length causes wrap within space","type_short":"AddressOverflowException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refresh","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invalidate memory buffer","static":false,"name":"invalidate","comment":"Invalidate memory buffer","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isValid","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getAddressString(boolean, boolean)","static":false,"name":"getAddressString","comment":"","params":[{"type_long":"boolean","name":"showBlockName","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"pad","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the length of the code unit.","static":false,"name":"getLength","comment":"Get the length of the code unit.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"refreshIfNeeded","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the bytes for this code unit.","static":false,"name":"getBytes","comment":"Gets the bytes for this code unit.","params":[],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"getBytes","comment":"","params":[{"type_long":"byte[]","name":"b","comment":"","type_short":"byte[]"},{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getBytesInCodeUnit","comment":"","params":[{"type_long":"byte[]","name":"buffer","comment":"","type_short":"byte[]"},{"type_long":"int","name":"bufferOffset","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBigEndian","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getShort","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"","static":false,"name":"getInt","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getLong","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getBigInteger","comment":"","params":[{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"boolean","name":"signed","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"java.math.BigInteger","comment":"","type_short":"BigInteger"}},{"javadoc":"Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support object\n             types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setProperty","comment":"Set the property name with the given value for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property to save.","type_short":"String"},{"type_long":"ghidra.util.Saveable","name":"value","comment":"the value of the property to save.","type_short":"Saveable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support string\n             types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setProperty","comment":"Set the property name with the given value for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property to save.","type_short":"String"},{"type_long":"java.lang.String","name":"value","comment":"the value of the property to save.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support int types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setProperty","comment":"Set the property name with the given value for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property to save.","type_short":"String"},{"type_long":"int","name":"value","comment":"the value of the property to save.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Mark the property name as having a value for this code unit.\n@param name the name of the property to save.\n@throws TypeMismatchException if the property manager for name does not support void types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setProperty","comment":"Mark the property name as having a value for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property to save.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the object property for name; returns null if there is no name\n property for this code unit.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support object\n             types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getObjectProperty","comment":"Get the object property for name; returns null if there is no name\n property for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.util.Saveable","comment":"","type_short":"Saveable"}},{"javadoc":"Get the string property for name; returns null if there is no name\n property for this code unit.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support string\n             types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getStringProperty","comment":"Get the string property for name; returns null if there is no name\n property for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the int property for name.\n@param name the name of the property.\n@throws NoValueException if there is not name property for this code unit\n@throws TypeMismatchException if the property manager for name does not support int types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getIntProperty","comment":"Get the int property for name.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property.","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.NoValueException","comment":"if there is not name property for this code unit","type_short":"NoValueException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"hasProperty","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns whether this code unit is marked as having the name property.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support void types\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getVoidProperty","comment":"Returns whether this code unit is marked as having the name property.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property.","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#propertyNames()","static":false,"name":"propertyNames","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<java.lang.String>","comment":"","type_short":"Iterator"}},{"javadoc":"Remove the property value with the given name for this code unit.\n@param name the name of the property.","static":false,"name":"removeProperty","comment":"Remove the property value with the given name for this code unit.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the property.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.\n@param visitor the class implementing the PropertyVisitor interface.\n@param propertyName the name of the property to be visited.","static":false,"name":"visitProperty","comment":"Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.","params":[{"type_long":"ghidra.util.prop.PropertyVisitor","name":"visitor","comment":"the class implementing the PropertyVisitor interface.","type_short":"PropertyVisitor"},{"type_long":"java.lang.String","name":"propertyName","comment":"the name of the property to be visited.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the label for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.\n@deprecated","static":false,"name":"getLabel","comment":"Get the label for this code unit.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the symbols for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getSymbols","comment":"Get the symbols for this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol[]","comment":"","type_short":"ghidra.program.model.symbol.Symbol[]"}},{"javadoc":"Get the primary Symbol for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getPrimarySymbol","comment":"Get the primary Symbol for this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Symbol","comment":"","type_short":"Symbol"}},{"javadoc":"Get the starting address for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getMinAddress","comment":"Get the starting address for this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the ending address for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getMaxAddress","comment":"Get the ending address for this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Get the code unit after this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getNextCodeUnit","comment":"Get the code unit after this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnit","comment":"","type_short":"CodeUnit"}},{"javadoc":"Get the code unit before this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getPreviousCodeUnit","comment":"Get the code unit before this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnit","comment":"","type_short":"CodeUnit"}},{"javadoc":"Return true if the given CodeUnit follows directly after this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"isSuccessor","comment":"Return true if the given CodeUnit follows directly after this code unit.","params":[{"type_long":"ghidra.program.model.listing.CodeUnit","name":"codeUnit","comment":"","type_short":"CodeUnit"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getComment(int)","static":false,"name":"getComment","comment":"","params":[{"type_long":"int","name":"commentType","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Get the comment as an array where each element is a single line for the\n given type.\n@param commentType must be either EOL_COMMENT_TYPE, PRE_COMMENT_TYPE,\n            POST_COMMENT_TYPE, or PLATE_COMMENT_TYPE\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"getCommentAsArray","comment":"Get the comment as an array where each element is a single line for the\n given type.","params":[{"type_long":"int","name":"commentType","comment":"must be either EOL_COMMENT_TYPE, PRE_COMMENT_TYPE,\n            POST_COMMENT_TYPE, or PLATE_COMMENT_TYPE","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"Set the comment for the given type.\n@param commentType must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT\n@param comment the lines that make up the comment\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setCommentAsArray","comment":"Set the comment for the given type.","params":[{"type_long":"int","name":"commentType","comment":"must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT","type_short":"int"},{"type_long":"java.lang.String[]","name":"comment","comment":"the lines that make up the comment","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the comment for the given type.\n@param commentType must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT\n@param comment the comment\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"setComment","comment":"Set the comment for the given type.","params":[{"type_long":"int","name":"commentType","comment":"must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"the comment","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines if this code unit contains the indicated address.\n@param testAddr the address to test\n@return true if address is contained in the range.\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"contains","comment":"Determines if this code unit contains the indicated address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"testAddr","comment":"the address to test","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if address is contained in the range.","type_short":"boolean"}},{"javadoc":"Compares the given address to the address range of this node.\n@param a the address\n@return a negative integer if addr is greater than the maximum range\n         address zero if addr is in the range a positive integer if addr\n         is less than minimum range address\n@throws ConcurrentModificationException if this object is no longer valid.","static":false,"name":"compareTo","comment":"Compares the given address to the address range of this node.","params":[{"type_long":"ghidra.program.model.address.Address","name":"a","comment":"the address","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"a negative integer if addr is greater than the maximum range\n         address zero if addr is in the range a positive integer if addr\n         is less than minimum range address","type_short":"int"}},{"javadoc":"Get one byte from memory at the current position plus offset.\n@param offset the displacement from the current position.\n@return the data at offset from the current position.\n@throws AddressOutOfBoundsException if offset exceeds address space\n@throws IndexOutOfBoundsException if offset is negative\n@throws MemoryAccessException if memory cannot be read","static":false,"name":"getByte","comment":"Get one byte from memory at the current position plus offset.","params":[{"type_long":"int","name":"offset","comment":"the displacement from the current position.","type_short":"int"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if memory cannot be read","type_short":"MemoryAccessException"}],"return":{"type_long":"byte","comment":"the data at offset from the current position.","type_short":"byte"}},{"javadoc":"Get the Address which corresponds to the offset 0.\n@return the current address of offset 0.","static":false,"name":"getAddress","comment":"Get the Address which corresponds to the offset 0.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the current address of offset 0.","type_short":"Address"}},{"javadoc":"Get the Memory object actually used by the MemBuffer.\n \n return the Memory used by this MemBuffer.","static":false,"name":"getMemory","comment":"Get the Memory object actually used by the MemBuffer.\n \n return the Memory used by this MemBuffer.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.mem.Memory","comment":"","type_short":"Memory"}},{"javadoc":"Add a reference to the mnemonic for this code unit.\n@param refAddr address of reference to add\n@param refType type of reference being added","static":false,"name":"addMnemonicReference","comment":"Add a reference to the mnemonic for this code unit.","params":[{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"address of reference to add","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"type of reference being added","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get references for the mnemonic for this instruction.","static":false,"name":"getMnemonicReferences","comment":"Get references for the mnemonic for this instruction.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Remove a reference to the mnemonic for this instruction.","static":false,"name":"removeMnemonicReference","comment":"Remove a reference to the mnemonic for this instruction.","params":[{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a user defined reference to the operand at the given index.\n@see ghidra.program.model.listing.CodeUnit#addOperandReference(int, ghidra.program.model.address.Address, ghidra.program.model.symbol.RefType, SourceType)","static":false,"name":"addOperandReference","comment":"Add a user defined reference to the operand at the given index.","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.RefType","name":"type","comment":"","type_short":"RefType"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"","type_short":"SourceType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the references for the operand index. If the operand type is a\n register, then the user defined references are returned; otherwise an\n array with the address for the operand value is returned.","static":false,"name":"getOperandReferences","comment":"Get the references for the operand index. If the operand type is a\n register, then the user defined references are returned; otherwise an\n array with the address for the operand value is returned.","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"Remove a user defined reference to the operand at opIndex.","static":false,"name":"removeOperandReference","comment":"Remove a user defined reference to the operand at opIndex.","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get ALL reference FROM this code unit.","static":false,"name":"getReferencesFrom","comment":"Get ALL reference FROM this code unit.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"","type_short":"ghidra.program.model.symbol.Reference[]"}},{"javadoc":"","static":false,"name":"setExternalReference","comment":"","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setMemoryReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.address.Address","name":"refAddr","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"","type_short":"RefType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"validateOpIndex","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setStackReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"int","name":"offset","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"","type_short":"SourceType"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"","type_short":"RefType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setRegisterReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.symbol.SourceType","name":"sourceType","comment":"","type_short":"SourceType"},{"type_long":"ghidra.program.model.symbol.RefType","name":"refType","comment":"","type_short":"RefType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPrimaryReference","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference","comment":"","type_short":"Reference"}},{"javadoc":"","static":false,"name":"setPrimaryMemoryReference","comment":"","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref","comment":"","type_short":"Reference"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getStackReference(int)","static":false,"name":"getStackReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.StackReference","comment":"","type_short":"StackReference"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#removeStackReference(int)","static":false,"name":"removeStackReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getExternalReference(int)","static":false,"name":"getExternalReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ExternalReference","comment":"","type_short":"ExternalReference"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#removeExternalReference(int)","static":false,"name":"removeExternalReference","comment":"","params":[{"type_long":"int","name":"opIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getReferenceIteratorTo()","static":false,"name":"getReferenceIteratorTo","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.ReferenceIterator","comment":"","type_short":"ReferenceIterator"}},{"javadoc":"@see ghidra.program.model.listing.CodeUnit#getProgram()","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"PseudoCodeUnit","comment":"","fields":[{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"address","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"maxAddress","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"program","comment":"","type_short":"Program","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"length","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.address.Address[]","javadoc":"","static":true,"name":"emptyAddrArray","comment":"","type_short":"ghidra.program.model.address.Address[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"hash","comment":"","type_short":"int","constant_value":null},{"type_long":"byte[]","javadoc":"","static":false,"name":"bytes","comment":"","type_short":"byte[]","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isBigEndian","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.program.model.symbol.Reference[]","javadoc":"","static":true,"name":"emptyMemRefs","comment":"","type_short":"ghidra.program.model.symbol.Reference[]","constant_value":null},{"type_long":"java.util.Map<java.lang.Integer,java.lang.String>","javadoc":"","static":false,"name":"comments","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.program.model.symbol.ReferenceManager","javadoc":"","static":false,"name":"refMgr","comment":"","type_short":"ReferenceManager","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isValid","comment":"","type_short":"boolean","constant_value":null}]}
