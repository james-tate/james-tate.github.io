{"implements":[],"javadoc":"Top level object that manages each step of the merge\/resolve conflicts\n process.","static":false,"extends":"ghidra.app.merge.MergeManager","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.data.DataTypeManagerDomainObject","name":"resultDtArchive","comment":"","type_short":"DataTypeManagerDomainObject"},{"type_long":"ghidra.program.model.data.DataTypeManagerDomainObject","name":"myDtArchive","comment":"","type_short":"DataTypeManagerDomainObject"},{"type_long":"ghidra.program.model.data.DataTypeManagerDomainObject","name":"originalDtArchive","comment":"","type_short":"DataTypeManagerDomainObject"},{"type_long":"ghidra.program.model.data.DataTypeManagerDomainObject","name":"latestDtArchive","comment":"","type_short":"DataTypeManagerDomainObject"},{"type_long":"ghidra.program.model.listing.DataTypeArchiveChangeSet","name":"latestChangeSet","comment":"","type_short":"DataTypeArchiveChangeSet"},{"type_long":"ghidra.program.model.listing.DataTypeArchiveChangeSet","name":"myChangeSet","comment":"","type_short":"DataTypeArchiveChangeSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"createMergeResolvers","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns one of the four programs involved in the merge as indicated by the version.\n@param version the program version to return. (LATEST, MY, ORIGINAL, or RESULT).\n@return the indicated program version or null if a valid version isn't specified.\n@see MergeConstants","static":false,"name":"getDataTypeArchive","comment":"Returns one of the four programs involved in the merge as indicated by the version.","params":[{"type_long":"int","name":"version","comment":"the program version to return. (LATEST, MY, ORIGINAL, or RESULT).","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.DataTypeArchive","comment":"the indicated program version or null if a valid version isn't specified.","type_short":"DataTypeArchive"}},{"javadoc":"","static":false,"name":"createMergeManagerPlugin","comment":"","params":[{"type_long":"ghidra.framework.plugintool.ModalPluginTool","name":"mergePluginTool","comment":"","type_short":"ModalPluginTool"},{"type_long":"ghidra.app.merge.MergeManager","name":"multiUserMergeManager","comment":"","type_short":"MergeManager"},{"type_long":"ghidra.framework.model.UndoableDomainObject","name":"modifiableDomainObject","comment":"","type_short":"UndoableDomainObject"}],"throws":[],"return":{"type_long":"ghidra.app.merge.MergeManagerPlugin","comment":"","type_short":"MergeManagerPlugin"}},{"javadoc":"","static":false,"name":"initializeMerge","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cleanupMerge","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataTypeArchiveMergeManager","comment":"Top level object that manages each step of the merge\/resolve conflicts\n process.","fields":[]}
