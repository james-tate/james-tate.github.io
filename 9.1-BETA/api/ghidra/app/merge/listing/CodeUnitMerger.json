{"implements":[],"javadoc":"Manages byte and code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.\n <br>Indirect conflicts include:\n <ul>\n <li>bytes & code units<\/li>\n <li>bytes & equates<\/li>\n <li>code units & equates<\/li>\n <\/ul>\n <br>Important: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n should call mergeConflicts() passing it ASK_USER for the conflictOption.","static":false,"extends":"ghidra.app.merge.listing.AbstractListingMerger","methods":[{"javadoc":"Manages code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.\n@param listingMergeMgr the listing merge manager that owns this merger.","static":false,"name":"<init>","comment":"Manages code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.","params":[{"type_long":"ghidra.app.merge.listing.ListingMergeManager","name":"listingMergeMgr","comment":"the listing merge manager that owns this merger.","type_short":"ListingMergeManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getConflictType","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"For JUnit testing only, set the option for resolving a conflict.\n@param decision CANCELED, ASK_USER, LATEST, MY, ORIGINAL","static":false,"name":"setConflictDecision","comment":"For JUnit testing only, set the option for resolving a conflict.","params":[{"type_long":"int","name":"decision","comment":"CANCELED, ASK_USER, LATEST, MY, ORIGINAL","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"autoMerge","comment":"","params":[{"type_long":"int","name":"progressMin","comment":"","type_short":"int"},{"type_long":"int","name":"progressMax","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCodeUnitSets","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getByteSets","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getManualMergeRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSet","name":"conflictSet","comment":"","type_short":"AddressSet"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressRange[]","comment":"","type_short":"ghidra.program.model.address.AddressRange[]"}},{"javadoc":"Code units are compared between the indicated listings starting at the\n indicated address. The listings are searched in reverse address order\n until the address is found where all the listings have a code unit\n with the same minimum address.\n@param listings the program listings in the order LATEST, MY, ORIGINAL.\n@param start the address to start at.\n@return the common address where code units begin for all listings or null.","static":false,"name":"backwardToCommon","comment":"Code units are compared between the indicated listings starting at the\n indicated address. The listings are searched in reverse address order\n until the address is found where all the listings have a code unit\n with the same minimum address.","params":[{"type_long":"ghidra.program.model.listing.Listing[]","name":"listings","comment":"the program listings in the order LATEST, MY, ORIGINAL.","type_short":"ghidra.program.model.listing.Listing[]"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the address to start at.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the common address where code units begin for all listings or null.","type_short":"Address"}},{"javadoc":"Code units are compared between the indicated listings starting at the\n indicated address. The listings are searched in forward address order\n until the address is found where all the listings have a code unit\n with the same maximum address.\n@param listings the program listings in the order LATEST, MY, ORIGINAL.\n@param start the address to start at.\n@return the common address where code units end for all listings or null.","static":false,"name":"forwardToCommon","comment":"Code units are compared between the indicated listings starting at the\n indicated address. The listings are searched in forward address order\n until the address is found where all the listings have a code unit\n with the same maximum address.","params":[{"type_long":"ghidra.program.model.listing.Listing[]","name":"listings","comment":"the program listings in the order LATEST, MY, ORIGINAL.","type_short":"ghidra.program.model.listing.Listing[]"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"the address to start at.","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the common address where code units end for all listings or null.","type_short":"Address"}},{"javadoc":"","static":false,"name":"computeRemainingDelaySlots","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"findLastDelaySlot","comment":"","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instr","comment":"","type_short":"Instruction"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Instruction","comment":"","type_short":"Instruction"}},{"javadoc":"Merges all the current conflicts according to the conflictOption.\n@param listingPanel the listing merge panel\n@param chosenConflictOption the conflict option to use when merging (should be ASK_USER for interactive).\n@param monitor the status monitor\n@throws CancelledException if the user cancels\n@throws MemoryAccessException if bytes can't be merged.","static":false,"name":"mergeConflicts","comment":"Merges all the current conflicts according to the conflictOption.","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"the listing merge panel","type_short":"ListingMergePanel"},{"type_long":"int","name":"chosenConflictOption","comment":"the conflict option to use when merging (should be ASK_USER for interactive).","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the status monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels","type_short":"CancelledException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be merged.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSelectedOption","comment":"","params":[{"type_long":"ghidra.app.merge.listing.ConflictPanel","name":"conflictPanel2","comment":"","type_short":"ConflictPanel"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"showMergePanel","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"minAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getConflictString","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"min2","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"max2","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getConflictPrefix","comment":"","params":[{"type_long":"java.lang.StringBuffer","name":"conflictBuffer","comment":"","type_short":"StringBuffer"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"performAutoMerge","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"merge","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"minAddress","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"maxAddress","comment":"","type_short":"Address"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"merge","comment":"","params":[{"type_long":"ghidra.program.util.ProgramMerge","name":"pm","comment":"","type_short":"ProgramMerge"},{"type_long":"ghidra.program.model.address.AddressSet","name":"addrSet","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeProgramContext","comment":"","params":[{"type_long":"ghidra.program.model.listing.ProgramContext","name":"resultContext","comment":"","type_short":"ProgramContext"},{"type_long":"ghidra.program.model.listing.ProgramContext","name":"originContext","comment":"","type_short":"ProgramContext"},{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"},{"type_long":"ghidra.program.model.address.AddressRange","name":"addrRange","comment":"","type_short":"AddressRange"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeCodeUnits","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"fromPgm","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"copyBytes","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@param fromPgm\n@param addrSet","static":false,"name":"adjustCodeUnitPicked","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"fromPgm","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>performMergeInstruction<\/CODE> merges the indicated instruction\n into the result program. The bytes are also moved from the program\n if they differ. The flow override and fallthrough override will be set\n the same in the result program's instruction as they are in the instruction\n that is passed to this method.\n@param instruction the instruction to be merged\n@param copyBytes whether or not bytes should be copied if turned into\n an instruction.\n@throws CodeUnitInsertionException if the instruction can't be created\n in the merge program.\n@throws MemoryAccessException if bytes can't be copied.","static":false,"name":"performMergeInstruction","comment":"performMergeInstruction merges the indicated instruction\n into the result program. The bytes are also moved from the program\n if they differ. The flow override and fallthrough override will be set\n the same in the result program's instruction as they are in the instruction\n that is passed to this method.","params":[{"type_long":"ghidra.program.model.listing.Instruction","name":"instruction","comment":"the instruction to be merged","type_short":"Instruction"},{"type_long":"boolean","name":"copyBytes","comment":"whether or not bytes should be copied if turned into\n an instruction.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"if the instruction can't be created\n in the merge program.","type_short":"CodeUnitInsertionException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"if bytes can't be copied.","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>performMergeData<\/CODE> merges the indicated defined data\n into the merge program. The bytes in the merge program are not affected\n by this method.\n@param data the defined data to be merged\n@param copyBytes whether or not bytes should be copied.\n@throws CodeUnitInsertionException if the defined data can't be created\n in the merge program.","static":false,"name":"performMergeData","comment":"performMergeData merges the indicated defined data\n into the merge program. The bytes in the merge program are not affected\n by this method.","params":[{"type_long":"ghidra.program.model.listing.Data","name":"data","comment":"the defined data to be merged","type_short":"Data"},{"type_long":"boolean","name":"copyBytes","comment":"whether or not bytes should be copied.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.util.CodeUnitInsertionException","comment":"if the defined data can't be created\n in the merge program.","type_short":"CodeUnitInsertionException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getResultDataType","comment":"","params":[{"type_long":"long","name":"dtID","comment":"","type_short":"long"},{"type_long":"ghidra.program.model.listing.Program","name":"fromPgm","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"Determines indirect code unit conflicts. This is anywhere that code unit\n changes to one program conflict with non-codeunit changes to the other\n program. The following non-codeunit changes conflict with code unit changes.\n <ul>\n <li>bytes<\/li>\n <li>equates<\/li>\n <li>references<\/li>\n <\/ul>","static":false,"name":"getIndirectConflicts","comment":"Determines indirect code unit conflicts. This is anywhere that code unit\n changes to one program conflict with non-codeunit changes to the other\n program. The following non-codeunit changes conflict with code unit changes.\n \n bytes\n equates\n references\n ","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"determineEquateConflicts","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyMyBytesChanged","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyLatestBytesChanged","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyMyCUsChanged","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyLatestCUsChanged","comment":"","type_short":"AddressSet"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"determineReferenceConflicts","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyMyCUsChanged","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.program.model.address.AddressSet","name":"onlyLatestCUsChanged","comment":"","type_short":"AddressSet"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasConflict","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getConflictCount","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"mergeConflicts","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getConflicts","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}}],"name":"CodeUnitMerger","comment":"Manages byte and code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.\n Indirect conflicts include:\n \n bytes  code units\n bytes  equates\n code units  equates\n \n Important: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n should call mergeConflicts() passing it ASK_USER for the conflictOption.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"CODE_UNITS_PHASE","comment":"","type_short":"String","constant_value":"\"Bytes & Code Units\""},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"min","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"max","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.app.merge.listing.VariousChoicesPanel","javadoc":"","static":false,"name":"conflictPanel","comment":"","type_short":"VariousChoicesPanel","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"conflictChoice","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"","static":false,"name":"latestCUSet","comment":"","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"","static":false,"name":"myCUSet","comment":"","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"","static":false,"name":"bothChangedCUSet","comment":"","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"","static":false,"name":"latestByteSet","comment":"","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSetView","javadoc":"","static":false,"name":"myByteSet","comment":"","type_short":"AddressSetView","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"resultUninitSet","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictBytes","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictByteCU","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictCUByte","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictByteEquate","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictEquateByte","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictEquateCU","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictCUEquate","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictRefCU","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictCURef","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"conflictAll","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressRange[]","javadoc":"","static":false,"name":"ranges","comment":"","type_short":"ghidra.program.model.address.AddressRange[]","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"manualSet","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"autoBytes","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"autoCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"mergedCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"pickedLatestCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"pickedMyCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.model.address.AddressSet","javadoc":"","static":false,"name":"pickedOriginalCodeUnits","comment":"","type_short":"AddressSet","constant_value":null},{"type_long":"ghidra.program.util.ProgramMerge","javadoc":"","static":false,"name":"mergeMy","comment":"","type_short":"ProgramMerge","constant_value":null},{"type_long":"ghidra.program.util.ProgramMerge","javadoc":"","static":false,"name":"mergeLatest","comment":"","type_short":"ProgramMerge","constant_value":null},{"type_long":"ghidra.program.util.ProgramMerge","javadoc":"","static":false,"name":"mergeOriginal","comment":"","type_short":"ProgramMerge","constant_value":null},{"type_long":"ghidra.util.datastruct.LongObjectHashtable<ghidra.program.model.data.DataType>","javadoc":"","static":false,"name":"myResolvedDts","comment":"","type_short":"LongObjectHashtable","constant_value":null},{"type_long":"ghidra.util.datastruct.LongObjectHashtable<ghidra.program.model.data.DataType>","javadoc":"","static":false,"name":"origResolvedDts","comment":"","type_short":"LongObjectHashtable","constant_value":null}]}
