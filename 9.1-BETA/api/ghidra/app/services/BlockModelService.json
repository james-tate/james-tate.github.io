{"implements":[],"javadoc":"Service for providing block models.","static":false,"methods":[{"javadoc":"Register a new model.\n@param modelClass code block model class.\n Subroutine models must implement the SubroutineBlockMode interface - all other models\n are assumed to be basic block models.\n@param modelName name of model","static":false,"name":"registerModel","comment":"Register a new model.","params":[{"type_long":"java.lang.Class<? extends ghidra.program.model.block.CodeBlockModel>","name":"modelClass","comment":"code block model class.\n Subroutine models must implement the SubroutineBlockMode interface - all other models\n are assumed to be basic block models.","type_short":"Class"},{"type_long":"java.lang.String","name":"modelName","comment":"name of model","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Deregister a model.\n@param modelClass code block model class.","static":false,"name":"unregisterModel","comment":"Deregister a model.","params":[{"type_long":"java.lang.Class<? extends ghidra.program.model.block.CodeBlockModel>","name":"modelClass","comment":"code block model class.","type_short":"Class"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get new instance of the active Basic Block model for the current program.\n@return new Basic Block model instance or null if program is not open.\n@depricated use getActiveBlockModel(Program) instead","static":false,"name":"getActiveBlockModel","comment":"Get new instance of the active Basic Block model for the current program.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Basic Block model instance or null if program is not open.","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Basic Block model for the current program.\n@param includeExternals externals are included if true\n@return new Basic Block model instance or null if program is not open.\n@depricated use getActiveBlockModel(Program, boolean) instead","static":false,"name":"getActiveBlockModel","comment":"Get new instance of the active Basic Block model for the current program.","params":[{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Basic Block model instance or null if program is not open.","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Basic Block model.\n@param program program to associate with the block model\n@return new Basic Block model instance or null if program is null","static":false,"name":"getActiveBlockModel","comment":"Get new instance of the active Basic Block model.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to associate with the block model","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Basic Block model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Basic Block model.\n@param program program to associate with the block model\n@param includeExternals externals are included if true\n@return new Basic Block model instance or null if program is null","static":false,"name":"getActiveBlockModel","comment":"Get new instance of the active Basic Block model.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to associate with the block model","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Basic Block model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get the name of the active Basic Block model.\n@return active block model name","static":false,"name":"getActiveBlockModelName","comment":"Get the name of the active Basic Block model.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"active block model name","type_short":"String"}},{"javadoc":"Get new instance of the active Subroutine Block model for the current program.\n@return new Subroutine Block model instance or null if program is not open\n@depricated use getActiveSubroutineModel(Program) instead","static":false,"name":"getActiveSubroutineModel","comment":"Get new instance of the active Subroutine Block model for the current program.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Subroutine Block model instance or null if program is not open","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Subroutine Block model for the current program.\n@param includeExternals externals are included if true\n@return new Subroutine Block model instance or null if program is not open\n@depricated use getActiveSubroutineModel(Program) instead","static":false,"name":"getActiveSubroutineModel","comment":"Get new instance of the active Subroutine Block model for the current program.","params":[{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Subroutine Block model instance or null if program is not open","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Subroutine Block model.\n@param program program associated with the block model.\n@return new Subroutine Block model instance or null if program is null","static":false,"name":"getActiveSubroutineModel","comment":"Get new instance of the active Subroutine Block model.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program associated with the block model.","type_short":"Program"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Subroutine Block model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the active Subroutine Block model.\n@param program program associated with the block model.\n@param includeExternals externals are included if true\n@return new Subroutine Block model instance or null if program is null","static":false,"name":"getActiveSubroutineModel","comment":"Get new instance of the active Subroutine Block model.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program associated with the block model.","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new Subroutine Block model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get the name of the active Subroutine model.\n@return active subroutine model name","static":false,"name":"getActiveSubroutineModelName","comment":"Get the name of the active Subroutine model.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"active subroutine model name","type_short":"String"}},{"javadoc":"Get new instance of the specified block model.\n@param modelName name of registered block model\n@return new model instance or null if program is not open.\n@throws NotFoundException if specified model is not registered\n@depricated use getNewModelByName(String, Program) instead","static":false,"name":"getNewModelByName","comment":"Get new instance of the specified block model.","params":[{"type_long":"java.lang.String","name":"modelName","comment":"name of registered block model","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"if specified model is not registered","type_short":"NotFoundException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new model instance or null if program is not open.","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the specified block model.\n@param modelName name of registered block model\n@param includeExternals externals are included if true\n@return new model instance or null if program is not open.\n@throws NotFoundException if specified model is not registered\n@depricated use getNewModelByName(String, Program, boolean) instead","static":false,"name":"getNewModelByName","comment":"Get new instance of the specified block model.","params":[{"type_long":"java.lang.String","name":"modelName","comment":"name of registered block model","type_short":"String"},{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"if specified model is not registered","type_short":"NotFoundException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new model instance or null if program is not open.","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the specified block model.\n@param modelName name of registered block model\n@param program program associated with the model\n@return new model instance or null if program is null\n@throws NotFoundException if specified model is not registered","static":false,"name":"getNewModelByName","comment":"Get new instance of the specified block model.","params":[{"type_long":"java.lang.String","name":"modelName","comment":"name of registered block model","type_short":"String"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program associated with the model","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"if specified model is not registered","type_short":"NotFoundException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get new instance of the specified block model.\n@param modelName name of registered block model\n@param program program associated with the model\n@param includeExternals externals are included if true\n@return new model instance or null if program is null\n@throws NotFoundException if specified model is not registered","static":false,"name":"getNewModelByName","comment":"Get new instance of the specified block model.","params":[{"type_long":"java.lang.String","name":"modelName","comment":"name of registered block model","type_short":"String"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program associated with the model","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"externals are included if true","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.NotFoundException","comment":"if specified model is not registered","type_short":"NotFoundException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"new model instance or null if program is null","type_short":"CodeBlockModel"}},{"javadoc":"Get list of registered block models of the specified type.\n A modelType of ANY_BLOCK will return all models registered.\n List ordering is based upon the registration order.\n It is important to recognize that the list of returned names\n could change as models are registered and unregistered.\n@param modelType type of model (ANY_MODEL, BASIC_MODEL or SUBROUTINE_MODEL)\n@return array of model names","static":false,"name":"getAvailableModelNames","comment":"Get list of registered block models of the specified type.\n A modelType of ANY_BLOCK will return all models registered.\n List ordering is based upon the registration order.\n It is important to recognize that the list of returned names\n could change as models are registered and unregistered.","params":[{"type_long":"int","name":"modelType","comment":"type of model (ANY_MODEL, BASIC_MODEL or SUBROUTINE_MODEL)","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"array of model names","type_short":"java.lang.String[]"}},{"javadoc":"Add service listener.\n@param listener listener to add","static":false,"name":"addListener","comment":"Add service listener.","params":[{"type_long":"ghidra.app.services.BlockModelServiceListener","name":"listener","comment":"listener to add","type_short":"BlockModelServiceListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove service listener.\n@param listener to remove","static":false,"name":"removeListener","comment":"Remove service listener.","params":[{"type_long":"ghidra.app.services.BlockModelServiceListener","name":"listener","comment":"to remove","type_short":"BlockModelServiceListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BlockModelService","comment":"Service for providing block models.","fields":[{"type_long":"int","javadoc":"Type for a simple block model.\n@see ghidra.program.model.block.SimpleBlockModel","static":true,"name":"BASIC_MODEL","comment":"Type for a simple block model.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"Type for a subroutine block model.","static":true,"name":"SUBROUTINE_MODEL","comment":"Type for a subroutine block model.","type_short":"int","constant_value":"2"},{"type_long":"java.lang.String","javadoc":"Name of the implementation for a Simple block model.","static":true,"name":"SIMPLE_BLOCK_MODEL_NAME","comment":"Name of the implementation for a Simple block model.","type_short":"String","constant_value":"\"Simple Block\""},{"type_long":"java.lang.String","javadoc":"Name of the implementation for a subroutine with multiple entry points.","static":true,"name":"MULTI_ENTRY_SUBROUTINE_MODEL_NAME","comment":"Name of the implementation for a subroutine with multiple entry points.","type_short":"String","constant_value":"\"Multiple Entry\""},{"type_long":"java.lang.String","javadoc":"Name of the implementation for a subroutine that has a unique entry\n point, which may share code with other subroutines.","static":true,"name":"ISOLATED_ENTRY_SUBROUTINE_MODEL_NAME","comment":"Name of the implementation for a subroutine that has a unique entry\n point, which may share code with other subroutines.","type_short":"String","constant_value":"\"Isolated Entry\""},{"type_long":"java.lang.String","javadoc":"Name of the implementation for an overlapped subroutine model.","static":true,"name":"OVERLAPPED_SUBROUTINE_MODEL_NAME","comment":"Name of the implementation for an overlapped subroutine model.","type_short":"String","constant_value":"\"Overlapped Code\""},{"type_long":"java.lang.String","javadoc":"Name of the implementation for a subroutine that does not share code\n with other subroutines and may have one or more entry points.","static":true,"name":"PARTITIONED_SUBROUTINE_MODEL_NAME","comment":"Name of the implementation for a subroutine that does not share code\n with other subroutines and may have one or more entry points.","type_short":"String","constant_value":"\"Partitioned Code\""},{"type_long":"java.lang.String","javadoc":"Default basic block model (Simple Block Model)","static":true,"name":"DEFAULT_BLOCK_MODEL_NAME","comment":"Default basic block model (Simple Block Model)","type_short":"String","constant_value":"\"Simple Block\""},{"type_long":"java.lang.String","javadoc":"Default subroutine model (M-Model)","static":true,"name":"DEFAULT_SUBROUTINE_MODEL_NAME","comment":"Default subroutine model (M-Model)","type_short":"String","constant_value":"\"Multiple Entry\""}]}
