{"implements":[],"javadoc":"Class to specify priority within the Automated Analysis pipeline.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"priority","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new priority object.\n@param priority priority to use","static":false,"name":"<init>","comment":"Construct a new priority object.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"priority","comment":"priority to use","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the priority specified for this analysis priority.","static":false,"name":"priority","comment":"Return the priority specified for this analysis priority.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get a priority that is a little higher than this one.\n@return a higher priority","static":false,"name":"before","comment":"Get a priority that is a little higher than this one.","params":[],"throws":[],"return":{"type_long":"ghidra.app.services.AnalysisPriority","comment":"a higher priority","type_short":"AnalysisPriority"}},{"javadoc":"Get a piority that is a little lower than this one.\n@return a lower priority","static":false,"name":"after","comment":"Get a piority that is a little lower than this one.","params":[],"throws":[],"return":{"type_long":"ghidra.app.services.AnalysisPriority","comment":"a lower priority","type_short":"AnalysisPriority"}},{"javadoc":"Return first gross priority.\n@return first gross priority","static":true,"name":"getInitial","comment":"Return first gross priority.","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.services.AnalysisPriority","comment":"first gross priority","type_short":"AnalysisPriority"}},{"javadoc":"Get the next gross priority.\n@return return next gross priority","static":false,"name":"getNext","comment":"Get the next gross priority.","params":[{"type_long":"java.lang.String","name":"nextName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.services.AnalysisPriority","comment":"return next gross priority","type_short":"AnalysisPriority"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"AnalysisPriority","comment":"Class to specify priority within the Automated Analysis pipeline.","fields":[{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines a full format analysis as the first priority for automatic analysis.\n These are the first analyzers that will run after import.\n Possibly there is a need to move blocks around, or create headers.\n Analyzers that will look binary as a full file format analysis\n should run with this priority.\n \n NOTE: there may be analyzers that run before this that need to fix issues like Non-Returning\n functions.  Be very careful running an analyzer with a higher priority.","static":true,"name":"FORMAT_ANALYSIS","comment":"Defines a full format analysis as the first priority for automatic analysis.\n These are the first analyzers that will run after import.\n Possibly there is a need to move blocks around, or create headers.\n Analyzers that will look binary as a full file format analysis\n should run with this priority.\n \n NOTE: there may be analyzers that run before this that need to fix issues like Non-Returning\n functions.  Be very careful running an analyzer with a higher priority.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines block analysis as the second priority for automatic analysis.\n Initial markup of raw bytes should occur at or after this priority (images, etc).\n The initial disassembly of EntryPoints will occur at this priority.","static":true,"name":"BLOCK_ANALYSIS","comment":"Defines block analysis as the second priority for automatic analysis.\n Initial markup of raw bytes should occur at or after this priority (images, etc).\n The initial disassembly of EntryPoints will occur at this priority.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines disassembly as the third priority for automatic analysis.\n Disassembly of code found through good solid flow will occur at this priority.\n More heuristic code recovery will occur later.","static":true,"name":"DISASSEMBLY","comment":"Defines disassembly as the third priority for automatic analysis.\n Disassembly of code found through good solid flow will occur at this priority.\n More heuristic code recovery will occur later.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines code analysis as the fourth priority for automatic analysis.\n If your analyzer is looking at RAW CODE, you should general go at or after this\n priority.  Usually this is used in conjunction with analyzers that process new\n instructions <code>AnalyzerType.INSTRUCTIONS<\/code>.  It is also useful for\n those analyzers that depend on code, but want to analyze flow, such as non-returning\n functions, that should happen before functions are widely laid down.  If\n bad flow is not fixed at an early priority, switch stmt recovery, function\n boundaries, etc... may need to be redone and bad stuff cleaned up.","static":true,"name":"CODE_ANALYSIS","comment":"Defines code analysis as the fourth priority for automatic analysis.\n If your analyzer is looking at RAW CODE, you should general go at or after this\n priority.  Usually this is used in conjunction with analyzers that process new\n instructions AnalyzerType.INSTRUCTIONS.  It is also useful for\n those analyzers that depend on code, but want to analyze flow, such as non-returning\n functions, that should happen before functions are widely laid down.  If\n bad flow is not fixed at an early priority, switch stmt recovery, function\n boundaries, etc... may need to be redone and bad stuff cleaned up.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines function analysis as the fifth priority for automatic analysis.\n After this priority, basic functions and their instructions should be recovered.\n More functions could be recovered in further analysis, but if your analysis\n depends on basic function creation, you should go after this priority.","static":true,"name":"FUNCTION_ANALYSIS","comment":"Defines function analysis as the fifth priority for automatic analysis.\n After this priority, basic functions and their instructions should be recovered.\n More functions could be recovered in further analysis, but if your analysis\n depends on basic function creation, you should go after this priority.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines reference analysis as the sixth priority for automatic analysis.\n After this priority, basic reference recovery should have taken place.\n More references could be recovered later.","static":true,"name":"REFERENCE_ANALYSIS","comment":"Defines reference analysis as the sixth priority for automatic analysis.\n After this priority, basic reference recovery should have taken place.\n More references could be recovered later.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines data analysis as the seventh priority for automatic analysis.\n After this priority, data creation (strings, pointers) should have settled down.\n More data can be recovered with further analysis.","static":true,"name":"DATA_ANALYSIS","comment":"Defines data analysis as the seventh priority for automatic analysis.\n After this priority, data creation (strings, pointers) should have settled down.\n More data can be recovered with further analysis.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines Function identification analysis as the eighth priority for automatic analysis.\n After this priority, full function (name\/class) evaluation should have taken place.","static":true,"name":"FUNCTION_ID_ANALYSIS","comment":"Defines Function identification analysis as the eighth priority for automatic analysis.\n After this priority, full function (name\/class) evaluation should have taken place.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"Defines data type propogation as the ninth priority for automatic analysis.\n Data type propogation analysis should hapen as late as possible so that all basic code\n recovery, reference analysis, etc... has taken place.","static":true,"name":"DATA_TYPE_PROPOGATION","comment":"Defines data type propogation as the ninth priority for automatic analysis.\n Data type propogation analysis should hapen as late as possible so that all basic code\n recovery, reference analysis, etc... has taken place.","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"","static":true,"name":"LOW_PRIORITY","comment":"","type_short":"AnalysisPriority","constant_value":null},{"type_long":"ghidra.app.services.AnalysisPriority","javadoc":"","static":true,"name":"HIGHEST_PRIORITY","comment":"","type_short":"AnalysisPriority","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"priority","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"name","comment":"","type_short":"String","constant_value":null}]}
