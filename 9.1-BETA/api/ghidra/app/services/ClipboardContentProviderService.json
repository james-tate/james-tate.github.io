{"implements":[],"javadoc":"<code>ClipboardContentProvider<\/code> determines what types of\n transfer data can be placed on the clipboard, and cut, copy, and paste.","static":false,"methods":[{"javadoc":"Returns the component provider associated with this \n ClipboardContentProviderService.","static":false,"name":"getComponentProvider","comment":"Returns the component provider associated with this \n ClipboardContentProviderService.","params":[],"throws":[],"return":{"type_long":"docking.ComponentProvider","comment":"","type_short":"ComponentProvider"}},{"javadoc":"Triggers the default copy operation","static":false,"name":"copy","comment":"Triggers the default copy operation","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.awt.datatransfer.Transferable","comment":"","type_short":"Transferable"}},{"javadoc":"Triggers a special copy with the specified copy type.\n@param copyType contains the data flavor of the clipboard contents\n@param monitor monitor that shows progress of the copy to clipboard, and\n may be canceled","static":false,"name":"copySpecial","comment":"Triggers a special copy with the specified copy type.","params":[{"type_long":"ghidra.app.util.ClipboardType","name":"copyType","comment":"contains the data flavor of the clipboard contents","type_short":"ClipboardType"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"monitor that shows progress of the copy to clipboard, and\n may be canceled","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"java.awt.datatransfer.Transferable","comment":"","type_short":"Transferable"}},{"javadoc":"Triggers the default paste operation for the given transferable","static":false,"name":"paste","comment":"Triggers the default paste operation for the given transferable","params":[{"type_long":"java.awt.datatransfer.Transferable","name":"pasteData","comment":"","type_short":"Transferable"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the currently active ClipboardTypes for copying with the current context","static":false,"name":"getCurrentCopyTypes","comment":"Gets the currently active ClipboardTypes for copying with the current context","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.util.ClipboardType>","comment":"","type_short":"List"}},{"javadoc":"Return whether the given context is valid for actions on popup menus.\n@param contextObject the context of where the popup menu will be\n positioned","static":false,"name":"isValidContext","comment":"Return whether the given context is valid for actions on popup menus.","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if copy should be enabled; false if it should be disabled.  This method can\n be used in conjunction with {@link #copyAddToPopup()} in order to add menu items to\n popup menus but to have them enabled when appropriate.","static":false,"name":"enableCopy","comment":"Returns true if copy should be enabled; false if it should be disabled.  This method can\n be used in conjunction with #copyAddToPopup() in order to add menu items to\n popup menus but to have them enabled when appropriate.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if copySpecial actions should be enabled;\n@return ","static":false,"name":"enableCopySpecial","comment":"Returns true if copySpecial actions should be enabled;","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if paste should be enabled; false if it should be disabled.  This method can\n be used in conjunction with {@link #pasteAddToPopup()} in order to add menu items to\n popup menus but to have them enabled when appropriate.","static":false,"name":"enablePaste","comment":"Returns true if paste should be enabled; false if it should be disabled.  This method can\n be used in conjunction with #pasteAddToPopup() in order to add menu items to\n popup menus but to have them enabled when appropriate.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Notification that the clipboard owner has lost its ownership.\n@param transferable the contents which the owner had placed on the clipboard","static":false,"name":"lostOwnership","comment":"Notification that the clipboard owner has lost its ownership.","params":[{"type_long":"java.awt.datatransfer.Transferable","name":"transferable","comment":"the contents which the owner had placed on the clipboard","type_short":"Transferable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a change listener that will be notified when the state of the service provider changes\n such that the ability to perform some actions has changed.  For example, the given\n listener will be called when a copy action can be performed when it was previously not\n possible.\n@param listener The listener to add.","static":false,"name":"addChangeListener","comment":"Adds a change listener that will be notified when the state of the service provider changes\n such that the ability to perform some actions has changed.  For example, the given\n listener will be called when a copy action can be performed when it was previously not\n possible.","params":[{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"The listener to add.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given change listener.\n@param listener The listener to remove.\n@see #addChangeListener(ChangeListener)","static":false,"name":"removeChangeListener","comment":"Removes the given change listener.","params":[{"type_long":"javax.swing.event.ChangeListener","name":"listener","comment":"The listener to remove.","type_short":"ChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the service can perform a paste operation using the given transferable.\n@param availableFlavors data flavors available for the current clipboard transferable\n@return true if the service can perform a paste operation using the given transferable.","static":false,"name":"canPaste","comment":"Returns true if the service can perform a paste operation using the given transferable.","params":[{"type_long":"java.awt.datatransfer.DataFlavor[]","name":"availableFlavors","comment":"data flavors available for the current clipboard transferable","type_short":"java.awt.datatransfer.DataFlavor[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the service can perform a paste operation using the given transferable.","type_short":"boolean"}},{"javadoc":"Returns true if the given service provider can currently perform a copy operation.\n@return true if the given service provider can currently perform a copy operation.","static":false,"name":"canCopy","comment":"Returns true if the given service provider can currently perform a copy operation.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the given service provider can currently perform a copy operation.","type_short":"boolean"}},{"javadoc":"Returns true if the given service provider can currently perform a 'copy special' \n operation.","static":false,"name":"canCopySpecial","comment":"Returns true if the given service provider can currently perform a 'copy special' \n operation.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"ClipboardContentProviderService","comment":"ClipboardContentProvider determines what types of\n transfer data can be placed on the clipboard, and cut, copy, and paste.","fields":[]}
