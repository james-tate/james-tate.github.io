{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"If the token refers to an individual Varnode, return it. Otherwise return null\n@param token the token to check\n@return the Varnode or null otherwise","static":true,"name":"getVarnodeRef","comment":"If the token refers to an individual Varnode, return it. Otherwise return null","params":[{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"the token to check","type_short":"ClangToken"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"the Varnode or null otherwise","type_short":"Varnode"}},{"javadoc":"Construct the set of varnodes making up a simple forward slice of seed\n@param seed Varnode where the slice starts\n@return set of Varnodes in the slice","static":true,"name":"getForwardSlice","comment":"Construct the set of varnodes making up a simple forward slice of seed","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"seed","comment":"Varnode where the slice starts","type_short":"Varnode"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.Varnode>","comment":"set of Varnodes in the slice","type_short":"Set"}},{"javadoc":"","static":true,"name":"getBackwardSlice","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"seed","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.Varnode>","comment":"","type_short":"Set"}},{"javadoc":"","static":true,"name":"getForwardSliceToPCodeOps","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"seed","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.PcodeOp>","comment":"","type_short":"Set"}},{"javadoc":"","static":true,"name":"getBackwardSliceToPCodeOps","comment":"","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"seed","comment":"","type_short":"Varnode"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.PcodeOp>","comment":"","type_short":"Set"}},{"javadoc":"Returns the function represented by the given token.  This will be either the \n decompiled function or a function referenced within the decompiled function.\n@param program the program\n@param token the token\n@return the function","static":true,"name":"getFunction","comment":"Returns the function represented by the given token.  This will be either the \n decompiled function or a function referenced within the decompiled function.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program","type_short":"Program"},{"type_long":"ghidra.app.decompiler.ClangFuncNameToken","name":"token","comment":"the token","type_short":"ClangFuncNameToken"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"the function","type_short":"Function"}},{"javadoc":"Find index of first field containing a ClangNode in tokenList\n@param queryTokens the list of tokens of interest\n@param fields the universe of fields to check\n@return index of field, or -1","static":true,"name":"findIndexOfFirstField","comment":"Find index of first field containing a ClangNode in tokenList","params":[{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"queryTokens","comment":"the list of tokens of interest","type_short":"List"},{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"fields","comment":"the universe of fields to check","type_short":"docking.widgets.fieldpanel.field.Field[]"}],"throws":[],"return":{"type_long":"int","comment":"index of field, or -1","type_short":"int"}},{"javadoc":"Similar to {@link #getTokens(ClangNode, AddressSetView)}, but uses the tokens from\n the given view fields.  Sometimes the tokens in the model (represented by the \n {@link ClangNode}) are different than the fields in the view (such as when a list of \n comment tokens are condensed into a single comment token).\n@param fields the fields to check\n@param address the address each returned token must match\n@return the matching tokens","static":true,"name":"getTokensFromView","comment":"Similar to #getTokens(ClangNode, AddressSetView), but uses the tokens from\n the given view fields.  Sometimes the tokens in the model (represented by the \n ClangNode) are different than the fields in the view (such as when a list of \n comment tokens are condensed into a single comment token).","params":[{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"fields","comment":"the fields to check","type_short":"docking.widgets.fieldpanel.field.Field[]"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address each returned token must match","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","comment":"the matching tokens","type_short":"List"}},{"javadoc":"Find all ClangNodes that have a minimum address in the AddressSetView\n@param root the root of the token tree\n@param addressSet the addresses to restrict\n@return the list of tokens","static":true,"name":"getTokens","comment":"Find all ClangNodes that have a minimum address in the AddressSetView","params":[{"type_long":"ghidra.app.decompiler.ClangNode","name":"root","comment":"the root of the token tree","type_short":"ClangNode"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the addresses to restrict","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","comment":"the list of tokens","type_short":"List"}},{"javadoc":"","static":true,"name":"getTokens","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangNode","name":"root","comment":"","type_short":"ClangNode"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","comment":"","type_short":"List"}},{"javadoc":"","static":true,"name":"collectTokens","comment":"","params":[{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"tokenList","comment":"","type_short":"List"},{"type_long":"ghidra.app.decompiler.ClangNode","name":"parentNode","comment":"","type_short":"ClangNode"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"intersects","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"","type_short":"ClangToken"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"getClosestAddress","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"","type_short":"ClangToken"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":true,"name":"findClosestAddressSet","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSpace","name":"functionSpace","comment":"","type_short":"AddressSpace"},{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"tokenList","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"","type_short":"AddressSet"}},{"javadoc":"","static":true,"name":"addTokenAddressRangeToSet","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSet","name":"addrs","comment":"","type_short":"AddressSet"},{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"","type_short":"ClangToken"},{"type_long":"ghidra.program.model.address.AddressSpace","name":"space","comment":"","type_short":"AddressSpace"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Find closest addressed token to a specified token or null if one is not found.\n Only adjacent tokens on the same line are examined.\n@param token the query token\n@return closest addressed token","static":true,"name":"findClosestAddressedToken","comment":"Find closest addressed token to a specified token or null if one is not found.\n Only adjacent tokens on the same line are examined.","params":[{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"the query token","type_short":"ClangToken"}],"throws":[],"return":{"type_long":"ghidra.app.decompiler.ClangToken","comment":"closest addressed token","type_short":"ClangToken"}},{"javadoc":"","static":true,"name":"getFieldSelection","comment":"","params":[{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"tokens","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"docking.widgets.fieldpanel.support.FieldSelection","comment":"","type_short":"FieldSelection"}},{"javadoc":"","static":true,"name":"getTokensInSelection","comment":"","params":[{"type_long":"docking.widgets.fieldpanel.support.FieldSelection","name":"selection","comment":"","type_short":"FieldSelection"},{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"lines","comment":"","type_short":"docking.widgets.fieldpanel.field.Field[]"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","comment":"","type_short":"List"}},{"javadoc":"","static":true,"name":"addTokensInSelectionRange","comment":"","params":[{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"tokenList","comment":"","type_short":"List"},{"type_long":"docking.widgets.fieldpanel.support.FieldRange","name":"selectionRange","comment":"","type_short":"FieldRange"},{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"lines","comment":"","type_short":"docking.widgets.fieldpanel.field.Field[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"addTokens","comment":"","params":[{"type_long":"java.util.List<ghidra.app.decompiler.ClangToken>","name":"tokenList","comment":"","type_short":"List"},{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"lines","comment":"","type_short":"docking.widgets.fieldpanel.field.Field[]"},{"type_long":"int","name":"lineNumber","comment":"","type_short":"int"},{"type_long":"docking.widgets.fieldpanel.support.FieldLocation","name":"start","comment":"","type_short":"FieldLocation"},{"type_long":"docking.widgets.fieldpanel.support.FieldLocation","name":"end","comment":"","type_short":"FieldLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getStartIndex","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.ClangTextField","name":"textLine","comment":"","type_short":"ClangTextField"},{"type_long":"docking.widgets.fieldpanel.support.FieldLocation","name":"location","comment":"","type_short":"FieldLocation"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"getEndIndex","comment":"","params":[{"type_long":"ghidra.app.decompiler.component.ClangTextField","name":"textLine","comment":"","type_short":"ClangTextField"},{"type_long":"docking.widgets.fieldpanel.support.FieldLocation","name":"location","comment":"","type_short":"FieldLocation"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"findAddressBefore","comment":"","params":[{"type_long":"docking.widgets.fieldpanel.field.Field[]","name":"lines","comment":"","type_short":"docking.widgets.fieldpanel.field.Field[]"},{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"","type_short":"ClangToken"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":true,"name":"getGoToTargetToken","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangTokenGroup","name":"root","comment":"","type_short":"ClangTokenGroup"},{"type_long":"ghidra.app.decompiler.ClangLabelToken","name":"label","comment":"","type_short":"ClangLabelToken"}],"throws":[],"return":{"type_long":"ghidra.app.decompiler.ClangLabelToken","comment":"","type_short":"ClangLabelToken"}},{"javadoc":"","static":true,"name":"getMatchingBrace","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangSyntaxToken","name":"startToken","comment":"","type_short":"ClangSyntaxToken"}],"throws":[],"return":{"type_long":"ghidra.app.decompiler.ClangSyntaxToken","comment":"","type_short":"ClangSyntaxToken"}},{"javadoc":"","static":true,"name":"isMatchingBrace","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangSyntaxToken","name":"braceToken","comment":"","type_short":"ClangSyntaxToken"},{"type_long":"ghidra.app.decompiler.ClangSyntaxToken","name":"otherBraceToken","comment":"","type_short":"ClangSyntaxToken"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isBrace","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangSyntaxToken","name":"token","comment":"","type_short":"ClangSyntaxToken"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isGoToStatement","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangToken","name":"token","comment":"","type_short":"ClangToken"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"isGoToStatement","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangStatement","name":"statement","comment":"","type_short":"ClangStatement"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"toLines","comment":"","params":[{"type_long":"ghidra.app.decompiler.ClangTokenGroup","name":"group","comment":"","type_short":"ClangTokenGroup"}],"throws":[],"return":{"type_long":"java.util.ArrayList<ghidra.app.decompiler.ClangLine>","comment":"","type_short":"ArrayList"}},{"javadoc":"Returns the data type for the given context if the context pertains to a data type\n@param context the context\n@return the data type or null","static":true,"name":"getDataType","comment":"Returns the data type for the given context if the context pertains to a data type","params":[{"type_long":"ghidra.app.plugin.core.decompile.DecompilerActionContext","name":"context","comment":"the context","type_short":"DecompilerActionContext"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"the data type or null","type_short":"DataType"}}],"name":"DecompilerUtils","comment":"","fields":[]}
