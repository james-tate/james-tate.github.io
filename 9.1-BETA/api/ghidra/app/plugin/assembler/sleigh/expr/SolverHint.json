{"implements":[],"javadoc":"A type for solver hints\n \n Hints inform \"sub-\"solvers of the techniques already being applied by the calling solvers. This\n helps prevent situations where, e.g., two multiplication solvers (applied to repeated or nested\n multiplication) both attempt to synthesize new goals for repetition. This sort of expression is\n common when decoding immediates in the AArch64 specification.\n \n Using an interface implemented by an enumeration (instead of just using the enumeration directly)\n eases expansion by extension without modifying the core code.\n@see DefaultSolverHint","static":false,"methods":[{"javadoc":"","static":true,"name":"with","comment":"","params":[{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.expr.SolverHint>","name":"set","comment":"","type_short":"Set"},{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.SolverHint[]","name":"plus","comment":"","type_short":"ghidra.app.plugin.assembler.sleigh.expr.SolverHint[]"}],"throws":[],"return":{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.expr.SolverHint>","comment":"","type_short":"Set"}}],"name":"SolverHint","comment":"A type for solver hints\n \n Hints inform \"sub-\"solvers of the techniques already being applied by the calling solvers. This\n helps prevent situations where, e.g., two multiplication solvers (applied to repeated or nested\n multiplication) both attempt to synthesize new goals for repetition. This sort of expression is\n common when decoding immediates in the AArch64 specification.\n \n Using an interface implemented by an enumeration (instead of just using the enumeration directly)\n eases expansion by extension without modifying the core code.","fields":[]}
