{"implements":[],"javadoc":"The type of terminal for an assembly grammar\n \n Unlike classical parsing, each terminal provides its own tokenizer. If multiple tokenizers yield\n a token, the parser branches, possibly creating multiple, ambiguous trees.\n@see AssemblyGrammar","static":false,"extends":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol","methods":[{"javadoc":"Construct a terminal having the give name\n@param name","static":false,"name":"<init>","comment":"Construct a terminal having the give name","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempt to match a token from the input buffer starting at a given position\n@param buffer the input buffer\n@param pos the cursor position in the buffer\n@param grammar the grammar containing this terminal\n@param labels the program labels, if applicable\n@return the matched token, or null","static":false,"name":"match","comment":"Attempt to match a token from the input buffer starting at a given position","params":[{"type_long":"java.lang.String","name":"buffer","comment":"the input buffer","type_short":"String"},{"type_long":"int","name":"pos","comment":"the cursor position in the buffer","type_short":"int"},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar","name":"grammar","comment":"the grammar containing this terminal","type_short":"AssemblyGrammar"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"labels","comment":"the program labels, if applicable","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<? extends ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken>","comment":"the matched token, or null","type_short":"Collection"}},{"javadoc":"Provide a collection of strings that this terminal would have accepted\n@param got the remaining contents of the input buffer\n@param labels the program labels, if applicable\n@return a, possibly empty, collection of suggestions","static":false,"name":"getSuggestions","comment":"Provide a collection of strings that this terminal would have accepted","params":[{"type_long":"java.lang.String","name":"got","comment":"the remaining contents of the input buffer","type_short":"String"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"labels","comment":"the program labels, if applicable","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<java.lang.String>","comment":"a, possibly empty, collection of suggestions","type_short":"Collection"}}],"name":"AssemblyTerminal","comment":"The type of terminal for an assembly grammar\n \n Unlike classical parsing, each terminal provides its own tokenizer. If multiple tokenizers yield\n a token, the parser branches, possibly creating multiple, ambiguous trees.","fields":[]}
