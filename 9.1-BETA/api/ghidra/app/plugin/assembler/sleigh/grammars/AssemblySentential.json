{"implements":["java.lang.Comparable"],"javadoc":"A \"string\" of symbols\n \n To avoid overloading the word \"String\", we call this a \"sentential\". Technically, to be a\n \"sentential\" in the classic sense, it must be a possible element in the derivation of a sentence\n in the grammar starting with the start symbol. We ignore that if only for the sake of naming.\n@param <NT> the type of non-terminals\n@param <T> the type of terminals","static":false,"extends":"org.apache.commons.collections4.list.AbstractListDecorator","methods":[{"javadoc":"Construct a string from the given list of symbols\n@param symbols","static":false,"name":"<init>","comment":"Construct a string from the given list of symbols","params":[{"type_long":"java.util.List<? extends ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol>","name":"symbols","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"decorated","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol>","comment":"","type_short":"List"}},{"javadoc":"Construct a blank string\n \n This is suitable as a blank start, to add new symbols, or to use directly as the RHS,\n effectively creating an \"epsilon\" production.","static":false,"name":"<init>","comment":"Construct a blank string\n \n This is suitable as a blank start, to add new symbols, or to use directly as the RHS,\n effectively creating an \"epsilon\" production.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a string from any number of symbols\n@param syms","static":false,"name":"<init>","comment":"Construct a string from any number of symbols","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol[]","name":"syms","comment":"","type_short":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","name":"that","comment":"","type_short":"AssemblySentential"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Add \"optional\" whitespace, if not already preceded by whitespace\n@return true if whitespace was added","static":false,"name":"addWS","comment":"Add \"optional\" whitespace, if not already preceded by whitespace","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if whitespace was added","type_short":"boolean"}},{"javadoc":"","static":false,"name":"lastWhiteSpace","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential.WhiteSpace","comment":"","type_short":"WhiteSpace"}},{"javadoc":"Trim leading and trailing whitespace, and make the string immutable","static":false,"name":"finish","comment":"Trim leading and trailing whitespace, and make the string immutable","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"subList","comment":"","params":[{"type_long":"int","name":"fromIndex","comment":"","type_short":"int"},{"type_long":"int","name":"toIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblySentential<NT>","comment":"","type_short":"AssemblySentential"}}],"name":"AssemblySentential","comment":"A \"string\" of symbols\n \n To avoid overloading the word \"String\", we call this a \"sentential\". Technically, to be a\n \"sentential\" in the classic sense, it must be a possible element in the derivation of a sentence\n in the grammar starting with the start symbol. We ignore that if only for the sake of naming.","fields":[{"type_long":"java.util.List<ghidra.app.plugin.assembler.sleigh.symbol.AssemblySymbol>","javadoc":"","static":false,"name":"symbols","comment":"","type_short":"List","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"finished","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyStringTerminal","javadoc":"","static":true,"name":"WHITE_SPACE","comment":"","type_short":"AssemblyStringTerminal","constant_value":null}]}
