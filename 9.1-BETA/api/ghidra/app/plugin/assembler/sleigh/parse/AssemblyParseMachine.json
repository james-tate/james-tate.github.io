{"implements":["java.lang.Comparable"],"javadoc":"A class that implements the LALR(1) parsing algorithm\n \n Instances of this class store a parse state. In order to work correctly, the class must be\n given a properly-constructed Action\/Goto table.\n \n This implementation is somewhat unconventional. First, instead of strictly tokenizing and then\n parsing, each terminal is given the opportunity to match a token in the input. If none match, it\n results in a syntax error (equivalent to the token type having an empty cell in the classical\n algorithm). If more than one match, the parser branches. Also, because a single cell may also\n contain multiple actions, the parser could branch again. Thus, if a sentence is ambiguous, this\n algorithm will identify all possible parse trees, including ones where the input is tokenized\n differently than in other trees.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new parse state\n@param parser the parser driving this machine\n@param input the full input line\n@param pos the position in the line identifying the next characters to parse\n@param labels a map of valid tokens to number for numeric terminals","static":false,"name":"<init>","comment":"Construct a new parse state","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParser","name":"parser","comment":"the parser driving this machine","type_short":"AssemblyParser"},{"type_long":"java.lang.String","name":"input","comment":"the full input line","type_short":"String"},{"type_long":"int","name":"pos","comment":"the position in the line identifying the next characters to parse","type_short":"int"},{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken","name":"lastTok","comment":"","type_short":"AssemblyParseToken"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"labels","comment":"a map of valid tokens to number for numeric terminals","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"that","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine","name":"that","comment":"","type_short":"AssemblyParseMachine"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Duplicate this machine state\n \n This is used extensively when branching\n@return the duplicate","static":false,"name":"copy","comment":"Duplicate this machine state\n \n This is used extensively when branching","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine","comment":"the duplicate","type_short":"AssemblyParseMachine"}},{"javadoc":"Perform a given action and continue parsing, exhausting all results after the action\n@param a the action\n@param tok the token given by the terminal (column) of the entry containing this action\n@param results a place to store all the parsing results (each must be accept or error state)\n@param visited a collection of machine states already visited\n \n The visited \"collection\" prevents infinite loops or stack overflows resulting from\n \"consuming\" epsilon and going to the same state. Such loops may involve many states. It is\n also defined as a map here for debugging purposes, so that when a loop is detected, we can\n print the ID of the first visit.","static":false,"name":"doAction","comment":"Perform a given action and continue parsing, exhausting all results after the action","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseActionGotoTable.Action","name":"a","comment":"the action","type_short":"Action"},{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken","name":"tok","comment":"the token given by the terminal (column) of the entry containing this action","type_short":"AssemblyParseToken"},{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"results","comment":"a place to store all the parsing results (each must be accept or error state)","type_short":"Set"},{"type_long":"java.util.Deque<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"visited","comment":"a collection of machine states already visited\n \n The visited \"collection\" prevents infinite loops or stack overflows resulting from\n \"consuming\" epsilon and going to the same state. Such loops may involve many states. It is\n also defined as a map here for debugging purposes, so that when a loop is detected, we can\n print the ID of the first visit.","type_short":"Deque"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Consume a given terminal (and corresponding token) and continue parsing\n@param t the terminal\n@param tok the corresponding token\n@param results a place to store all the parsing results\n@param visited a collection of machine states already visited","static":false,"name":"consume","comment":"Consume a given terminal (and corresponding token) and continue parsing","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal","name":"t","comment":"the terminal","type_short":"AssemblyTerminal"},{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken","name":"tok","comment":"the corresponding token","type_short":"AssemblyParseToken"},{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"results","comment":"a place to store all the parsing results","type_short":"Set"},{"type_long":"java.util.Deque<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"visited","comment":"a collection of machine states already visited","type_short":"Deque"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Look for previous machine states having the same stack and position\n \n This would imply we have gone in a loop without consuming anything. We need to prune.\n@param machine the machine state to check\n@param visited the stack of previous machine states\n@return if there is a loop, the machine state proving it, null otherwise","static":true,"name":"findLoop","comment":"Look for previous machine states having the same stack and position\n \n This would imply we have gone in a loop without consuming anything. We need to prune.","params":[{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine","name":"machine","comment":"the machine state to check","type_short":"AssemblyParseMachine"},{"type_long":"java.util.Collection<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"visited","comment":"the stack of previous machine states","type_short":"Collection"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine","comment":"if there is a loop, the machine state proving it, null otherwise","type_short":"AssemblyParseMachine"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Parse (or continue parsing) all possible trees from this machine state\n@param results a place to store all the parsing results\n@param visited a collection of machine states already visited","static":false,"name":"exhaust","comment":"Parse (or continue parsing) all possible trees from this machine state","params":[{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"results","comment":"a place to store all the parsing results","type_short":"Set"},{"type_long":"java.util.Deque<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","name":"visited","comment":"a collection of machine states already visited","type_short":"Deque"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parse (or continue parsing) all possible trees from this machine state\n@return the set of all possible trees and errors","static":false,"name":"exhaust","comment":"Parse (or continue parsing) all possible trees from this machine state","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.app.plugin.assembler.sleigh.parse.AssemblyParseMachine>","comment":"the set of all possible trees and errors","type_short":"Set"}},{"javadoc":"If in the accepted state, get the resulting parse tree for this machine\n@return the parse tree","static":false,"name":"getTree","comment":"If in the accepted state, get the resulting parse tree for this machine","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseBranch","comment":"the parse tree","type_short":"AssemblyParseBranch"}}],"name":"AssemblyParseMachine","comment":"A class that implements the LALR(1) parsing algorithm\n \n Instances of this class store a parse state. In order to work correctly, the class must be\n given a properly-constructed Action\/Goto table.\n \n This implementation is somewhat unconventional. First, instead of strictly tokenizing and then\n parsing, each terminal is given the opportunity to match a token in the input. If none match, it\n results in a syntax error (equivalent to the token type having an empty cell in the classical\n algorithm). If more than one match, the parser branches. Also, because a single cell may also\n contain multiple actions, the parser could branch again. Thus, if a sentence is ambiguous, this\n algorithm will identify all possible parse trees, including ones where the input is tokenized\n differently than in other trees.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"ERROR_NONE","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"ERROR_SYNTAX","comment":"","type_short":"int","constant_value":"1"},{"type_long":"ghidra.app.plugin.assembler.sleigh.parse.AssemblyParser","javadoc":"","static":false,"name":"parser","comment":"","type_short":"AssemblyParser","constant_value":null},{"type_long":"java.util.List<java.lang.Integer>","javadoc":"","static":false,"name":"output","comment":"","type_short":"List","constant_value":null},{"type_long":"java.util.Stack<java.lang.Integer>","javadoc":"","static":false,"name":"stack","comment":"","type_short":"Stack","constant_value":null},{"type_long":"java.util.Stack<ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseTreeNode>","javadoc":"","static":false,"name":"treeStack","comment":"","type_short":"Stack","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"buffer","comment":"","type_short":"String","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"pos","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseToken","javadoc":"","static":false,"name":"lastTok","comment":"","type_short":"AssemblyParseToken","constant_value":null},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","javadoc":"","static":false,"name":"labels","comment":"","type_short":"Map","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"accepted","comment":"","type_short":"boolean","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"error","comment":"","type_short":"int","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"got","comment":"","type_short":"String","constant_value":null},{"type_long":"java.util.Collection<ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal>","javadoc":"","static":false,"name":"expected","comment":"","type_short":"Collection","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"id","comment":"","type_short":"int","constant_value":null},{"type_long":"int","javadoc":"","static":true,"name":"nextMachineId","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.app.plugin.assembler.sleigh.util.DbgTimer","javadoc":"","static":true,"name":"dbg","comment":"","type_short":"DbgTimer","constant_value":null}]}
