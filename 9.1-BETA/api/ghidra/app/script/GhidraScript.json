{"implements":[],"javadoc":"<h1>Ghidra Script Development.<\/h1>\n In order to write a script:\n <ol>\n \t<li>Ghidra script must be written in Java.<\/li>\n \t<li>Your script class must extend <code>ghidra.app.script.GhidraScript<\/code>.<\/li>\n \t<li>You must implement the <code>run()<\/code> method. This is where you insert your\n \t\t\tscript-specific code.<\/li>\n \t<li>You should create a description comment at the top of the file. Each description\n \t\t\tline should start with &quot;\/\/&quot;.<\/li>\n <\/ol>\n <br><br>\n When you create a new script using the script manager,\n you will automatically receive a source code stub (as shown below).\n <pre>\n  \/\/TODO write a description for this script\n\n \tpublic class NewScript extends GhidraScript {\n\n \t\tpublic void run() throws Exception {\n \t\t\t\/\/TODO Add User Code Here\n \t\t}\n \t}\n <\/pre>\n <h2>Ghidra Script State<\/h2>\n <blockquote>\n <p>\n All scripts, when run, will be handed the current state in the form of class\n instance variable. These variables are:<\/p>\n <ol>\n   <li><code>currentProgram<\/code>: the active program<\/li>\n   <li><code>currentAddress<\/code>: the address of the current cursor location in the tool<\/li>\n   <li><code>currentLocation<\/code>: the program location of the current cursor location\n   \t\t\tin the tool, or null if no program location exists<\/li>\n   <li><code>currentSelection<\/code>: the current selection in the tool, or null\n   \t\t\tif no selection exists<\/li>\n   <li><code>currentHighlight<\/code>: the current highlight in the tool, or null\n   \t\t\tif no highlight exists<\/li>\n <\/ol>\n <\/blockquote>\n\n <h2>Hello World Example<\/h2>\n This example, when run, will simply print &quot;Hello World&quot; into the Ghidra console.\n <pre>\n \tpublic class HelloWorldScript extends GhidraScript {\n \t\tpublic void run() throws Exception {\n \t\t\tprintln(&quot;Hello World!&quot;);\n \t\t}\n \t}\n <\/pre>\n All scripts, when run, will be handed the current state and are automatically\n run in a separate thread.\n <br>\n@see ghidra.app.script.GhidraState\n@see ghidra.program.model.listing.Program","static":false,"extends":"ghidra.program.flatapi.FlatProgramAPI","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The run method is where the script specific code is placed.\n@throws Exception if any exception occurs.","static":false,"name":"run","comment":"The run method is where the script specific code is placed.","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"if any exception occurs.","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"set","comment":"","params":[{"type_long":"ghidra.app.script.GhidraState","name":"state","comment":"","type_short":"GhidraState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.io.PrintWriter","name":"writer","comment":"","type_short":"PrintWriter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"execute","comment":"","params":[{"type_long":"ghidra.app.script.GhidraState","name":"runState","comment":"","type_short":"GhidraState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"runMonitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.io.PrintWriter","name":"runWriter","comment":"","type_short":"PrintWriter"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doExecute","comment":"","params":[{"type_long":"ghidra.app.script.GhidraState","name":"runState","comment":"","type_short":"GhidraState"},{"type_long":"ghidra.util.task.TaskMonitor","name":"runMonitor","comment":"","type_short":"TaskMonitor"},{"type_long":"java.io.PrintWriter","name":"runWriter","comment":"","type_short":"PrintWriter"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"loadPropertiesFile","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"doCleanup","comment":"","params":[{"type_long":"boolean","name":"success","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A callback for scripts to perform any needed cleanup after the script is finished\n@param success true if the script was successful","static":false,"name":"cleanup","comment":"A callback for scripts to perform any needed cleanup after the script is finished","params":[{"type_long":"boolean","name":"success","comment":"true if the script was successful","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set potential locations of .properties files for scripts (including subscripts).\n This should be used when the .properties file is not located in the same directory\n as the script, and the user has supplied one or more potential locations for the\n .properties file(s).\n@param locations directories that contain .properties files","static":false,"name":"setPotentialPropertiesFileLocations","comment":"Set potential locations of .properties files for scripts (including subscripts).\n This should be used when the .properties file is not located in the same directory\n as the script, and the user has supplied one or more potential locations for the\n .properties file(s).","params":[{"type_long":"java.util.List<generic.jar.ResourceFile>","name":"locations","comment":"directories that contain .properties files","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Explicitly set the .properties file location and basename for this script (used\n if a ResourceFile representing the GhidraScript is not available -- i.e., if\n running GhidraScript from a .class file or instantiating the actual GhidraScript\n object directly).\n@param dirLocation String representation of the path to the .properties file\n@param basename base name of the file\n@throws IOException if there is an exception loading the new properties file","static":false,"name":"setPropertiesFileLocation","comment":"Explicitly set the .properties file location and basename for this script (used\n if a ResourceFile representing the GhidraScript is not available -- i.e., if\n running GhidraScript from a .class file or instantiating the actual GhidraScript\n object directly).","params":[{"type_long":"java.lang.String","name":"dirLocation","comment":"String representation of the path to the .properties file","type_short":"String"},{"type_long":"java.lang.String","name":"basename","comment":"base name of the file","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an exception loading the new properties file","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Explicitly set the .properties file (used if a ResourceFile representing the\n GhidraScript is not available -- i.e., if running GhidraScript from a .class file\n or instantiating the actual GhidraScript object directly).\n@param propertiesFile the actual .properties file for this GhidraScript\n@throws IOException if there is an exception reading the properties","static":false,"name":"setPropertiesFile","comment":"Explicitly set the .properties file (used if a ResourceFile representing the\n GhidraScript is not available -- i.e., if running GhidraScript from a .class file\n or instantiating the actual GhidraScript object directly).","params":[{"type_long":"java.io.File","name":"propertiesFile","comment":"the actual .properties file for this GhidraScript","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"if there is an exception reading the properties","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setPropertiesFile","comment":"","params":[{"type_long":"generic.jar.ResourceFile","name":"propertiesFile","comment":"","type_short":"ResourceFile"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"executeAsAnalysisWorker","comment":"","params":[{"type_long":"boolean","name":"analyzeChanges","comment":"","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"runMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"executeNormal","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getProjectRootFolder","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"","type_short":"DomainFolder"}},{"javadoc":"","static":false,"name":"promptToKeepChangesOnException","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"analyzeAll","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"analyzeChanges","comment":"","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"updateStateFromVariables","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"loadVariablesFromState","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the state object for this script after first synchronizing its state with its\n corresponding convenience variables.\n@return the state object","static":false,"name":"getState","comment":"Returns the state object for this script after first synchronizing its state with its\n corresponding convenience variables.","params":[],"throws":[],"return":{"type_long":"ghidra.app.script.GhidraState","comment":"the state object","type_short":"GhidraState"}},{"javadoc":"","static":false,"name":"setCurrentLocation","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set associated source file\n@param sourceFile the source file","static":false,"name":"setSourceFile","comment":"Set associated source file","params":[{"type_long":"generic.jar.ResourceFile","name":"sourceFile","comment":"the source file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines the behavior of Auto-Analysis while this script is executed and the manner\n in which this script is executed.  If a script overrides this method and returns DISABLED\n or SUSPENDED, this script will execute as an AnalysisWorker.  Note that this will only\n work reliably when the script is working with the currentProgram only and is not opening\n and changing other programs.  If multiple programs will be modified\n and auto-analysis should be disabled\/suspended, the AutoAnalysisManager.scheduleWorker\n method should be used with the appropriate AutoAnalysisManager instance.\n@return the analysis mode associated with this script.\n@see AutoAnalysisManager#getAnalysisManager(Program)\n@see AutoAnalysisManager#scheduleWorker(AnalysisWorker, Object, boolean, TaskMonitor)\n@see AutoAnalysisManager#setIgnoreChanges(boolean)","static":false,"name":"getScriptAnalysisMode","comment":"Determines the behavior of Auto-Analysis while this script is executed and the manner\n in which this script is executed.  If a script overrides this method and returns DISABLED\n or SUSPENDED, this script will execute as an AnalysisWorker.  Note that this will only\n work reliably when the script is working with the currentProgram only and is not opening\n and changing other programs.  If multiple programs will be modified\n and auto-analysis should be disabled\/suspended, the AutoAnalysisManager.scheduleWorker\n method should be used with the appropriate AutoAnalysisManager instance.","params":[],"throws":[],"return":{"type_long":"ghidra.app.script.GhidraScript.AnalysisMode","comment":"the analysis mode associated with this script.","type_short":"AnalysisMode"}},{"javadoc":"Establishes fixed login credentials for Ghidra Server access.\n <p>\n NOTE: Only used for Headless environment, other GUI environments should\n continue to prompt user for login credentials as needed.\n@param username login name or null if not applicable or to use default name\n@param password login password\n@return true if active project is either private or shared project is\n connected to its server repository.  False is returned if not active\n project or an active shared project failed to connect.","static":false,"name":"setServerCredentials","comment":"Establishes fixed login credentials for Ghidra Server access.\n \n NOTE: Only used for Headless environment, other GUI environments should\n continue to prompt user for login credentials as needed.","params":[{"type_long":"java.lang.String","name":"username","comment":"login name or null if not applicable or to use default name","type_short":"String"},{"type_long":"java.lang.String","name":"password","comment":"login password","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if active project is either private or shared project is\n connected to its server repository.  False is returned if not active\n project or an active shared project failed to connect.","type_short":"boolean"}},{"javadoc":"Enable use of anonymous read-only user connection to Ghidra Server in place of\n fixed username\/password credentials.\n <p>\n NOTE: Only used for Headless environment, other GUI environments should\n continue to prompt user for login credentials as needed.\n@return true if active project is either private or shared project is\n connected to its server repository.  False is returned if not active\n project or an active shared project failed to connect.","static":false,"name":"setAnonymousServerCredentials","comment":"Enable use of anonymous read-only user connection to Ghidra Server in place of\n fixed username\/password credentials.\n \n NOTE: Only used for Headless environment, other GUI environments should\n continue to prompt user for login credentials as needed.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if active project is either private or shared project is\n connected to its server repository.  False is returned if not active\n project or an active shared project failed to connect.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"verifyRepositoryConnection","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the category for this script.\n@return the category for this script","static":false,"name":"getCategory","comment":"Returns the category for this script.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the category for this script","type_short":"String"}},{"javadoc":"Returns the username of the user running the script.\n@return the username of the user running the script","static":false,"name":"getUserName","comment":"Returns the username of the user running the script.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the username of the user running the script","type_short":"String"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns name of script\n@return name of script","static":false,"name":"getScriptName","comment":"Returns name of script","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"name of script","type_short":"String"}},{"javadoc":"Returns the script source file.\n@return the script source file","static":false,"name":"getSourceFile","comment":"Returns the script source file.","params":[],"throws":[],"return":{"type_long":"generic.jar.ResourceFile","comment":"the script source file","type_short":"ResourceFile"}},{"javadoc":"Returns the script-specific arguments\n@return The script-specific arguments.  Could be an empty array, but won't be null.","static":false,"name":"getScriptArgs","comment":"Returns the script-specific arguments","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"The script-specific arguments.  Could be an empty array, but won't be null.","type_short":"java.lang.String[]"}},{"javadoc":"Sets script-specific arguments\n@param scriptArgs The script-specific arguments to use.  For no scripts, use null or an\n   empty array.","static":false,"name":"setScriptArgs","comment":"Sets script-specific arguments","params":[{"type_long":"java.lang.String[]","name":"scriptArgs","comment":"The script-specific arguments to use.  For no scripts, use null or an\n   empty array.","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the next script argument from the script argument array to process.  Designed to be\n called by the \"ask\" methods.\n@return The next script argument from the script argument array.\n@throws IndexOutOfBoundsException If there are no more script arguments in the array.","static":false,"name":"nextScriptArg","comment":"Gets the next script argument from the script argument array to process.  Designed to be\n called by the \"ask\" methods.","params":[],"throws":[{"type_long":"java.lang.IndexOutOfBoundsException","comment":"If there are no more script arguments in the array.","type_short":"IndexOutOfBoundsException"}],"return":{"type_long":"java.lang.String","comment":"The next script argument from the script argument array.","type_short":"String"}},{"javadoc":"Returns the version of the Ghidra being run.\n@return the version of the Ghidra being run","static":false,"name":"getGhidraVersion","comment":"Returns the version of the Ghidra being run.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the version of the Ghidra being run","type_short":"String"}},{"javadoc":"Returns whether this script is running in a headless (Non GUI) environment.\n <p>\n This method should not be using GUI type script calls like showAddress()\n@return true if the script is running without a GUI.","static":false,"name":"isRunningHeadless","comment":"Returns whether this script is running in a headless (Non GUI) environment.\n \n This method should not be using GUI type script calls like showAddress()","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the script is running without a GUI.","type_short":"boolean"}},{"javadoc":"Runs a script by name (allows current state to be changed by script).\n <p>\n It attempts to locate the script in the directories\n defined in <code>GhidraScriptUtil.getScriptDirectories()<\/code>.\n <p>\n The script being run uses the same {@link GhidraState} (e.g., script variables) as\n this calling script.  Also, any changes to the state by the script being run will be\n reflected in this calling script's state.\n@param scriptName the name of the script to run\n@throws IllegalArgumentException if the script does not exist\n@throws Exception if any exceptions occur while running the script\n@see #runScriptPreserveMyState(String)\n@see #runScript(String, GhidraState)","static":false,"name":"runScript","comment":"Runs a script by name (allows current state to be changed by script).\n \n It attempts to locate the script in the directories\n defined in GhidraScriptUtil.getScriptDirectories().\n \n The script being run uses the same GhidraState (e.g., script variables) as\n this calling script.  Also, any changes to the state by the script being run will be\n reflected in this calling script's state.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"the name of the script to run","type_short":"String"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while running the script","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs a script by name with the provided arguments (allows current state to be changed by\n script).\n <p>\n It attempts to locate the script in the directories\n defined in <code>GhidraScriptUtil.getScriptDirectories()<\/code>.\n <p>\n The script being run uses the same {@link GhidraState} (e.g., script variables) as\n this calling script.  Also, any changes to the state by the script being run will be\n reflected in this calling script's state.\n@param scriptName the name of the script to run\n@param scriptArguments the arguments to pass to the script\n@throws IllegalArgumentException if the script does not exist\n@throws Exception if any exceptions occur while running the script\n@see #runScriptPreserveMyState(String)\n@see #runScript(String, GhidraState)","static":false,"name":"runScript","comment":"Runs a script by name with the provided arguments (allows current state to be changed by\n script).\n \n It attempts to locate the script in the directories\n defined in GhidraScriptUtil.getScriptDirectories().\n \n The script being run uses the same GhidraState (e.g., script variables) as\n this calling script.  Also, any changes to the state by the script being run will be\n reflected in this calling script's state.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"the name of the script to run","type_short":"String"},{"type_long":"java.lang.String[]","name":"scriptArguments","comment":"the arguments to pass to the script","type_short":"java.lang.String[]"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while running the script","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs a script by name (does not allow current state to change).\n <p>\n It attempts to locate the script in the directories\n defined in <code>GhidraScriptUtil.getScriptDirectories()<\/code>.\n <p>\n The script being run uses the same {@link GhidraState} (e.g., script variables) as\n this calling script.  However, any changes to the state by the script being run will NOT\n be reflected in this calling script's state.\n@param scriptName the name of the script to run\n@return a GhidraState object containing the final state of the run script.\n@throws IllegalArgumentException if the script does not exist\n@throws Exception if any exceptions occur while running the script\n@see #runScript(String)\n@see #runScript(String, GhidraState)","static":false,"name":"runScriptPreserveMyState","comment":"Runs a script by name (does not allow current state to change).\n \n It attempts to locate the script in the directories\n defined in GhidraScriptUtil.getScriptDirectories().\n \n The script being run uses the same GhidraState (e.g., script variables) as\n this calling script.  However, any changes to the state by the script being run will NOT\n be reflected in this calling script's state.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"the name of the script to run","type_short":"String"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while running the script","type_short":"Exception"}],"return":{"type_long":"ghidra.app.script.GhidraState","comment":"a GhidraState object containing the final state of the run script.","type_short":"GhidraState"}},{"javadoc":"Runs a script by name using the given state.\n <p>\n It attempts to locate the script in the directories\n defined in <code>GhidraScriptUtil.getScriptDirectories()<\/code>.\n <p>\n The script being run uses the given {@link GhidraState} (e.g., script variables)\n Any changes to the state by the script being run will be reflected in the given state\n object.  If the given object is the current state, the this scripts state may be changed\n by the called script.\n@param scriptName the name of the script to run\n@param scriptState the Ghidra state\n@throws IllegalArgumentException if the script does not exist\n@throws Exception if any exceptions occur while running the script\n@see #runScriptPreserveMyState(String)\n@see #runScript(String)","static":false,"name":"runScript","comment":"Runs a script by name using the given state.\n \n It attempts to locate the script in the directories\n defined in GhidraScriptUtil.getScriptDirectories().\n \n The script being run uses the given GhidraState (e.g., script variables)\n Any changes to the state by the script being run will be reflected in the given state\n object.  If the given object is the current state, the this scripts state may be changed\n by the called script.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"the name of the script to run","type_short":"String"},{"type_long":"ghidra.app.script.GhidraState","name":"scriptState","comment":"the Ghidra state","type_short":"GhidraState"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while running the script","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs a script by name with the given arguments using the given state.\n <p>\n It attempts to locate the script in the directories\n defined in <code>GhidraScriptUtil.getScriptDirectories()<\/code>.\n <p>\n The script being run uses the given {@link GhidraState} (e.g., script variables)\n Any changes to the state by the script being run will be reflected in the given state\n object.  If the given object is the current state, the this scripts state may be changed\n by the called script.\n@param scriptName the name of the script to run\n@param scriptArguments the arguments to pass to the script\n@param scriptState the Ghidra state\n@throws IllegalArgumentException if the script does not exist\n@throws Exception if any exceptions occur while running the script\n@see #runScriptPreserveMyState(String)\n@see #runScript(String)","static":false,"name":"runScript","comment":"Runs a script by name with the given arguments using the given state.\n \n It attempts to locate the script in the directories\n defined in GhidraScriptUtil.getScriptDirectories().\n \n The script being run uses the given GhidraState (e.g., script variables)\n Any changes to the state by the script being run will be reflected in the given state\n object.  If the given object is the current state, the this scripts state may be changed\n by the called script.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"the name of the script to run","type_short":"String"},{"type_long":"java.lang.String[]","name":"scriptArguments","comment":"the arguments to pass to the script","type_short":"java.lang.String[]"},{"type_long":"ghidra.app.script.GhidraState","name":"scriptState","comment":"the Ghidra state","type_short":"GhidraState"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while running the script","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Runs the specified command using the current program.\n@param cmd the command to run\n@return true if the command successfully ran","static":false,"name":"runCommand","comment":"Runs the specified command using the current program.","params":[{"type_long":"ghidra.framework.cmd.Command","name":"cmd","comment":"the command to run","type_short":"Command"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the command successfully ran","type_short":"boolean"}},{"javadoc":"Runs the specified background command using the current program.\n The command will be given the script task monitor.\n@param cmd the background command to run\n@return true if the background command successfully ran","static":false,"name":"runCommand","comment":"Runs the specified background command using the current program.\n The command will be given the script task monitor.","params":[{"type_long":"ghidra.framework.cmd.BackgroundCommand","name":"cmd","comment":"the background command to run","type_short":"BackgroundCommand"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the background command successfully ran","type_short":"boolean"}},{"javadoc":"Returns the default language provider for the specified processor name.\n@param processor the processor\n@return the default language provider for the specified processor name\n@throws LanguageNotFoundException if no language provider exists for the processor\n@see ghidra.program.model.lang.Language","static":false,"name":"getDefaultLanguage","comment":"Returns the default language provider for the specified processor name.","params":[{"type_long":"ghidra.program.model.lang.Processor","name":"processor","comment":"the processor","type_short":"Processor"}],"throws":[{"type_long":"ghidra.program.model.lang.LanguageNotFoundException","comment":"if no language provider exists for the processor","type_short":"LanguageNotFoundException"}],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"the default language provider for the specified processor name","type_short":"Language"}},{"javadoc":"Returns the language provider for the specified language name.\n@param languageID the language name\n@return the language provider for the specified language name\n@throws LanguageNotFoundException if no language provider exists\n@see ghidra.program.model.lang.Language","static":false,"name":"getLanguage","comment":"Returns the language provider for the specified language name.","params":[{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageID","comment":"the language name","type_short":"LanguageID"}],"throws":[{"type_long":"ghidra.program.model.lang.LanguageNotFoundException","comment":"if no language provider exists","type_short":"LanguageNotFoundException"}],"return":{"type_long":"ghidra.program.model.lang.Language","comment":"the language provider for the specified language name","type_short":"Language"}},{"javadoc":"Returns a demangled version of the mangled string.\n@param mangled the mangled string to demangled\n@return a demangled version of the mangled string","static":false,"name":"getDemangled","comment":"Returns a demangled version of the mangled string.","params":[{"type_long":"java.lang.String","name":"mangled","comment":"the mangled string to demangled","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a demangled version of the mangled string","type_short":"String"}},{"javadoc":"Prints a newline.\n@see #printf(String, Object...)","static":false,"name":"println","comment":"Prints a newline.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Prints the message to the console followed by a line feed.\n@param message the message to print\n@see #printf(String, Object...)","static":false,"name":"println","comment":"Prints the message to the console followed by a line feed.","params":[{"type_long":"java.lang.String","name":"message","comment":"the message to print","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to print a formatted String using Java's <tt>printf<\/tt>\n feature, which is similar to that of the C programming language.\n For a full description on Java's\n <tt>printf<\/tt> usage, see {@link java.util.Formatter}.\n <p>\n For examples, see the included <code>FormatExampleScript<\/code>.\n <p>\n <b><u>Note:<\/u> This method will not:\n <ul>\n \t<li>print out the name of the script, as does {@link #println(String)}<\/li>\n  <li>print a newline<\/li>\n <\/ul>\n <\/b>\n If you would like the name of the script to precede you message, then you must add that\n yourself.  The {@link #println(String)} does this via the following code:\n <pre>\n     String messageWithSource = getScriptName() + \"> \" + message;\n <\/pre>\n@param message the message to format\n@param args formatter arguments (see above)\n@see String#format(String, Object...)\n@see java.util.Formatter\n@see #print(String)\n@see #println(String)","static":false,"name":"printf","comment":"A convenience method to print a formatted String using Java's printf\n feature, which is similar to that of the C programming language.\n For a full description on Java's\n printf usage, see java.util.Formatter.\n \n For examples, see the included FormatExampleScript.\n \n Note: This method will not:\n \n \tprint out the name of the script, as does #println(String)\n  print a newline\n \n \n If you would like the name of the script to precede you message, then you must add that\n yourself.  The #println(String) does this via the following code:\n \n     String messageWithSource = getScriptName() + \" \" + message;\n ","params":[{"type_long":"java.lang.String","name":"message","comment":"the message to format","type_short":"String"},{"type_long":"java.lang.Object[]","name":"args","comment":"formatter arguments (see above)","type_short":"java.lang.Object[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Prints the message to the console - no line feed\n <p>\n <b><u>Note:<\/u> This method will not print out the name of the script,\n as does {@link #println(String)}\n <\/b>\n <p>\n If you would like the name of the script to precede you message, then you must add that\n yourself.  The {@link #println(String)} does this via the following code:\n <pre>\n     String messageWithSource = getScriptName() + \"> \" + message;\n <\/pre>\n@param message the message to print\n@see #printf(String, Object...)","static":false,"name":"print","comment":"Prints the message to the console - no line feed\n \n Note: This method will not print out the name of the script,\n as does #println(String)\n \n \n If you would like the name of the script to precede you message, then you must add that\n yourself.  The #println(String) does this via the following code:\n \n     String messageWithSource = getScriptName() + \" \" + message;\n ","params":[{"type_long":"java.lang.String","name":"message","comment":"the message to print","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Prints the error message to the console followed by a line feed.\n@param message the error message to print","static":false,"name":"printerr","comment":"Prints the error message to the console followed by a line feed.","params":[{"type_long":"java.lang.String","name":"message","comment":"the error message to print","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the description of an analysis option name, as provided by the analyzer. This\n method returns an empty string if no description is available.\n@param program the program to get the analysis option description from\n@param analysisOption the analysis option to get the description for\n@return the analysis description, or empty String if none has been provided","static":false,"name":"getAnalysisOptionDescription","comment":"Returns the description of an analysis option name, as provided by the analyzer. This\n method returns an empty string if no description is available.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to get the analysis option description from","type_short":"Program"},{"type_long":"java.lang.String","name":"analysisOption","comment":"the analysis option to get the description for","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the analysis description, or empty String if none has been provided","type_short":"String"}},{"javadoc":"Returns descriptions mapping to the given list of analysis option names. This method\n returns an empty string for an analysis option if no description is available.\n@param program the program to get the analysis option description from\n@param analysisOptions the lists of analysis options to get the description for\n@return mapping between each analysis options and its description (description is empty\n \t\t\tstring if none has been provided).","static":false,"name":"getAnalysisOptionDescriptions","comment":"Returns descriptions mapping to the given list of analysis option names. This method\n returns an empty string for an analysis option if no description is available.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to get the analysis option description from","type_short":"Program"},{"type_long":"java.util.List<java.lang.String>","name":"analysisOptions","comment":"the lists of analysis options to get the description for","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.Map<java.lang.String,java.lang.String>","comment":"mapping between each analysis options and its description (description is empty\n \t\t\tstring if none has been provided).","type_short":"Map"}},{"javadoc":"Reset all analysis options to their default values.\n@param program the program for which all analysis options should be reset","static":false,"name":"resetAllAnalysisOptions","comment":"Reset all analysis options to their default values.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which all analysis options should be reset","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Reset one analysis option to its default value.\n@param program the program for which the specified analysis options should be reset\n@param analysisOption the specified analysis option to reset (invalid options will be\n \t\t  \tignored)","static":false,"name":"resetAnalysisOption","comment":"Reset one analysis option to its default value.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which the specified analysis options should be reset","type_short":"Program"},{"type_long":"java.lang.String","name":"analysisOption","comment":"the specified analysis option to reset (invalid options will be\n \t\t  \tignored)","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Resets a specified list of analysis options to their default values.\n@param program the program for which the specific analysis options should be reset\n@param analysisOptions the specified analysis options to reset (invalid options\n \t\t\twill be ignored)","static":false,"name":"resetAnalysisOptions","comment":"Resets a specified list of analysis options to their default values.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which the specific analysis options should be reset","type_short":"Program"},{"type_long":"java.util.List<java.lang.String>","name":"analysisOptions","comment":"the specified analysis options to reset (invalid options\n \t\t\twill be ignored)","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a boolean value representing whether the specified value for the specified\n analysis option is actually the default value for that option.\n@param program the program for which we want to verify the analysis option value\n@param analysisOption the analysis option whose value we want to verify\n@param analysisValue the analysis value to be compared to the option's default value\n@return whether the given value for the given option is default or not","static":false,"name":"isAnalysisOptionDefaultValue","comment":"Returns a boolean value representing whether the specified value for the specified\n analysis option is actually the default value for that option.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which we want to verify the analysis option value","type_short":"Program"},{"type_long":"java.lang.String","name":"analysisOption","comment":"the analysis option whose value we want to verify","type_short":"String"},{"type_long":"java.lang.String","name":"analysisValue","comment":"the analysis value to be compared to the option's default value","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"whether the given value for the given option is default or not","type_short":"boolean"}},{"javadoc":"Returns the default value for the given analysis option.  Returns empty string if\n invalid option.\n@param program the program for which we want to retrieve the default value for the\n \t\t\tgiven analysis option\n@param analysisOption the analysis option for which we want to retrieve the default value\n@return String representation of default value (returns empty string if analysis option\n \t\t\tis invalid).","static":false,"name":"getAnalysisOptionDefaultValue","comment":"Returns the default value for the given analysis option.  Returns empty string if\n invalid option.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which we want to retrieve the default value for the\n \t\t\tgiven analysis option","type_short":"Program"},{"type_long":"java.lang.String","name":"analysisOption","comment":"the analysis option for which we want to retrieve the default value","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"String representation of default value (returns empty string if analysis option\n \t\t\tis invalid).","type_short":"String"}},{"javadoc":"Returns a mapping of the given analysis options to their default values in String form.\n An individual option is mapped to the empty String if the option is invalid.\n@param program the program for which to retrieve default values for the\n \t\t\t\t\tgiven analysis options\n@param analysisOptions the analysis options for which to retrieve default values\n@return mapping from analysis options to their default values.  An individual option\n \t\t\t\twill be mapped to an empty String if the option is invalid.","static":false,"name":"getAnalysisOptionDefaultValues","comment":"Returns a mapping of the given analysis options to their default values in String form.\n An individual option is mapped to the empty String if the option is invalid.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which to retrieve default values for the\n \t\t\t\t\tgiven analysis options","type_short":"Program"},{"type_long":"java.util.List<java.lang.String>","name":"analysisOptions","comment":"the analysis options for which to retrieve default values","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.Map<java.lang.String,java.lang.String>","comment":"mapping from analysis options to their default values.  An individual option\n \t\t\t\twill be mapped to an empty String if the option is invalid.","type_short":"Map"}},{"javadoc":"Gets the given program's ANALYSIS_PROPERTIES and returns a HashMap of the\n program's analysis options to current values (values represented as strings).\n <p>\n The string \"(default)\" is appended to the value if it represents the\n default value for the option it is assigned to.\n@param program the program to get analysis options from\n@return mapping of analysis options to current settings (represented as strings)","static":false,"name":"getCurrentAnalysisOptionsAndValues","comment":"Gets the given program's ANALYSIS_PROPERTIES and returns a HashMap of the\n program's analysis options to current values (values represented as strings).\n \n The string \"(default)\" is appended to the value if it represents the\n default value for the option it is assigned to.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to get analysis options from","type_short":"Program"}],"throws":[],"return":{"type_long":"java.util.Map<java.lang.String,java.lang.String>","comment":"mapping of analysis options to current settings (represented as strings)","type_short":"Map"}},{"javadoc":"Allows user to set analysis options by passing a mapping of analysis option to\n desired value.  This method does the work of converting the option value to its\n actual object type (if needed).\n@param program the program for which analysis options should be set\n@param analysisSettings a mapping from analysis options to desired new settings","static":false,"name":"setAnalysisOptions","comment":"Allows user to set analysis options by passing a mapping of analysis option to\n desired value.  This method does the work of converting the option value to its\n actual object type (if needed).","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which analysis options should be set","type_short":"Program"},{"type_long":"java.util.Map<java.lang.String,java.lang.String>","name":"analysisSettings","comment":"a mapping from analysis options to desired new settings","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows user to set one analysis option by passing in the analysis option to\n be changed and the new value of that option. This method does the work of\n converting the option value to its actual object type (if needed).\n@param program the program for which analysis options should be set\n@param optionName the name of the option to be set\n@param optionValue the new value of the option","static":false,"name":"setAnalysisOption","comment":"Allows user to set one analysis option by passing in the analysis option to\n be changed and the new value of that option. This method does the work of\n converting the option value to its actual object type (if needed).","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program for which analysis options should be set","type_short":"Program"},{"type_long":"java.lang.String","name":"optionName","comment":"the name of the option to be set","type_short":"String"},{"type_long":"java.lang.String","name":"optionValue","comment":"the new value of the option","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Private method, returns any error message that may have resulted from attempting to set\n the given analysis option to the given analysis value.\n@param options the options for which analysisOption should be set to\n \t\t\tanalysisOptionValue\n@param analysisOption the option to be changed\n@param analysisOptionValue the value to be set for the option\n@return a String description of any errors that occurred during setting of options; if\n \t\tempty String is returned, no problems occurred.","static":false,"name":"setAnalysisOption","comment":"Private method, returns any error message that may have resulted from attempting to set\n the given analysis option to the given analysis value.","params":[{"type_long":"ghidra.framework.options.Options","name":"options","comment":"the options for which analysisOption should be set to\n \t\t\tanalysisOptionValue","type_short":"Options"},{"type_long":"java.lang.String","name":"analysisOption","comment":"the option to be changed","type_short":"String"},{"type_long":"java.lang.String","name":"analysisOptionValue","comment":"the value to be set for the option","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a String description of any errors that occurred during setting of options; if\n \t\tempty String is returned, no problems occurred.","type_short":"String"}},{"javadoc":"","static":false,"name":"setEnum","comment":"","params":[{"type_long":"ghidra.framework.options.Options","name":"options","comment":"","type_short":"Options"},{"type_long":"java.lang.String","name":"analysisOption","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"analysisOptionValue","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the selection state to the given address set.\n <p>\n The actual behavior of the method depends on your environment, which can be GUI or\n headless:\n <ol>\n \t\t<li>In the GUI environment this method will set the {@link #currentSelection}\n \t\t\tvariable to the given value, update the {@link GhidraState}'s selection\n \t\t\tvariable, <b>and<\/b> will set the Tool's selection to the given value.<\/li>\n \t\t<li>In the headless environment this method will set the {@link #currentSelection}\n \t\t\tvariable to the given value and update the GhidraState's selection variable.<\/li>\n <\/ol>\n <p>\n@param addressSet the set of addresses to include in the selection.  If this value is null,\n the current selection will be cleared and the variables set to null.","static":false,"name":"setCurrentSelection","comment":"Sets the selection state to the given address set.\n \n The actual behavior of the method depends on your environment, which can be GUI or\n headless:\n \n \t\tIn the GUI environment this method will set the #currentSelection\n \t\t\tvariable to the given value, update the GhidraState's selection\n \t\t\tvariable, and will set the Tool's selection to the given value.\n \t\tIn the headless environment this method will set the #currentSelection\n \t\t\tvariable to the given value and update the GhidraState's selection variable.\n \n ","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the set of addresses to include in the selection.  If this value is null,\n the current selection will be cleared and the variables set to null.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Calling this method is equivalent to calling {@link #setCurrentSelection(AddressSetView)}.\n@param set the addresses","static":false,"name":"createSelection","comment":"Calling this method is equivalent to calling #setCurrentSelection(AddressSetView).","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the addresses","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the current selection.  Calling this method is equivalent to calling\n {@link #setCurrentSelection(AddressSetView)} with a null or empty AddressSet.","static":false,"name":"removeSelection","comment":"Clears the current selection.  Calling this method is equivalent to calling\n #setCurrentSelection(AddressSetView) with a null or empty AddressSet.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the highlight state to the given address set.\n <p>\n The actual behavior of the method depends on your environment, which can be GUI or\n headless:\n <ol>\n \t\t<li>In the GUI environment this method will set the {@link #currentHighlight}\n \t\t\tvariable to the given value, update the {@link GhidraState}'s highlight variable,\n \t\t\t<b>and<\/b> will set the Tool's highlight to the given value.<\/li>\n \t\t<li>In the headless environment this method will set the {@link #currentHighlight}\n \t\t\tvariable to\tthe given value and update the GhidraState's highlight variable.<\/li>\n <\/ol>\n <p>\n@param addressSet the set of addresses to include in the highlight.  If this value is null,\n the current highlight will be cleared and the variables set to null.","static":false,"name":"setCurrentHighlight","comment":"Sets the highlight state to the given address set.\n \n The actual behavior of the method depends on your environment, which can be GUI or\n headless:\n \n \t\tIn the GUI environment this method will set the #currentHighlight\n \t\t\tvariable to the given value, update the GhidraState's highlight variable,\n \t\t\tand will set the Tool's highlight to the given value.\n \t\tIn the headless environment this method will set the #currentHighlight\n \t\t\tvariable to\tthe given value and update the GhidraState's highlight variable.\n \n ","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addressSet","comment":"the set of addresses to include in the highlight.  If this value is null,\n the current highlight will be cleared and the variables set to null.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this script's highlight state (both the local variable\n <tt>currentHighlight<\/tt> and the\n <tt>GhidraState<\/tt>'s currentHighlight) to the given address set.  Also sets the tool's highlight\n if the tool exists. (Same as calling setCurrentHightlight(set);\n@param set the set of addresses to include in the highlight.  May be null.","static":false,"name":"createHighlight","comment":"Sets this script's highlight state (both the local variable\n currentHighlight and the\n GhidraState's currentHighlight) to the given address set.  Also sets the tool's highlight\n if the tool exists. (Same as calling setCurrentHightlight(set);","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"the set of addresses to include in the highlight.  May be null.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the current highlight. Sets this script's highlight state (both the local variable\n currentHighlight and the ghidraState's currentHighlight) to null.  Also clears the tool's\n highlight if the tool exists.","static":false,"name":"removeHighlight","comment":"Clears the current highlight. Sets this script's highlight state (both the local variable\n currentHighlight and the ghidraState's currentHighlight) to null.  Also clears the tool's\n highlight if the tool exists.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the background of the Listing at the given address to the given color.  See the\n Listing help page in Ghidra help for more information.\n <p>\n This method is unavailable in headless mode.\n <p>\n Note: you can use the {@link ColorizingService} directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.\n@param address The address at which to set the color\n@param color The color to set\n@see #setBackgroundColor(AddressSetView, Color)\n@see #clearBackgroundColor(Address)\n@see ColorizingService\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"setBackgroundColor","comment":"Sets the background of the Listing at the given address to the given color.  See the\n Listing help page in Ghidra help for more information.\n \n This method is unavailable in headless mode.\n \n Note: you can use the ColorizingService directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"The address at which to set the color","type_short":"Address"},{"type_long":"java.awt.Color","name":"color","comment":"The color to set","type_short":"Color"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the background of the Listing at the given addresses to the given color.  See the\n Listing help page in Ghidra help for more information.\n <p>\n This method is unavailable in headless mode.\n <p>\n Note: you can use the {@link ColorizingService} directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.\n@param addresses The addresses at which to set the color\n@param color The color to set\n@see #setBackgroundColor(Address, Color)\n@see #clearBackgroundColor(AddressSetView)\n@see ColorizingService\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"setBackgroundColor","comment":"Sets the background of the Listing at the given addresses to the given color.  See the\n Listing help page in Ghidra help for more information.\n \n This method is unavailable in headless mode.\n \n Note: you can use the ColorizingService directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addresses","comment":"The addresses at which to set the color","type_short":"AddressSetView"},{"type_long":"java.awt.Color","name":"color","comment":"The color to set","type_short":"Color"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the background of the Listing at the given address to the given color.  See the\n Listing help page in Ghidra help for more information.\n <p>\n This method is unavailable in headless mode.\n <p>\n Note: you can use the {@link ColorizingService} directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.\n@param address The address at which to clear the color\n@see #setBackgroundColor(AddressSetView, Color)\n@see #clearBackgroundColor(AddressSetView)\n@see ColorizingService\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"clearBackgroundColor","comment":"Clears the background of the Listing at the given address to the given color.  See the\n Listing help page in Ghidra help for more information.\n \n This method is unavailable in headless mode.\n \n Note: you can use the ColorizingService directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"The address at which to clear the color","type_short":"Address"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the background of the Listing at the given addresses to the given color.  See the\n Listing help page in Ghidra help for more information.\n <p>\n This method is unavailable in headless mode.\n <p>\n Note: you can use the {@link ColorizingService} directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.\n@param addresses The address at which to clear the color\n@see #setBackgroundColor(AddressSetView, Color)\n@see #clearBackgroundColor(AddressSetView)\n@see ColorizingService\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"clearBackgroundColor","comment":"Clears the background of the Listing at the given addresses to the given color.  See the\n Listing help page in Ghidra help for more information.\n \n This method is unavailable in headless mode.\n \n Note: you can use the ColorizingService directly to access more color changing\n functionality.  See the source code of this method to learn how to access services from\n a script.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addresses","comment":"The address at which to clear the color","type_short":"AddressSetView"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a TableChooserDialog that allows the script to display a list of addresses (and\n associated column data) in a table and also provides the capability to execute an\n action from a selection in the table.\n <p>\n This method is unavailable in headless mode.\n@param title the title of the dialog\n@param executor the TableChooserExecuter to be used to apply operations on table entries.\n@return a new TableChooserDialog.\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"createTableChooserDialog","comment":"Creates a TableChooserDialog that allows the script to display a list of addresses (and\n associated column data) in a table and also provides the capability to execute an\n action from a selection in the table.\n \n This method is unavailable in headless mode.","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog","type_short":"String"},{"type_long":"ghidra.app.tablechooser.TableChooserExecutor","name":"executor","comment":"the TableChooserExecuter to be used to apply operations on table entries.","type_short":"TableChooserExecutor"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"ghidra.app.tablechooser.TableChooserDialog","comment":"a new TableChooserDialog.","type_short":"TableChooserDialog"}},{"javadoc":"Creates a TableChooserDialog that allows the script to display a list of addresses (and\n associated column data) in a table and also provides the capability to execute an\n action from a selection in the table.\n <p>\n This method is unavailable in headless mode.\n@param title of the dialog\n@param executor the TableChooserExecuter to be used to apply operations on table entries.\n@param isModal indicates whether the dialog should be modal or not\n@return a new TableChooserDialog.\n@throws ImproperUseException if this method is run in headless mode; if this script is\n                              run directly via Java or another script where the state does\n                              not include a tool.","static":false,"name":"createTableChooserDialog","comment":"Creates a TableChooserDialog that allows the script to display a list of addresses (and\n associated column data) in a table and also provides the capability to execute an\n action from a selection in the table.\n \n This method is unavailable in headless mode.","params":[{"type_long":"java.lang.String","name":"title","comment":"of the dialog","type_short":"String"},{"type_long":"ghidra.app.tablechooser.TableChooserExecutor","name":"executor","comment":"the TableChooserExecuter to be used to apply operations on table entries.","type_short":"TableChooserExecutor"},{"type_long":"boolean","name":"isModal","comment":"indicates whether the dialog should be modal or not","type_short":"boolean"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode; if this script is\n                              run directly via Java or another script where the state does\n                              not include a tool.","type_short":"ImproperUseException"}],"return":{"type_long":"ghidra.app.tablechooser.TableChooserDialog","comment":"a new TableChooserDialog.","type_short":"TableChooserDialog"}},{"javadoc":"Returns the code unit format established for the code browser listing\n or a default format if no tool (e.g., headless).\n <p>\n This format object may be used to format any code unit (instruction\/data) using\n the same option settings.\n@return code unit format when in GUI mode, default format in headless","static":false,"name":"getCodeUnitFormat","comment":"Returns the code unit format established for the code browser listing\n or a default format if no tool (e.g., headless).\n \n This format object may be used to format any code unit (instruction\/data) using\n the same option settings.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.CodeUnitFormat","comment":"code unit format when in GUI mode, default format in headless","type_short":"CodeUnitFormat"}},{"javadoc":"Displays a popup dialog with the specified message. The dialog title\n will be the name of this script.\n <p>\n In headless mode, the message is displayed in the log output.\n@param message the message to display in the dialog","static":false,"name":"popup","comment":"Displays a popup dialog with the specified message. The dialog title\n will be the name of this script.\n \n In headless mode, the message is displayed in the log output.","params":[{"type_long":"java.lang.String","name":"message","comment":"the message to display in the dialog","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a concatenation of the input strings.\n <p>\n This is helper code for the askXxx() methods -- it concatenates string\n parameters together, separated by spaces, to form the string that is\n used to look up variables in .properties files.\n@param input one or more Strings to be concatenated\n@return a String representing the space-separated, concatenated input strings","static":false,"name":"join","comment":"Returns a concatenation of the input strings.\n \n This is helper code for the askXxx() methods -- it concatenates string\n parameters together, separated by spaces, to form the string that is\n used to look up variables in .properties files.","params":[{"type_long":"java.lang.String[]","name":"input","comment":"one or more Strings to be concatenated","type_short":"java.lang.String[]"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"a String representing the space-separated, concatenated input strings","type_short":"String"}},{"javadoc":"Helper code for the askXxx() methods. Takes a string and attempts to separate it into multiple\n strings (only if the string is surrounded by double quotes with values separated by ';').\n@param s input string\n@return array of output strings","static":false,"name":"getValues","comment":"Helper code for the askXxx() methods. Takes a string and attempts to separate it into multiple\n strings (only if the string is surrounded by double quotes with values separated by ';').","params":[{"type_long":"java.lang.String","name":"s","comment":"input string","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.List<java.lang.String>","comment":"array of output strings","type_short":"List"}},{"javadoc":"Parses a file from a string.\n@param s The string to parse.\n@return The file that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid file.","static":false,"name":"parseFile","comment":"Parses a file from a string.","params":[{"type_long":"java.lang.String","name":"s","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"java.io.File","comment":"The file that was parsed from the string.","type_short":"File"}},{"javadoc":"Attempts to locate a value from script arguments\n  or a script properties file using\n the given <tt>keys<\/tt> as the lookup key for the latter.  The given <tt>parser<\/tt> will\n be called to turn the String into a <tt>T<\/tt>.\n@param transformer the function to turn a String into a T\n@param key the values used to create a key for lookup in the script properties file\n@return null if no value was found in the aforementioned sources","static":false,"name":"loadAskValue","comment":"Attempts to locate a value from script arguments\n  or a script properties file using\n the given keys as the lookup key for the latter.  The given parser will\n be called to turn the String into a T.","params":[{"type_long":"ghidra.app.script.StringTransformer<T>","name":"transformer","comment":"the function to turn a String into a T","type_short":"StringTransformer"},{"type_long":"java.lang.String","name":"key","comment":"the values used to create a key for lookup in the script properties file","type_short":"String"}],"throws":[],"return":{"type_long":"T","comment":"null if no value was found in the aforementioned sources","type_short":"T"}},{"javadoc":"This version of {@link #loadAskValue(StringTransformer, String)} will use\n the given default, if not null and not empty, instead of failing when a value is not\n provided by the client when in headless.\n@param defaultValue an optional default value that will be used if no suitable\n                     value can be found in script args or a properties file\n@param transformer the function to turn a String into a T\n@param key the values used to create a key for lookup in the script properties file\n@return null if no value was found in the aforementioned sources\n@throws IllegalArgumentException if the loaded String value cannot be parsed into a\n                                  <tt>T<\/tt>.","static":false,"name":"loadAskValue","comment":"This version of #loadAskValue(StringTransformer, String) will use\n the given default, if not null and not empty, instead of failing when a value is not\n provided by the client when in headless.","params":[{"type_long":"T","name":"defaultValue","comment":"an optional default value that will be used if no suitable\n                     value can be found in script args or a properties file","type_short":"T"},{"type_long":"ghidra.app.script.StringTransformer<T>","name":"transformer","comment":"the function to turn a String into a T","type_short":"StringTransformer"},{"type_long":"java.lang.String","name":"key","comment":"the values used to create a key for lookup in the script properties file","type_short":"String"}],"throws":[],"return":{"type_long":"T","comment":"null if no value was found in the aforementioned sources","type_short":"T"}},{"javadoc":"A generic method to execute user prompting for a value.  This method handles:\n <ol>\n \t<li>Checking for a previously chosen value; using the optional <tt>defaultValue<\/tt> as a fallback<\/li>\n \t<li>Calling the provided function to execute the client-specific ask UI<\/li>\n \t<li>Storing the chosen result after the dialog is closed<\/li>\n <\/ol>\n@param clazz the type of the object for which the client is asking\n@param key1 - the first key used to store\/lookup chosen values (aka, 'title')\n@param key2 - the second key used to store\/lookup chosen values (aka, 'message'\/'approveButtonText')\n@param defaultValue - an optional value to be used as the pre-seed value in the 'asker'\n                       callback.  This value will be passed if no previous value is found\n@param asker - a function that will be called with the seed value derived from a previous\n                choice and the given default value.\n                This function is one in which you can throw a {@link CancelledException}\n@return the user's choice\n@throws CancelledException if the user cancels the ask operation","static":false,"name":"doAsk","comment":"A generic method to execute user prompting for a value.  This method handles:\n \n \tChecking for a previously chosen value; using the optional defaultValue as a fallback\n \tCalling the provided function to execute the client-specific ask UI\n \tStoring the chosen result after the dialog is closed\n ","params":[{"type_long":"java.lang.Class<?>","name":"clazz","comment":"the type of the object for which the client is asking","type_short":"Class"},{"type_long":"java.lang.String","name":"key1","comment":"- the first key used to store\/lookup chosen values (aka, 'title')","type_short":"String"},{"type_long":"java.lang.String","name":"key2","comment":"- the second key used to store\/lookup chosen values (aka, 'message'\/'approveButtonText')","type_short":"String"},{"type_long":"T","name":"defaultValue","comment":"- an optional value to be used as the pre-seed value in the 'asker'\n                       callback.  This value will be passed if no previous value is found","type_short":"T"},{"type_long":"ghidra.app.script.GhidraScript.CancellableFunction<T,T>","name":"asker","comment":"- a function that will be called with the seed value derived from a previous\n                choice and the given default value.\n                This function is one in which you can throw a CancelledException","type_short":"CancellableFunction"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the ask operation","type_short":"CancelledException"}],"return":{"type_long":"T","comment":"the user's choice","type_short":"T"}},{"javadoc":"Returns a File object, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + approveButtonText).\n If that property name exists and its value represents a valid <b>absolute path<\/b> of a valid\n File, then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a file. If the file chooser dialog has been run before in the same\n \t\t\tsession, the File selection will be pre-populated with the last-selected file. If\n \t\t\tnot, the File selection will be pre-populated with the .properties value (if it\n \t\t\texists).\n \t\t<\/li>\n\t\t<li>In the headless environment, this method returns a File object representing\tthe\n\t\t\t.properties\tString value (if it exists), or throws an Exception if there is an\n\t\t\tinvalid or missing .properties value.\n\t\t<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using using .properties file)\n@param approveButtonText the approve button text (in GUI mode - typically, this would\n \t\t  \tbe \"Open\" or \"Save\") or the second part of the variable name (in headless mode\n \t\t\tor when using .properties file)\n@return the selected file or null if no tool was available\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid file\n \t\t\tname specified in the .properties file","static":false,"name":"askFile","comment":"Returns a File object, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + approveButtonText).\n If that property name exists and its value represents a valid absolute path of a valid\n File, then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a file. If the file chooser dialog has been run before in the same\n \t\t\tsession, the File selection will be pre-populated with the last-selected file. If\n \t\t\tnot, the File selection will be pre-populated with the .properties value (if it\n \t\t\texists).\n \t\t\n\t\tIn the headless environment, this method returns a File object representing\tthe\n\t\t\t.properties\tString value (if it exists), or throws an Exception if there is an\n\t\t\tinvalid or missing .properties value.\n\t\t\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"approveButtonText","comment":"the approve button text (in GUI mode - typically, this would\n \t\t  \tbe \"Open\" or \"Save\") or the second part of the variable name (in headless mode\n \t\t\tor when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"java.io.File","comment":"the selected file or null if no tool was available","type_short":"File"}},{"javadoc":"Parses a directory from a string.\n@param val The string to parse.\n@return The directory that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid directory.","static":false,"name":"parseDirectory","comment":"Parses a directory from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"java.io.File","comment":"The directory that was parsed from the string.","type_short":"File"}},{"javadoc":"Returns a directory File object, using the String parameters for guidance. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + approveButtonText).\n If that property name exists and its value represents a valid <b>absolute path<\/b> of a valid\n directory File, then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a directory. If the file chooser dialog has been run before in the\n \t\t\tsame session, the directory selection will be pre-populated with the last-selected\n \t\t\tdirectory. If not, the directory selection will be pre-populated with the\n \t\t\t.properties\tvalue (if it exists).<\/li>\n\t\t<li>In the headless environment, this method returns a directory File representing\n\t\t\tthe .properties value (if it exists), or throws an Exception if there is an invalid\n\t\t\tor missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param approveButtonText the approve button text (in GUI mode - typically, this would be\n \t\t\t\"Open\" or \"Save\") or the second part of the variable name (in headless mode or\n \t\t\twhen using .properties file)\n@return the selected directory or null if no tool was available\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\n \t\t\t\tdirectory name specified in the .properties file","static":false,"name":"askDirectory","comment":"Returns a directory File object, using the String parameters for guidance. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + approveButtonText).\n If that property name exists and its value represents a valid absolute path of a valid\n directory File, then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a directory. If the file chooser dialog has been run before in the\n \t\t\tsame session, the directory selection will be pre-populated with the last-selected\n \t\t\tdirectory. If not, the directory selection will be pre-populated with the\n \t\t\t.properties\tvalue (if it exists).\n\t\tIn the headless environment, this method returns a directory File representing\n\t\t\tthe .properties value (if it exists), or throws an Exception if there is an invalid\n\t\t\tor missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"approveButtonText","comment":"the approve button text (in GUI mode - typically, this would be\n \t\t\t\"Open\" or \"Save\") or the second part of the variable name (in headless mode or\n \t\t\twhen using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"java.io.File","comment":"the selected directory or null if no tool was available","type_short":"File"}},{"javadoc":"Parses a LanguageCompilerSpecPair from a string.\n@param val The string to parse.\n@return The directory that was parsed from the LanguageCompilerSpecPair.\n@throws IllegalArgumentException if the parsed value is not a valid LanguageCompilerSpecPair.","static":false,"name":"parseLanguageCompileSpecPair","comment":"Parses a LanguageCompilerSpecPair from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.lang.LanguageCompilerSpecPair","comment":"The directory that was parsed from the LanguageCompilerSpecPair.","type_short":"LanguageCompilerSpecPair"}},{"javadoc":"Returns a LanguageCompilerSpecPair, using the String parameters for guidance. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid LanguageCompilerSpecPair value,\n then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a language table dialog and returns\n \t\t\tthe selected language. If the same popup has been run before in the same session,\n \t\t\tthe last-used language will be pre-selected. If not, the language specified in the\n \t\t\t.properties file will be pre-selected (if it exists).<\/li>\n\t\t<li>In the headless environment, this method returns a LanguageCompilerSpecPair\n\t\t\trepresenting the .properties value (if it exists), or throws an Exception if there\n\t\t\tis an invalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param approveButtonText the approve button text (in GUI mode - typically, this would be\n \t\t\t\"Open\" or \"Save\") or the second part of the variable name (in headless mode or\n \t\t\twhen using .properties file)\n@return the selected LanguageCompilerSpecPair\n@throws CancelledException if the user hit the 'cancel' button\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tlanguage\n \t\t\tspecified in the .properties file","static":false,"name":"askLanguage","comment":"Returns a LanguageCompilerSpecPair, using the String parameters for guidance. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid LanguageCompilerSpecPair value,\n then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a language table dialog and returns\n \t\t\tthe selected language. If the same popup has been run before in the same session,\n \t\t\tthe last-used language will be pre-selected. If not, the language specified in the\n \t\t\t.properties file will be pre-selected (if it exists).\n\t\tIn the headless environment, this method returns a LanguageCompilerSpecPair\n\t\t\trepresenting the .properties value (if it exists), or throws an Exception if there\n\t\t\tis an invalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"approveButtonText","comment":"the approve button text (in GUI mode - typically, this would be\n \t\t\t\"Open\" or \"Save\") or the second part of the variable name (in headless mode or\n \t\t\twhen using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.lang.LanguageCompilerSpecPair","comment":"the selected LanguageCompilerSpecPair","type_short":"LanguageCompilerSpecPair"}},{"javadoc":"Parses a ProjectFolder from a string.\n@param val The string to parse.\n@return The ProjectFolder that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid ProjectFolder.","static":false,"name":"parseProjectFolder","comment":"Parses a ProjectFolder from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"The ProjectFolder that was parsed from the string.","type_short":"DomainFolder"}},{"javadoc":"Returns a DomainFolder object, using the supplied title string for guidance.  The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n project folder, then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a project folder. The selected folder will be returned.<\/li>\n\t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the project folder to return. The method will look in\n\t\t\tthe .properties\tfile by searching for a property name equal to the 'title' parameter.\n\t\t\tIf that property name exists and its value represents a valid DomainFolder in the\n\t\t\tproject, then that value is returned. Otherwise, an Exception is thrown if there is\n\t\t\tan invalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (GUI) or the variable name\t(headless or when\n \t\t\tusing .properties file)\n@return the selected project folder or null if there was an invalid .properties value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tproject\n \t\t\tfolder specified in the .properties file","static":false,"name":"askProjectFolder","comment":"Returns a DomainFolder object, using the supplied title string for guidance.  The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n project folder, then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a file chooser dialog that allows the\n \t\t\tuser to select a project folder. The selected folder will be returned.\n\t\tIn the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the project folder to return. The method will look in\n\t\t\tthe .properties\tfile by searching for a property name equal to the 'title' parameter.\n\t\t\tIf that property name exists and its value represents a valid DomainFolder in the\n\t\t\tproject, then that value is returned. Otherwise, an Exception is thrown if there is\n\t\t\tan invalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (GUI) or the variable name\t(headless or when\n \t\t\tusing .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.model.DomainFolder","comment":"the selected project folder or null if there was an invalid .properties value","type_short":"DomainFolder"}},{"javadoc":"Parses an integer from a string.\n@param val The string to parse.\n@return The integer that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid integer.","static":false,"name":"parseInt","comment":"Parses an integer from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"int","comment":"The integer that was parsed from the string.","type_short":"int"}},{"javadoc":"Returns an int, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid int value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor an int value. If the same popup has been run before in the same session, the int\n \t\t\tinput field will be pre-populated with the last-used int. If not, the int input\n \t\t\tfield will be pre-populated with the .properties value (if it exists).\n  \t<\/li>\n\t\t<li>In the headless environment, this method returns an int value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid\n\t\t\tor missing .properties value.\n\t\t<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@return the user-specified int value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid int\n \t\t\tspecified in the .properties file","static":false,"name":"askInt","comment":"Returns an int, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid int value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor an int value. If the same popup has been run before in the same session, the int\n \t\t\tinput field will be pre-populated with the last-used int. If not, the int input\n \t\t\tfield will be pre-populated with the .properties value (if it exists).\n  \t\n\t\tIn the headless environment, this method returns an int value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid\n\t\t\tor missing .properties value.\n\t\t\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"the user-specified int value","type_short":"int"}},{"javadoc":"Parses a long from a string.\n@param val The string to parse.\n@return The long that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid long.","static":false,"name":"parseLong","comment":"Parses a long from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"long","comment":"The long that was parsed from the string.","type_short":"long"}},{"javadoc":"A simple placeholder function that returns the string passed to it.","static":false,"name":"stringIdentity","comment":"A simple placeholder function that returns the string passed to it.","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns a long, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid long value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a long value. If the same popup has been run before in the same session, the\n \t\t\tlong input field will be pre-populated with the last-used long. If not, the long\n \t\t\tinput field will be pre-populated with the .properties value (if it exists).\n \t\t<\/li>\n\t\t<li>In the headless environment, this method returns a long value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties\tvalue.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the\tvariable name (in headless mode or when using .properties file)\n@return the user-specified long value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tlong\n \t\t\tspecified in the .properties file","static":false,"name":"askLong","comment":"Returns a long, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid long value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a long value. If the same popup has been run before in the same session, the\n \t\t\tlong input field will be pre-populated with the last-used long. If not, the long\n \t\t\tinput field will be pre-populated with the .properties value (if it exists).\n \t\t\n\t\tIn the headless environment, this method returns a long value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties\tvalue.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the\tvariable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"long","comment":"the user-specified long value","type_short":"long"}},{"javadoc":"Parses an address from a string.\n@param val The string to parse.\n@return The address that was parsed from the string.\n@throws IllegalArgumentException if there was a problem parsing an address from the string.","static":false,"name":"parseAddress","comment":"Parses an address from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"The address that was parsed from the string.","type_short":"Address"}},{"javadoc":"Returns an Address, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid Address value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor an address value. If the same popup has been run before in the same session,\n \t\t\tthe address input field will be pre-populated with the last-used address. If not,\n \t\t\tthe\taddress input field will be pre-populated with the .properties value (if it\n \t\t\texists).<\/li>\n\t\t<li>In the headless environment, this method returns an Address representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the\n \t\t\tsecond part of the variable name (in headless mode or when using .properties file)\n@return the user-specified Address value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or\tinvalid Address\n \t\t\tspecified in the .properties file","static":false,"name":"askAddress","comment":"Returns an Address, using the String parameters for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid Address value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor an address value. If the same popup has been run before in the same session,\n \t\t\tthe address input field will be pre-populated with the last-used address. If not,\n \t\t\tthe\taddress input field will be pre-populated with the .properties value (if it\n \t\t\texists).\n\t\tIn the headless environment, this method returns an Address representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the\n \t\t\tsecond part of the variable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the user-specified Address value","type_short":"Address"}},{"javadoc":"Parses bytes from a string.\n@param val The string to parse.\n@return The bytes that were parsed from the string.\n@throws IllegalArgumentException if there was a problem parsing bytes from the string.","static":false,"name":"parseBytes","comment":"Parses bytes from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"byte[]","comment":"The bytes that were parsed from the string.","type_short":"byte[]"}},{"javadoc":"Returns a byte array, using the String parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid bytes, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the\n \t\t\tuser for a byte pattern. If the same popup has been run before in the same session,\n \t\t\tthe byte pattern input field will be pre-populated with\tthe last-used bytes string.\n \t\t\tIf not, the byte pattern input field will be pre-populated with the .properties\n \t\t\tvalue (if it exists).<\/li>\n\t\t<li>In the headless environment, this method returns a byte array representing the\n\t\t\t.properties byte pattern value (if it exists), or throws an Exception if there is\n\t\t\tan invalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable\n \t\t\tname (in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the\n \t\t\tsecond part of the variable name (in headless mode or when using .properties file)\n@return the user-specified byte array\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid bytes\n \t\t\tstring specified in the .properties file","static":false,"name":"askBytes","comment":"Returns a byte array, using the String parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid bytes, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the\n \t\t\tuser for a byte pattern. If the same popup has been run before in the same session,\n \t\t\tthe byte pattern input field will be pre-populated with\tthe last-used bytes string.\n \t\t\tIf not, the byte pattern input field will be pre-populated with the .properties\n \t\t\tvalue (if it exists).\n\t\tIn the headless environment, this method returns a byte array representing the\n\t\t\t.properties byte pattern value (if it exists), or throws an Exception if there is\n\t\t\tan invalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable\n \t\t\tname (in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the\n \t\t\tsecond part of the variable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"byte[]","comment":"the user-specified byte array","type_short":"byte[]"}},{"javadoc":"Returns a Program, using the title parameter for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <br>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n program, then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tto select a program.<\/li>\n\t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the program to return. The method will look in the\n\t\t\t.properties file by searching for a property name equal to the 'title' parameter. If\n\t\t\tthat property name exists and its value represents a valid Program in the project,\n\t\t\tthen that value\tis returned. Otherwise, an Exception is thrown if there is an\n\t\t\tinvalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the pop-up dialog (in GUI mode) or the variable name (in\n \t\t\theadless mode)\n@return the user-specified Program\n@throws VersionException if the Program is out-of-date from the version of GHIDRA\n@throws IOException if there is an error accessing the Program's DomainObject\n@throws CancelledException if the operation is cancelled\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tprogram\n \t\t\tspecified in the .properties file","static":false,"name":"askProgram","comment":"Returns a Program, using the title parameter for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n program, then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tto select a program.\n\t\tIn the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the program to return. The method will look in the\n\t\t\t.properties file by searching for a property name equal to the 'title' parameter. If\n\t\t\tthat property name exists and its value represents a valid Program in the project,\n\t\t\tthen that value\tis returned. Otherwise, an Exception is thrown if there is an\n\t\t\tinvalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the pop-up dialog (in GUI mode) or the variable name (in\n \t\t\theadless mode)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.VersionException","comment":"if the Program is out-of-date from the version of GHIDRA","type_short":"VersionException"},{"type_long":"java.io.IOException","comment":"if there is an error accessing the Program's DomainObject","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation is cancelled","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the user-specified Program","type_short":"Program"}},{"javadoc":"Parses a DomainFile from a string.\n@param val The string to parse.\n@return The DomainFile that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid DomainFile.","static":false,"name":"parseDomainFile","comment":"Parses a DomainFile from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"The DomainFile that was parsed from the string.","type_short":"DomainFile"}},{"javadoc":"Returns a DomainFile, using the title parameter for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n domain file, then the .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog listing all domain files\n \t\t\tin the current project, allowing the user to select one.<\/li>\n\t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the DomainFile to return. The method will look in the\n\t\t\t.properties file by searching for a property name equal to the 'title' parameter. If\n\t\t\tthat property name exists and its value represents a valid DomainFile in the project,\n\t\t\tthen that value is returned. Otherwise, an Exception is thrown if there is an invalid\n\t\t\tor missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the pop-up dialog (in GUI mode) or the variable name (in headless\n \t\tmode or when using .properties file)\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tdomain\n \t\t\tfile specified in the .properties file\n@return the user-selected domain file\n@throws CancelledException if the operation is cancelled","static":false,"name":"askDomainFile","comment":"Returns a DomainFile, using the title parameter for guidance.  The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is the\n title String parameter.  If that property name exists and its value represents a valid\n domain file, then the .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog listing all domain files\n \t\t\tin the current project, allowing the user to select one.\n\t\tIn the headless environment, if a .properties file sharing the same base name as the\n\t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n\t\t\tlooks there for the name of the DomainFile to return. The method will look in the\n\t\t\t.properties file by searching for a property name equal to the 'title' parameter. If\n\t\t\tthat property name exists and its value represents a valid DomainFile in the project,\n\t\t\tthen that value is returned. Otherwise, an Exception is thrown if there is an invalid\n\t\t\tor missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the pop-up dialog (in GUI mode) or the variable name (in headless\n \t\tmode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation is cancelled","type_short":"CancelledException"}],"return":{"type_long":"ghidra.framework.model.DomainFile","comment":"the user-selected domain file","type_short":"DomainFile"}},{"javadoc":"Parses a double from a string.\n@param val The string to parse.\n@return The double that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid double.","static":false,"name":"parseDouble","comment":"Parses a double from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"double","comment":"The double that was parsed from the string.","type_short":"double"}},{"javadoc":"Returns a double, using the String parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid double value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a double value. If the same popup has been run before in the same session, the\n \t\t\tdouble input field will be pre-populated with the last-used double. If not, the\n \t\t\tdouble input field will be pre-populated with the .properties value (if it exists).\n \t\t<\/li>\n\t\t<li>In the headless environment, this method returns a double value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an\tinvalid or\n\t\t\tmissing .properties value.<\/li>\n <\/ol>\n <\/p>\n <p>\n Note that in both headless and GUI modes, you may specify \"PI\" or \"E\" and get the\n corresponding floating point value to 15 decimal places.<\/p>\n <p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@return the user-specified double value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or\tinvalid double\n \t\t\tspecified in the .properties file","static":false,"name":"askDouble","comment":"Returns a double, using the String parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid double value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a double value. If the same popup has been run before in the same session, the\n \t\t\tdouble input field will be pre-populated with the last-used double. If not, the\n \t\t\tdouble input field will be pre-populated with the .properties value (if it exists).\n \t\t\n\t\tIn the headless environment, this method returns a double value representing the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an\tinvalid or\n\t\t\tmissing .properties value.\n \n \n \n Note that in both headless and GUI modes, you may specify \"PI\" or \"E\" and get the\n corresponding floating point value to 15 decimal places.\n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"double","comment":"the user-specified double value","type_short":"double"}},{"javadoc":"Returns a String, using the String input parameters for guidance. The actual behavior of\n the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid String value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a String value. If the same popup has been run before in the same session, the\n \t\t\tString input field will be pre-populated with the last-used String. If not, the\n \t\t\tString input field will be pre-populated with the .properties value (if it exists).\n \t\t<\/li>\n\t\t<li>In the headless environment, this method returns a String value\trepresenting the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable\tname\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@return the user-specified String value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IndexOutOfBoundsException if in headless mode and arguments are being used, but not\n          enough arguments were passed in to accommodate the request.\n@throws IllegalArgumentException if in headless mode, there was an invalid String\n \t\t\tspecified in the arguments, or an invalid or missing String specified in the\n          .properties file","static":false,"name":"askString","comment":"Returns a String, using the String input parameters for guidance. The actual behavior of\n the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid String value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a String value. If the same popup has been run before in the same session, the\n \t\t\tString input field will be pre-populated with the last-used String. If not, the\n \t\t\tString input field will be pre-populated with the .properties value (if it exists).\n \t\t\n\t\tIn the headless environment, this method returns a String value\trepresenting the\n\t\t\t.properties value (if it exists), or throws an Exception if there is an invalid or\n\t\t\tmissing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable\tname\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"java.lang.String","comment":"the user-specified String value","type_short":"String"}},{"javadoc":"Returns a String, using the String input parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid String value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a String value. The pre-populated value for the String input field will be the\n \t\t\tlast-used String (if the dialog has been run before). If that does not exist, the\n \t\t\tpre-populated value is the .properties value. If that does\tnot exist or is invalid,\n \t\t\tthen the 'defaultValue' parameter is used (as long as it is not\tnull or the empty\n \t\t\tString).<\/li>\n\t\t<li>In the headless environment, this method returns a String value representing the\n\t\t\t.properties value (if it exists). Otherwise, if the 'defaultValue' parameter is\n\t\t\tnot null or an empty String, it is returned. In all other cases, an exception\n\t\t\tis thrown.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@param defaultValue the optional default value\n@return the user-specified String value\n@throws CancelledException if the user hit the 'cancel' button in GUI mode\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid String\n \t\t\tspecified in the .properties file","static":false,"name":"askString","comment":"Returns a String, using the String input parameters for guidance. The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid String value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tfor a String value. The pre-populated value for the String input field will be the\n \t\t\tlast-used String (if the dialog has been run before). If that does not exist, the\n \t\t\tpre-populated value is the .properties value. If that does\tnot exist or is invalid,\n \t\t\tthen the 'defaultValue' parameter is used (as long as it is not\tnull or the empty\n \t\t\tString).\n\t\tIn the headless environment, this method returns a String value representing the\n\t\t\t.properties value (if it exists). Otherwise, if the 'defaultValue' parameter is\n\t\t\tnot null or an empty String, it is returned. In all other cases, an exception\n\t\t\tis thrown.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"defaultValue","comment":"the optional default value","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button in GUI mode","type_short":"CancelledException"}],"return":{"type_long":"java.lang.String","comment":"the user-specified String value","type_short":"String"}},{"javadoc":"Parses a choice from a string.\n@param val The string to parse.\n@param validChoices An array of valid choices.\n@return The choice\n@throws IllegalArgumentException if the parsed string was not a valid choice.","static":false,"name":"parseChoice","comment":"Parses a choice from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"},{"type_long":"java.util.List<T>","name":"validChoices","comment":"An array of valid choices.","type_short":"List"}],"throws":[],"return":{"type_long":"T","comment":"The choice","type_short":"T"}},{"javadoc":"Returns an object that represents one of the choices in the given list. The actual behavior\n of the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid choice, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tto choose from the given list of objects. The pre-chosen choice will be the last\n \t\t\tuser-chosen value (if the dialog has been run before). If that does not exist, the\n \t\t\tpre-chosen value is the .properties value. If that does not exist or is invalid,\n \t\t\tthen the 'defaultValue' parameter is used (as long as it is not null).<\/li>\n\t\t<li>In the headless environment, this method returns an object representing the\n\t\t\t.properties value (if it exists and is a valid choice), or throws an Exception if\n\t\t\tthere is an invalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@param choices set of choices (toString() value of each object will be displayed in the dialog)\n@param defaultValue the default value to display in the input field; may be\n                     null, but must be a valid choice if non-null.\n@return the user-selected value\n@throws CancelledException if the user hit the 'cancel' button\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tchoice\n \t\t\tspecified in the .properties file","static":false,"name":"askChoice","comment":"Returns an object that represents one of the choices in the given list. The actual behavior\n of the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents a valid choice, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\tto choose from the given list of objects. The pre-chosen choice will be the last\n \t\t\tuser-chosen value (if the dialog has been run before). If that does not exist, the\n \t\t\tpre-chosen value is the .properties value. If that does not exist or is invalid,\n \t\t\tthen the 'defaultValue' parameter is used (as long as it is not null).\n\t\tIn the headless environment, this method returns an object representing the\n\t\t\t.properties value (if it exists and is a valid choice), or throws an Exception if\n\t\t\tthere is an invalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display next to the input field (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.util.List<T>","name":"choices","comment":"set of choices (toString() value of each object will be displayed in the dialog)","type_short":"List"},{"type_long":"T","name":"defaultValue","comment":"the default value to display in the input field; may be\n                     null, but must be a valid choice if non-null.","type_short":"T"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hit the 'cancel' button","type_short":"CancelledException"}],"return":{"type_long":"T","comment":"the user-selected value","type_short":"T"}},{"javadoc":"","static":false,"name":"isBlank","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Parses choices from a string.  The string must be surrounded by quotes, with a ';' as the\n separator.\n@param s The string to parse.\n@param validChoices An array of valid choices.\n@return The choices, if they found in the array of choices.\n@throws IllegalArgumentException if the parsed string did not contain any valid choices.","static":false,"name":"parseChoices","comment":"Parses choices from a string.  The string must be surrounded by quotes, with a ';' as the\n separator.","params":[{"type_long":"java.lang.String","name":"s","comment":"The string to parse.","type_short":"String"},{"type_long":"java.util.List<T>","name":"validChoices","comment":"An array of valid choices.","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"The choices, if they found in the array of choices.","type_short":"List"}},{"javadoc":"Parses choices from a string.\n@param val The string to parse.\n@param validChoices A list of valid choices.\n@param stringRepresentationOfValidChoices An corresponding array of valid choice string\n          representations.\n@return The choices\n@throws IllegalArgumentException if the parsed string did not contain any valid choices.","static":false,"name":"parseChoices","comment":"Parses choices from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"},{"type_long":"java.util.List<T>","name":"validChoices","comment":"A list of valid choices.","type_short":"List"},{"type_long":"java.util.List<java.lang.String>","name":"stringRepresentationOfValidChoices","comment":"An corresponding array of valid choice string\n          representations.","type_short":"List"}],"throws":[],"return":{"type_long":"java.util.List<T>","comment":"The choices","type_short":"List"}},{"javadoc":"Returns an array of Objects representing one or more choices from the given list. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid choices, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a pop-up dialog that presents the user\n \t\t    with checkbox choices (to allow a more flexible option where the user can pick\n \t\t\tsome, all, or none).<\/li>\n \t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the choices to return. The method will look in the .properties file\n \t\t\tby searching for a property name equal to a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + message). If that property name exists and\n \t\t\trepresents a list (one or more) of valid choice(s) in the form\n \t\t\t\"choice1;choice2;choice3;...\" (<-- note the quotes surrounding the choices), then\n \t\t\tan Object array of those choices is returned. Otherwise, an Exception is thrown if\n \t\t\tthere is an invalid or missing .properties value.<\/li>\n<\/ol>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display with the choices (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@param choices set of choices (toString() value of each object will be displayed in the dialog)\n@return the user-selected value(s); an empty list if no selection was made\n@throws CancelledException if the user hits the 'cancel' button\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid\tset of\n \t\t\tchoices specified in the .properties file","static":false,"name":"askChoices","comment":"Returns an array of Objects representing one or more choices from the given list. The actual\n behavior of the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid choices, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a pop-up dialog that presents the user\n \t\t    with checkbox choices (to allow a more flexible option where the user can pick\n \t\t\tsome, all, or none).\n \t\tIn the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the choices to return. The method will look in the .properties file\n \t\t\tby searching for a property name equal to a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + message). If that property name exists and\n \t\t\trepresents a list (one or more) of valid choice(s) in the form\n \t\t\t\"choice1;choice2;choice3;...\" (-- note the quotes surrounding the choices), then\n \t\t\tan Object array of those choices is returned. Otherwise, an Exception is thrown if\n \t\t\tthere is an invalid or missing .properties value.\n","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display with the choices (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.util.List<T>","name":"choices","comment":"set of choices (toString() value of each object will be displayed in the dialog)","type_short":"List"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hits the 'cancel' button","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<T>","comment":"the user-selected value(s); an empty list if no selection was made","type_short":"List"}},{"javadoc":"Returns an array of Objects representing one or more choices from the given list. The user\n specifies the choices as Objects, also passing along a corresponding array of String\n representations for each choice (used as the checkbox label). The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid choices, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a pop-up dialog that presents the user\n \t\t    with checkbox choices (to allow a more flexible option where the user can pick\n \t\t\tsome, all, or none).<\/li>\n \t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the choices to return. The method will look in the .properties file\n \t\t\tby searching for a property name equal to a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + message). If that property name exists and\n \t\t\trepresents a list (one or more) of valid choice(s) in the form\n \t\t\t\"choice1;choice2;choice3;...\" (<-- note the quotes surrounding the choices), then\n \t\t\tan Object array of those choices is returned. Otherwise, an Exception is thrown if\n \t\t\tthere is an invalid or missing .properties value. NOTE: the choice names for\n \t\t\tthis method must match those in the stringRepresentationOfChoices array.<\/li>\n<\/ol>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)\n@param message the message to display with the choices (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)\n@param choices set of choices\n@param choiceLabels the String representation for each choice, used for\n \t\t\tcheckbox labels\n@return the user-selected value(s); null if no selection was made\n@throws CancelledException if the user hits the 'cancel' button\n@throws IllegalArgumentException if choices is empty; if in headless mode, \n         there was a missing or invalid set of choices\tspecified in the .properties file","static":false,"name":"askChoices","comment":"Returns an array of Objects representing one or more choices from the given list. The user\n specifies the choices as Objects, also passing along a corresponding array of String\n representations for each choice (used as the checkbox label). The actual behavior of the\n method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + message).\n If that property name exists and its value represents valid choices, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a pop-up dialog that presents the user\n \t\t    with checkbox choices (to allow a more flexible option where the user can pick\n \t\t\tsome, all, or none).\n \t\tIn the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the choices to return. The method will look in the .properties file\n \t\t\tby searching for a property name equal to a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + message). If that property name exists and\n \t\t\trepresents a list (one or more) of valid choice(s) in the form\n \t\t\t\"choice1;choice2;choice3;...\" (-- note the quotes surrounding the choices), then\n \t\t\tan Object array of those choices is returned. Otherwise, an Exception is thrown if\n \t\t\tthere is an invalid or missing .properties value. NOTE: the choice names for\n \t\t\tthis method must match those in the stringRepresentationOfChoices array.\n","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"the message to display with the choices (in GUI mode) or the second\n \t\t\tpart of the variable name (in headless mode or when using .properties file)","type_short":"String"},{"type_long":"java.util.List<T>","name":"choices","comment":"set of choices","type_short":"List"},{"type_long":"java.util.List<java.lang.String>","name":"choiceLabels","comment":"the String representation for each choice, used for\n \t\t\tcheckbox labels","type_short":"List"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user hits the 'cancel' button","type_short":"CancelledException"}],"return":{"type_long":"java.util.List<T>","comment":"the user-selected value(s); null if no selection was made","type_short":"List"}},{"javadoc":"Parses a boolean from a string.\n@param val The string to parse.\n@return The boolean that was parsed from the string.\n@throws IllegalArgumentException if the parsed value is not a valid boolean.","static":false,"name":"parseBoolean","comment":"Parses a boolean from a string.","params":[{"type_long":"java.lang.String","name":"val","comment":"The string to parse.","type_short":"String"}],"throws":[],"return":{"type_long":"java.lang.Boolean","comment":"The boolean that was parsed from the string.","type_short":"Boolean"}},{"javadoc":"Returns a boolean value, using the String parameters for guidance. The actual behavior of\n the method depends on your environment, which can be GUI or headless.\n <p>\n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + question).\n If that property name exists and its value represents a valid boolean value, then the\n .properties value will be used in the following way:\n <ol>\n \t\t<li>In the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\twith a yes\/no dialog with the specified title and question. Returns true if the user\n \t\t\tselects \"yes\" to the question or false if the user selects \"no\".<\/li>\n \t\t<li>In the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the boolean value to return. The method will look in the .properties\n \t\t\tfile by searching for a property name that is a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + question). If that property name exists and its\n \t\t\tvalue represents a valid boolean value (either 'true' or 'false', case insensitive),\n \t\t\tthen that value\tis returned. Otherwise, an Exception is thrown if there is an\n \t\t\tinvalid or missing .properties value.<\/li>\n <\/ol>\n <\/p>\n@param title the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode)\n@param question the question to display to the user (in GUI mode) or the second part of the\n \t\t\tvariable name (in headless mode)\n@return true if the user selects \"yes\" to the question (in GUI mode) or \"true\" (in headless\n \t\t\tmode)\n@throws IllegalArgumentException if in headless mode, there was a missing or invalid boolean\n \t\t\tspecified in the .properties file","static":false,"name":"askYesNo","comment":"Returns a boolean value, using the String parameters for guidance. The actual behavior of\n the method depends on your environment, which can be GUI or headless.\n \n Regardless of environment -- if script arguments have been set, this method will use the\n next argument in the array and advance the array index so the next call to an ask method\n will get the next argument.  If there are no script arguments and a .properties file\n sharing the same base name as the Ghidra Script exists (i.e., Script1.properties for\n Script1.java), then this method will then look there for the String value to return.\n The method will look in the .properties file by searching for a property name that is a\n space-separated concatenation of the input String parameters (title + \" \" + question).\n If that property name exists and its value represents a valid boolean value, then the\n .properties value will be used in the following way:\n \n \t\tIn the GUI environment, this method displays a popup dialog that prompts the user\n \t\t\twith a yes\/no dialog with the specified title and question. Returns true if the user\n \t\t\tselects \"yes\" to the question or false if the user selects \"no\".\n \t\tIn the headless environment, if a .properties file sharing the same base name as the\n \t\t\tGhidra Script exists (i.e., Script1.properties for Script1.java), then this method\n \t\t\tlooks there for the boolean value to return. The method will look in the .properties\n \t\t\tfile by searching for a property name that is a space-separated concatenation of the\n \t\t\tString parameters (title + \" \" + question). If that property name exists and its\n \t\t\tvalue represents a valid boolean value (either 'true' or 'false', case insensitive),\n \t\t\tthen that value\tis returned. Otherwise, an Exception is thrown if there is an\n \t\t\tinvalid or missing .properties value.\n \n ","params":[{"type_long":"java.lang.String","name":"title","comment":"the title of the dialog (in GUI mode) or the first part of the variable name\n \t\t\t(in headless mode)","type_short":"String"},{"type_long":"java.lang.String","name":"question","comment":"the question to display to the user (in GUI mode) or the second part of the\n \t\t\tvariable name (in headless mode)","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the user selects \"yes\" to the question (in GUI mode) or \"true\" (in headless\n \t\t\tmode)","type_short":"boolean"}},{"javadoc":"Returns a hex string representation of the byte.\n@param b the integer\n@param zeropad true if the value should be zero padded\n@param header true if \"0x\" should be prepended\n@return the hex formatted string","static":false,"name":"toHexString","comment":"Returns a hex string representation of the byte.","params":[{"type_long":"byte","name":"b","comment":"the integer","type_short":"byte"},{"type_long":"boolean","name":"zeropad","comment":"true if the value should be zero padded","type_short":"boolean"},{"type_long":"boolean","name":"header","comment":"true if \"0x\" should be prepended","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the hex formatted string","type_short":"String"}},{"javadoc":"Returns a hex string representation of the short.\n@param s the short\n@param zeropad true if the value should be zero padded\n@param header true if \"0x\" should be prepended\n@return the hex formatted string","static":false,"name":"toHexString","comment":"Returns a hex string representation of the short.","params":[{"type_long":"short","name":"s","comment":"the short","type_short":"short"},{"type_long":"boolean","name":"zeropad","comment":"true if the value should be zero padded","type_short":"boolean"},{"type_long":"boolean","name":"header","comment":"true if \"0x\" should be prepended","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the hex formatted string","type_short":"String"}},{"javadoc":"Returns a hex string representation of the integer.\n@param i the integer\n@param zeropad true if the value should be zero padded\n@param header true if \"0x\" should be prepended\n@return the hex formatted string","static":false,"name":"toHexString","comment":"Returns a hex string representation of the integer.","params":[{"type_long":"int","name":"i","comment":"the integer","type_short":"int"},{"type_long":"boolean","name":"zeropad","comment":"true if the value should be zero padded","type_short":"boolean"},{"type_long":"boolean","name":"header","comment":"true if \"0x\" should be prepended","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the hex formatted string","type_short":"String"}},{"javadoc":"Returns a hex string representation of the long.\n@param l the long\n@param zeropad true if the value should be zero padded\n@param header true if \"0x\" should be prepended\n@return the hex formatted string","static":false,"name":"toHexString","comment":"Returns a hex string representation of the long.","params":[{"type_long":"long","name":"l","comment":"the long","type_short":"long"},{"type_long":"boolean","name":"zeropad","comment":"true if the value should be zero padded","type_short":"boolean"},{"type_long":"boolean","name":"header","comment":"true if \"0x\" should be prepended","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the hex formatted string","type_short":"String"}},{"javadoc":"Sends a 'goto' event that navigates the listing to the specified\n address.\n@param address the address to 'goto'\n@return true if the address is valid","static":false,"name":"goTo","comment":"Sends a 'goto' event that navigates the listing to the specified\n address.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to 'goto'","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the address is valid","type_short":"boolean"}},{"javadoc":"Sends a 'goto' event that navigates the listing to the specified symbol.\n@param symbol the symbol to 'goto'\n@return true if the symbol is valid","static":false,"name":"goTo","comment":"Sends a 'goto' event that navigates the listing to the specified symbol.","params":[{"type_long":"ghidra.program.model.symbol.Symbol","name":"symbol","comment":"the symbol to 'goto'","type_short":"Symbol"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the symbol is valid","type_short":"boolean"}},{"javadoc":"Sends a 'goto' event that navigates the listing to the specified function.\n@param function the function to 'goto'\n@return true if the function is valid","static":false,"name":"goTo","comment":"Sends a 'goto' event that navigates the listing to the specified function.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"the function to 'goto'","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the function is valid","type_short":"boolean"}},{"javadoc":"Attempts to import the specified file. It attempts to detect the format and\n automatically import the file. If the format is unable to be determined, then\n null is returned.\n@param file the file to import\n@return the newly imported program, or null\n@throws Exception if any exceptions occur while importing","static":false,"name":"importFile","comment":"Attempts to import the specified file. It attempts to detect the format and\n automatically import the file. If the format is unable to be determined, then\n null is returned.","params":[{"type_long":"java.io.File","name":"file","comment":"the file to import","type_short":"File"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur while importing","type_short":"Exception"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the newly imported program, or null","type_short":"Program"}},{"javadoc":"Imports the specified file as raw binary.\n@param file the file to import\n@param language the language of the new program\n@param compilerSpec the compilerSpec to use for the import.\n@return the newly created program, or null\n@throws Exception if any exceptions occur when importing","static":false,"name":"importFileAsBinary","comment":"Imports the specified file as raw binary.","params":[{"type_long":"java.io.File","name":"file","comment":"the file to import","type_short":"File"},{"type_long":"ghidra.program.model.lang.Language","name":"language","comment":"the language of the new program","type_short":"Language"},{"type_long":"ghidra.program.model.lang.CompilerSpec","name":"compilerSpec","comment":"the compilerSpec to use for the import.","type_short":"CompilerSpec"}],"throws":[{"type_long":"java.lang.Exception","comment":"if any exceptions occur when importing","type_short":"Exception"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the newly created program, or null","type_short":"Program"}},{"javadoc":"Opens the specified program in the current tool.\n@param program the program to open","static":false,"name":"openProgram","comment":"Opens the specified program in the current tool.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to open","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Closes the specified program in the current tool.\n@param program the program to close","static":false,"name":"closeProgram","comment":"Closes the specified program in the current tool.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program to close","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new program with specified name and language name. The actual language object\n is located using the language name provided.\n <p>\n Please note: the program is not automatically saved into the program.\n@param programName the program name\n@param languageID the language ID\n@param compilerSpecID the compiler Spec ID\n@return the new unsaved program\n@throws Exception the language name is invalid or an I\/O error occurs","static":false,"name":"createProgram","comment":"Creates a new program with specified name and language name. The actual language object\n is located using the language name provided.\n \n Please note: the program is not automatically saved into the program.","params":[{"type_long":"java.lang.String","name":"programName","comment":"the program name","type_short":"String"},{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageID","comment":"the language ID","type_short":"LanguageID"},{"type_long":"ghidra.program.model.lang.CompilerSpecID","name":"compilerSpecID","comment":"the compiler Spec ID","type_short":"CompilerSpecID"}],"throws":[{"type_long":"java.lang.Exception","comment":"the language name is invalid or an I\/O error occurs","type_short":"Exception"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the new unsaved program","type_short":"Program"}},{"javadoc":"Creates a new program with specified name and language name. The actual language object\n is located using the language name provided.\n <p>\n Please note: the program is not automatically saved into the program.\n@param programName the program name\n@param languageID the language name\n@return the new unsaved program\n@throws Exception the language name is invalid or an I\/O error occurs","static":false,"name":"createProgram","comment":"Creates a new program with specified name and language name. The actual language object\n is located using the language name provided.\n \n Please note: the program is not automatically saved into the program.","params":[{"type_long":"java.lang.String","name":"programName","comment":"the program name","type_short":"String"},{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageID","comment":"the language name","type_short":"LanguageID"}],"throws":[{"type_long":"java.lang.Exception","comment":"the language name is invalid or an I\/O error occurs","type_short":"Exception"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the new unsaved program","type_short":"Program"}},{"javadoc":"Creates a new program with specified name and language. It uses the default compilerSpec\n for the given language.\n <p>\n Please note: the program is not automatically saved into the project.\n@param programName the program name\n@param language the language\n@param compilerSpec the compilerSpec to use.\n@return the new unsaved program\n@throws Exception the language name is invalid or an I\/O error occurs","static":false,"name":"createProgram","comment":"Creates a new program with specified name and language. It uses the default compilerSpec\n for the given language.\n \n Please note: the program is not automatically saved into the project.","params":[{"type_long":"java.lang.String","name":"programName","comment":"the program name","type_short":"String"},{"type_long":"ghidra.program.model.lang.Language","name":"language","comment":"the language","type_short":"Language"},{"type_long":"ghidra.program.model.lang.CompilerSpec","name":"compilerSpec","comment":"the compilerSpec to use.","type_short":"CompilerSpec"}],"throws":[{"type_long":"java.lang.Exception","comment":"the language name is invalid or an I\/O error occurs","type_short":"Exception"}],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"the new unsaved program","type_short":"Program"}},{"javadoc":"Display a message in tools status bar.\n <p>\n This method is unavailable in headless mode.\n@param msg the text to display.\n@param beep if true, causes the tool to beep.\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"setToolStatusMessage","comment":"Display a message in tools status bar.\n \n This method is unavailable in headless mode.","params":[{"type_long":"java.lang.String","name":"msg","comment":"the text to display.","type_short":"String"},{"type_long":"boolean","name":"beep","comment":"if true, causes the tool to beep.","type_short":"boolean"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Displays the address array in a table component. The table contains an address\n column, a label column, and a preview column.\n <p>\n This method is unavailable in headless mode.\n@param addresses the address array to display\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"show","comment":"Displays the address array in a table component. The table contains an address\n column, a label column, and a preview column.\n \n This method is unavailable in headless mode.","params":[{"type_long":"ghidra.program.model.address.Address[]","name":"addresses","comment":"the address array to display","type_short":"ghidra.program.model.address.Address[]"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Displays the given AddressSet in a table, in a dialog.\n <p>\n This method is unavailable in headless mode.\n@param title The title of the table\n@param addresses The addresses to display\n@throws ImproperUseException if this method is run in headless mode","static":false,"name":"show","comment":"Displays the given AddressSet in a table, in a dialog.\n \n This method is unavailable in headless mode.","params":[{"type_long":"java.lang.String","name":"title","comment":"The title of the table","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addresses","comment":"The addresses to display","type_short":"AddressSetView"}],"throws":[{"type_long":"ghidra.app.script.ImproperUseException","comment":"if this method is run in headless mode","type_short":"ImproperUseException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the PLATE comment at the specified address, as rendered.  Comments support\n annotations, which are displayed differently than the raw text.  If you want the raw text,\n then you must call {@link #getPlateComment(Address)}.  This method returns the text as\n seen in the display.\n@param address the address to get the comment\n@return the PLATE comment at the specified address or null\n \t\t\tif one does not exist\n@see #getPlateComment(Address)","static":false,"name":"getPlateCommentAsRendered","comment":"Returns the PLATE comment at the specified address, as rendered.  Comments support\n annotations, which are displayed differently than the raw text.  If you want the raw text,\n then you must call #getPlateComment(Address).  This method returns the text as\n seen in the display.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to get the comment","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the PLATE comment at the specified address or null\n \t\t\tif one does not exist","type_short":"String"}},{"javadoc":"Returns the PRE comment at the specified address.  If you want the raw text,\n then you must call {@link #getPreComment(Address)}.  This method returns the text as\n seen in the display.\n@param address the address to get the comment\n@return the PRE comment at the specified address or null\n \t\tif one does not exist\n@see #getPreComment(Address)","static":false,"name":"getPreCommentAsRendered","comment":"Returns the PRE comment at the specified address.  If you want the raw text,\n then you must call #getPreComment(Address).  This method returns the text as\n seen in the display.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to get the comment","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the PRE comment at the specified address or null\n \t\tif one does not exist","type_short":"String"}},{"javadoc":"Returns the POST comment at the specified address.  If you want the raw text,\n then you must call {@link #getPostComment(Address)}.  This method returns the text as\n seen in the display.\n@param address the address to get the comment\n@return the POST comment at the specified address or null if one does not exist\n@see #getPostComment(Address)","static":false,"name":"getPostCommentAsRendered","comment":"Returns the POST comment at the specified address.  If you want the raw text,\n then you must call #getPostComment(Address).  This method returns the text as\n seen in the display.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to get the comment","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the POST comment at the specified address or null if one does not exist","type_short":"String"}},{"javadoc":"Returns the EOL comment at the specified address.  If you want the raw text,\n then you must call {@link #getEOLComment(Address)}.  This method returns the text as\n seen in the display.\n@param address the address to get the comment\n@return the EOL comment at the specified address or null if one does not exist\n@see #getEOLComment(Address)","static":false,"name":"getEOLCommentAsRendered","comment":"Returns the EOL comment at the specified address.  If you want the raw text,\n then you must call #getEOLComment(Address).  This method returns the text as\n seen in the display.","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address to get the comment","type_short":"Address"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the EOL comment at the specified address or null if one does not exist","type_short":"String"}},{"javadoc":"","static":false,"name":"show","comment":"","params":[{"type_long":"java.lang.String","name":"title","comment":"","type_short":"String"},{"type_long":"ghidra.app.util.query.TableService","name":"table","comment":"","type_short":"TableService"},{"type_long":"ghidra.program.model.address.Address[]","name":"addresses","comment":"","type_short":"ghidra.program.model.address.Address[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"show","comment":"","params":[{"type_long":"java.lang.String","name":"title","comment":"","type_short":"String"},{"type_long":"ghidra.app.util.query.TableService","name":"table","comment":"","type_short":"TableService"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addresses","comment":"","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getScriptMap","comment":"","params":[{"type_long":"java.lang.String","name":"title","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.Map<java.lang.Class<?>,java.lang.Object>","comment":"","type_short":"Map"}},{"javadoc":"","static":true,"name":"zeropad","comment":"","params":[{"type_long":"java.lang.String","name":"s","comment":"","type_short":"String"},{"type_long":"int","name":"len","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GhidraScript","comment":"Ghidra Script Development.\n In order to write a script:\n \n \tGhidra script must be written in Java.\n \tYour script class must extend ghidra.app.script.GhidraScript.\n \tYou must implement the run() method. This is where you insert your\n \t\t\tscript-specific code.\n \tYou should create a description comment at the top of the file. Each description\n \t\t\tline should start with \/\/.\n \n \n When you create a new script using the script manager,\n you will automatically receive a source code stub (as shown below).\n \n  \/\/TODO write a description for this script\n\n \tpublic class NewScript extends GhidraScript {\n\n \t\tpublic void run() throws Exception {\n \t\t\t\/\/TODO Add User Code Here\n \t\t}\n \t}\n \n Ghidra Script State\n \n \n All scripts, when run, will be handed the current state in the form of class\n instance variable. These variables are:\n \n   currentProgram: the active program\n   currentAddress: the address of the current cursor location in the tool\n   currentLocation: the program location of the current cursor location\n   \t\t\tin the tool, or null if no program location exists\n   currentSelection: the current selection in the tool, or null\n   \t\t\tif no selection exists\n   currentHighlight: the current highlight in the tool, or null\n   \t\t\tif no highlight exists\n \n \n\n Hello World Example\n This example, when run, will simply print Hello World into the Ghidra console.\n \n \tpublic class HelloWorldScript extends GhidraScript {\n \t\tpublic void run() throws Exception {\n \t\t\tprintln(Hello World!);\n \t\t}\n \t}\n \n All scripts, when run, will be handed the current state and are automatically\n run in a separate thread.\n ","fields":[{"type_long":"generic.jar.ResourceFile","javadoc":"","static":false,"name":"sourceFile","comment":"","type_short":"ResourceFile","constant_value":null},{"type_long":"ghidra.app.script.GhidraState","javadoc":"","static":false,"name":"state","comment":"","type_short":"GhidraState","constant_value":null},{"type_long":"java.io.PrintWriter","javadoc":"","static":false,"name":"writer","comment":"","type_short":"PrintWriter","constant_value":null},{"type_long":"ghidra.program.model.address.Address","javadoc":"","static":false,"name":"currentAddress","comment":"","type_short":"Address","constant_value":null},{"type_long":"ghidra.program.util.ProgramLocation","javadoc":"","static":false,"name":"currentLocation","comment":"","type_short":"ProgramLocation","constant_value":null},{"type_long":"ghidra.program.util.ProgramSelection","javadoc":"","static":false,"name":"currentSelection","comment":"","type_short":"ProgramSelection","constant_value":null},{"type_long":"ghidra.program.util.ProgramSelection","javadoc":"","static":false,"name":"currentHighlight","comment":"","type_short":"ProgramSelection","constant_value":null},{"type_long":"ghidra.app.script.GhidraScriptProperties","javadoc":"","static":false,"name":"propertiesFileParams","comment":"","type_short":"GhidraScriptProperties","constant_value":null},{"type_long":"java.util.List<generic.jar.ResourceFile>","javadoc":"","static":false,"name":"potentialPropertiesFileLocs","comment":"","type_short":"List","constant_value":null},{"type_long":"ghidra.program.model.listing.CodeUnitFormat","javadoc":"","static":false,"name":"cuFormat","comment":"","type_short":"CodeUnitFormat","constant_value":null},{"type_long":"java.lang.String[]","javadoc":"","static":false,"name":"scriptArgs","comment":"","type_short":"java.lang.String[]","constant_value":null},{"type_long":"int","javadoc":"","static":false,"name":"askScriptArgIndex","comment":"","type_short":"int","constant_value":null},{"type_long":"ghidra.program.model.listing.Program","javadoc":"","static":false,"name":"originalProgram","comment":"","type_short":"Program","constant_value":null},{"type_long":"java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,java.lang.Object>>","javadoc":"","static":true,"name":"askMap","comment":"","type_short":"Map","constant_value":null}]}
