{"implements":["ghidra.graph.GDirectedGraph"],"javadoc":"A class that can wrap a {@link GDirectedGraph} and allows for vertex and edge additions \n without changing the underlying graph.\n\n <P><B>Warning: <\/B>As mentioned above, this graph is meant for additive operations.  In its\n current form, removal operations will not work.  To facilitate removals, this class will \n have to be updated to track removed vertices and edges, using them to correctly report\n the state of the graph for methods like {@link #containsVertex(Object)} and \n  {@link #containsEdge(GEdge)}.\n\n <P>Implementation Note: there is some 'magic' in this class to add 'dummy' vertices to the\n graph.  To facilitate this, the mutated graph in this class does not have the <tt>V<\/tt>\n type, but rather is typed on Object.   This means that this class can only be used \n generically, with templated types (like by algorithms and such).  Any usage of this class\n that expects concrete implementations to be returned can trigger ClassCastExceptions.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.graph.GDirectedGraph<V,E>","name":"delegate","comment":"","type_short":"GDirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addDummyVertex","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"isDummy","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isDummy","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addDummyEdge","comment":"","params":[{"type_long":"V","name":"start","comment":"","type_short":"V"},{"type_long":"V","name":"end","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"addVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeVertices","comment":"","params":[{"type_long":"java.lang.Iterable<V>","name":"vertices","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeEdges","comment":"","params":[{"type_long":"java.lang.Iterable<E>","name":"edges","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getVertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getEdges","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"containsVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsEdge","comment":"","params":[{"type_long":"E","name":"e","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsEdge","comment":"","params":[{"type_long":"V","name":"from","comment":"","type_short":"V"},{"type_long":"V","name":"to","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"findEdge","comment":"","params":[{"type_long":"V","name":"start","comment":"","type_short":"V"},{"type_long":"V","name":"end","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"E","comment":"","type_short":"E"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getVertexCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getEdgeCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getInEdges","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getOutEdges","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getPredecessors","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getSuccessors","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,E>","comment":"","type_short":"GDirectedGraph"}},{"javadoc":"","static":false,"name":"emptyCopy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,E>","comment":"","type_short":"GDirectedGraph"}},{"javadoc":"","static":false,"name":"callOnBothGraphs","comment":"","params":[{"type_long":"java.util.function.Function<ghidra.graph.GDirectedGraph<V,E>,java.util.Collection<R>>","name":"f","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"java.util.Set<R>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"callOnBothGraphs","comment":"","params":[{"type_long":"java.util.function.BiFunction<ghidra.graph.GDirectedGraph<V,E>,V,java.util.Collection<R>>","name":"f","comment":"","type_short":"BiFunction"},{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Set<R>","comment":"","type_short":"Set"}}],"name":"MutableGDirectedGraphWrapper","comment":"A class that can wrap a GDirectedGraph and allows for vertex and edge additions \n without changing the underlying graph.\n\n Warning: As mentioned above, this graph is meant for additive operations.  In its\n current form, removal operations will not work.  To facilitate removals, this class will \n have to be updated to track removed vertices and edges, using them to correctly report\n the state of the graph for methods like #containsVertex(Object) and \n  #containsEdge(GEdge).\n\n Implementation Note: there is some 'magic' in this class to add 'dummy' vertices to the\n graph.  To facilitate this, the mutated graph in this class does not have the V\n type, but rather is typed on Object.   This means that this class can only be used \n generically, with templated types (like by algorithms and such).  Any usage of this class\n that expects concrete implementations to be returned can trigger ClassCastExceptions.","fields":[{"type_long":"ghidra.graph.GDirectedGraph<V,E>","javadoc":"","static":false,"name":"delegate","comment":"","type_short":"GDirectedGraph","constant_value":null},{"type_long":"ghidra.graph.GDirectedGraph<java.lang.Object,ghidra.graph.DefaultGEdge<java.lang.Object>>","javadoc":"","static":false,"name":"mutatedGraph","comment":"","type_short":"GDirectedGraph","constant_value":null}]}
