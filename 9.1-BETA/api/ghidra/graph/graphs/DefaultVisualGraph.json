{"implements":[],"javadoc":"A default {@link VisualGraph} that implements basic setup for things like event processing.\n \n <P>Notes:\n <UL>\n \t<LI><U>Selected Vertices and the Focused Vertex<\/U> - \n \t\tthere can be multiple selected vertices, but only a single focused vertex.  \n      <B>{@link #getSelectedVertices()} will return both \n      the selected vertices or\tthe focused vertex if there are no vertices selected.<\/B>\n  <\/LI>\n  <LI>Clicking a single vertex will focus it.  Control-clicking multiple vertices will\n  \t\tcause them all to be selected, with no focused vertex.\n \t<\/LI>\n  <LI><U>Rendering Edges<\/U> - edges are rendered with or without articulations if \n         they have them.  This is built-in to the default graphing edge renderer.  \n         Some layouts require custom edge rendering and will provide their own \n         renderer as needed.\n  <\/LI>\n <\/UL>\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"ghidra.graph.graphs.JungDirectedVisualGraph","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.graphs.DefaultVisualGraph<V,E>","comment":"","type_short":"DefaultVisualGraph"}},{"javadoc":"","static":false,"name":"setSelectedVertices","comment":"","params":[{"type_long":"java.util.Set<V>","name":"selectedVertices","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setVerticesSelected","comment":"","params":[{"type_long":"java.util.Set<V>","name":"vertices","comment":"","type_short":"Set"},{"type_long":"boolean","name":"selected","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setVertexFocused","comment":"","params":[{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"boolean","name":"focused","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getFocusedVertex","comment":"","params":[],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"clearFocusedVertex","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSelectedVertices","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSelectedVertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<V>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"vertexLocationChanged","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"java.awt.Point","name":"point","comment":"","type_short":"Point"},{"type_long":"ghidra.graph.viewer.layout.LayoutListener.ChangeType","name":"type","comment":"","type_short":"ChangeType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"initializeLocation","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to combine retrieval of in and out edges for the given vertex\n@param v the vertex\n@return the edges","static":false,"name":"getAllEdges","comment":"A convenience method to combine retrieval of in and out edges for the given vertex","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.lang.Iterable<E>","comment":"the edges","type_short":"Iterable"}},{"javadoc":"Returns all edges shared between the two given vertices\n@param start the start vertex\n@param end the end vertex\n@return the edges","static":false,"name":"getEdges","comment":"Returns all edges shared between the two given vertices","params":[{"type_long":"V","name":"start","comment":"the start vertex","type_short":"V"},{"type_long":"V","name":"end","comment":"the end vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.lang.Iterable<E>","comment":"the edges","type_short":"Iterable"}},{"javadoc":"","static":false,"name":"addVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addEdge","comment":"","params":[{"type_long":"E","name":"edge","comment":"","type_short":"E"},{"type_long":"edu.uci.ics.jung.graph.util.Pair<? extends V>","name":"endpoints","comment":"","type_short":"Pair"},{"type_long":"edu.uci.ics.jung.graph.util.EdgeType","name":"edgeType","comment":"","type_short":"EdgeType"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeVertex","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"removeVertices","comment":"","params":[{"type_long":"java.lang.Iterable<V>","name":"toRemove","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeEdge","comment":"","params":[{"type_long":"E","name":"edge","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Called after one or more vertices have been added.  The callback will happen after\n all additions have taken place.  This is an extension point for subclasses.\n@param added the added vertices","static":false,"name":"verticesAdded","comment":"Called after one or more vertices have been added.  The callback will happen after\n all additions have taken place.  This is an extension point for subclasses.","params":[{"type_long":"java.util.Collection<V>","name":"added","comment":"the added vertices","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called after one or more vertices have been removed.  The callback will happen after\n all removals have taken place.  This is an extension point for subclasses.\n@param removed the removed vertices","static":false,"name":"verticesRemoved","comment":"Called after one or more vertices have been removed.  The callback will happen after\n all removals have taken place.  This is an extension point for subclasses.","params":[{"type_long":"java.util.Collection<V>","name":"removed","comment":"the removed vertices","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireVerticesRemoved","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"removed","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireVerticesAdded","comment":"","params":[{"type_long":"java.util.Collection<V>","name":"added","comment":"","type_short":"Collection"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireEdgesRemoved","comment":"","params":[{"type_long":"java.lang.Iterable<E>","name":"removed","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireEdgesAdded","comment":"","params":[{"type_long":"java.lang.Iterable<E>","name":"added","comment":"","type_short":"Iterable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addGraphChangeListener","comment":"","params":[{"type_long":"ghidra.graph.event.VisualGraphChangeListener<V,E>","name":"l","comment":"","type_short":"VisualGraphChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeGraphChangeListener","comment":"","params":[{"type_long":"ghidra.graph.event.VisualGraphChangeListener<V,E>","name":"l","comment":"","type_short":"VisualGraphChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DefaultVisualGraph","comment":"A default VisualGraph that implements basic setup for things like event processing.\n \n Notes:\n \n \tSelected Vertices and the Focused Vertex - \n \t\tthere can be multiple selected vertices, but only a single focused vertex.  \n      #getSelectedVertices() will return both \n      the selected vertices or\tthe focused vertex if there are no vertices selected.\n  \n  Clicking a single vertex will focus it.  Control-clicking multiple vertices will\n  \t\tcause them all to be selected, with no focused vertex.\n \t\n  Rendering Edges - edges are rendered with or without articulations if \n         they have them.  This is built-in to the default graphing edge renderer.  \n         Some layouts require custom edge rendering and will provide their own \n         renderer as needed.\n  \n ","fields":[{"type_long":"V","javadoc":"","static":false,"name":"focusedVertex","comment":"","type_short":"V","constant_value":null},{"type_long":"java.util.Set<V>","javadoc":"","static":false,"name":"selectedVertices","comment":"","type_short":"Set","constant_value":null},{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.graph.event.VisualGraphChangeListener<V,E>>","javadoc":"","static":false,"name":"changeListeners","comment":"","type_short":"WeakSet","constant_value":null}]}
