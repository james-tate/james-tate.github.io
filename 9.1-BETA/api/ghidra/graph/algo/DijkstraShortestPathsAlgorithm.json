{"implements":[],"javadoc":"Dijkstra's shortest-path algorithm\n \n This implementation computes the shortest paths between two vertices using Dijkstra's\n single-source shortest path finding algorithm. Any time a new source is given, it explores\n all destinations in the graph up to a maximum distance from the source. Thus, this\n implementation is best applied when many queries are anticipated from relatively few sources.\n@param <V> the type of vertices\n@param <E> the type of edges","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Use Dijkstra's algorithm on the given graph\n \n This constructor assumes the graph's edges are {@link GWeightedEdge}s. If not, you will\n likely encounter a {@link ClassCastException}.\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum","static":false,"name":"<init>","comment":"Use Dijkstra's algorithm on the given graph\n \n This constructor assumes the graph's edges are GWeightedEdges. If not, you will\n likely encounter a ClassCastException.","params":[{"type_long":"ghidra.graph.GImplicitDirectedGraph<V,E>","name":"graph","comment":"the graph","type_short":"GImplicitDirectedGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Use Dijkstra's algorithm on the given graph with the given maximum distance\n \n This constructor assumes the graph's edges are {@link GWeightedEdge}s. If not, you will\n likely encounter a {@link ClassCastException}.\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum","static":false,"name":"<init>","comment":"Use Dijkstra's algorithm on the given graph with the given maximum distance\n \n This constructor assumes the graph's edges are GWeightedEdges. If not, you will\n likely encounter a ClassCastException.","params":[{"type_long":"ghidra.graph.GImplicitDirectedGraph<V,E>","name":"graph","comment":"the graph","type_short":"GImplicitDirectedGraph"},{"type_long":"double","name":"maxDistance","comment":"the maximum distance, or null for no maximum","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Use Dijstra's algorithm on the given graph with a custom edge weight metric\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum\n@param metric the function to compute the weight of an edge","static":false,"name":"<init>","comment":"Use Dijstra's algorithm on the given graph with a custom edge weight metric","params":[{"type_long":"ghidra.graph.GImplicitDirectedGraph<V,E>","name":"graph","comment":"the graph","type_short":"GImplicitDirectedGraph"},{"type_long":"ghidra.graph.GEdgeWeightMetric<E>","name":"metric","comment":"the function to compute the weight of an edge","type_short":"GEdgeWeightMetric"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Use Dijstra's algorithm on the given graph with the given maximum distance and a custom\n edge weight metric\n@param graph the graph\n@param maxDistance the maximum distance, or null for no maximum\n@param metric the function to compute the weight of an edge","static":false,"name":"<init>","comment":"Use Dijstra's algorithm on the given graph with the given maximum distance and a custom\n edge weight metric","params":[{"type_long":"ghidra.graph.GImplicitDirectedGraph<V,E>","name":"graph","comment":"the graph","type_short":"GImplicitDirectedGraph"},{"type_long":"double","name":"maxDistance","comment":"the maximum distance, or null for no maximum","type_short":"double"},{"type_long":"ghidra.graph.GEdgeWeightMetric<E>","name":"metric","comment":"the function to compute the weight of an edge","type_short":"GEdgeWeightMetric"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Compute the shortest distance to all reachable vertices from the given source\n@param v the source vertex\n@return a map of destinations to distances from the given source","static":false,"name":"getDistancesFromSource","comment":"Compute the shortest distance to all reachable vertices from the given source","params":[{"type_long":"V","name":"v","comment":"the source vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Map<V,java.lang.Double>","comment":"a map of destinations to distances from the given source","type_short":"Map"}},{"javadoc":"Compute the shortest paths from the given source to the given destination\n \n This implementation differs from typical implementations in that paths tied for the shortest\n distance are all returned. Others tend to choose one arbitrarily.\n@param src the source\n@param dst the destination\n@return a collection of paths of shortest distance from source to destination","static":false,"name":"computeOptimalPaths","comment":"Compute the shortest paths from the given source to the given destination\n \n This implementation differs from typical implementations in that paths tied for the shortest\n distance are all returned. Others tend to choose one arbitrarily.","params":[{"type_long":"V","name":"src","comment":"the source","type_short":"V"},{"type_long":"V","name":"dst","comment":"the destination","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<java.util.Deque<E>>","comment":"a collection of paths of shortest distance from source to destination","type_short":"Collection"}}],"name":"DijkstraShortestPathsAlgorithm","comment":"Dijkstra's shortest-path algorithm\n \n This implementation computes the shortest paths between two vertices using Dijkstra's\n single-source shortest path finding algorithm. Any time a new source is given, it explores\n all destinations in the graph up to a maximum distance from the source. Thus, this\n implementation is best applied when many queries are anticipated from relatively few sources.","fields":[{"type_long":"java.util.Map<V,ghidra.graph.algo.DijkstraShortestPathsAlgorithm<V,E>.OneSourceToAll>","javadoc":"","static":false,"name":"sources","comment":"","type_short":"Map","constant_value":null},{"type_long":"ghidra.graph.GImplicitDirectedGraph<V,E>","javadoc":"","static":false,"name":"graph","comment":"","type_short":"GImplicitDirectedGraph","constant_value":null},{"type_long":"double","javadoc":"","static":false,"name":"maxDistance","comment":"","type_short":"double","constant_value":null},{"type_long":"ghidra.graph.GEdgeWeightMetric<E>","javadoc":"","static":false,"name":"metric","comment":"","type_short":"GEdgeWeightMetric","constant_value":null}]}
