{"implements":[],"javadoc":"A directed graph that need not be constructed explicitly\n \n <P>Instead, the graph is constructed (and usually cached) as it is explored. For instance, if\n a path searching algorithm is being applied, incident edges and neighboring nodes need not\n be computed if they're never visited. This allows conceptually large (even infinite) graphs to\n be represented. A graph algorithm can be applied so long as it supports this interface, and\n does not attempt to exhaust an infinite graph.\n@param <V> the type of vertices\n@param <E> the type of edges","static":false,"methods":[{"javadoc":"Compute the incident edges that end at the given vertex\n \n (Optional operation)\n@note This method ought to return cached results if available\n@note As part of computing in-edges, this method will also provide predecessors\n@param v the destination vertex\n@return the in-edges to the given vertex","static":false,"name":"getInEdges","comment":"Compute the incident edges that end at the given vertex\n \n (Optional operation)","params":[{"type_long":"V","name":"v","comment":"the destination vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the in-edges to the given vertex","type_short":"Collection"}},{"javadoc":"Compute the incident edges that start at the given vertex\n@note This method ought to return cached results if available\n@note As part of computing out-edges, this method will also provide successors\n@param v the source vertex\n@return the out-edges from the given vertex","static":false,"name":"getOutEdges","comment":"Compute the incident edges that start at the given vertex","params":[{"type_long":"V","name":"v","comment":"the source vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<E>","comment":"the out-edges from the given vertex","type_short":"Collection"}},{"javadoc":"Compute a vertex's predecessors\n \n The default implementation computes this from the in-edges\n@note If a non-default implementation is provided, it ought to return cached results if\n available\n@param v the destination vertex\n@return the predecessors","static":false,"name":"getPredecessors","comment":"Compute a vertex's predecessors\n \n The default implementation computes this from the in-edges","params":[{"type_long":"V","name":"v","comment":"the destination vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"the predecessors","type_short":"Collection"}},{"javadoc":"Compute a vertex's successors\n \n The default implementation compute this from the out-edges\n@note If a non-default implementation is provided, it ought to return cached results if\n available\n@param v the source vertex\n@return the successors","static":false,"name":"getSuccessors","comment":"Compute a vertex's successors\n \n The default implementation compute this from the out-edges","params":[{"type_long":"V","name":"v","comment":"the source vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"the successors","type_short":"Collection"}},{"javadoc":"Copy some portion of the implicit graph to an explicit graph\n \n Usually, this returns the cached (explored) portion of the graph\n@return a \"copy\" of this implicit graph","static":false,"name":"copy","comment":"Copy some portion of the implicit graph to an explicit graph\n \n Usually, this returns the cached (explored) portion of the graph","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,E>","comment":"a \"copy\" of this implicit graph","type_short":"GDirectedGraph"}}],"name":"GImplicitDirectedGraph","comment":"A directed graph that need not be constructed explicitly\n \n Instead, the graph is constructed (and usually cached) as it is explored. For instance, if\n a path searching algorithm is being applied, incident edges and neighboring nodes need not\n be computed if they're never visited. This allows conceptually large (even infinite) graphs to\n be represented. A graph algorithm can be applied so long as it supports this interface, and\n does not attempt to exhaust an infinite graph.","fields":[]}
