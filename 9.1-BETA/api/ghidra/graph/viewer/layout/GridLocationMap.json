{"implements":[],"javadoc":"An object that maps vertices to rows and columns and edges to their articulation points.  \n This class is essentially a container that allows layout algorithms to store results, which\n can later be turned into layout positioning points.   The integer point values in this \n class are row, column grid values, starting at 0,0.\n \n <P>Note: the Point2D values for the edge articulations use x,y values that are row and \n column index values, the same values as calling {@link #row(V)} and {@link #col(V)}.\n\n <P>After building the grid using this class, clients can call {@link #rows()} to get \n high-order object that represent rows.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"vertices","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<V>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"edges","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<E>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"setArticulations","comment":"","params":[{"type_long":"E","name":"edge","comment":"","type_short":"E"},{"type_long":"java.util.List<java.awt.Point>","name":"articulations","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getArticulations","comment":"","params":[{"type_long":"E","name":"edge","comment":"","type_short":"E"}],"throws":[],"return":{"type_long":"java.util.List<java.awt.Point>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"row","comment":"","params":[{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"col","comment":"","params":[{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"int","name":"col","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"set","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"col","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"row","comment":"","params":[{"type_long":"V","name":"vertex","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"col","comment":"","params":[{"type_long":"V","name":"vertex","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the rows in this grid, sorted by index (index can be negative)\n@return the rows in this grid","static":false,"name":"rows","comment":"Returns the rows in this grid, sorted by index (index can be negative)","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","comment":"the rows in this grid","type_short":"List"}},{"javadoc":"","static":false,"name":"getRow","comment":"","params":[{"type_long":"java.util.Map<java.lang.Integer,ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"Map"},{"type_long":"int","name":"rowIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"Updates each row within the grid such that it's x values are set to center the row in\n the grid.  Each row will be updated so that all its columns start at zero.  After that, \n each column will be centered in the grid.","static":false,"name":"centerRows","comment":"Updates each row within the grid such that it's x values are set to center the row in\n the grid.  Each row will be updated so that all its columns start at zero.  After that, \n each column will be centered in the grid.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"maxColumnIndex","comment":"","params":[{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"maxRowIndex","comment":"","params":[{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"columnCount","comment":"","params":[{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"zeroRowColumns","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.Row<V>","comment":"","type_short":"Row"}},{"javadoc":"","static":false,"name":"copy","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","comment":"","type_short":"GridLocationMap"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Creates a string representation of this grid\n@return a string representation of this grid","static":false,"name":"toStringGrid","comment":"Creates a string representation of this grid","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string representation of this grid","type_short":"String"}},{"javadoc":"","static":true,"name":"zeroAlignGrid","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","name":"grid","comment":"","type_short":"GridLocationMap"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GridLocationMap","comment":"An object that maps vertices to rows and columns and edges to their articulation points.  \n This class is essentially a container that allows layout algorithms to store results, which\n can later be turned into layout positioning points.   The integer point values in this \n class are row, column grid values, starting at 0,0.\n \n Note: the Point2D values for the edge articulations use x,y values that are row and \n column index values, the same values as calling #row(V) and #col(V).\n\n After building the grid using this class, clients can call #rows() to get \n high-order object that represent rows.","fields":[{"type_long":"org.apache.commons.collections4.Factory<java.awt.Point>","javadoc":"","static":false,"name":"rowColFactory","comment":"","type_short":"Factory","constant_value":null},{"type_long":"java.util.Map<V,java.awt.Point>","javadoc":"","static":false,"name":"vertexPoints","comment":"","type_short":"Map","constant_value":null},{"type_long":"java.util.Map<E,java.util.List<java.awt.Point>>","javadoc":"","static":false,"name":"edgePoints","comment":"","type_short":"Map","constant_value":null}]}
