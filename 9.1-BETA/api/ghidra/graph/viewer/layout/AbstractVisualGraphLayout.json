{"implements":["ghidra.graph.viewer.layout.VisualGraphLayout"],"javadoc":"A base layout that marries the Visual Graph and Jung layout interfaces.   This class allows\n you to create new layouts while stubbing the Jung layout methods.\n\n <P>This class essentially takes in client-produced grid row and column indices and \n produces layout locations for those values.\n\n <P>This an implementation the Jung {@link Layout} interface that handles most of the \n layout implementation for you.  Things to know:\n <UL>\n \t<LI>You should call initialize() inside of your constructor<\/LI>\n  <LI>You must implement {@link #performInitialGridLayout(VisualGraph)} - this is where \n      you align your vertices (and optionally edge articulations) on a grid.  This grid\n      will be translated into layout space points for you.<\/LI>\n  <LI>If you wish to use articulation points in your edges, you must override \n      {@link #usesEdgeArticulations()} to return true.<\/LI> \n <\/UL>\n \n <p><A NAME=\"column_centering\"><\/A>By default, this class will create x-position values that\n are aligned with the column's x-position.   You can override \n {@link #getVertexLocation(VisualVertex, Column, Row, Rectangle)} in order to center the\n vertex within its column\n {@link #getCenteredVertexLocation(VisualVertex, Column, Row, Rectangle)}.  Also note though \n that if your layout returns true for {@link #isCondensedLayout()},\n then the centering will be condensed and slightly off.\n@param <V> the vertex type\n@param <E> the edge type\n@see GridLocationMap\n@see LayoutPositions","static":false,"extends":"edu.uci.ics.jung.algorithms.layout.AbstractLayout","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"edu.uci.ics.jung.graph.Graph<V,E>","name":"graph","comment":"","type_short":"Graph"},{"type_long":"java.lang.String","name":"layoutName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the name of this layout\n@return the name of this layout","static":false,"name":"getLayoutName","comment":"Returns the name of this layout","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this layout","type_short":"String"}},{"javadoc":"This is the method that is called to perform the actual layout.  While this method is\n running, the {@link #monitor} variable has been set so that you can call \n {@link TaskMonitor#checkCanceled()}.\n@param g the graph\n@return the new grid location\n@throws CancelledException if the operation was cancelled","static":false,"name":"performInitialGridLayout","comment":"This is the method that is called to perform the actual layout.  While this method is\n running, the #monitor variable has been set so that you can call \n TaskMonitor#checkCanceled().","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"g","comment":"the graph","type_short":"VisualGraph"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the operation was cancelled","type_short":"CancelledException"}],"return":{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","comment":"the new grid location","type_short":"GridLocationMap"}},{"javadoc":"","static":false,"name":"setTaskMonitor","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getEdgeRenderer","comment":"","params":[],"throws":[],"return":{"type_long":"edu.uci.ics.jung.visualization.renderers.BasicEdgeRenderer<V,E>","comment":"","type_short":"BasicEdgeRenderer"}},{"javadoc":"","static":false,"name":"getEdgeShapeTransformer","comment":"","params":[],"throws":[],"return":{"type_long":"com.google.common.base.Function<E,java.awt.Shape>","comment":"","type_short":"Function"}},{"javadoc":"","static":false,"name":"getEdgeLabelRenderer","comment":"","params":[],"throws":[],"return":{"type_long":"edu.uci.ics.jung.visualization.renderers.Renderer.EdgeLabel<V,E>","comment":"","type_short":"EdgeLabel"}},{"javadoc":"","static":false,"name":"usesEdgeArticulations","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"reset","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this layout is in a condensed mode, which means to reduce space \n between vertices and edges.  This is useful to save space.  Subclasses may choose to \n have this setting controlled via an option that the user can toggle.\n@return true for a condensed layout","static":false,"name":"isCondensedLayout","comment":"Returns true if this layout is in a condensed mode, which means to reduce space \n between vertices and edges.  This is useful to save space.  Subclasses may choose to \n have this setting controlled via an option that the user can toggle.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true for a condensed layout","type_short":"boolean"}},{"javadoc":"","static":false,"name":"initialize","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"calculateLocations","comment":"","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"visualGraph","comment":"","type_short":"VisualGraph"},{"type_long":"ghidra.util.task.TaskMonitor","name":"taskMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.LayoutPositions<V,E>","comment":"","type_short":"LayoutPositions"}},{"javadoc":"","static":false,"name":"doCalculateLocations","comment":"","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"g","comment":"","type_short":"VisualGraph"},{"type_long":"ghidra.util.task.TaskMonitor","name":"taskMonitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.LayoutPositions<V,E>","comment":"","type_short":"LayoutPositions"}},{"javadoc":"This class has implemented {@link #cloneLayout(VisualGraph)} in order to properly \n initialize location information in the layout so that subclasses do not have to.  Each\n subclass still needs to create the new instance of the layout that is being cloned, as\n this class does not know how to do so.\n@param newGraph the new graph for the new layout\n@return the new layout","static":false,"name":"createClonedLayout","comment":"This class has implemented #cloneLayout(VisualGraph) in order to properly \n initialize location information in the layout so that subclasses do not have to.  Each\n subclass still needs to create the new instance of the layout that is being cloned, as\n this class does not know how to do so.","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"newGraph","comment":"the new graph for the new layout","type_short":"VisualGraph"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.AbstractVisualGraphLayout<V,E>","comment":"the new layout","type_short":"AbstractVisualGraphLayout"}},{"javadoc":"","static":false,"name":"cloneLayout","comment":"","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"newGraph","comment":"","type_short":"VisualGraph"}],"throws":[],"return":{"type_long":"ghidra.graph.viewer.layout.VisualGraphLayout<V,E>","comment":"","type_short":"VisualGraphLayout"}},{"javadoc":"Takes the given layout and copies the layout information this layout into that layout\n@param newLayout the new layout to update","static":false,"name":"initializeClonedLayout","comment":"Takes the given layout and copies the layout information this layout into that layout","params":[{"type_long":"ghidra.graph.viewer.layout.AbstractVisualGraphLayout<V,E>","name":"newLayout","comment":"the new layout to update","type_short":"AbstractVisualGraphLayout"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"applyNewLocations","comment":"","params":[{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"newLocations","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"applyNewArticulations","comment":"","params":[{"type_long":"java.util.Map<E,java.util.List<java.awt.geom.Point2D>>","name":"edgeArticulations","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"positionInLayoutSpaceFromGrid","comment":"","params":[{"type_long":"ghidra.graph.VisualGraph<V,E>","name":"visualGraph","comment":"","type_short":"VisualGraph"},{"type_long":"ghidra.graph.viewer.layout.GridLocationMap<V,E>","name":"gridLocations","comment":"","type_short":"GridLocationMap"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.graph.viewer.layout.LayoutPositions<V,E>","comment":"","type_short":"LayoutPositions"}},{"javadoc":"","static":false,"name":"positionVerticesInLayoutSpace","comment":"","params":[{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"java.util.Collection<V>","name":"vertices","comment":"","type_short":"Collection"},{"type_long":"ghidra.graph.viewer.layout.LayoutLocationMap<V,E>","name":"layoutLocations","comment":"","type_short":"LayoutLocationMap"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","comment":"","type_short":"Map"}},{"javadoc":"","static":false,"name":"getVertexLocation","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"ghidra.graph.viewer.layout.Column","name":"col","comment":"","type_short":"Column"},{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"},{"type_long":"java.awt.Rectangle","name":"bounds","comment":"","type_short":"Rectangle"}],"throws":[],"return":{"type_long":"java.awt.geom.Point2D","comment":"","type_short":"Point2D"}},{"javadoc":"Returns a location for the given vertex that is centered within its cell\n@param v the vertex\n@param col the vertex's column in the grid\n@param row the vertex's row in the grid\n@param bounds the bounds of the vertex in the layout space\n@return the centered location","static":false,"name":"getCenteredVertexLocation","comment":"Returns a location for the given vertex that is centered within its cell","params":[{"type_long":"V","name":"v","comment":"the vertex","type_short":"V"},{"type_long":"ghidra.graph.viewer.layout.Column","name":"col","comment":"the vertex's column in the grid","type_short":"Column"},{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"the vertex's row in the grid","type_short":"Row"},{"type_long":"java.awt.Rectangle","name":"bounds","comment":"the bounds of the vertex in the layout space","type_short":"Rectangle"}],"throws":[],"return":{"type_long":"java.awt.geom.Point2D","comment":"the centered location","type_short":"Point2D"}},{"javadoc":"","static":false,"name":"positionEdgeArticulationsInLayoutSpace","comment":"","params":[{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLayoutLocations","comment":"","type_short":"Map"},{"type_long":"java.util.Collection<E>","name":"edges","comment":"","type_short":"Collection"},{"type_long":"ghidra.graph.viewer.layout.LayoutLocationMap<V,E>","name":"layoutLocations","comment":"","type_short":"LayoutLocationMap"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"java.util.Map<E,java.util.List<java.awt.geom.Point2D>>","comment":"","type_short":"Map"}},{"javadoc":"","static":false,"name":"getEdgeLocation","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Column","name":"col","comment":"","type_short":"Column"},{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"}],"throws":[],"return":{"type_long":"java.awt.geom.Point2D","comment":"","type_short":"Point2D"}},{"javadoc":"","static":false,"name":"getCenteredEdgeLocation","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Column","name":"col","comment":"","type_short":"Column"},{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"}],"throws":[],"return":{"type_long":"java.awt.geom.Point2D","comment":"","type_short":"Point2D"}},{"javadoc":"","static":false,"name":"getTotalGraphSize","comment":"","params":[{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocationMap","comment":"","type_short":"Map"},{"type_long":"java.util.Map<E,java.util.List<java.awt.geom.Point2D>>","name":"edgeArticulations","comment":"","type_short":"Map"},{"type_long":"com.google.common.base.Function<V,java.awt.Shape>","name":"vertexShapeTransformer","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"","type_short":"Rectangle"}},{"javadoc":"","static":false,"name":"condense","comment":"","params":[{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"List"},{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"newLocations","comment":"","type_short":"Map"},{"type_long":"java.util.Map<E,java.util.List<java.awt.geom.Point2D>>","name":"newEdgeArticulations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"double","name":"centerX","comment":"","type_short":"double"},{"type_long":"double","name":"centerY","comment":"","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"The amount (from 0 to 1.0) by which to condense the vertices of the graph when that \n feature is enabled.  The default is .5 (50%).  A value of 1.0 would be fully-condensed\n such that all vertices are aligned on the x-axis on the center of the graph.\n@return the condense factor","static":false,"name":"getCondenseFactor","comment":"The amount (from 0 to 1.0) by which to condense the vertices of the graph when that \n feature is enabled.  The default is .5 (50%).  A value of 1.0 would be fully-condensed\n such that all vertices are aligned on the x-axis on the center of the graph.","params":[],"throws":[],"return":{"type_long":"double","comment":"the condense factor","type_short":"double"}},{"javadoc":"","static":false,"name":"unclip","comment":"","params":[{"type_long":"java.util.List<ghidra.graph.viewer.layout.Row<V>>","name":"rows","comment":"","type_short":"List"},{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"newLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveLeft","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"},{"type_long":"int","name":"moveLeftStartIndex","comment":"","type_short":"int"},{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveRight","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"},{"type_long":"int","name":"moveRightStartIndex","comment":"","type_short":"int"},{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"transformer","comment":"","type_short":"VisualGraphVertexShapeTransformer"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getLeftVertex","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"getRightVertex","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.Row<V>","name":"row","comment":"","type_short":"Row"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"moveLeftIfOverlaps","comment":"","params":[{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"xform","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"V","name":"rightVertex","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveRightIfOverlaps","comment":"","params":[{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"xform","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"V","name":"leftVertex","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveIfOverlaps","comment":"","params":[{"type_long":"java.util.Map<V,java.awt.geom.Point2D>","name":"vertexLocations","comment":"","type_short":"Map"},{"type_long":"ghidra.graph.viewer.vertex.VisualGraphVertexShapeTransformer<V>","name":"xform","comment":"","type_short":"VisualGraphVertexShapeTransformer"},{"type_long":"V","name":"vertex","comment":"","type_short":"V"},{"type_long":"V","name":"otherVertex","comment":"","type_short":"V"},{"type_long":"boolean","name":"moveRight","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"hasCrossed","comment":"","params":[{"type_long":"boolean","name":"moveRight","comment":"","type_short":"boolean"},{"type_long":"java.awt.Point","name":"p1","comment":"","type_short":"Point"},{"type_long":"java.awt.Point","name":"p2","comment":"","type_short":"Point"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"addLayoutListener","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.LayoutListener<V,E>","name":"listener","comment":"","type_short":"LayoutListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeLayoutListener","comment":"","params":[{"type_long":"ghidra.graph.viewer.layout.LayoutListener<V,E>","name":"listener","comment":"","type_short":"LayoutListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireVertexLocationChanged","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"java.awt.geom.Point2D","name":"p","comment":"","type_short":"Point2D"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"fireVertexLocationChanged","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"java.awt.geom.Point2D","name":"p","comment":"","type_short":"Point2D"},{"type_long":"ghidra.graph.viewer.layout.LayoutListener.ChangeType","name":"type","comment":"","type_short":"ChangeType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setLocation","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"java.awt.geom.Point2D","name":"location","comment":"","type_short":"Point2D"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setLocation","comment":"","params":[{"type_long":"V","name":"v","comment":"","type_short":"V"},{"type_long":"java.awt.geom.Point2D","name":"location","comment":"","type_short":"Point2D"},{"type_long":"ghidra.graph.viewer.layout.LayoutListener.ChangeType","name":"changeType","comment":"","type_short":"ChangeType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AbstractVisualGraphLayout","comment":"A base layout that marries the Visual Graph and Jung layout interfaces.   This class allows\n you to create new layouts while stubbing the Jung layout methods.\n\n This class essentially takes in client-produced grid row and column indices and \n produces layout locations for those values.\n\n This an implementation the Jung Layout interface that handles most of the \n layout implementation for you.  Things to know:\n \n \tYou should call initialize() inside of your constructor\n  You must implement #performInitialGridLayout(VisualGraph) - this is where \n      you align your vertices (and optionally edge articulations) on a grid.  This grid\n      will be translated into layout space points for you.\n  If you wish to use articulation points in your edges, you must override \n      #usesEdgeArticulations() to return true. \n \n \n By default, this class will create x-position values that\n are aligned with the column's x-position.   You can override \n #getVertexLocation(VisualVertex, Column, Row, Rectangle) in order to center the\n vertex within its column\n #getCenteredVertexLocation(VisualVertex, Column, Row, Rectangle).  Also note though \n that if your layout returns true for #isCondensedLayout(),\n then the centering will be condensed and slightly off.","fields":[{"type_long":"ghidra.util.datastruct.WeakSet<ghidra.graph.viewer.layout.LayoutListener<V,E>>","javadoc":"","static":false,"name":"listeners","comment":"","type_short":"WeakSet","constant_value":null},{"type_long":"ghidra.graph.viewer.shape.ArticulatedEdgeTransformer<V,E>","javadoc":"","static":false,"name":"edgeShapeTransformer","comment":"","type_short":"ArticulatedEdgeTransformer","constant_value":null},{"type_long":"ghidra.graph.viewer.renderer.ArticulatedEdgeRenderer<V,E>","javadoc":"","static":false,"name":"edgeRenderer","comment":"","type_short":"ArticulatedEdgeRenderer","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"layoutName","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"layoutInitialized","comment":"","type_short":"boolean","constant_value":null},{"type_long":"ghidra.util.task.TaskMonitor","javadoc":"","static":false,"name":"monitor","comment":"","type_short":"TaskMonitor","constant_value":null}]}
