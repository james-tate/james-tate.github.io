{"implements":["ghidra.graph.GEdge"],"javadoc":"An edge that contains properties and state related to a user interface.\n \n <P>An edge can be selected, which means that it has been clicked by the user.  Also, an \n edge can be part of an active path.  This allows the UI to paint the edge differently if it\n is in the active path.   The active path concept applies to both hovered and focused vertices\n separately.  A hovered vertex is one that the user moves the mouse over; a focused vertex is\n one that is selected.\n \n <A NAME=\"articulations\"><\/A>\n <P><U>Articulations<\/U> - The start and end points are always part of the\n edge.  Any additional points on the edge are considered articulation points.  Thus, an edge\n without articulations will be drawn as a straight line.  An edge with articulations will\n be drawn as a series of straight lines from point-to-point, allowing the layout algorithm\n to add points to the edge to avoid line crossings; these points are used to make the \n drawing of the edge cleaner.\n\n <P><U>equals() and hashCode()<\/U> - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override <code>equals<\/code> and\n <code>hashCode<\/code> in order to properly find edges across graphs.\n@param <V> the vertex type","static":false,"methods":[{"javadoc":"Sets this edge selected.  This is usually in response to the user selecting the edge.\n@param selected true to select this edge; false to de-select this vertex","static":false,"name":"setSelected","comment":"Sets this edge selected.  This is usually in response to the user selecting the edge.","params":[{"type_long":"boolean","name":"selected","comment":"true to select this edge; false to de-select this vertex","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this edge is selected\n@return true if this edge is selected","static":false,"name":"isSelected","comment":"Returns true if this edge is selected","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this edge is selected","type_short":"boolean"}},{"javadoc":"Sets this edge to be marked as in the active path of a currently hovered vertex\n@param inPath true to be marked as in the active path; false to be marked as not \n        in the active path","static":false,"name":"setInHoveredVertexPath","comment":"Sets this edge to be marked as in the active path of a currently hovered vertex","params":[{"type_long":"boolean","name":"inPath","comment":"true to be marked as in the active path; false to be marked as not \n        in the active path","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this edge is part of an active path for a currently hovered \n vertex (this allows the edge to be differently rendered)\n@return true if this edge is part of the active path","static":false,"name":"isInHoveredVertexPath","comment":"Returns true if this edge is part of an active path for a currently hovered \n vertex (this allows the edge to be differently rendered)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this edge is part of the active path","type_short":"boolean"}},{"javadoc":"Sets this edge to be marked as in the active path of a currently focused\/selected vertex\n@param inPath true to be marked as in the active path; false to be marked as not \n        in the active path","static":false,"name":"setInFocusedVertexPath","comment":"Sets this edge to be marked as in the active path of a currently focused\/selected vertex","params":[{"type_long":"boolean","name":"inPath","comment":"true to be marked as in the active path; false to be marked as not \n        in the active path","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this edge is part of an active path for a currently focused\/selected \n vertex (this allows the edge to be differently rendered)\n@return true if this edge is part of the active path","static":false,"name":"isInFocusedVertexPath","comment":"Returns true if this edge is part of an active path for a currently focused\/selected \n vertex (this allows the edge to be differently rendered)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this edge is part of the active path","type_short":"boolean"}},{"javadoc":"Returns the points (in {@link GraphViewerUtils} View Space) of the articulation\n \n <P><A HREF=\"#articulations\">What are articulations?<\/A>\n@return the points (in View Space space) of the articulation.","static":false,"name":"getArticulationPoints","comment":"Returns the points (in GraphViewerUtils View Space) of the articulation\n \n What are articulations?","params":[],"throws":[],"return":{"type_long":"java.util.List<java.awt.geom.Point2D>","comment":"the points (in View Space space) of the articulation.","type_short":"List"}},{"javadoc":"Sets the articulation points for the given edge\n \n <P><A HREF=\"#articulations\">What are articulations?<\/A>\n@param points the points","static":false,"name":"setArticulationPoints","comment":"Sets the articulation points for the given edge\n \n What are articulations?","params":[{"type_long":"java.util.List<java.awt.geom.Point2D>","name":"points","comment":"the points","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a new edge of this type using the given vertices.\n \n <P>Implementation Note: the odd type 'E' below is there so that subclasses can return\n the type of their implementation.   Basically, the decision was made to have each subclass\n suppress the warning that appears, since they know the type is safe.  Alternatively, \n each client would have to cast the return type, which seems less desirable.\n@param start the start vertex\n@param end the end vertex\n@return the new edge","static":false,"name":"cloneEdge","comment":"Creates a new edge of this type using the given vertices.\n \n Implementation Note: the odd type 'E' below is there so that subclasses can return\n the type of their implementation.   Basically, the decision was made to have each subclass\n suppress the warning that appears, since they know the type is safe.  Alternatively, \n each client would have to cast the return type, which seems less desirable.","params":[{"type_long":"V","name":"start","comment":"the start vertex","type_short":"V"},{"type_long":"V","name":"end","comment":"the end vertex","type_short":"V"}],"throws":[],"return":{"type_long":"E","comment":"the new edge","type_short":"E"}},{"javadoc":"Sets the emphasis value for this edge.  A value of 0 indicates no emphasis.\n@param emphasisLevel the emphasis","static":false,"name":"setEmphasis","comment":"Sets the emphasis value for this edge.  A value of 0 indicates no emphasis.","params":[{"type_long":"double","name":"emphasisLevel","comment":"the emphasis","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the emphasis value of this edge.  0 if not emphasized.\n@return the emphasis value of this edge.","static":false,"name":"getEmphasis","comment":"Returns the emphasis value of this edge.  0 if not emphasized.","params":[],"throws":[],"return":{"type_long":"double","comment":"the emphasis value of this edge.","type_short":"double"}},{"javadoc":"Set the alpha, which determines how much of the edge is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@param alpha the alpha value","static":false,"name":"setAlpha","comment":"Set the alpha, which determines how much of the edge is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.","params":[{"type_long":"double","name":"alpha","comment":"the alpha value","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the alpha, which determines how much of the edge is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@return the alpha value","static":false,"name":"getAlpha","comment":"Get the alpha, which determines how much of the edge is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.","params":[],"throws":[],"return":{"type_long":"double","comment":"the alpha value","type_short":"double"}}],"name":"VisualEdge","comment":"An edge that contains properties and state related to a user interface.\n \n An edge can be selected, which means that it has been clicked by the user.  Also, an \n edge can be part of an active path.  This allows the UI to paint the edge differently if it\n is in the active path.   The active path concept applies to both hovered and focused vertices\n separately.  A hovered vertex is one that the user moves the mouse over; a focused vertex is\n one that is selected.\n \n \n Articulations - The start and end points are always part of the\n edge.  Any additional points on the edge are considered articulation points.  Thus, an edge\n without articulations will be drawn as a straight line.  An edge with articulations will\n be drawn as a series of straight lines from point-to-point, allowing the layout algorithm\n to add points to the edge to avoid line crossings; these points are used to make the \n drawing of the edge cleaner.\n\n equals() and hashCode() - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override equals and\n hashCode in order to properly find edges across graphs.","fields":[]}
