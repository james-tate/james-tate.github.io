{"implements":["ghidra.graph.GVertex"],"javadoc":"A vertex that contains properties and state related to a user interface.\n \n <P><U>equals() and hashCode()<\/U> - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override <code>equals<\/code> and\n <code>hashCode<\/code> in order to properly find edges across graphs.","static":false,"methods":[{"javadoc":"Returns the component of this vertex.  This is used for rendering and interaction \n with the user.\n@return the component of this vertex","static":false,"name":"getComponent","comment":"Returns the component of this vertex.  This is used for rendering and interaction \n with the user.","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"the component of this vertex","type_short":"JComponent"}},{"javadoc":"Sets this vertex to be focused.   This differs from being selected in that multiple\n vertices in a graph can be selected, but only one can be the focused vertex.\n@param focused true to focus; false to be marked as not focused","static":false,"name":"setFocused","comment":"Sets this vertex to be focused.   This differs from being selected in that multiple\n vertices in a graph can be selected, but only one can be the focused vertex.","params":[{"type_long":"boolean","name":"focused","comment":"true to focus; false to be marked as not focused","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this vertex is focused (see {@link #setFocused(boolean)}\n@return true if focused","static":false,"name":"isFocused","comment":"Returns true if this vertex is focused (see #setFocused(boolean)","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if focused","type_short":"boolean"}},{"javadoc":"Sets this vertex selected\n@param selected true to select this vertex; false to de-select this vertex","static":false,"name":"setSelected","comment":"Sets this vertex selected","params":[{"type_long":"boolean","name":"selected","comment":"true to select this vertex; false to de-select this vertex","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this vertex is selected\n@return true if this vertex is selected","static":false,"name":"isSelected","comment":"Returns true if this vertex is selected","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this vertex is selected","type_short":"boolean"}},{"javadoc":"Sets this vertex to be hovered\n@param hovered true to be marked as hovered; false to be marked as not hovered","static":false,"name":"setHovered","comment":"Sets this vertex to be hovered","params":[{"type_long":"boolean","name":"hovered","comment":"true to be marked as hovered; false to be marked as not hovered","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this vertex is being hovered by the mouse\n@return true if this vertex is being hovered by the mouse","static":false,"name":"isHovered","comment":"Returns true if this vertex is being hovered by the mouse","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this vertex is being hovered by the mouse","type_short":"boolean"}},{"javadoc":"Sets the location of this vertex in the view\n@param p the location of this vertex in the view","static":false,"name":"setLocation","comment":"Sets the location of this vertex in the view","params":[{"type_long":"java.awt.geom.Point2D","name":"p","comment":"the location of this vertex in the view","type_short":"Point2D"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the location of this vertex in the view\n@return the location of this vertex in the view","static":false,"name":"getLocation","comment":"Returns the location of this vertex in the view","params":[],"throws":[],"return":{"type_long":"java.awt.geom.Point2D","comment":"the location of this vertex in the view","type_short":"Point2D"}},{"javadoc":"Returns true if the given component of this vertex is grabbable, which means that \n mouse drags on that component will move the vertex.   \n \n <P>This is used to differentiate components within a vertex that should receive mouse \n events versus those components that will not be given mouse events.\n@param c the component\n@return true if the component is grabbable","static":false,"name":"isGrabbable","comment":"Returns true if the given component of this vertex is grabbable, which means that \n mouse drags on that component will move the vertex.   \n \n This is used to differentiate components within a vertex that should receive mouse \n events versus those components that will not be given mouse events.","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component","type_short":"Component"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the component is grabbable","type_short":"boolean"}},{"javadoc":"A dispose method that should be called when a vertex is reclaimed, never again to be \n used in a graph or display","static":false,"name":"dispose","comment":"A dispose method that should be called when a vertex is reclaimed, never again to be \n used in a graph or display","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the emphasis value for this vertex.  A value of 0 indicates no emphasis.\n@param emphasisLevel the emphasis","static":false,"name":"setEmphasis","comment":"Sets the emphasis value for this vertex.  A value of 0 indicates no emphasis.","params":[{"type_long":"double","name":"emphasisLevel","comment":"the emphasis","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the emphasis value of this vertex.  0 if not emphasized.\n@return the emphasis value of this vertex.","static":false,"name":"getEmphasis","comment":"Returns the emphasis value of this vertex.  0 if not emphasized.","params":[],"throws":[],"return":{"type_long":"double","comment":"the emphasis value of this vertex.","type_short":"double"}},{"javadoc":"Set the alpha, which determines how much of the vertex is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@param the alpha value","static":false,"name":"setAlpha","comment":"Set the alpha, which determines how much of the vertex is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.","params":[{"type_long":"double","name":"alpha","comment":"","type_short":"double"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the alpha, which determines how much of the vertex is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.\n@return the alpha value","static":false,"name":"getAlpha","comment":"Get the alpha, which determines how much of the vertex is visible\/see through.  0 is \n completely transparent.  This attribute allows transitional for animations.","params":[],"throws":[],"return":{"type_long":"double","comment":"the alpha value","type_short":"double"}}],"name":"VisualVertex","comment":"A vertex that contains properties and state related to a user interface.\n \n equals() and hashCode() - The graph API allows for cloning of layouts.  For this \n to correctly copy layout locations, each edge must override equals and\n hashCode in order to properly find edges across graphs.","fields":[]}
