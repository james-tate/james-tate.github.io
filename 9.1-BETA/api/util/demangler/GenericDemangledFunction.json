{"implements":["util.demangler.ParameterReceiver"],"javadoc":"A class to represent a demangled function.","static":false,"extends":"util.demangler.GenericDemangledObject","methods":[{"javadoc":"Constructs a new demangled function.\n@param name the name of the function","static":false,"name":"<init>","comment":"Constructs a new demangled function.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of the function","type_short":"String"}],"throws":[{"type_long":"util.demangler.GenericDemangledException","comment":"","type_short":"GenericDemangledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the function return type.\n@param returnType the function return type","static":false,"name":"setReturnType","comment":"Sets the function return type.","params":[{"type_long":"util.demangler.GenericDemangledDataType","name":"returnType","comment":"the function return type","type_short":"GenericDemangledDataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the function calling convention. For example, \"__cdecl\".\n@param callingConvention the function calling convention","static":false,"name":"setCallingConvention","comment":"Sets the function calling convention. For example, \"__cdecl\".","params":[{"type_long":"java.lang.String","name":"callingConvention","comment":"the function calling convention","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"'this' is passed on the stack or false if in a register","static":false,"name":"setThisPassedOnStack","comment":"'this' is passed on the stack or false if in a register","params":[{"type_long":"boolean","name":"thisPassedOnStack","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isPassedOnStack","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setTemplate","comment":"","params":[{"type_long":"util.demangler.GenericDemangledTemplate","name":"template","comment":"","type_short":"GenericDemangledTemplate"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTemplate","comment":"","params":[],"throws":[],"return":{"type_long":"util.demangler.GenericDemangledTemplate","comment":"","type_short":"GenericDemangledTemplate"}},{"javadoc":"","static":false,"name":"setVirtual","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isVirtual","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets whether this demangled function represents\n an overloaded operator. For example, \"operator+()\".\n@param isOverloadedOperator true if overloaded operator","static":false,"name":"setOverloadedOperator","comment":"Sets whether this demangled function represents\n an overloaded operator. For example, \"operator+()\".","params":[{"type_long":"boolean","name":"isOverloadedOperator","comment":"true if overloaded operator","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isOverloadedOperator","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.app.util.demangler.ParameterReceiver","static":false,"name":"addParameter","comment":"","params":[{"type_long":"util.demangler.GenericDemangledDataType","name":"parameter","comment":"","type_short":"GenericDemangledDataType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.app.util.demangler.ParameterReceiver","static":false,"name":"getParameters","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<util.demangler.GenericDemangledDataType>","comment":"","type_short":"List"}},{"javadoc":"Returns the return type or null, if unspecified.\n@return the return type or null, if unspecified","static":false,"name":"getReturnType","comment":"Returns the return type or null, if unspecified.","params":[],"throws":[],"return":{"type_long":"util.demangler.GenericDemangledDataType","comment":"the return type or null, if unspecified","type_short":"GenericDemangledDataType"}},{"javadoc":"Returns the calling convention or null, if unspecified.\n@return the calling convention or null, if unspecified","static":false,"name":"getCallingConvention","comment":"Returns the calling convention or null, if unspecified.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the calling convention or null, if unspecified","type_short":"String"}},{"javadoc":"Special constructor where it has a templated type before the parameter list","static":false,"name":"setTemplatedConstructorType","comment":"Special constructor where it has a templated type before the parameter list","params":[{"type_long":"java.lang.String","name":"type","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSignature","comment":"","params":[{"type_long":"boolean","name":"format","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getParameterString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GenericDemangledFunction","comment":"A class to represent a demangled function.","fields":[{"type_long":"util.demangler.GenericDemangledDataType","javadoc":"","static":false,"name":"returnType","comment":"","type_short":"GenericDemangledDataType","constant_value":null},{"type_long":"java.lang.String","javadoc":"","static":false,"name":"callingConvention","comment":"","type_short":"String","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"thisPassedOnStack","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.util.List<util.demangler.GenericDemangledDataType>","javadoc":"","static":false,"name":"parameterList","comment":"","type_short":"List","constant_value":null},{"type_long":"util.demangler.GenericDemangledTemplate","javadoc":"","static":false,"name":"template","comment":"","type_short":"GenericDemangledTemplate","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"isOverloadedOperator","comment":"","type_short":"boolean","constant_value":null},{"type_long":"boolean","javadoc":"","static":false,"name":"virtual","comment":"","type_short":"boolean","constant_value":null},{"type_long":"java.lang.String","javadoc":"Special constructor where it has a templated type before the parameter list","static":false,"name":"templatedConstructorType","comment":"Special constructor where it has a templated type before the parameter list","type_short":"String","constant_value":null}]}
